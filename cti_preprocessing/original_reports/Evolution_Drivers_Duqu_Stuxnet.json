{
    "triplets": [
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "emerge from",
            "Object": "platform",
            "ObjectType": "infrastructure",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "use",
            "Object": "driver file",
            "ObjectType": "file",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "load",
            "Object": "main module",
            "ObjectType": "software",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "use",
            "Object": "configuration file",
            "ObjectType": "file",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "use",
            "Object": "encrypted block",
            "ObjectType": "artifacts",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "use",
            "Object": "system registry",
            "ObjectType": "registry",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        },
        {
            "Subject": "Duqu",
            "SubjectType": "Malware",
            "Relation": "be supported by",
            "Object": "same team of developers",
            "ObjectType": "identity",
            "tactic": "Others",
            "technique": [
                "Others"
            ]
        }
    ],
    "file_name": "Evolution_Drivers_Duqu_Stuxnet",
    "tactic_label": true,
    "rewrite": {
        "Reconnaissance": "None",
        "Resource Development": "None",
        "Initial Access": "None",
        "Execution": "None",
        "Persistence": "None",
        "Privilege Escalation": "None",
        "Defense Evasion": "None",
        "Credential Access": "None",
        "Discovery": "None",
        "Lateral Movement": "None",
        "Collection": "None",
        "Command and Control": "None",
        "Exfiltration": "None",
        "Impact": "None",
        "Others": "Stuxnet/Duqu: The Evolution of Drivers\n\nWe have been studying the Duqu Trojan for two months now, exploring how it emerged, where it wasdistributed and how it operates. Despite the large volume of data obtained (most of which has yet to bepublished), we still lack the answer to the fundamental question - who is behind Duqu?\n\nIn addition, there are other issues, mostly to do with the creation of the Trojan, or rather the platformused to implement Duqu as well as Stuxnet.\n\nIn terms of architecture, the platform used to create Duqu and Stuxnet is the same. This is a driver filewhich loads a main module designed as an encrypted library. At the same time, there is a separateconfiguration file for the whole malicious complex and an encrypted block in the system registry thatdefines the location of the module being loaded and name of the process for injection.\n\nConventional platform architecture for Stuxnet and Duqu\n\nThis platform can be conventionally named as 'Tilded' as its authors are, for some reason, inclined to usefile names which start with \"~d\".\n\nWe believe Duqu and Stuxnet were simultaneous projects supported by the same team of developers.\n\nSeveral other details have been uncovered which suggest there was possibly at least one further spywaremodule based on the same platform in 2007-2008, and several other programs whose functionality wasunclear between 2008 and 2010.\n\nThese facts significantly challenge the existing \"official\" history of Stuxnet. We will try to cover them inthis publication, but let us first recap the story so far.\n\nThe 'official' Stuxnet story\n\nLet me start with a question: how many Stuxnet driver files are known? As of today, the correct answerwould be four. See below for more information about them.\n\nFile name\n\nMrxcls.sys\n\nSize(bytes)19840\n\nCompilationdate01.01.2009\n\nMrxcls.sys 26616\n\n01.01.2009\n\nMrxnet.sys 17400\n\n25.01.2010\n\nWhere and when it wasusedStuxnet (22.06.2009)Stuxnet(01.03.2010/14.04.2010)Stuxnet(01.03.2010/14.04.2010)\n\nJmidebs.sys 25552\n\n14.07.2010\n\nPresumably, Stuxnet\n\nDigital signature/signingdateNo\n\nRealtek, 25.01.2010\n\nRealtek, 25.01.2010\n\nJmicron,unknown\n\nThe first modification of the Stuxnet worm, created in 2009, used only one driver file - mrxcls.sys withouta digital signature.\n\nIn 2010, the authors created the second driver mrxnet.sys (to hide the worm's component files on USBdrives) and equipped mrxnet.sys and mrxcls.sys drivers with digital certificates from Realtek. Themrxnet.sys driver is of no great significance to our story, as it is a separate module not included into thegeneral architecture of the platform.\n\nOn 17 July 2010, ESET detected another driver \"in the wild\" - jmidebs.sys - which was very similar to thealready known mrxcls.sys, but had been created just three days before it was discovered. This driver wasbacked with a new certificate - this time from Jmicron.\n\nUntil recently it was unclear what the purpose of this file was, but popular opinion held that it was relatedto Stuxnet. One theory is that the Stuxnet C&C was trying to replace the old version with the Realtekcertificate with a new one. In doing so, the authors of the worm were either hoping to prevent it beingpicked up by antivirus programs, or were replacing a certificate which had been blocked.\n\nUnfortunately, this theory has not been confirmed - Jmidebs.sys has never been detected anywhere. A newversion of Stuxnet capable of installing the file has also not been found.\n\nThis is the official history of Stuxnet. However, as I mentioned above, in the course of our research wehave discovered new evidence which will be discussed below.\n\nPreviously unknown drivers\n\nrtniczw.sys\n\nWhile analyzing a user incident involving Duqu, we discovered something new - something that could,potentially, affect the whole Stuxnet story as we know it.\n\nA strange file was discovered on the victim's computer, which was detected by our antivirus engine asRootkit.Win32.Stuxnet.a. This verdict was supposed to correspond to the known file mrxcls.sys describedabove, but the detected file's name and checksum were different!\n\nThe file was rtniczw.sys, 26,872 bytes in size, MD5 546C4BBEBF02A1604EB2CAAAD4974DE0.\n\nThe file was a little larger than mrxcls.sys, which had a Realtek digital signature. This implied thatrtniczw.sys also had a digital signature. We managed to get a copy of the file, and we were amazed to findthat it used the same Realtek certificate, but with a different file signing date from mrxcls.sys: rtniczw.syswas signed on 18 March 2010, while the mrxcls driver had been signed on 25 January of the same year.\n\nIn addition, rtniczw.sys used a registry key and configuration data block that was not used in Stuxnet.Stuxnet used the key \"MRxCls\" and the value \"Data\", while in the case of rtniczw.sys, the key was\"rtniczw\" and the value was \"Config\".\n\nDetailed analysis of the code found in rtniczw.sys identified no other differences from the 'reference'driver: this was the same mrxcls.sys file, created in the same year, on the same day and hour - on 1January 2009.\n\nWe searched for additional information about other users who had the same file, but were unable to findanything! Moreover, we could find no information at all about the file's name (rtniczw.sys) or its MD5 inany search engine. The file had been identified only once: it had been sent for scanning to VirusTotal fromChina in May 2011.\n\nApparently, the system that we were studying had been infected in late August 2011. It should be notedthat we did not find a Stuxnet infection on the system: no additional files from the Stuxnet kit had beenfound. However, we did find Duqu files.\n\nWe came to the conclusion that there could be other driver files similar to the \"reference\" file mrxcls.sys,which are not among known variants of Stuxnet.\n\nrndismpc.sys\n\nA check in our malware collection helped identify another interesting file that was included in thecollection over a year ago. The file is named rndismpc.sys, it is 19,968 bytes in size, MD59AEC6E10C5EE9C05BED93221544C783E.\n\nThis turned out to be another driver, with functionality very nearly identical to that of mrxcls.sys apartfrom the following exceptions:\n\n1.  rndismpc.sys uses a registry key that is different from the keys used by both mrxcls and rtniczw - it\n\nis the key \"rndismpc\" with the value \"Action\";\n\n2.  it uses an encryption key that is different from that used by mrxcls/rtniczw - 0x89CF98B1;3.  the file's compilation date is 20 January 2008, i.e. a year before mrxcls/rtniczw were created.\n\nLike rtniczw.sys, the file rndismpc.sys had never been encountered on our users' machines. We do notknow which malicious program installed it or which main module it was supposed to work with.\n\nThe connecting link: mrxcls.sys --> jmidebs.sys -->Duqu drivers\n\nThe data obtained and the available information about the drivers used in Duqu (see The Mystery ofDuqu, Part One and Part Two) can be summed up in the table below:\n\nrndismpc.sys\n\n19968\n\nmrxcls.sys\n\n19840\n\nmrxcls.sys(signed)rtniczw.sys(signed)jmidebs.sys(signed)\n\n.sys*\n\n.sys*\n\n26616\n\n26872\n\n25502\n\nDifferent\n\nDifferent\n\nCompi-lationdate20.01.200801.01.200901.01.200901.01.200914.07.201003.11.201017.10.2011\n\nMainmodule\n\nEncryptionkey\n\nRegistrykey\n\nValue\n\nDevicename\n\nUnknown\n\n0x89CF98B1 rndismpc \"Action\"\n\n\"rndismpc\"\n\nStuxnet.a\n\n0xAE240682 MRxCls\n\n\"Data\"\n\n\"MRxClsDvX\"\n\nStuxnet.b/.c 0xAE240682 MRxCls\n\n\"Data\"\n\n\"MRxClsDvX\"\n\nUnknown\n\n0xAE240682 rtniczw \"Config\"\n\n\"RealTekDev291\"\n\nUnknown\n\n0xAE240682 jmidebs\n\n\"IDE\"\n\n{3093983-109232-29291}\n\n0xAE240682\n\n\"FILTER\"\n\n0x20F546D3\n\n\"FILTER\"\n\n{3093AAZ3-1092-2929-9391}{624409B3-4CEF-41c0-8B81-7634279A41E5}\n\n*Known Duqu drivers have unique file names for each of the variants. Their functionality, however, isabsolutely identical.\n\nAccording to our analysis, jmidebs.sys is the connecting link between mrxcls.sys and the drivers laterused in Duqu.\n\nThe code of mrxcls and jmidebs drivers is largely similar. Some small differences may be due to differentsettings and minimal changes in the source code, while the point of the code remains the same.\n\nHowever, more significant changes can be found in several functions:\n\n1.  The service function which obtains addresses of API functions:\n\nThe version in mrxcls uses the function MmGetSystemRoutineAddress for this purpose and therespective text names of the addresses of incoming API functions. The version in jmidebs calls itsown functions to obtain API addresses using hash-sums of their names. The same functions areused in Duqu drivers, while the list of functions' hashes is twice as long.\n\n2.  The function which creates stubs to inject PNF DLL into processes:The mrxcls version uses a stub with a total size of 6332 bytes.\n\nThe jmidebs and Duqu drivers use stubs with a total size of 7061 bytes. The code used in the stubmodules for these drivers is identical, but has different compilation dates.\n\nMrxcls (Stuxnet)RtlGetVersion,KeAreAllApcsDisabled, obtained bycallingMmGetSystemRoutineAddress\n\njmidebs\n\nRtlGetVersion, KeAreAllApcsDisabled,PsGetProcessSessionId, PsGetProcessPebobtained with their own functions\n\nSimilar tojmidebs, 4 morefunctions added\n\nInjectedEXE\n\n6332Jan 01 22:53:23 2009\n\n7061Jul 14 13:05:31 2010\n\nDriver evolution\n\n7061Differentcompilationdates\n\nWe have mapped out the links between known drivers whose evolution and key stages of development areeasy to track.\n\nDriver evolution from 2008 to 2011\n\nrndismpc.sys, rtniczw.sys and jmidebs.sys\n\nAs you can see from the diagram, it is not known which malicious program interacted with the followingthree drivers: rndismpc.sys, rtniczw.sys and jmidebs.sys. The obvious question would be: were theyused in Stuxnet? In our opinion, the answer would have to be 'no'.\n\nFirst of all, if they had been used in Stuxnet, they would have left a far bigger footprint than the individualcases we have detected. Secondly, there hasn't been a single variant of Stuxnet that is capable ofinteracting with these drivers.\n\nThe file rtniczw.sys was signed on 18 March 2010, but on 14 April 2010 the Stuxnet authors created a newvariant of the worm that made use of the \"reference\" mrxcls.sys. It is obvious that rtniczw.sys wasintended for some other use. The same can be said of jmidebs.sys. We believe that the three drivers areonly indirectly related to Stuxnet and can safely be erased from Stuxnet history.\n\nThen there is another question: could these drivers have been used with Duqu?\n\nThere is no clear-cut answer here. Although all known variations of Duqu are from the period November2010-October 2011, we believe there were earlier versions of the Trojan spy created to steal information.The three drivers in question could easily have been used in early versions of Duqu or with other Trojansbased on the Stuxnet/Duqu platform. Like Duqu, those Trojans were most probably used in targetedattacks before the appearance of Stuxnet (dating back to at least 2008), both while it was active and afterits C&C was shut down. They were likely to have been parallel projects, and Stuxnet was subsequentlybased on that accumulated experience and the code that had already been written. It seems highly unlikelythat this was the only project that its authors were involved in.\n\nThe driver creation process\n\nLet's try to imagine what the driver creation process looks like. A few times a year the authors compile anew version of a driver file, creating a reference file. The primary purpose of this file is to load and executea main module, which is created separately. It could be Stuxnet, or Duqu or something else.\n\nWhen it is necessary to use a driver for a new module, the authors use a dedicated program to modifyinformation in the driver's \"reference\" file, i.e. its name and service information as well as the registry keyand its value.\n\nIt's important to note that they tweak ready-made files and don't create a new one from scratch. Thismeans they can make as many different driver files as they like, each having exactly the same functionalityand creation date.\n\nDepending on the aim of the attack and the Trojan's victim, several driver files can then be signed withlegitimate digital certificates whose origins remain unknown.\n\nConclusion\n\nFrom the data we have at our disposal, we can say with a fair degree of certainty that the \"Tilded\" platform\n\nwas created around the end of 2007 or early 2008 before undergoing its most significant changes insummer/autumn 2010. Those changes were sparked by advances in code and the need to avoid detectionby antivirus solutions. There were a number of projects involving programs based on the\"Tilded\" platform throughout the period 2007-2011. Stuxnet and Duqu are two of them -there could have been others, which for now remain unknown. The platform continues todevelop, which can only mean one thing - we're likely to see more modifications in the future."
    },
    "technique_label": true
}