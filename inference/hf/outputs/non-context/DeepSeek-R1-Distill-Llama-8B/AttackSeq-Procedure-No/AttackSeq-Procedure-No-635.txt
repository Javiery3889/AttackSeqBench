Okay, so I'm trying to figure out whether the attackers used heap spraying techniques before inserting malicious JavaScript into a Korean-language news portal. The question is about whether they used heap spraying to gain arbitrary read/write access and execute shellcode via CVE-2019-13720 in Google Chrome.

First, I need to understand what heap spraying is. From what I remember, heap spraying is a technique used in web attacks where malicious code is injected into web pages to exploit memory corruption vulnerabilities. It's often used in browser-based attacks, especially against web applications. The idea is that the attacker can exploit a memory buffer overflow by spraying a large amount of malicious data into a memory space, causing the application to crash or allowing for code execution.

Now, the question mentions that the attack involved inserting malicious JavaScript into a news portal. The exploit targets CVE-2019-13720, which I think is a vulnerability in Google Chrome. I should look up what that CVE is about. From my notes, CVE-2019-13720 is a buffer overflow vulnerability in the V8 JavaScript engine, which could allow remote code execution if an attacker can control the length of the string passed to the JavaScript engine.

Heap spraying is a common method for exploiting such vulnerabilities because it allows the attacker to inject a large amount of malicious code into the heap memory, which can then be executed when the application accesses that memory area. This method is particularly effective against memory corruption vulnerabilities that allow for heap overflow.

So, considering the attack scenario: the malicious JavaScript is injected into a news portal. When a user visits the compromised page, the JavaScript is executed. If the JavaScript exploits CVE-2019-13720, it could lead to a heap overflow, allowing the attacker to gain arbitrary read/write access. With that access, they could then execute shellcode, which is a payload that runs arbitrary code on the system.

Heap spraying is a likely method here because it's a common technique for exploiting buffer overflow vulnerabilities in web applications. The malicious code is injected into the heap, and when the application accesses it, it triggers the exploit, leading to code execution.

Looking at the answer choices, A is "Yes" and B is "No." Since the scenario fits the typical use of heap spraying for such a vulnerability, the answer should be A: Yes.
</think>

The attack described aligns with the use of heap spraying to exploit a buffer overflow vulnerability, making Answer A the correct choice.

Final Answer: A