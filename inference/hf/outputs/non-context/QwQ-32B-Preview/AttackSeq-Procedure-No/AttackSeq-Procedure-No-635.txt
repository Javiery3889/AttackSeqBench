So I've got this question here about a cyber attack that involved malicious JavaScript code on a Korean-language news portal. The attack redirected victims to an exploit landing page that took advantage of a vulnerability in Google Chrome, specifically CVE-2019-13720. The question is asking whether, before this JavaScript code was inserted, it's likely that attackers used heap spraying techniques to gain an arbitrary read/write primitive and execute embedded shellcode payload.

First, I need to understand what each part of this question is asking. Let's break it down.

1. **Malicious JavaScript code inserted into a Korean-language news portal:** This suggests that the initial point of entry or the vector for the attack was through a legitimate website that was compromised to include malicious scripts.

2. **Redirects victims to an exploit landing page:** This means that when users visited the compromised news portal, they were automatically directed to another page designed to exploit vulnerabilities in their web browser.

3. **Exploiting CVE-2019-13720 in Google Chrome:** CVE-2019-13720 is a specific vulnerability in Google Chrome that was likely being targeted by the exploit landing page. This CVE seems to be related to a use-after-free error, which can lead to arbitrary code execution.

4. **Heap spraying techniques to gain an arbitrary read/write primitive and execute embedded shellcode payload:** Heap spraying is a method used by attackers to increase the likelihood of successfully executing shellcode by filling the heap with copies of the shellcode. This makes it more probable that a vulnerability leading to arbitrary memory access can be used to jump to the shellcode.

Now, the question is asking whether it's likely that attackers used heap spraying before inserting the malicious JavaScript code.

To answer this, I need to consider the sequence of events in such an attack.

- **Initial Compromise:** The news portal was compromised to insert malicious JavaScript. This could have been through various means, such as exploiting a vulnerability in the portal's content management system or through social engineering to gain access to administrative credentials.

- **Redirect to Exploit Landing Page:** The malicious JavaScript code on the news portal redirects victims to an exploit landing page. This page is designed to exploit specific vulnerabilities in the victim's browser, in this case, CVE-2019-13720 in Google Chrome.

- **Exploit Execution:** Once the vulnerability is exploited, the attacker can execute arbitrary code on the victim's machine.

Now, where does heap spraying fit into this sequence?

Heap spraying is typically used in the exploitation phase, after the vulnerability has been triggered, to make it easier for the exploit to execute the shellcode. It's a technique to improve the reliability of the exploit by increasing the chances that the exploit will land on the shellcode in memory.

Given this, it doesn't make sense for heap spraying to occur before the malicious JavaScript code is inserted into the news portal. Heap spraying is part of the exploit, not part of the initial compromise of the website.

Therefore, the answer should be "No," it is not likely that attackers utilized heap spraying techniques before inserting the malicious JavaScript code.

Let me double-check this reasoning.

- The initial step is compromising the news portal to insert malicious JavaScript.

- The next step is redirecting victims to an exploit landing page.

- On the exploit landing page, the vulnerability is exploited, and if heap spraying is used, it would be part of the exploit code, not part of the initial compromise.

Hence, heap spraying would occur as part of the exploit, after the malicious JavaScript has already been inserted and has redirected the victim to the exploit landing page.

So, my final answer is:

**Final Answer: B**