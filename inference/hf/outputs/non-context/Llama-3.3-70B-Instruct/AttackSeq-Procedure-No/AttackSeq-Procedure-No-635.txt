To answer this question, let's break down the steps involved in the attack sequence described and evaluate the likelihood of the use of heap spraying techniques as part of the exploit.

1. **Analysis of the Question**: The question describes an attack where malicious JavaScript code is used to redirect victims to an exploit landing page. This landing page exploits a vulnerability in Google Chrome (CVE-2019-13720). The question asks if it's likely that attackers used heap spraying techniques to gain arbitrary read/write access and execute shellcode.

2. **Understanding Heap Spraying**: Heap spraying is a technique used by attackers to inject malicious code into a target application's memory space (the heap) by allocating large blocks of memory and filling them with the attacker's code. This is often done in conjunction with exploits that allow for arbitrary code execution or to increase the chances of successful exploitation by predicting where the malicious code will be located in memory.

3. **Exploiting CVE-2019-13720**: CVE-2019-13720 refers to a vulnerability in Google Chrome that could be exploited to achieve remote code execution. The specifics of how this vulnerability is exploited can involve various techniques, including those that might require or benefit from heap spraying to prepare the memory for the exploit.

4. **Evaluating the Sequence**: Given that the attack involves exploiting a specific vulnerability in Google Chrome and the goal is to execute shellcode, the use of heap spraying could be a plausible step in preparing the environment for the exploit. Heap spraying can be used to increase the likelihood of successful exploitation by placing the shellcode in a predictable location in memory.

5. **Conclusion**: Considering the nature of the exploit and the goal of executing shellcode, it is plausible that attackers could utilize heap spraying techniques as part of their exploit strategy. This technique can facilitate the exploitation process by making it easier to predict where the shellcode will be located in memory, thus aiding in gaining arbitrary read/write primitives necessary for executing the embedded shellcode payload.

Final Answer: A