To answer this question, let's break down the steps and analyze the sequence of Tactics, Techniques, and Procedures (TTPs) involved, considering the MITRE ATT&CK framework for context.

1. **Initial Access**: The question mentions that APT-TOCS gained initial access using "powershell.exe" to execute Shellcode scripts. This implies the use of PowerShell for executing malicious code, which aligns with the "Execution" tactic (TA0002) in the MITRE ATT&CK framework, specifically the "Command and Scripting Interpreter" technique (T1059).

2. **Remote Control**: The execution of Shellcode scripts for remote control indicates the establishment of a command and control (C2) channel, which is part of the "Command and Control" tactic (TA0011). This allows the attackers to issue commands to the compromised system.

3. **Credential Harvesting**: The question then asks about the likelihood of using PowerShell scripts to run a credential harvesting tool in memory. Credential harvesting is associated with the "Credential Access" tactic (TA0006) in the MITRE ATT&CK framework. Techniques under this tactic include "OS Credential Dumping" (T1003) and "Brute Force" (T1110), among others. Running a credential harvesting tool in memory, especially using PowerShell, is a common method to evade defenses since it can be done without writing files to disk, making it harder to detect.

4. **Evading Defenses**: The use of in-memory execution for both Shellcode and potential PowerShell scripts is a method to evade defenses, as it reduces the footprint of the attack on the compromised system, making it less likely to be detected by traditional signature-based security tools.

Given these points, let's evaluate the answer choices:

- **A: Yes**, it is likely that PowerShell scripts were utilized to run a credential harvesting tool in memory. This approach aligns with common TTPs used by attackers to maintain stealth and evade detection. PowerShell's ability to execute scripts in memory makes it an attractive tool for this purpose.
- **B: No**, this choice suggests that it is unlikely, which contradicts the common practices observed in the wild where attackers leverage PowerShell for in-memory execution of malicious tools to avoid detection.

**Step-by-Step Reasoning**:
1. APT-TOCS used PowerShell for initial access and remote control.
2. The use of PowerShell for executing Shellcode scripts indicates a preference for using built-in tools for malicious activities.
3. Credential harvesting is a common next step after gaining access, and doing it in memory via PowerShell is a stealthy approach.
4. This approach aligns with known TTPs and the MITRE ATT&CK framework tactics and techniques.

**Final Answer: A**