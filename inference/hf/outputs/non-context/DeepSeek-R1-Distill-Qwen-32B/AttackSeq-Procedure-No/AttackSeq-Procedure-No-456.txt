Okay, so I'm trying to figure out this question about APT-TOCS and their use of PowerShell scripts versus Shellcode during an attack. Let me break it down step by step.

First, the question says that APT-TOCS used "powershell.exe" to execute Shellcode scripts for initial access. Then it asks whether, during the attack's core step, they likely used PowerShell scripts to run a credential harvesting tool in memory instead of using Shellcode functionalities.

Hmm, I remember that in cybersecurity, especially with APT groups, they often use tools that can evade detection. PowerShell is a common tool because it's built into Windows and can execute scripts without needing to write files to disk, which helps in evading antivirus and other defenses.

Shellcode is typically used to execute arbitrary code, often in memory, but it's more low-level. On the other hand, PowerShell scripts can be more versatile and are often used for tasks like credential harvesting because they can interact with the system's APIs and modules more easily.

So, the initial access was via Shellcode using PowerShell.exe. But for the next step, which is the core of the attack, they might switch to using PowerShell scripts directly. This makes sense because PowerShell can be used to run scripts that harvest credentials without needing to inject Shellcode again. It's more efficient and less likely to be detected since it's using legitimate system tools.

I think the answer is yes, they would use PowerShell scripts for credential harvesting instead of relying on Shellcode. That way, they can stay under the radar and perform the necessary tasks more effectively.
</think>

The question involves determining whether APT-TOCS used PowerShell scripts for credential harvesting instead of Shellcode during the attack's core step. 

1. **Initial Access**: APT-TOCS used `powershell.exe` to execute Shellcode for initial access.
2. **Core Step Consideration**: Credential harvesting is a common next step. PowerShell scripts are preferred for this because they can execute in memory, avoid disk writes, and interact with system APIs, making them effective for evasion.
3. **Comparison**: While Shellcode is powerful, PowerShell scripts offer more versatility and are less likely to be detected for such tasks.

**Conclusion**: It is likely that PowerShell scripts were used for credential harvesting during the core step.

Final Answer: A