To determine the most plausible sequence of TTPs, let's break down the attack sequence and evaluate the likelihood of each step.

1. **Initial Vector**: Malicious JavaScript code was inserted into a Korean-language news portal.
2. **Redirect**: The JavaScript code redirects victims to an exploit landing page.
3. **Exploit**: The landing page exploits CVE-2019-13720 in Google Chrome to gain arbitrary read/write primitive.
4. **Payload Execution**: The exploit executes an embedded shellcode payload.

Now, let's consider the question: Did attackers likely utilize heap spraying techniques to gain an arbitrary read/write primitive and execute the shellcode payload?

Heap spraying is a technique used to increase the likelihood that a heap-based buffer overflow will overwrite a specific location in memory, such as a function pointer or a return address. This technique is often used in conjunction with heap-based buffer overflows to increase the success rate of the exploit.

However, the exploit in this scenario is leveraging CVE-2019-13720, which is a use-after-free vulnerability in Google Chrome. This type of vulnerability typically involves heap-based memory management issues but does not necessarily require heap spraying to exploit. Heap spraying is more commonly associated with stack-based buffer overflows or heap-based overflows where the exact location of the overwritten memory is less predictable.

Given that CVE-2019-13720 is a use-after-free vulnerability, the exploit likely involves a more straightforward heap-based buffer overflow rather than a heap spraying technique. Heap spraying would be an additional step to increase the exploit's reliability, but it is not a necessary part of exploiting this specific vulnerability.

Therefore, the most plausible sequence of TTPs does not include heap spraying as a necessary step.

Final Answer: B: No