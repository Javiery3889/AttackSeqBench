To answer this question, let's break down the steps and analyze the information provided.

1. **Analyze the Question**: The question describes a scenario where malicious JavaScript code is used to redirect victims to an exploit landing page that exploits a vulnerability in Google Chrome (CVE-2019-13720). It asks if it's likely that attackers used heap spraying techniques to gain arbitrary read/write access and execute a shellcode payload before this step.

2. **Analyze the Related TTPs**:
   - **Tactic: Initial Access, Technique: T1189-Drive-by Compromise**: This technique involves compromising a user's system through a web browser when they visit a compromised website or a website that has been injected with malicious code. The compromise can lead to the execution of malicious code on the user's system without their knowledge.
   - **Tactic: Execution, Technique: T1059.007-JavaScript**: This involves using JavaScript to execute malicious code. JavaScript can be used in various ways to execute code, including exploiting vulnerabilities in browsers or plugins.

3. **Compare and Evaluate**:
   - The question mentions the exploitation of CVE-2019-13720, a vulnerability in Google Chrome, which suggests a drive-by compromise scenario where visiting a malicious or compromised website leads to the exploitation of the browser's vulnerability.
   - Heap spraying is a technique that can be used to exploit memory-related vulnerabilities by filling a large portion of the heap with malicious code, increasing the chances that the code will be executed when the vulnerability is exploited. This technique is often used in the context of exploiting vulnerabilities that allow for arbitrary code execution or to bypass memory protection mechanisms.
   - Given the context of exploiting a Chrome vulnerability (CVE-2019-13720) and the use of malicious JavaScript, it's plausible that attackers could use heap spraying as part of their exploitation technique to increase the likelihood of successful exploitation and to execute their shellcode payload.

4. **Step-by-Step Reasoning and Final Answer**:
   - The exploitation of CVE-2019-13720 in Google Chrome through a drive-by compromise (T1189) suggests a sophisticated attack that likely involves specific techniques to ensure successful exploitation.
   - The use of JavaScript (T1059.007) for execution indicates that the attackers are leveraging client-side execution capabilities, which could be combined with heap spraying for more effective exploitation.
   - Heap spraying is a technique that can be used to facilitate the exploitation of vulnerabilities by making it easier to execute arbitrary code, which aligns with the goal of exploiting CVE-2019-13720 to execute a shellcode payload.

Final Answer: A