Analysis of the Question:
The question describes a sequence of events where malicious JavaScript code was inserted into a Korean-language news portal to redirect victims to an exploit landing page exploiting CVE-2019-13720 in Google Chrome. The question asks if it is likely that attackers utilized heap spraying techniques to gain an arbitrary read/write primitive and execute embedded shellcode payload before this event.

Analysis of Related TTPs:
- T1189-Drive-by Compromise: This technique involves compromising a web application or website to execute malicious code on a user's device without their knowledge or consent. This is a common tactic used in phishing and watering hole attacks.
- T1059.007-JavaScript: This technique involves using JavaScript to execute malicious code on a user's device. This can be used to exploit vulnerabilities in web browsers or to deliver malware.

Comparison and Evaluation:
To determine the most plausible sequence of TTPs, we need to consider the context of the question. The question mentions the exploitation of CVE-2019-13720 in Google Chrome, which is a vulnerability that can be exploited using JavaScript. Given that the attackers used JavaScript to execute malicious code (T1059.007-JavaScript), it is likely that they used this technique to exploit the vulnerability.

Heap spraying is a technique used to gain an arbitrary read/write primitive, which is often used in conjunction with JavaScript exploitation. However, the question specifically asks if it is likely that attackers utilized heap spraying techniques before the exploitation of CVE-2019-13720. Since the question asks for a sequence of events, we need to consider the most likely order of events.

Given the information provided, it is more likely that the attackers exploited the vulnerability using JavaScript (T1059.007-JavaScript) and then used the resulting arbitrary read/write primitive to execute embedded shellcode payload, rather than using heap spraying techniques before the exploitation.

Step-by-Step Reasoning:
1. The attackers inserted malicious JavaScript code into a Korean-language news portal.
2. The JavaScript code was used to exploit CVE-2019-13720 in Google Chrome.
3. The exploitation of the vulnerability likely resulted in an arbitrary read/write primitive.
4. The attackers used the arbitrary read/write primitive to execute embedded shellcode payload.

Final Answer: B