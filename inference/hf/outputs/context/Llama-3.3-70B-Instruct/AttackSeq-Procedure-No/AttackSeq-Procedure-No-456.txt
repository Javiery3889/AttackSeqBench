To answer this question, let's follow the steps outlined:

1. **Analyze the CTI Report**:
   - The report describes the APT-TOCS attack, which starts with **Initial Access** using "powershell.exe" to execute Shellcode scripts for remote control.
   - The attack involves **Defense Evasion** techniques, including running in memory and using multi-beacon communication to evade detection.
   - **Lateral Movement** is achieved through network projection within the internal network.
   - **Command and Control** is maintained through encrypted data scripts downloaded by PowerShell, using HTTP GET requests and transmitting heartbeat packages.

2. **Analyze the Question**:
   - The question asks whether, after gaining initial access, it's likely that PowerShell scripts were used to run a credential harvesting tool in memory instead of executing Shellcode script functionalities in memory.
   - The question focuses on the use of PowerShell scripts for credential harvesting as a method to evade defenses during a core step of the attack.

3. **Compare and Evaluate**:
   - The CTI report indicates that APT-TOCS uses PowerShell for various stages of the attack, including initial access and command and control.
   - The report mentions the use of a binary file (Trojan/Win32.MSShell) that executes embedded malware using WinExec to call "powershell.exe", suggesting a reliance on PowerShell for executing malicious activities.
   - The attack's ability to run in memory and evade detection suggests that using PowerShell scripts for credential harvesting in memory is plausible and aligns with the attack's evasion techniques.
   - Given the report's emphasis on the use of PowerShell for executing scripts and the attack's focus on evasion, it's reasonable to infer that PowerShell could be used for running a credential harvesting tool in memory as part of the attack's strategy to evade defenses.

4. **Step-by-Step Reasoning and Final Answer**:
   - The APT-TOCS attack utilizes PowerShell for initial access and command and control, indicating a significant reliance on PowerShell for executing malicious scripts.
   - The attack's defense evasion techniques include running in memory, which aligns with the idea of using PowerShell scripts for credential harvesting in memory to avoid detection.
   - The use of PowerShell for executing malicious activities, as seen in the initial access stage and the use of the Trojan/Win32.MSShell binary, supports the likelihood of using PowerShell for credential harvesting.
   - Therefore, considering the attack's tactics and techniques, it is plausible that PowerShell scripts were utilized to run a credential harvesting tool in memory to evade defenses.

Final Answer: A