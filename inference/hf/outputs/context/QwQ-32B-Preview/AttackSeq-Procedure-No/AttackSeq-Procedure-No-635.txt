To answer this question, I need to carefully analyze the CTI outline provided and determine whether heap spraying techniques were likely used in this particular attack scenario. Let's break down the information step by step.

First, the CTI outline describes an attack that uses a zero-day exploit, CVE-2019-13720, in Google Chrome. This exploit was delivered through a waterhole-style injection on a Korean-language news portal. The malicious JavaScript code was inserted into the main page to redirect victims to the exploit landing page. The script checked the victim's system for compatibility, targeting 64-bit Windows systems and Chrome versions 65 or newer.

Next, the persistence mechanism involved installing tasks in the Windows Task Scheduler after the final payload was downloaded as an encrypted binary (worst.jpg), which was then decrypted by the shellcode and dropped as updata.exe.

The command and control (C2) communication involved the main module, msdisp64.exe, downloading the next stage from a hardcoded C2 server set, with specific folders for each victim's computer.

Additional details include the use of AJAX requests to download exploit code chunks, RC4 decryption, obfuscation of the browser exploit script, and the presence of BigInt for 64-bit arithmetic in JavaScript, as well as debugging code in the production code.

Now, the question is asking whether, before the malicious JavaScript code was inserted into the news portal to redirect victims to the exploit landing page, it is likely that attackers utilized heap spraying techniques to gain an arbitrary read/write primitive and execute embedded shellcode payload.

To answer this, I need to understand the exploit process in more detail. Heap spraying is a technique often used in exploits to increase the chances of successful code execution by filling the heap with copies of the shellcode, making it more likely that a memory corruption vulnerability will jump to the shellcode.

However, in this case, the exploit is a zero-day targeting Google Chrome, specifically CVE-2019-13720. I need to consider whether heap spraying was necessary or likely used in this particular exploit.

First, I should look into what CVE-2019-13720 is. A quick search reveals that CVE-2019-13720 is a use-after-free vulnerability in Google Chrome. Use-after-free vulnerabilities occur when a program continues to use a pointer to an object after it has been freed, which can lead to arbitrary code execution if exploited correctly.

In such exploits, attackers often need to control the memory layout to point the freed object to a location they control, such as their shellcode. Heap spraying can be one way to achieve this by filling the heap with shellcode, increasing the likelihood that the freed object points to the shellcode.

However, modern browsers like Chrome have various security mechanisms in place to prevent such exploits, such as ASLR (Address Space Layout Randomization), DEP (Data Execution Prevention), and heap hardening techniques.

Given that this is a zero-day exploit, it's possible that the exploit bypasses some of these security measures in a novel way, and heap spraying might not be necessary.

Looking back at the CTI outline, there is no explicit mention of heap spraying techniques being used in this attack. The outline describes the use of JavaScript for redirection and compatibility checks, AJAX requests for downloading exploit code chunks, and RC4 decryption for the payload.

Moreover, the outline mentions that the exploit was delivered through a waterhole-style injection, which suggests that the malicious JavaScript was inserted into the news portal to redirect users to the exploit landing page. Once on the landing page, the exploit would attempt to exploit the vulnerability in Chrome.

Given that the exploit is a use-after-free vulnerability, it's possible that the exploit code carefully crafts the memory layout to achieve controlled code execution without relying on heap spraying. Modern exploits often use more sophisticated techniques to bypass security measures.

Therefore, based on the information provided in the CTI outline and general knowledge about exploit techniques, it is not necessarily likely that attackers utilized heap spraying techniques in this specific attack.

Hence, the answer to the question is:

B: No

**Final Answer**

\[ \boxed{B} \]