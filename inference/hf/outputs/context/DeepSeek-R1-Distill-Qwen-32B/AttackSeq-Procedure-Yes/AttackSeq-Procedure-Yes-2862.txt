Okay, so I need to figure out whether the malware payload in the CCleaner attack tried to evade detection by zeroing out the IMAGE_DOS_HEADER and modifying CBkdr.dll before establishing a C2 channel. Let me break this down step by step.

First, I'll look at the CTI report provided. The report describes a supply chain attack where the malicious CCleaner version 5.33 was distributed. The binary was modified to execute malicious code before normal operations. 

In the Execution section, it says that the binary was modified to redirect execution to malicious code, which then decrypted two stages: a PIC PE loader and a DLL. The report mentions that the malware author attempted to evade detection by zeroing out the IMAGE_DOS_HEADER. So, that's one evasion technique they used. 

The report also states that the binary created an executable heap, copied the decrypted malware into it, and then called the PE loader. After that, it erased the memory regions containing the PE loader and the DLL, destroyed the heap, and continued with normal operations. This suggests that the malware tried to clean up after itself to avoid detection.

Now, the question is about whether the payload attempted to evade detection by zeroing out the IMAGE_DOS_HEADER and modifying CBkdr.dll before establishing the C2 channel. The report specifically mentions zeroing out the IMAGE_DOS_HEADER as an evasion technique. However, I don't see any mention of modifying CBkdr.dll. The report talks about a DLL file as part of the payload but doesn't specify that it was modified or that CBkdr.dll was altered. 

The Command and Control section describes how the malware communicated via HTTPS POST requests, using Base64 encoding and a hardcoded Host header. It also mentions a fallback to DGA if no response was received. 

So, the evasion techniques mentioned are zeroing out the DOS header and possibly other memory cleanup actions. There's no explicit mention of modifying CBkdr.dll. Therefore, while the malware did attempt to evade detection by zeroing the header, the part about modifying CBkdr.dll isn't supported by the report. 

The question combines both actions, so since one part is confirmed and the other isn't, the answer would be that it's not likely both happened as described. Therefore, the answer is No.
</think>

The malware did attempt to evade detection by zeroing out the IMAGE_DOS_HEADER, but there's no evidence of modifying CBkdr.dll. 

Final Answer: B: No